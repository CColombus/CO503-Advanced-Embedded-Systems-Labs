
1e_r.elf:     file format elf32-littlenios2
1e_r.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00080230

Program Header:
    LOAD off    0x00001000 vaddr 0x00080000 paddr 0x00080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00080020 paddr 0x00080020 align 2**12
         filesz 0x00006c0c memsz 0x00006c0c flags r-x
    LOAD off    0x00007c2c vaddr 0x00086c2c paddr 0x00088f24 align 2**12
         filesz 0x000022f8 memsz 0x000022f8 flags rw-
    LOAD off    0x0000a21c vaddr 0x0008b21c paddr 0x0008b21c align 2**12
         filesz 0x00000000 memsz 0x00000168 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00080000  00080000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00080020  00080020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00006970  00080230  00080230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000008c  00086ba0  00086ba0  00007ba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000022f8  00086c2c  00088f24  00007c2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000168  0008b21c  0008b21c  0000a21c  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_controller 00000000  0008b384  0008b384  00009f24  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00009f24  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000a90  00000000  00000000  00009f48  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00016f65  00000000  00000000  0000a9d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000062f3  00000000  00000000  0002193d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00006df8  00000000  00000000  00027c30  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001988  00000000  00000000  0002ea28  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002cf0  00000000  00000000  000303b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004ada  00000000  00000000  000330a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00037b7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000680  00000000  00000000  00037b90  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0003aeca  2**0
                  CONTENTS, READONLY
 18 .cpu          00000006  00000000  00000000  0003aecd  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0003aed3  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0003aed4  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0003aed5  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0003aed9  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0003aedd  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000c  00000000  00000000  0003aee1  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000c  00000000  00000000  0003aeed  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000c  00000000  00000000  0003aef9  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000008  00000000  00000000  0003af05  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000001f  00000000  00000000  0003af0d  2**0
                  CONTENTS, READONLY
 29 .jdi          0001a8cc  00000000  00000000  0003af2c  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     001b57e3  00000000  00000000  000557f8  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00080000 l    d  .entry	00000000 .entry
00080020 l    d  .exceptions	00000000 .exceptions
00080230 l    d  .text	00000000 .text
00086ba0 l    d  .rodata	00000000 .rodata
00086c2c l    d  .rwdata	00000000 .rwdata
0008b21c l    d  .bss	00000000 .bss
0008b384 l    d  .sdram_controller	00000000 .sdram_controller
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../1e_r_bsp//obj/HAL/src/crt0.o
00080268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 queue_wrapper.c
00000000 l    df *ABS*	00000000 queue.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
00081274 l     F .text	00000008 __fp_unlock
00081288 l     F .text	0000019c __sinit.part.1
00081424 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
000874b8 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_close.c
00083eec l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00084000 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0008402c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00084120 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00084208 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
000842f4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
000844d0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00088f14 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00084744 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00084880 l     F .text	00000034 alt_dev_reg
00087e8c l     O .rwdata	00001060 jtag_uart_1e
00000000 l    df *ABS*	00000000 altera_avalon_fifo_util.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00085084 l     F .text	0000020c altera_avalon_jtag_uart_irq
00085290 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
000858c8 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00085b08 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00085f68 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
000860c8 l     F .text	0000003c alt_get_errno
00086104 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0008b258 g     O .bss	00000004 alt_instruction_exception_handler
00083ce4 g     F .text	00000054 _isatty_r
0008440c g     F .text	0000007c alt_main
00081108 g     F .text	000000c0 _puts_r
0008b284 g     O .bss	00000100 alt_irq
0008744c g     O .rwdata	0000000c q1c
00083a0c g     F .text	00000060 _lseek_r
00084be4 g     F .text	0000005c altera_avalon_fifo_write_almostfull
00088f24 g       *ABS*	00000000 __flash_rwdata_start
0008b384 g       *ABS*	00000000 __alt_heap_start
00086c2c g     O .rwdata	00000018 luminance_dc_code_table
00082fc0 g     F .text	0000005c __sseek
000815d4 g     F .text	00000010 __sinit
0008142c g     F .text	00000078 __sfmoreglue
000874a0 g     O .rwdata	0000000c q5
000844ac g     F .text	00000024 __malloc_unlock
000826ac g     F .text	0000015c memmove
0008495c g     F .text	00000098 altera_avalon_fifo_init
000815bc g     F .text	00000018 _cleanup
00084c9c g     F .text	00000058 altera_avalon_fifo_write_fifo
000864f0 g     F .text	00000024 altera_nios2_gen2_irq_init
00080000 g     F .entry	0000000c __reset
00084e38 g     F .text	00000028 altera_avalon_fifo_read_backpressure
00080020 g       *ABS*	00000000 __flash_exceptions_start
00083c88 g     F .text	0000005c _fstat_r
0008b23c g     O .bss	00000004 errno
00082f3c g     F .text	00000008 __seofread
00000000 g       *ABS*	00000000 __alt_mem_sdram_controller
0008b244 g     O .bss	00000004 alt_argv
00090eec g       *ABS*	00000000 _gp
00084b28 g     F .text	00000060 altera_avalon_fifo_clear_event
00087d0c g     O .rwdata	00000180 alt_fd_list
00086514 g     F .text	00000090 alt_find_dev
00082564 g     F .text	00000148 memcpy
0008127c g     F .text	0000000c _cleanup_r
0008604c g     F .text	0000007c alt_io_redirect
00086ba0 g       *ABS*	00000000 __DTOR_END__
000811c8 g     F .text	00000014 puts
00086770 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0008747c g     O .rwdata	0000000c q2
00086f14 g     O .rwdata	00000144 chrominance_ac_code_table
00085488 g     F .text	0000021c altera_avalon_jtag_uart_read
00083e30 g     F .text	00000064 .hidden __udivsi3
0008415c g     F .text	000000ac isatty
0008b238 g     O .bss	00000004 __malloc_top_pad
00081624 g     F .text	000004c8 __sfvwrite_r
00082e94 g     F .text	00000054 _sbrk_r
00083c28 g     F .text	00000060 _read_r
00088f0c g     O .rwdata	00000004 alt_max_fd
0008322c g     F .text	000000f0 _fclose_r
000835a8 g     F .text	00000030 fflush
0008b234 g     O .bss	00000004 __malloc_max_sbrked_mem
00084330 g     F .text	000000dc lseek
00088eec g     O .rwdata	00000004 _global_impure_ptr
00082930 g     F .text	00000564 _realloc_r
0008b384 g       *ABS*	00000000 __bss_end
00085e78 g     F .text	000000f0 alt_iic_isr_register
000863e8 g     F .text	00000108 alt_tick
000815f4 g     F .text	00000018 __fp_lock_all
00085e2c g     F .text	0000004c alt_ic_irq_enabled
0008634c g     F .text	0000009c alt_alarm_stop
0008b24c g     O .bss	00000004 alt_irq_active
000800fc g     F .exceptions	000000d4 alt_irq_handler
00087ce4 g     O .rwdata	00000028 alt_dev_null
00085ae8 g     F .text	00000020 alt_dcache_flush_all
00084b88 g     F .text	0000005c altera_avalon_fifo_write_ienable
00088f24 g       *ABS*	00000000 __ram_rwdata_end
00084a98 g     F .text	0000002c altera_avalon_fifo_read_almostempty
00088f04 g     O .rwdata	00000008 alt_dev_list
00084780 g     F .text	00000100 write
0008026c g     F .text	000002d0 write_markers
00086c2c g       *ABS*	00000000 __ram_rodata_end
00084068 g     F .text	000000b8 fstat
0008b22c g     O .bss	00000004 INIT_USAGE_DEQ
00080f44 g     F .text	00000044 RECV2
00083e94 g     F .text	00000058 .hidden __umodsi3
0008b384 g       *ABS*	00000000 end
00084fc4 g     F .text	000000c0 altera_avalon_jtag_uart_init
000801d0 g     F .exceptions	00000060 alt_instruction_exception_entry
00080f88 g     F .text	00000048 SEND1
00084ac4 g     F .text	0000003c altera_avalon_fifo_read_event
00086ba0 g       *ABS*	00000000 __CTOR_LIST__
000a0000 g       *ABS*	00000000 __alt_stack_pointer
00085940 g     F .text	0000007c alt_avalon_timer_sc_init
00086c5c g     O .rwdata	00000018 chrominance_dc_code_table
000856a4 g     F .text	00000224 altera_avalon_jtag_uart_write
000815e4 g     F .text	00000004 __sfp_lock_acquire
00084d60 g     F .text	0000004c altera_avalon_fifo_read_fifo
00082480 g     F .text	000000e4 memchr
000836fc g     F .text	00000310 _free_r
000869ec g     F .text	00000180 __call_exitprocs
00088ef4 g     O .rwdata	00000004 __malloc_sbrk_base
00080230 g     F .text	0000003c _start
0008b250 g     O .bss	00000004 _alt_tick_rate
00080fd0 g     F .text	0000008c enqueueINT32
0008b254 g     O .bss	00000004 _alt_nticks
0008450c g     F .text	00000104 read
000848ec g     F .text	00000070 alt_sys_init
000868d4 g     F .text	00000118 __register_exitproc
00087458 g     O .rwdata	0000000c q1d
00087488 g     O .rwdata	0000000c q3
00085330 g     F .text	00000068 altera_avalon_jtag_uart_close
000810e0 g     F .text	00000028 .hidden __mulsi3
00086c2c g       *ABS*	00000000 __ram_rwdata_start
00086ba0 g       *ABS*	00000000 __ram_rodata_start
0008b25c g     O .bss	00000028 __malloc_current_mallinfo
0008b224 g     O .bss	00000002 ldc2
00087058 g     O .rwdata	00000144 chrominance_ac_size_table
00087470 g     O .rwdata	0000000c q1
00084e60 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000866ac g     F .text	000000c4 alt_get_fd
000831d8 g     F .text	00000054 _close_r
00086858 g     F .text	0000007c memcmp
00084f20 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0008b384 g       *ABS*	00000000 __alt_stack_base
00084f70 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00083084 g     F .text	00000154 __swsetup_r
000849f4 g     F .text	0000003c altera_avalon_fifo_read_status
000814a4 g     F .text	00000118 __sfp
000878dc g     O .rwdata	00000408 __malloc_av_
000815f0 g     F .text	00000004 __sinit_lock_release
00082ee8 g     F .text	00000054 __sread
00084e0c g     F .text	0000002c altera_avalon_fifo_read_other_info
000865a4 g     F .text	00000108 alt_find_file
00085b44 g     F .text	000000a4 alt_dev_llist_insert
00084488 g     F .text	00000024 __malloc_lock
00084694 g     F .text	000000b0 sbrk
0008354c g     F .text	0000005c _fflush_r
0008b21c g       *ABS*	00000000 __bss_start
00082808 g     F .text	00000128 memset
0008b222 g     O .bss	00000002 ldc1
00080e5c g     F .text	000000a4 main
0008b248 g     O .bss	00000004 alt_envp
0008b230 g     O .bss	00000004 __malloc_max_total_mem
00084ec0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00084b00 g     F .text	00000028 altera_avalon_fifo_read_level
00080d8c g     F .text	000000d0 close_bitstream
0008301c g     F .text	00000008 __sclose
000a0000 g       *ABS*	00000000 __alt_heap_limit
0008331c g     F .text	00000014 fclose
00081c74 g     F .text	0000080c _malloc_r
00080f00 g     F .text	00000044 RECV1
00088f10 g     O .rwdata	00000004 alt_errno
00087440 g     O .rwdata	0000000c q1b
00081aec g     F .text	000000c4 _fwalk
00083d38 g     F .text	00000084 .hidden __divsi3
000835d8 g     F .text	00000124 _malloc_trim_r
00086ba0 g       *ABS*	00000000 __CTOR_END__
0008053c g     F .text	00000850 huffman
00086ba0 g       *ABS*	00000000 __flash_rodata_start
00086ba0 g       *ABS*	00000000 __DTOR_LIST__
000848b4 g     F .text	00000038 alt_irq_init
00084610 g     F .text	00000084 alt_release_fd
0008680c g     F .text	00000014 atexit
00083024 g     F .text	00000060 _write_r
000874ac g     O .rwdata	0000000c q6
0008719c g     O .rwdata	00000100 bitsize
0008b228 g     O .bss	00000004 INIT_USAGE_ENQ
00088ef0 g     O .rwdata	00000004 _impure_ptr
0008b240 g     O .bss	00000004 alt_argc
00083330 g     F .text	0000021c __sflush_r
00085c48 g     F .text	00000060 _do_dtors
00080020 g       .exceptions	00000000 alt_irq_entry
0008160c g     F .text	00000018 __fp_unlock_all
00087464 g     O .rwdata	0000000c q1e
00088efc g     O .rwdata	00000008 alt_fs_list
00080020 g       *ABS*	00000000 __ram_exceptions_start
0008b21c g     O .bss	00000004 lcode
00084dac g     F .text	00000060 altera_avalon_fifo_write_other_info
00085cc8 g     F .text	00000050 alt_ic_isr_register
00088f24 g       *ABS*	00000000 _edata
0008b384 g       *ABS*	00000000 _end
00080230 g       *ABS*	00000000 __ram_exceptions_end
00085398 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00085da0 g     F .text	0000008c alt_ic_irq_disable
00082f44 g     F .text	0000007c __swrite
00088ef8 g     O .rwdata	00000004 __malloc_trim_threshold
00086dd0 g     O .rwdata	00000144 luminance_ac_size_table
00086820 g     F .text	00000038 exit
0008729c g     O .rwdata	000001a4 markerdata
00081bb0 g     F .text	000000c4 _fwalk_reent
00083dbc g     F .text	00000074 .hidden __modsi3
00084a30 g     F .text	0000003c altera_avalon_fifo_read_ienable
000a0000 g       *ABS*	00000000 __alt_data_end
00080020 g     F .exceptions	00000000 alt_exception
0008b226 g     O .bss	00000002 ldc3
000815e8 g     F .text	00000004 __sfp_lock_release
00086b6c g     F .text	00000034 _exit
00086c74 g     O .rwdata	00000018 chrominance_dc_size_table
000859bc g     F .text	0000012c alt_alarm_start
00084a6c g     F .text	0000002c altera_avalon_fifo_read_almostfull
00083a6c g     F .text	000001bc __smakebuf_r
00087494 g     O .rwdata	0000000c q4
000811dc g     F .text	00000098 strlen
000861f0 g     F .text	0000015c open
00084cf4 g     F .text	0000006c altera_avalon_read_fifo
0008105c g     F .text	00000084 dequeueINT32
0008b220 g     O .bss	00000002 bitindex
00085ca8 g     F .text	00000020 alt_icache_flush_all
00086c8c g     O .rwdata	00000144 luminance_ac_code_table
00088f18 g     O .rwdata	00000004 alt_priority_mask
00085d18 g     F .text	00000088 alt_ic_irq_enable
00084c40 g     F .text	0000005c altera_avalon_fifo_write_almostempty
00088f1c g     O .rwdata	00000008 alt_alarm_list
00085be8 g     F .text	00000060 _do_ctors
00086c44 g     O .rwdata	00000018 luminance_dc_size_table
00083f28 g     F .text	000000d8 close
00084270 g     F .text	00000084 alt_load
000815ec g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00080000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   80000:	00400234 	movhi	at,8
    ori r1, r1, %lo(_start)
   80004:	08408c14 	ori	at,at,560
    jmp r1
   80008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00080020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   80020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   80024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   80028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   8002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   80030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   80034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   80038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   8003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   80040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   80044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   80048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   8004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   80050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   80054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   80058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   8005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   80060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   80064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   80068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   8006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   80070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   80074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   80078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   8007c:	10000326 	beq	r2,zero,8008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   80080:	20000226 	beq	r4,zero,8008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   80084:	00800fc0 	call	800fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   80088:	00000706 	br	800a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   8008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   80090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   80094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   80098:	00801d00 	call	801d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   8009c:	1000021e 	bne	r2,zero,800a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   800a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   800a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   800a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   800ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   800b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   800b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   800b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   800bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   800c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   800c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   800c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   800cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   800d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   800d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   800d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   800dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   800e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   800e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   800e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   800ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   800f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   800f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   800f8:	ef80083a 	eret

000800fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   800fc:	defff904 	addi	sp,sp,-28
   80100:	dfc00615 	stw	ra,24(sp)
   80104:	df000515 	stw	fp,20(sp)
   80108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   8010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   80110:	0005313a 	rdctl	r2,ipending
   80114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   80118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   8011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   80120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   80124:	00800044 	movi	r2,1
   80128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   8012c:	e0fffb17 	ldw	r3,-20(fp)
   80130:	e0bffc17 	ldw	r2,-16(fp)
   80134:	1884703a 	and	r2,r3,r2
   80138:	10001426 	beq	r2,zero,8018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   8013c:	00800274 	movhi	r2,9
   80140:	10aca104 	addi	r2,r2,-19836
   80144:	e0fffd17 	ldw	r3,-12(fp)
   80148:	180690fa 	slli	r3,r3,3
   8014c:	10c5883a 	add	r2,r2,r3
   80150:	10c00017 	ldw	r3,0(r2)
   80154:	00800274 	movhi	r2,9
   80158:	10aca104 	addi	r2,r2,-19836
   8015c:	e13ffd17 	ldw	r4,-12(fp)
   80160:	200890fa 	slli	r4,r4,3
   80164:	1105883a 	add	r2,r2,r4
   80168:	10800104 	addi	r2,r2,4
   8016c:	10800017 	ldw	r2,0(r2)
   80170:	1009883a 	mov	r4,r2
   80174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   80178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   8017c:	0005313a 	rdctl	r2,ipending
   80180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   80184:	e0bfff17 	ldw	r2,-4(fp)
   80188:	00000706 	br	801a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   8018c:	e0bffc17 	ldw	r2,-16(fp)
   80190:	1085883a 	add	r2,r2,r2
   80194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   80198:	e0bffd17 	ldw	r2,-12(fp)
   8019c:	10800044 	addi	r2,r2,1
   801a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   801a4:	003fe106 	br	8012c <__alt_data_end+0xfffe012c>

    active = alt_irq_pending ();
   801a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   801ac:	e0bffb17 	ldw	r2,-20(fp)
   801b0:	103fdb1e 	bne	r2,zero,80120 <__alt_data_end+0xfffe0120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   801b4:	0001883a 	nop
}
   801b8:	0001883a 	nop
   801bc:	e037883a 	mov	sp,fp
   801c0:	dfc00117 	ldw	ra,4(sp)
   801c4:	df000017 	ldw	fp,0(sp)
   801c8:	dec00204 	addi	sp,sp,8
   801cc:	f800283a 	ret

000801d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   801d0:	defffb04 	addi	sp,sp,-20
   801d4:	dfc00415 	stw	ra,16(sp)
   801d8:	df000315 	stw	fp,12(sp)
   801dc:	df000304 	addi	fp,sp,12
   801e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   801e4:	00bfffc4 	movi	r2,-1
   801e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
   801ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   801f0:	d0a8db17 	ldw	r2,-23700(gp)
   801f4:	10000726 	beq	r2,zero,80214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   801f8:	d0a8db17 	ldw	r2,-23700(gp)
   801fc:	e0fffd17 	ldw	r3,-12(fp)
   80200:	e1bffe17 	ldw	r6,-8(fp)
   80204:	e17fff17 	ldw	r5,-4(fp)
   80208:	1809883a 	mov	r4,r3
   8020c:	103ee83a 	callr	r2
   80210:	00000206 	br	8021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   80214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   80218:	0005883a 	mov	r2,zero
}
   8021c:	e037883a 	mov	sp,fp
   80220:	dfc00117 	ldw	ra,4(sp)
   80224:	df000017 	ldw	fp,0(sp)
   80228:	dec00204 	addi	sp,sp,8
   8022c:	f800283a 	ret

Disassembly of section .text:

00080230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   80230:	06c002b4 	movhi	sp,10
    ori sp, sp, %lo(__alt_stack_pointer)
   80234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   80238:	06800274 	movhi	gp,9
    ori gp, gp, %lo(_gp)
   8023c:	d683bb14 	ori	gp,gp,3820
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   80240:	00800234 	movhi	r2,8
    ori r2, r2, %lo(__bss_start)
   80244:	10ac8714 	ori	r2,r2,45596

    movhi r3, %hi(__bss_end)
   80248:	00c00234 	movhi	r3,8
    ori r3, r3, %lo(__bss_end)
   8024c:	18ece114 	ori	r3,r3,45956

    beq r2, r3, 1f
   80250:	10c00326 	beq	r2,r3,80260 <_start+0x30>

0:
    stw zero, (r2)
   80254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   80258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   8025c:	10fffd36 	bltu	r2,r3,80254 <__alt_data_end+0xfffe0254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   80260:	00842700 	call	84270 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   80264:	008440c0 	call	8440c <alt_main>

00080268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   80268:	003fff06 	br	80268 <__alt_data_end+0xfffe0268>

0008026c <write_markers>:
	}

// Header for JPEG Encoder

void write_markers(UINT32 image_width, UINT32 image_height)
{
   8026c:	defffa04 	addi	sp,sp,-24
   80270:	dfc00515 	stw	ra,20(sp)
   80274:	df000415 	stw	fp,16(sp)
   80278:	df000404 	addi	fp,sp,16
   8027c:	e13ffe15 	stw	r4,-8(fp)
   80280:	e17fff15 	stw	r5,-4(fp)
	UINT16 i, header_length;
	UINT8 number_of_components;

	// Start of image marker
	SEND1(0xFF);
   80284:	01003fc4 	movi	r4,255
   80288:	0080f880 	call	80f88 <SEND1>
	SEND1(0xD8);
   8028c:	01003604 	movi	r4,216
   80290:	0080f880 	call	80f88 <SEND1>

	// Quantization table marker
	SEND1(0xFF);
   80294:	01003fc4 	movi	r4,255
   80298:	0080f880 	call	80f88 <SEND1>
	SEND1(0xDB);
   8029c:	010036c4 	movi	r4,219
   802a0:	0080f880 	call	80f88 <SEND1>

	// Quantization table length
	SEND1(0x00);
   802a4:	0009883a 	mov	r4,zero
   802a8:	0080f880 	call	80f88 <SEND1>
	SEND1(0x84);
   802ac:	01002104 	movi	r4,132
   802b0:	0080f880 	call	80f88 <SEND1>

	// Pq, Tq
	SEND1(0x00);
   802b4:	0009883a 	mov	r4,zero
   802b8:	0080f880 	call	80f88 <SEND1>

	// Lqt table
	for (i = 0; i < 64; i++)
   802bc:	e03ffc0d 	sth	zero,-16(fp)
   802c0:	00000706 	br	802e0 <write_markers+0x74>
		SEND1((UINT8)RECV2()); // Lqt [i];
   802c4:	0080f440 	call	80f44 <RECV2>
   802c8:	10803fcc 	andi	r2,r2,255
   802cc:	1009883a 	mov	r4,r2
   802d0:	0080f880 	call	80f88 <SEND1>

	// Pq, Tq
	SEND1(0x00);

	// Lqt table
	for (i = 0; i < 64; i++)
   802d4:	e0bffc0b 	ldhu	r2,-16(fp)
   802d8:	10800044 	addi	r2,r2,1
   802dc:	e0bffc0d 	sth	r2,-16(fp)
   802e0:	e0bffc0b 	ldhu	r2,-16(fp)
   802e4:	10801030 	cmpltui	r2,r2,64
   802e8:	103ff61e 	bne	r2,zero,802c4 <__alt_data_end+0xfffe02c4>
		SEND1((UINT8)RECV2()); // Lqt [i];

	// Pq, Tq
	SEND1(0x01);
   802ec:	01000044 	movi	r4,1
   802f0:	0080f880 	call	80f88 <SEND1>

	// Cqt table
	for (i = 0; i < 64; i++)
   802f4:	e03ffc0d 	sth	zero,-16(fp)
   802f8:	00000706 	br	80318 <write_markers+0xac>
		SEND1((UINT8)RECV2()); // Cqt [i];
   802fc:	0080f440 	call	80f44 <RECV2>
   80300:	10803fcc 	andi	r2,r2,255
   80304:	1009883a 	mov	r4,r2
   80308:	0080f880 	call	80f88 <SEND1>

	// Pq, Tq
	SEND1(0x01);

	// Cqt table
	for (i = 0; i < 64; i++)
   8030c:	e0bffc0b 	ldhu	r2,-16(fp)
   80310:	10800044 	addi	r2,r2,1
   80314:	e0bffc0d 	sth	r2,-16(fp)
   80318:	e0bffc0b 	ldhu	r2,-16(fp)
   8031c:	10801030 	cmpltui	r2,r2,64
   80320:	103ff61e 	bne	r2,zero,802fc <__alt_data_end+0xfffe02fc>
		SEND1((UINT8)RECV2()); // Cqt [i];

	// huffman table(DHT)
	for (i = 0; i < 210; i++)
   80324:	e03ffc0d 	sth	zero,-16(fp)
   80328:	00001706 	br	80388 <write_markers+0x11c>
	{
		SEND1((UINT8)(markerdata[i] >> 8));
   8032c:	e0fffc0b 	ldhu	r3,-16(fp)
   80330:	00800234 	movhi	r2,8
   80334:	109ca704 	addi	r2,r2,29340
   80338:	18c7883a 	add	r3,r3,r3
   8033c:	10c5883a 	add	r2,r2,r3
   80340:	1080000b 	ldhu	r2,0(r2)
   80344:	10bfffcc 	andi	r2,r2,65535
   80348:	1004d23a 	srli	r2,r2,8
   8034c:	10803fcc 	andi	r2,r2,255
   80350:	1009883a 	mov	r4,r2
   80354:	0080f880 	call	80f88 <SEND1>
		SEND1((UINT8)markerdata[i]);
   80358:	e0fffc0b 	ldhu	r3,-16(fp)
   8035c:	00800234 	movhi	r2,8
   80360:	109ca704 	addi	r2,r2,29340
   80364:	18c7883a 	add	r3,r3,r3
   80368:	10c5883a 	add	r2,r2,r3
   8036c:	1080000b 	ldhu	r2,0(r2)
   80370:	10803fcc 	andi	r2,r2,255
   80374:	1009883a 	mov	r4,r2
   80378:	0080f880 	call	80f88 <SEND1>
	// Cqt table
	for (i = 0; i < 64; i++)
		SEND1((UINT8)RECV2()); // Cqt [i];

	// huffman table(DHT)
	for (i = 0; i < 210; i++)
   8037c:	e0bffc0b 	ldhu	r2,-16(fp)
   80380:	10800044 	addi	r2,r2,1
   80384:	e0bffc0d 	sth	r2,-16(fp)
   80388:	e0bffc0b 	ldhu	r2,-16(fp)
   8038c:	108034b0 	cmpltui	r2,r2,210
   80390:	103fe61e 	bne	r2,zero,8032c <__alt_data_end+0xfffe032c>
	}

	// if (image_format == FOUR_ZERO_ZERO)
	//	number_of_components = 1;
	// else
	number_of_components = 3;
   80394:	008000c4 	movi	r2,3
   80398:	e0bffc85 	stb	r2,-14(fp)

	// Frame header(SOF)

	// Start of frame marker
	SEND1(0xFF);
   8039c:	01003fc4 	movi	r4,255
   803a0:	0080f880 	call	80f88 <SEND1>
	SEND1(0xC0);
   803a4:	01003004 	movi	r4,192
   803a8:	0080f880 	call	80f88 <SEND1>

	header_length = (UINT16)(8 + 3 * number_of_components);
   803ac:	e0fffc83 	ldbu	r3,-14(fp)
   803b0:	1805883a 	mov	r2,r3
   803b4:	1085883a 	add	r2,r2,r2
   803b8:	10c5883a 	add	r2,r2,r3
   803bc:	10800204 	addi	r2,r2,8
   803c0:	e0bffd0d 	sth	r2,-12(fp)

	// Frame header length
	SEND1((UINT8)(header_length >> 8));
   803c4:	e0bffd0b 	ldhu	r2,-12(fp)
   803c8:	1004d23a 	srli	r2,r2,8
   803cc:	10803fcc 	andi	r2,r2,255
   803d0:	1009883a 	mov	r4,r2
   803d4:	0080f880 	call	80f88 <SEND1>
	SEND1((UINT8)header_length);
   803d8:	e0bffd0b 	ldhu	r2,-12(fp)
   803dc:	10803fcc 	andi	r2,r2,255
   803e0:	1009883a 	mov	r4,r2
   803e4:	0080f880 	call	80f88 <SEND1>

	// Precision (P)
	SEND1(0x08);
   803e8:	01000204 	movi	r4,8
   803ec:	0080f880 	call	80f88 <SEND1>

	// image height
	SEND1((UINT8)(image_height >> 8));
   803f0:	e0bfff17 	ldw	r2,-4(fp)
   803f4:	1004d23a 	srli	r2,r2,8
   803f8:	10803fcc 	andi	r2,r2,255
   803fc:	1009883a 	mov	r4,r2
   80400:	0080f880 	call	80f88 <SEND1>
	SEND1((UINT8)image_height);
   80404:	e0bfff17 	ldw	r2,-4(fp)
   80408:	10803fcc 	andi	r2,r2,255
   8040c:	1009883a 	mov	r4,r2
   80410:	0080f880 	call	80f88 <SEND1>

	// image width
	SEND1((UINT8)(image_width >> 8));
   80414:	e0bffe17 	ldw	r2,-8(fp)
   80418:	1004d23a 	srli	r2,r2,8
   8041c:	10803fcc 	andi	r2,r2,255
   80420:	1009883a 	mov	r4,r2
   80424:	0080f880 	call	80f88 <SEND1>
	SEND1((UINT8)image_width);
   80428:	e0bffe17 	ldw	r2,-8(fp)
   8042c:	10803fcc 	andi	r2,r2,255
   80430:	1009883a 	mov	r4,r2
   80434:	0080f880 	call	80f88 <SEND1>

	// Nf
	SEND1(number_of_components);
   80438:	e0bffc83 	ldbu	r2,-14(fp)
   8043c:	1009883a 	mov	r4,r2
   80440:	0080f880 	call	80f88 <SEND1>
	//	*output_ptr++ = 0x11;
	//	*output_ptr++ = 0x00;
	// }
	// else
	//{
	SEND1(0x01);
   80444:	01000044 	movi	r4,1
   80448:	0080f880 	call	80f88 <SEND1>
	// if (image_format == FOUR_TWO_ZERO)
	//	*output_ptr++ = 0x22;
	// else if (image_format == FOUR_TWO_TWO)
	//	*output_ptr++ = 0x21;
	// else
	SEND1(0x11);
   8044c:	01000444 	movi	r4,17
   80450:	0080f880 	call	80f88 <SEND1>

	SEND1(0x00);
   80454:	0009883a 	mov	r4,zero
   80458:	0080f880 	call	80f88 <SEND1>

	SEND1(0x02);
   8045c:	01000084 	movi	r4,2
   80460:	0080f880 	call	80f88 <SEND1>
	SEND1(0x11);
   80464:	01000444 	movi	r4,17
   80468:	0080f880 	call	80f88 <SEND1>
	SEND1(0x01);
   8046c:	01000044 	movi	r4,1
   80470:	0080f880 	call	80f88 <SEND1>

	SEND1(0x03);
   80474:	010000c4 	movi	r4,3
   80478:	0080f880 	call	80f88 <SEND1>
	SEND1(0x11);
   8047c:	01000444 	movi	r4,17
   80480:	0080f880 	call	80f88 <SEND1>
	SEND1(0x01);
   80484:	01000044 	movi	r4,1
   80488:	0080f880 	call	80f88 <SEND1>
	//}

	// Scan header(SOF)

	// Start of scan marker
	SEND1(0xFF);
   8048c:	01003fc4 	movi	r4,255
   80490:	0080f880 	call	80f88 <SEND1>
	SEND1(0xDA);
   80494:	01003684 	movi	r4,218
   80498:	0080f880 	call	80f88 <SEND1>

	header_length = (UINT16)(6 + (number_of_components << 1));
   8049c:	e0bffc83 	ldbu	r2,-14(fp)
   804a0:	1085883a 	add	r2,r2,r2
   804a4:	10800184 	addi	r2,r2,6
   804a8:	e0bffd0d 	sth	r2,-12(fp)

	// Scan header length
	SEND1((UINT8)(header_length >> 8));
   804ac:	e0bffd0b 	ldhu	r2,-12(fp)
   804b0:	1004d23a 	srli	r2,r2,8
   804b4:	10803fcc 	andi	r2,r2,255
   804b8:	1009883a 	mov	r4,r2
   804bc:	0080f880 	call	80f88 <SEND1>
	SEND1((UINT8)header_length);
   804c0:	e0bffd0b 	ldhu	r2,-12(fp)
   804c4:	10803fcc 	andi	r2,r2,255
   804c8:	1009883a 	mov	r4,r2
   804cc:	0080f880 	call	80f88 <SEND1>

	// Ns
	SEND1(number_of_components);
   804d0:	e0bffc83 	ldbu	r2,-14(fp)
   804d4:	1009883a 	mov	r4,r2
   804d8:	0080f880 	call	80f88 <SEND1>
	//	*output_ptr++ = 0x01;
	//	*output_ptr++ = 0x00;
	// }
	// else
	//{
	SEND1(0x01);
   804dc:	01000044 	movi	r4,1
   804e0:	0080f880 	call	80f88 <SEND1>
	SEND1(0x00);
   804e4:	0009883a 	mov	r4,zero
   804e8:	0080f880 	call	80f88 <SEND1>

	SEND1(0x02);
   804ec:	01000084 	movi	r4,2
   804f0:	0080f880 	call	80f88 <SEND1>
	SEND1(0x11);
   804f4:	01000444 	movi	r4,17
   804f8:	0080f880 	call	80f88 <SEND1>

	SEND1(0x03);
   804fc:	010000c4 	movi	r4,3
   80500:	0080f880 	call	80f88 <SEND1>
	SEND1(0x11);
   80504:	01000444 	movi	r4,17
   80508:	0080f880 	call	80f88 <SEND1>
	//}

	SEND1(0x00);
   8050c:	0009883a 	mov	r4,zero
   80510:	0080f880 	call	80f88 <SEND1>
	SEND1(0x3F);
   80514:	01000fc4 	movi	r4,63
   80518:	0080f880 	call	80f88 <SEND1>
	SEND1(0x00);
   8051c:	0009883a 	mov	r4,zero
   80520:	0080f880 	call	80f88 <SEND1>
}
   80524:	0001883a 	nop
   80528:	e037883a 	mov	sp,fp
   8052c:	dfc00117 	ldw	ra,4(sp)
   80530:	df000017 	ldw	fp,0(sp)
   80534:	dec00204 	addi	sp,sp,8
   80538:	f800283a 	ret

0008053c <huffman>:
UINT32 lcode = 0;
UINT16 bitindex = 0;
INT16 ldc1 = 0, ldc2 = 0, ldc3 = 0;

void huffman(UINT16 component)
{
   8053c:	defff104 	addi	sp,sp,-60
   80540:	dfc00e15 	stw	ra,56(sp)
   80544:	df000d15 	stw	fp,52(sp)
   80548:	df000d04 	addi	fp,sp,52
   8054c:	2005883a 	mov	r2,r4
   80550:	e0bfff0d 	sth	r2,-4(fp)
	UINT16 *DcCodeTable, *DcSizeTable, *AcCodeTable, *AcSizeTable;

	// static INT16 ldc1 = 0, ldc2 = 0, ldc3 = 0;

	INT16 Coeff, LastDc;
	UINT16 AbsCoeff, HuffCode, HuffSize, RunLength = 0, DataSize = 0, index;
   80554:	e03ff98d 	sth	zero,-26(fp)
   80558:	e03ffa0d 	sth	zero,-24(fp)
	UINT8 out;

	// Temp_Ptr = Temp;
	// Coeff = *Temp_Ptr++;
	// xt_iss_profile_disable();
	Coeff = (INT16)RECV2();
   8055c:	0080f440 	call	80f44 <RECV2>
   80560:	e0bff80d 	sth	r2,-32(fp)
	// xt_iss_profile_enable();
	if (component == 1)
   80564:	e0bfff0b 	ldhu	r2,-4(fp)
   80568:	10800058 	cmpnei	r2,r2,1
   8056c:	1000111e 	bne	r2,zero,805b4 <huffman+0x78>
	{
		DcCodeTable = luminance_dc_code_table;
   80570:	00800234 	movhi	r2,8
   80574:	109b0b04 	addi	r2,r2,27692
   80578:	e0bff415 	stw	r2,-48(fp)
		DcSizeTable = luminance_dc_size_table;
   8057c:	00800234 	movhi	r2,8
   80580:	109b1104 	addi	r2,r2,27716
   80584:	e0bff515 	stw	r2,-44(fp)
		AcCodeTable = luminance_ac_code_table;
   80588:	00800234 	movhi	r2,8
   8058c:	109b2304 	addi	r2,r2,27788
   80590:	e0bff615 	stw	r2,-40(fp)
		AcSizeTable = luminance_ac_size_table;
   80594:	00800234 	movhi	r2,8
   80598:	109b7404 	addi	r2,r2,28112
   8059c:	e0bff715 	stw	r2,-36(fp)

		LastDc = ldc1;
   805a0:	d0a8cd8b 	ldhu	r2,-23754(gp)
   805a4:	e0bff88d 	sth	r2,-30(fp)
		ldc1 = Coeff;
   805a8:	e0bff80b 	ldhu	r2,-32(fp)
   805ac:	d0a8cd8d 	sth	r2,-23754(gp)
   805b0:	00001806 	br	80614 <huffman+0xd8>
	}
	else
	{
		DcCodeTable = chrominance_dc_code_table;
   805b4:	00800234 	movhi	r2,8
   805b8:	109b1704 	addi	r2,r2,27740
   805bc:	e0bff415 	stw	r2,-48(fp)
		DcSizeTable = chrominance_dc_size_table;
   805c0:	00800234 	movhi	r2,8
   805c4:	109b1d04 	addi	r2,r2,27764
   805c8:	e0bff515 	stw	r2,-44(fp)
		AcCodeTable = chrominance_ac_code_table;
   805cc:	00800234 	movhi	r2,8
   805d0:	109bc504 	addi	r2,r2,28436
   805d4:	e0bff615 	stw	r2,-40(fp)
		AcSizeTable = chrominance_ac_size_table;
   805d8:	00800234 	movhi	r2,8
   805dc:	109c1604 	addi	r2,r2,28760
   805e0:	e0bff715 	stw	r2,-36(fp)

		if (component == 2)
   805e4:	e0bfff0b 	ldhu	r2,-4(fp)
   805e8:	10800098 	cmpnei	r2,r2,2
   805ec:	1000051e 	bne	r2,zero,80604 <huffman+0xc8>
		{
			LastDc = ldc2;
   805f0:	d0a8ce0b 	ldhu	r2,-23752(gp)
   805f4:	e0bff88d 	sth	r2,-30(fp)
			ldc2 = Coeff;
   805f8:	e0bff80b 	ldhu	r2,-32(fp)
   805fc:	d0a8ce0d 	sth	r2,-23752(gp)
   80600:	00000406 	br	80614 <huffman+0xd8>
		}
		else
		{
			LastDc = ldc3;
   80604:	d0a8ce8b 	ldhu	r2,-23750(gp)
   80608:	e0bff88d 	sth	r2,-30(fp)
			ldc3 = Coeff;
   8060c:	e0bff80b 	ldhu	r2,-32(fp)
   80610:	d0a8ce8d 	sth	r2,-23750(gp)
		}
	}

	Coeff -= LastDc;
   80614:	e0fff80b 	ldhu	r3,-32(fp)
   80618:	e0bff88b 	ldhu	r2,-30(fp)
   8061c:	1885c83a 	sub	r2,r3,r2
   80620:	e0bff80d 	sth	r2,-32(fp)

	AbsCoeff = (Coeff < 0) ? -Coeff-- : Coeff;
   80624:	e0bff80f 	ldh	r2,-32(fp)
   80628:	1000060e 	bge	r2,zero,80644 <huffman+0x108>
   8062c:	e0bff80b 	ldhu	r2,-32(fp)
   80630:	1007883a 	mov	r3,r2
   80634:	18ffffc4 	addi	r3,r3,-1
   80638:	e0fff80d 	sth	r3,-32(fp)
   8063c:	0085c83a 	sub	r2,zero,r2
   80640:	00000106 	br	80648 <huffman+0x10c>
   80644:	e0bff80b 	ldhu	r2,-32(fp)
   80648:	e0bff90d 	sth	r2,-28(fp)

	while (AbsCoeff != 0)
   8064c:	00000606 	br	80668 <huffman+0x12c>
	{
		AbsCoeff >>= 1;
   80650:	e0bff90b 	ldhu	r2,-28(fp)
   80654:	1004d07a 	srli	r2,r2,1
   80658:	e0bff90d 	sth	r2,-28(fp)
		DataSize++;
   8065c:	e0bffa0b 	ldhu	r2,-24(fp)
   80660:	10800044 	addi	r2,r2,1
   80664:	e0bffa0d 	sth	r2,-24(fp)

	Coeff -= LastDc;

	AbsCoeff = (Coeff < 0) ? -Coeff-- : Coeff;

	while (AbsCoeff != 0)
   80668:	e0bff90b 	ldhu	r2,-28(fp)
   8066c:	103ff81e 	bne	r2,zero,80650 <__alt_data_end+0xfffe0650>
	{
		AbsCoeff >>= 1;
		DataSize++;
	}

	HuffCode = DcCodeTable[DataSize];
   80670:	e0bffa0b 	ldhu	r2,-24(fp)
   80674:	1085883a 	add	r2,r2,r2
   80678:	1007883a 	mov	r3,r2
   8067c:	e0bff417 	ldw	r2,-48(fp)
   80680:	10c5883a 	add	r2,r2,r3
   80684:	1080000b 	ldhu	r2,0(r2)
   80688:	e0bffa8d 	sth	r2,-22(fp)
	HuffSize = DcSizeTable[DataSize];
   8068c:	e0bffa0b 	ldhu	r2,-24(fp)
   80690:	1085883a 	add	r2,r2,r2
   80694:	1007883a 	mov	r3,r2
   80698:	e0bff517 	ldw	r2,-44(fp)
   8069c:	10c5883a 	add	r2,r2,r3
   806a0:	1080000b 	ldhu	r2,0(r2)
   806a4:	e0bffb0d 	sth	r2,-20(fp)

	Coeff &= (1 << DataSize) - 1;
   806a8:	e0bffa0b 	ldhu	r2,-24(fp)
   806ac:	00c00044 	movi	r3,1
   806b0:	1884983a 	sll	r2,r3,r2
   806b4:	10bfffc4 	addi	r2,r2,-1
   806b8:	1007883a 	mov	r3,r2
   806bc:	e0bff80b 	ldhu	r2,-32(fp)
   806c0:	1884703a 	and	r2,r3,r2
   806c4:	e0bff80d 	sth	r2,-32(fp)
	data = (HuffCode << DataSize) | Coeff;
   806c8:	e0fffa8b 	ldhu	r3,-22(fp)
   806cc:	e0bffa0b 	ldhu	r2,-24(fp)
   806d0:	1886983a 	sll	r3,r3,r2
   806d4:	e0bff80f 	ldh	r2,-32(fp)
   806d8:	1884b03a 	or	r2,r3,r2
   806dc:	e0bffc15 	stw	r2,-16(fp)
	numbits = HuffSize + DataSize;
   806e0:	e0fffb0b 	ldhu	r3,-20(fp)
   806e4:	e0bffa0b 	ldhu	r2,-24(fp)
   806e8:	1885883a 	add	r2,r3,r2
   806ec:	e0bffd0d 	sth	r2,-12(fp)

	PUTBITS
   806f0:	d0e8cd0b 	ldhu	r3,-23756(gp)
   806f4:	e0bffd0b 	ldhu	r2,-12(fp)
   806f8:	1885883a 	add	r2,r3,r2
   806fc:	10bff804 	addi	r2,r2,-32
   80700:	e0bffd8d 	sth	r2,-10(fp)
   80704:	e0bffd8f 	ldh	r2,-10(fp)
   80708:	10000b0e 	bge	r2,zero,80738 <huffman+0x1fc>
   8070c:	d0e8cc17 	ldw	r3,-23760(gp)
   80710:	e0bffd0b 	ldhu	r2,-12(fp)
   80714:	1886983a 	sll	r3,r3,r2
   80718:	e0bffc17 	ldw	r2,-16(fp)
   8071c:	1884b03a 	or	r2,r3,r2
   80720:	d0a8cc15 	stw	r2,-23760(gp)
   80724:	d0e8cd0b 	ldhu	r3,-23756(gp)
   80728:	e0bffd0b 	ldhu	r2,-12(fp)
   8072c:	1885883a 	add	r2,r3,r2
   80730:	d0a8cd0d 	sth	r2,-23756(gp)
   80734:	00003a06 	br	80820 <huffman+0x2e4>
   80738:	d0e8cc17 	ldw	r3,-23760(gp)
   8073c:	d0a8cd0b 	ldhu	r2,-23756(gp)
   80740:	10bfffcc 	andi	r2,r2,65535
   80744:	01000804 	movi	r4,32
   80748:	2085c83a 	sub	r2,r4,r2
   8074c:	1886983a 	sll	r3,r3,r2
   80750:	e0bffd8f 	ldh	r2,-10(fp)
   80754:	e13ffc17 	ldw	r4,-16(fp)
   80758:	2084d83a 	srl	r2,r4,r2
   8075c:	1884b03a 	or	r2,r3,r2
   80760:	d0a8cc15 	stw	r2,-23760(gp)
   80764:	d0a8cc17 	ldw	r2,-23760(gp)
   80768:	1004d63a 	srli	r2,r2,24
   8076c:	e0bffe05 	stb	r2,-8(fp)
   80770:	e0bffe03 	ldbu	r2,-8(fp)
   80774:	1009883a 	mov	r4,r2
   80778:	0080f880 	call	80f88 <SEND1>
   8077c:	e0bffe03 	ldbu	r2,-8(fp)
   80780:	10803fd8 	cmpnei	r2,r2,255
   80784:	1000021e 	bne	r2,zero,80790 <huffman+0x254>
   80788:	0009883a 	mov	r4,zero
   8078c:	0080f880 	call	80f88 <SEND1>
   80790:	d0a8cc17 	ldw	r2,-23760(gp)
   80794:	1004d43a 	srli	r2,r2,16
   80798:	e0bffe05 	stb	r2,-8(fp)
   8079c:	e0bffe03 	ldbu	r2,-8(fp)
   807a0:	1009883a 	mov	r4,r2
   807a4:	0080f880 	call	80f88 <SEND1>
   807a8:	e0bffe03 	ldbu	r2,-8(fp)
   807ac:	10803fd8 	cmpnei	r2,r2,255
   807b0:	1000021e 	bne	r2,zero,807bc <huffman+0x280>
   807b4:	0009883a 	mov	r4,zero
   807b8:	0080f880 	call	80f88 <SEND1>
   807bc:	d0a8cc17 	ldw	r2,-23760(gp)
   807c0:	1004d23a 	srli	r2,r2,8
   807c4:	e0bffe05 	stb	r2,-8(fp)
   807c8:	e0bffe03 	ldbu	r2,-8(fp)
   807cc:	1009883a 	mov	r4,r2
   807d0:	0080f880 	call	80f88 <SEND1>
   807d4:	e0bffe03 	ldbu	r2,-8(fp)
   807d8:	10803fd8 	cmpnei	r2,r2,255
   807dc:	1000021e 	bne	r2,zero,807e8 <huffman+0x2ac>
   807e0:	0009883a 	mov	r4,zero
   807e4:	0080f880 	call	80f88 <SEND1>
   807e8:	d0a8cc17 	ldw	r2,-23760(gp)
   807ec:	e0bffe05 	stb	r2,-8(fp)
   807f0:	e0bffe03 	ldbu	r2,-8(fp)
   807f4:	1009883a 	mov	r4,r2
   807f8:	0080f880 	call	80f88 <SEND1>
   807fc:	e0bffe03 	ldbu	r2,-8(fp)
   80800:	10803fd8 	cmpnei	r2,r2,255
   80804:	1000021e 	bne	r2,zero,80810 <huffman+0x2d4>
   80808:	0009883a 	mov	r4,zero
   8080c:	0080f880 	call	80f88 <SEND1>
   80810:	e0bffc17 	ldw	r2,-16(fp)
   80814:	d0a8cc15 	stw	r2,-23760(gp)
   80818:	e0bffd8b 	ldhu	r2,-10(fp)
   8081c:	d0a8cd0d 	sth	r2,-23756(gp)

	for (i = 63; i > 0; i--)
   80820:	00800fc4 	movi	r2,63
   80824:	e0bff30d 	sth	r2,-52(fp)
   80828:	0000fb06 	br	80c18 <huffman+0x6dc>
	{ // xt_iss_profile_disable();
		// if ((Coeff = *Temp_Ptr++) != 0)
		if ((Coeff = (INT16)RECV2()) != 0)
   8082c:	0080f440 	call	80f44 <RECV2>
   80830:	e0bff80d 	sth	r2,-32(fp)
   80834:	e0bff80f 	ldh	r2,-32(fp)
   80838:	1000f126 	beq	r2,zero,80c00 <huffman+0x6c4>
		{ // xt_iss_profile_enable();
			while (RunLength > 15)
   8083c:	00005706 	br	8099c <huffman+0x460>
			{
				RunLength -= 16;
   80840:	e0bff98b 	ldhu	r2,-26(fp)
   80844:	10bffc04 	addi	r2,r2,-16
   80848:	e0bff98d 	sth	r2,-26(fp)
				data = AcCodeTable[161];
   8084c:	e0bff617 	ldw	r2,-40(fp)
   80850:	10805084 	addi	r2,r2,322
   80854:	1080000b 	ldhu	r2,0(r2)
   80858:	10bfffcc 	andi	r2,r2,65535
   8085c:	e0bffc15 	stw	r2,-16(fp)
				numbits = AcSizeTable[161];
   80860:	e0bff717 	ldw	r2,-36(fp)
   80864:	1080508b 	ldhu	r2,322(r2)
   80868:	e0bffd0d 	sth	r2,-12(fp)
				PUTBITS
   8086c:	d0e8cd0b 	ldhu	r3,-23756(gp)
   80870:	e0bffd0b 	ldhu	r2,-12(fp)
   80874:	1885883a 	add	r2,r3,r2
   80878:	10bff804 	addi	r2,r2,-32
   8087c:	e0bffd8d 	sth	r2,-10(fp)
   80880:	e0bffd8f 	ldh	r2,-10(fp)
   80884:	10000b0e 	bge	r2,zero,808b4 <huffman+0x378>
   80888:	d0e8cc17 	ldw	r3,-23760(gp)
   8088c:	e0bffd0b 	ldhu	r2,-12(fp)
   80890:	1886983a 	sll	r3,r3,r2
   80894:	e0bffc17 	ldw	r2,-16(fp)
   80898:	1884b03a 	or	r2,r3,r2
   8089c:	d0a8cc15 	stw	r2,-23760(gp)
   808a0:	d0e8cd0b 	ldhu	r3,-23756(gp)
   808a4:	e0bffd0b 	ldhu	r2,-12(fp)
   808a8:	1885883a 	add	r2,r3,r2
   808ac:	d0a8cd0d 	sth	r2,-23756(gp)
   808b0:	00003a06 	br	8099c <huffman+0x460>
   808b4:	d0e8cc17 	ldw	r3,-23760(gp)
   808b8:	d0a8cd0b 	ldhu	r2,-23756(gp)
   808bc:	10bfffcc 	andi	r2,r2,65535
   808c0:	01000804 	movi	r4,32
   808c4:	2085c83a 	sub	r2,r4,r2
   808c8:	1886983a 	sll	r3,r3,r2
   808cc:	e0bffd8f 	ldh	r2,-10(fp)
   808d0:	e13ffc17 	ldw	r4,-16(fp)
   808d4:	2084d83a 	srl	r2,r4,r2
   808d8:	1884b03a 	or	r2,r3,r2
   808dc:	d0a8cc15 	stw	r2,-23760(gp)
   808e0:	d0a8cc17 	ldw	r2,-23760(gp)
   808e4:	1004d63a 	srli	r2,r2,24
   808e8:	e0bffe05 	stb	r2,-8(fp)
   808ec:	e0bffe03 	ldbu	r2,-8(fp)
   808f0:	1009883a 	mov	r4,r2
   808f4:	0080f880 	call	80f88 <SEND1>
   808f8:	e0bffe03 	ldbu	r2,-8(fp)
   808fc:	10803fd8 	cmpnei	r2,r2,255
   80900:	1000021e 	bne	r2,zero,8090c <huffman+0x3d0>
   80904:	0009883a 	mov	r4,zero
   80908:	0080f880 	call	80f88 <SEND1>
   8090c:	d0a8cc17 	ldw	r2,-23760(gp)
   80910:	1004d43a 	srli	r2,r2,16
   80914:	e0bffe05 	stb	r2,-8(fp)
   80918:	e0bffe03 	ldbu	r2,-8(fp)
   8091c:	1009883a 	mov	r4,r2
   80920:	0080f880 	call	80f88 <SEND1>
   80924:	e0bffe03 	ldbu	r2,-8(fp)
   80928:	10803fd8 	cmpnei	r2,r2,255
   8092c:	1000021e 	bne	r2,zero,80938 <huffman+0x3fc>
   80930:	0009883a 	mov	r4,zero
   80934:	0080f880 	call	80f88 <SEND1>
   80938:	d0a8cc17 	ldw	r2,-23760(gp)
   8093c:	1004d23a 	srli	r2,r2,8
   80940:	e0bffe05 	stb	r2,-8(fp)
   80944:	e0bffe03 	ldbu	r2,-8(fp)
   80948:	1009883a 	mov	r4,r2
   8094c:	0080f880 	call	80f88 <SEND1>
   80950:	e0bffe03 	ldbu	r2,-8(fp)
   80954:	10803fd8 	cmpnei	r2,r2,255
   80958:	1000021e 	bne	r2,zero,80964 <huffman+0x428>
   8095c:	0009883a 	mov	r4,zero
   80960:	0080f880 	call	80f88 <SEND1>
   80964:	d0a8cc17 	ldw	r2,-23760(gp)
   80968:	e0bffe05 	stb	r2,-8(fp)
   8096c:	e0bffe03 	ldbu	r2,-8(fp)
   80970:	1009883a 	mov	r4,r2
   80974:	0080f880 	call	80f88 <SEND1>
   80978:	e0bffe03 	ldbu	r2,-8(fp)
   8097c:	10803fd8 	cmpnei	r2,r2,255
   80980:	1000021e 	bne	r2,zero,8098c <huffman+0x450>
   80984:	0009883a 	mov	r4,zero
   80988:	0080f880 	call	80f88 <SEND1>
   8098c:	e0bffc17 	ldw	r2,-16(fp)
   80990:	d0a8cc15 	stw	r2,-23760(gp)
   80994:	e0bffd8b 	ldhu	r2,-10(fp)
   80998:	d0a8cd0d 	sth	r2,-23756(gp)
	for (i = 63; i > 0; i--)
	{ // xt_iss_profile_disable();
		// if ((Coeff = *Temp_Ptr++) != 0)
		if ((Coeff = (INT16)RECV2()) != 0)
		{ // xt_iss_profile_enable();
			while (RunLength > 15)
   8099c:	e0bff98b 	ldhu	r2,-26(fp)
   809a0:	10800428 	cmpgeui	r2,r2,16
   809a4:	103fa61e 	bne	r2,zero,80840 <__alt_data_end+0xfffe0840>
				data = AcCodeTable[161];
				numbits = AcSizeTable[161];
				PUTBITS
			}

			AbsCoeff = (Coeff < 0) ? -Coeff-- : Coeff;
   809a8:	e0bff80f 	ldh	r2,-32(fp)
   809ac:	1000060e 	bge	r2,zero,809c8 <huffman+0x48c>
   809b0:	e0bff80b 	ldhu	r2,-32(fp)
   809b4:	1007883a 	mov	r3,r2
   809b8:	18ffffc4 	addi	r3,r3,-1
   809bc:	e0fff80d 	sth	r3,-32(fp)
   809c0:	0085c83a 	sub	r2,zero,r2
   809c4:	00000106 	br	809cc <huffman+0x490>
   809c8:	e0bff80b 	ldhu	r2,-32(fp)
   809cc:	e0bff90d 	sth	r2,-28(fp)

			if (AbsCoeff >> 8 == 0)
   809d0:	e0bff90b 	ldhu	r2,-28(fp)
   809d4:	1004d23a 	srli	r2,r2,8
   809d8:	10bfffcc 	andi	r2,r2,65535
   809dc:	1000081e 	bne	r2,zero,80a00 <huffman+0x4c4>
				DataSize = bitsize[AbsCoeff];
   809e0:	e0fff90b 	ldhu	r3,-28(fp)
   809e4:	00800234 	movhi	r2,8
   809e8:	109c6704 	addi	r2,r2,29084
   809ec:	10c5883a 	add	r2,r2,r3
   809f0:	10800003 	ldbu	r2,0(r2)
   809f4:	10803fcc 	andi	r2,r2,255
   809f8:	e0bffa0d 	sth	r2,-24(fp)
   809fc:	00000a06 	br	80a28 <huffman+0x4ec>
			else
				DataSize = bitsize[AbsCoeff >> 8] + 8;
   80a00:	e0bff90b 	ldhu	r2,-28(fp)
   80a04:	1004d23a 	srli	r2,r2,8
   80a08:	10ffffcc 	andi	r3,r2,65535
   80a0c:	00800234 	movhi	r2,8
   80a10:	109c6704 	addi	r2,r2,29084
   80a14:	10c5883a 	add	r2,r2,r3
   80a18:	10800003 	ldbu	r2,0(r2)
   80a1c:	10803fcc 	andi	r2,r2,255
   80a20:	10800204 	addi	r2,r2,8
   80a24:	e0bffa0d 	sth	r2,-24(fp)

			index = RunLength * 10 + DataSize;
   80a28:	e0bff98b 	ldhu	r2,-26(fp)
   80a2c:	01400284 	movi	r5,10
   80a30:	1009883a 	mov	r4,r2
   80a34:	00810e00 	call	810e0 <__mulsi3>
   80a38:	1007883a 	mov	r3,r2
   80a3c:	e0bffa0b 	ldhu	r2,-24(fp)
   80a40:	1885883a 	add	r2,r3,r2
   80a44:	e0bffe8d 	sth	r2,-6(fp)
			HuffCode = AcCodeTable[index];
   80a48:	e0bffe8b 	ldhu	r2,-6(fp)
   80a4c:	1085883a 	add	r2,r2,r2
   80a50:	1007883a 	mov	r3,r2
   80a54:	e0bff617 	ldw	r2,-40(fp)
   80a58:	10c5883a 	add	r2,r2,r3
   80a5c:	1080000b 	ldhu	r2,0(r2)
   80a60:	e0bffa8d 	sth	r2,-22(fp)
			HuffSize = AcSizeTable[index];
   80a64:	e0bffe8b 	ldhu	r2,-6(fp)
   80a68:	1085883a 	add	r2,r2,r2
   80a6c:	1007883a 	mov	r3,r2
   80a70:	e0bff717 	ldw	r2,-36(fp)
   80a74:	10c5883a 	add	r2,r2,r3
   80a78:	1080000b 	ldhu	r2,0(r2)
   80a7c:	e0bffb0d 	sth	r2,-20(fp)

			Coeff &= (1 << DataSize) - 1;
   80a80:	e0bffa0b 	ldhu	r2,-24(fp)
   80a84:	00c00044 	movi	r3,1
   80a88:	1884983a 	sll	r2,r3,r2
   80a8c:	10bfffc4 	addi	r2,r2,-1
   80a90:	1007883a 	mov	r3,r2
   80a94:	e0bff80b 	ldhu	r2,-32(fp)
   80a98:	1884703a 	and	r2,r3,r2
   80a9c:	e0bff80d 	sth	r2,-32(fp)
			data = (HuffCode << DataSize) | Coeff;
   80aa0:	e0fffa8b 	ldhu	r3,-22(fp)
   80aa4:	e0bffa0b 	ldhu	r2,-24(fp)
   80aa8:	1886983a 	sll	r3,r3,r2
   80aac:	e0bff80f 	ldh	r2,-32(fp)
   80ab0:	1884b03a 	or	r2,r3,r2
   80ab4:	e0bffc15 	stw	r2,-16(fp)
			numbits = HuffSize + DataSize;
   80ab8:	e0fffb0b 	ldhu	r3,-20(fp)
   80abc:	e0bffa0b 	ldhu	r2,-24(fp)
   80ac0:	1885883a 	add	r2,r3,r2
   80ac4:	e0bffd0d 	sth	r2,-12(fp)

			PUTBITS
   80ac8:	d0e8cd0b 	ldhu	r3,-23756(gp)
   80acc:	e0bffd0b 	ldhu	r2,-12(fp)
   80ad0:	1885883a 	add	r2,r3,r2
   80ad4:	10bff804 	addi	r2,r2,-32
   80ad8:	e0bffd8d 	sth	r2,-10(fp)
   80adc:	e0bffd8f 	ldh	r2,-10(fp)
   80ae0:	10000b0e 	bge	r2,zero,80b10 <huffman+0x5d4>
   80ae4:	d0e8cc17 	ldw	r3,-23760(gp)
   80ae8:	e0bffd0b 	ldhu	r2,-12(fp)
   80aec:	1886983a 	sll	r3,r3,r2
   80af0:	e0bffc17 	ldw	r2,-16(fp)
   80af4:	1884b03a 	or	r2,r3,r2
   80af8:	d0a8cc15 	stw	r2,-23760(gp)
   80afc:	d0e8cd0b 	ldhu	r3,-23756(gp)
   80b00:	e0bffd0b 	ldhu	r2,-12(fp)
   80b04:	1885883a 	add	r2,r3,r2
   80b08:	d0a8cd0d 	sth	r2,-23756(gp)
   80b0c:	00003a06 	br	80bf8 <huffman+0x6bc>
   80b10:	d0e8cc17 	ldw	r3,-23760(gp)
   80b14:	d0a8cd0b 	ldhu	r2,-23756(gp)
   80b18:	10bfffcc 	andi	r2,r2,65535
   80b1c:	01000804 	movi	r4,32
   80b20:	2085c83a 	sub	r2,r4,r2
   80b24:	1886983a 	sll	r3,r3,r2
   80b28:	e0bffd8f 	ldh	r2,-10(fp)
   80b2c:	e13ffc17 	ldw	r4,-16(fp)
   80b30:	2084d83a 	srl	r2,r4,r2
   80b34:	1884b03a 	or	r2,r3,r2
   80b38:	d0a8cc15 	stw	r2,-23760(gp)
   80b3c:	d0a8cc17 	ldw	r2,-23760(gp)
   80b40:	1004d63a 	srli	r2,r2,24
   80b44:	e0bffe05 	stb	r2,-8(fp)
   80b48:	e0bffe03 	ldbu	r2,-8(fp)
   80b4c:	1009883a 	mov	r4,r2
   80b50:	0080f880 	call	80f88 <SEND1>
   80b54:	e0bffe03 	ldbu	r2,-8(fp)
   80b58:	10803fd8 	cmpnei	r2,r2,255
   80b5c:	1000021e 	bne	r2,zero,80b68 <huffman+0x62c>
   80b60:	0009883a 	mov	r4,zero
   80b64:	0080f880 	call	80f88 <SEND1>
   80b68:	d0a8cc17 	ldw	r2,-23760(gp)
   80b6c:	1004d43a 	srli	r2,r2,16
   80b70:	e0bffe05 	stb	r2,-8(fp)
   80b74:	e0bffe03 	ldbu	r2,-8(fp)
   80b78:	1009883a 	mov	r4,r2
   80b7c:	0080f880 	call	80f88 <SEND1>
   80b80:	e0bffe03 	ldbu	r2,-8(fp)
   80b84:	10803fd8 	cmpnei	r2,r2,255
   80b88:	1000021e 	bne	r2,zero,80b94 <huffman+0x658>
   80b8c:	0009883a 	mov	r4,zero
   80b90:	0080f880 	call	80f88 <SEND1>
   80b94:	d0a8cc17 	ldw	r2,-23760(gp)
   80b98:	1004d23a 	srli	r2,r2,8
   80b9c:	e0bffe05 	stb	r2,-8(fp)
   80ba0:	e0bffe03 	ldbu	r2,-8(fp)
   80ba4:	1009883a 	mov	r4,r2
   80ba8:	0080f880 	call	80f88 <SEND1>
   80bac:	e0bffe03 	ldbu	r2,-8(fp)
   80bb0:	10803fd8 	cmpnei	r2,r2,255
   80bb4:	1000021e 	bne	r2,zero,80bc0 <huffman+0x684>
   80bb8:	0009883a 	mov	r4,zero
   80bbc:	0080f880 	call	80f88 <SEND1>
   80bc0:	d0a8cc17 	ldw	r2,-23760(gp)
   80bc4:	e0bffe05 	stb	r2,-8(fp)
   80bc8:	e0bffe03 	ldbu	r2,-8(fp)
   80bcc:	1009883a 	mov	r4,r2
   80bd0:	0080f880 	call	80f88 <SEND1>
   80bd4:	e0bffe03 	ldbu	r2,-8(fp)
   80bd8:	10803fd8 	cmpnei	r2,r2,255
   80bdc:	1000021e 	bne	r2,zero,80be8 <huffman+0x6ac>
   80be0:	0009883a 	mov	r4,zero
   80be4:	0080f880 	call	80f88 <SEND1>
   80be8:	e0bffc17 	ldw	r2,-16(fp)
   80bec:	d0a8cc15 	stw	r2,-23760(gp)
   80bf0:	e0bffd8b 	ldhu	r2,-10(fp)
   80bf4:	d0a8cd0d 	sth	r2,-23756(gp)
			RunLength = 0;
   80bf8:	e03ff98d 	sth	zero,-26(fp)
   80bfc:	00000306 	br	80c0c <huffman+0x6d0>
		}
		else
			RunLength++;
   80c00:	e0bff98b 	ldhu	r2,-26(fp)
   80c04:	10800044 	addi	r2,r2,1
   80c08:	e0bff98d 	sth	r2,-26(fp)
	data = (HuffCode << DataSize) | Coeff;
	numbits = HuffSize + DataSize;

	PUTBITS

	for (i = 63; i > 0; i--)
   80c0c:	e0bff30b 	ldhu	r2,-52(fp)
   80c10:	10bfffc4 	addi	r2,r2,-1
   80c14:	e0bff30d 	sth	r2,-52(fp)
   80c18:	e0bff30b 	ldhu	r2,-52(fp)
   80c1c:	103f031e 	bne	r2,zero,8082c <__alt_data_end+0xfffe082c>
		}
		else
			RunLength++;
	}
	// xt_iss_profile_enable();
	if (RunLength != 0)
   80c20:	e0bff98b 	ldhu	r2,-26(fp)
   80c24:	10005326 	beq	r2,zero,80d74 <huffman+0x838>
	{
		data = AcCodeTable[0];
   80c28:	e0bff617 	ldw	r2,-40(fp)
   80c2c:	1080000b 	ldhu	r2,0(r2)
   80c30:	10bfffcc 	andi	r2,r2,65535
   80c34:	e0bffc15 	stw	r2,-16(fp)
		numbits = AcSizeTable[0];
   80c38:	e0bff717 	ldw	r2,-36(fp)
   80c3c:	1080000b 	ldhu	r2,0(r2)
   80c40:	e0bffd0d 	sth	r2,-12(fp)
		PUTBITS
   80c44:	d0e8cd0b 	ldhu	r3,-23756(gp)
   80c48:	e0bffd0b 	ldhu	r2,-12(fp)
   80c4c:	1885883a 	add	r2,r3,r2
   80c50:	10bff804 	addi	r2,r2,-32
   80c54:	e0bffd8d 	sth	r2,-10(fp)
   80c58:	e0bffd8f 	ldh	r2,-10(fp)
   80c5c:	10000b0e 	bge	r2,zero,80c8c <huffman+0x750>
   80c60:	d0e8cc17 	ldw	r3,-23760(gp)
   80c64:	e0bffd0b 	ldhu	r2,-12(fp)
   80c68:	1886983a 	sll	r3,r3,r2
   80c6c:	e0bffc17 	ldw	r2,-16(fp)
   80c70:	1884b03a 	or	r2,r3,r2
   80c74:	d0a8cc15 	stw	r2,-23760(gp)
   80c78:	d0e8cd0b 	ldhu	r3,-23756(gp)
   80c7c:	e0bffd0b 	ldhu	r2,-12(fp)
   80c80:	1885883a 	add	r2,r3,r2
   80c84:	d0a8cd0d 	sth	r2,-23756(gp)
	}
}
   80c88:	00003a06 	br	80d74 <huffman+0x838>
	// xt_iss_profile_enable();
	if (RunLength != 0)
	{
		data = AcCodeTable[0];
		numbits = AcSizeTable[0];
		PUTBITS
   80c8c:	d0e8cc17 	ldw	r3,-23760(gp)
   80c90:	d0a8cd0b 	ldhu	r2,-23756(gp)
   80c94:	10bfffcc 	andi	r2,r2,65535
   80c98:	01000804 	movi	r4,32
   80c9c:	2085c83a 	sub	r2,r4,r2
   80ca0:	1886983a 	sll	r3,r3,r2
   80ca4:	e0bffd8f 	ldh	r2,-10(fp)
   80ca8:	e13ffc17 	ldw	r4,-16(fp)
   80cac:	2084d83a 	srl	r2,r4,r2
   80cb0:	1884b03a 	or	r2,r3,r2
   80cb4:	d0a8cc15 	stw	r2,-23760(gp)
   80cb8:	d0a8cc17 	ldw	r2,-23760(gp)
   80cbc:	1004d63a 	srli	r2,r2,24
   80cc0:	e0bffe05 	stb	r2,-8(fp)
   80cc4:	e0bffe03 	ldbu	r2,-8(fp)
   80cc8:	1009883a 	mov	r4,r2
   80ccc:	0080f880 	call	80f88 <SEND1>
   80cd0:	e0bffe03 	ldbu	r2,-8(fp)
   80cd4:	10803fd8 	cmpnei	r2,r2,255
   80cd8:	1000021e 	bne	r2,zero,80ce4 <huffman+0x7a8>
   80cdc:	0009883a 	mov	r4,zero
   80ce0:	0080f880 	call	80f88 <SEND1>
   80ce4:	d0a8cc17 	ldw	r2,-23760(gp)
   80ce8:	1004d43a 	srli	r2,r2,16
   80cec:	e0bffe05 	stb	r2,-8(fp)
   80cf0:	e0bffe03 	ldbu	r2,-8(fp)
   80cf4:	1009883a 	mov	r4,r2
   80cf8:	0080f880 	call	80f88 <SEND1>
   80cfc:	e0bffe03 	ldbu	r2,-8(fp)
   80d00:	10803fd8 	cmpnei	r2,r2,255
   80d04:	1000021e 	bne	r2,zero,80d10 <huffman+0x7d4>
   80d08:	0009883a 	mov	r4,zero
   80d0c:	0080f880 	call	80f88 <SEND1>
   80d10:	d0a8cc17 	ldw	r2,-23760(gp)
   80d14:	1004d23a 	srli	r2,r2,8
   80d18:	e0bffe05 	stb	r2,-8(fp)
   80d1c:	e0bffe03 	ldbu	r2,-8(fp)
   80d20:	1009883a 	mov	r4,r2
   80d24:	0080f880 	call	80f88 <SEND1>
   80d28:	e0bffe03 	ldbu	r2,-8(fp)
   80d2c:	10803fd8 	cmpnei	r2,r2,255
   80d30:	1000021e 	bne	r2,zero,80d3c <huffman+0x800>
   80d34:	0009883a 	mov	r4,zero
   80d38:	0080f880 	call	80f88 <SEND1>
   80d3c:	d0a8cc17 	ldw	r2,-23760(gp)
   80d40:	e0bffe05 	stb	r2,-8(fp)
   80d44:	e0bffe03 	ldbu	r2,-8(fp)
   80d48:	1009883a 	mov	r4,r2
   80d4c:	0080f880 	call	80f88 <SEND1>
   80d50:	e0bffe03 	ldbu	r2,-8(fp)
   80d54:	10803fd8 	cmpnei	r2,r2,255
   80d58:	1000021e 	bne	r2,zero,80d64 <huffman+0x828>
   80d5c:	0009883a 	mov	r4,zero
   80d60:	0080f880 	call	80f88 <SEND1>
   80d64:	e0bffc17 	ldw	r2,-16(fp)
   80d68:	d0a8cc15 	stw	r2,-23760(gp)
   80d6c:	e0bffd8b 	ldhu	r2,-10(fp)
   80d70:	d0a8cd0d 	sth	r2,-23756(gp)
	}
}
   80d74:	0001883a 	nop
   80d78:	e037883a 	mov	sp,fp
   80d7c:	dfc00117 	ldw	ra,4(sp)
   80d80:	df000017 	ldw	fp,0(sp)
   80d84:	dec00204 	addi	sp,sp,8
   80d88:	f800283a 	ret

00080d8c <close_bitstream>:

/* For bit Stuffing and EOI marker */
void close_bitstream(void)
{
   80d8c:	defffb04 	addi	sp,sp,-20
   80d90:	dfc00415 	stw	ra,16(sp)
   80d94:	df000315 	stw	fp,12(sp)
   80d98:	df000304 	addi	fp,sp,12
	UINT16 i, count;
	UINT8 *ptr;

	UINT8 out;

	if (bitindex > 0)
   80d9c:	d0a8cd0b 	ldhu	r2,-23756(gp)
   80da0:	10bfffcc 	andi	r2,r2,65535
   80da4:	10002326 	beq	r2,zero,80e34 <close_bitstream+0xa8>
	{
		lcode <<= (32 - bitindex);
   80da8:	d0e8cc17 	ldw	r3,-23760(gp)
   80dac:	d0a8cd0b 	ldhu	r2,-23756(gp)
   80db0:	10bfffcc 	andi	r2,r2,65535
   80db4:	01000804 	movi	r4,32
   80db8:	2085c83a 	sub	r2,r4,r2
   80dbc:	1884983a 	sll	r2,r3,r2
   80dc0:	d0a8cc15 	stw	r2,-23760(gp)
		count = (bitindex + 7) >> 3;
   80dc4:	d0a8cd0b 	ldhu	r2,-23756(gp)
   80dc8:	10bfffcc 	andi	r2,r2,65535
   80dcc:	108001c4 	addi	r2,r2,7
   80dd0:	1005d0fa 	srai	r2,r2,3
   80dd4:	e0bfff0d 	sth	r2,-4(fp)

		ptr = (UINT8 *)&lcode + 3;
   80dd8:	d0a8ccc4 	addi	r2,gp,-23757
   80ddc:	e0bffe15 	stw	r2,-8(fp)

		for (i = count; i > 0; i--)
   80de0:	e0bfff0b 	ldhu	r2,-4(fp)
   80de4:	e0bffd0d 	sth	r2,-12(fp)
   80de8:	00001006 	br	80e2c <close_bitstream+0xa0>
		{
			out = *ptr--;
   80dec:	e0bffe17 	ldw	r2,-8(fp)
   80df0:	10ffffc4 	addi	r3,r2,-1
   80df4:	e0fffe15 	stw	r3,-8(fp)
   80df8:	10800003 	ldbu	r2,0(r2)
   80dfc:	e0bfff85 	stb	r2,-2(fp)
			SEND1(out);
   80e00:	e0bfff83 	ldbu	r2,-2(fp)
   80e04:	1009883a 	mov	r4,r2
   80e08:	0080f880 	call	80f88 <SEND1>
			if (out == 0xff)
   80e0c:	e0bfff83 	ldbu	r2,-2(fp)
   80e10:	10803fd8 	cmpnei	r2,r2,255
   80e14:	1000021e 	bne	r2,zero,80e20 <close_bitstream+0x94>
				SEND1(0);
   80e18:	0009883a 	mov	r4,zero
   80e1c:	0080f880 	call	80f88 <SEND1>
		lcode <<= (32 - bitindex);
		count = (bitindex + 7) >> 3;

		ptr = (UINT8 *)&lcode + 3;

		for (i = count; i > 0; i--)
   80e20:	e0bffd0b 	ldhu	r2,-12(fp)
   80e24:	10bfffc4 	addi	r2,r2,-1
   80e28:	e0bffd0d 	sth	r2,-12(fp)
   80e2c:	e0bffd0b 	ldhu	r2,-12(fp)
   80e30:	103fee1e 	bne	r2,zero,80dec <__alt_data_end+0xfffe0dec>
				SEND1(0);
		}
	}

	// End of image marker
	SEND1(0xFF);
   80e34:	01003fc4 	movi	r4,255
   80e38:	0080f880 	call	80f88 <SEND1>
	SEND1(0xD9);
   80e3c:	01003644 	movi	r4,217
   80e40:	0080f880 	call	80f88 <SEND1>
}
   80e44:	0001883a 	nop
   80e48:	e037883a 	mov	sp,fp
   80e4c:	dfc00117 	ldw	ra,4(sp)
   80e50:	df000017 	ldw	fp,0(sp)
   80e54:	dec00204 	addi	sp,sp,8
   80e58:	f800283a 	ret

00080e5c <main>:

int main(void)
{
   80e5c:	defffb04 	addi	sp,sp,-20
   80e60:	dfc00415 	stw	ra,16(sp)
   80e64:	df000315 	stw	fp,12(sp)
   80e68:	df000304 	addi	fp,sp,12
	

	while (1)
	{

		lcode = 0;
   80e6c:	d028cc15 	stw	zero,-23760(gp)
		bitindex = 0;
   80e70:	d028cd0d 	sth	zero,-23756(gp)
		ldc1 = 0;
   80e74:	d028cd8d 	sth	zero,-23754(gp)
		ldc2 = 0;
   80e78:	d028ce0d 	sth	zero,-23752(gp)
		ldc3 = 0;
   80e7c:	d028ce8d 	sth	zero,-23750(gp)

		UINT32 width = (UINT32)RECV1();
   80e80:	0080f000 	call	80f00 <RECV1>
   80e84:	e0bffe15 	stw	r2,-8(fp)
		UINT32 height = (UINT32)RECV1();
   80e88:	0080f000 	call	80f00 <RECV1>
   80e8c:	e0bfff15 	stw	r2,-4(fp)
		UINT32 count = (UINT32)RECV1(); // xt_iss_profile_enable();
   80e90:	0080f000 	call	80f00 <RECV1>
   80e94:	e0bffd15 	stw	r2,-12(fp)
		// fprintf(stderr,"total macroblocks: %d\n",count);
		write_markers(width, height);
   80e98:	e17fff17 	ldw	r5,-4(fp)
   80e9c:	e13ffe17 	ldw	r4,-8(fp)
   80ea0:	008026c0 	call	8026c <write_markers>
		// asm("dummy");
		for (; count > 0; count--)
   80ea4:	00000906 	br	80ecc <main+0x70>
		{
			huffman(1);
   80ea8:	01000044 	movi	r4,1
   80eac:	008053c0 	call	8053c <huffman>
			huffman(2);
   80eb0:	01000084 	movi	r4,2
   80eb4:	008053c0 	call	8053c <huffman>
			huffman(3);
   80eb8:	010000c4 	movi	r4,3
   80ebc:	008053c0 	call	8053c <huffman>
		UINT32 height = (UINT32)RECV1();
		UINT32 count = (UINT32)RECV1(); // xt_iss_profile_enable();
		// fprintf(stderr,"total macroblocks: %d\n",count);
		write_markers(width, height);
		// asm("dummy");
		for (; count > 0; count--)
   80ec0:	e0bffd17 	ldw	r2,-12(fp)
   80ec4:	10bfffc4 	addi	r2,r2,-1
   80ec8:	e0bffd15 	stw	r2,-12(fp)
   80ecc:	e0bffd17 	ldw	r2,-12(fp)
   80ed0:	103ff51e 	bne	r2,zero,80ea8 <__alt_data_end+0xfffe0ea8>
			huffman(3);
			//	#pragma flush //added by haris
			// asm("dummy");
		}
		// fprintf(stderr,"Closing bitstream\n");
		close_bitstream();
   80ed4:	0080d8c0 	call	80d8c <close_bitstream>
		// SET_DONE();

		// TODO: Send the DONE flag to the next stage
		// TODO: Not used you can fully ignore this queue
		// SEND2(1);
		break;
   80ed8:	0001883a 	nop
	}

	// TODO: Close the queues


	printf("\n Finished !\n");
   80edc:	01000234 	movhi	r4,8
   80ee0:	211ae804 	addi	r4,r4,27552
   80ee4:	00811c80 	call	811c8 <puts>
	return 0;
   80ee8:	0005883a 	mov	r2,zero
}
   80eec:	e037883a 	mov	sp,fp
   80ef0:	dfc00117 	ldw	ra,4(sp)
   80ef4:	df000017 	ldw	fp,0(sp)
   80ef8:	dec00204 	addi	sp,sp,8
   80efc:	f800283a 	ret

00080f00 <RECV1>:

#include "../lib/q_mem_obj_def.h"
#include "../lib/queue.h"

int RECV1()
{
   80f00:	defffd04 	addi	sp,sp,-12
   80f04:	dfc00215 	stw	ra,8(sp)
   80f08:	df000115 	stw	fp,4(sp)
   80f0c:	df000104 	addi	fp,sp,4
	// dequeue from queue and convert to int
	// return atoi(dequeue(q5r));
	int temp = dequeueINT32(q5);
   80f10:	00800234 	movhi	r2,8
   80f14:	109d2804 	addi	r2,r2,29856
   80f18:	11000017 	ldw	r4,0(r2)
   80f1c:	11400117 	ldw	r5,4(r2)
   80f20:	11800217 	ldw	r6,8(r2)
   80f24:	008105c0 	call	8105c <dequeueINT32>
   80f28:	e0bfff15 	stw	r2,-4(fp)
//	printf("Got %d from q5.\n",temp);
	return temp;
   80f2c:	e0bfff17 	ldw	r2,-4(fp)
}
   80f30:	e037883a 	mov	sp,fp
   80f34:	dfc00117 	ldw	ra,4(sp)
   80f38:	df000017 	ldw	fp,0(sp)
   80f3c:	dec00204 	addi	sp,sp,8
   80f40:	f800283a 	ret

00080f44 <RECV2>:

int RECV2()
{
   80f44:	defffd04 	addi	sp,sp,-12
   80f48:	dfc00215 	stw	ra,8(sp)
   80f4c:	df000115 	stw	fp,4(sp)
   80f50:	df000104 	addi	fp,sp,4
    // dequeue from queue and convert to int
    // return atoi(dequeue(qi1d));
	int temp = dequeueINT32(q1d);
   80f54:	00800234 	movhi	r2,8
   80f58:	109d1604 	addi	r2,r2,29784
   80f5c:	11000017 	ldw	r4,0(r2)
   80f60:	11400117 	ldw	r5,4(r2)
   80f64:	11800217 	ldw	r6,8(r2)
   80f68:	008105c0 	call	8105c <dequeueINT32>
   80f6c:	e0bfff15 	stw	r2,-4(fp)
//	printf("Got %d from q1d.\n",temp);
	return temp;
   80f70:	e0bfff17 	ldw	r2,-4(fp)
}
   80f74:	e037883a 	mov	sp,fp
   80f78:	dfc00117 	ldw	ra,4(sp)
   80f7c:	df000017 	ldw	fp,0(sp)
   80f80:	dec00204 	addi	sp,sp,8
   80f84:	f800283a 	ret

00080f88 <SEND1>:

void SEND1(int data)
{
   80f88:	defffd04 	addi	sp,sp,-12
   80f8c:	dfc00215 	stw	ra,8(sp)
   80f90:	df000115 	stw	fp,4(sp)
   80f94:	df000104 	addi	fp,sp,4
   80f98:	e13fff15 	stw	r4,-4(fp)
    // enqueue data to queue
    // char str[10];
    // sprintf(str, "%d", data);
    // enqueueINT32(qo1e, str);
//	printf("Sent %d\n",data);
    enqueueINT32(q1e, data);
   80f9c:	00800234 	movhi	r2,8
   80fa0:	109d1904 	addi	r2,r2,29796
   80fa4:	e1ffff17 	ldw	r7,-4(fp)
   80fa8:	11000017 	ldw	r4,0(r2)
   80fac:	11400117 	ldw	r5,4(r2)
   80fb0:	11800217 	ldw	r6,8(r2)
   80fb4:	0080fd00 	call	80fd0 <enqueueINT32>
}
   80fb8:	0001883a 	nop
   80fbc:	e037883a 	mov	sp,fp
   80fc0:	dfc00117 	ldw	ra,4(sp)
   80fc4:	df000017 	ldw	fp,0(sp)
   80fc8:	dec00204 	addi	sp,sp,8
   80fcc:	f800283a 	ret

00080fd0 <enqueueINT32>:

int INIT_USAGE_ENQ = 0;
int INIT_USAGE_DEQ = 0;

int enqueueINT32(Queue queue, int data)
{
   80fd0:	defffa04 	addi	sp,sp,-24
   80fd4:	dfc00515 	stw	ra,20(sp)
   80fd8:	df000415 	stw	fp,16(sp)
   80fdc:	df000404 	addi	fp,sp,16
   80fe0:	e13ffc15 	stw	r4,-16(fp)
   80fe4:	e17ffd15 	stw	r5,-12(fp)
   80fe8:	e1bffe15 	stw	r6,-8(fp)
   80fec:	e1ffff15 	stw	r7,-4(fp)

    // Wait if the fifo is full
	while (altera_avalon_fifo_read_status(queue.ctrl_base,1<<0) != 0)
   80ff0:	0001883a 	nop
   80ff4:	e0bffe17 	ldw	r2,-8(fp)
   80ff8:	01400044 	movi	r5,1
   80ffc:	1009883a 	mov	r4,r2
   81000:	00849f40 	call	849f4 <altera_avalon_fifo_read_status>
   81004:	103ffb1e 	bne	r2,zero,80ff4 <__alt_data_end+0xfffe0ff4>
	{}

    if (INIT_USAGE_ENQ == 0){
   81008:	d0a8cf17 	ldw	r2,-23748(gp)
   8100c:	1000051e 	bne	r2,zero,81024 <enqueueINT32+0x54>
        INIT_USAGE_ENQ = 1;
   81010:	00800044 	movi	r2,1
   81014:	d0a8cf15 	stw	r2,-23748(gp)
        printf("First time using enqueueINT32\n");
   81018:	01000234 	movhi	r4,8
   8101c:	211aec04 	addi	r4,r4,27568
   81020:	00811c80 	call	811c8 <puts>
    }

	// Write the data to FIFO
	return altera_avalon_fifo_write_fifo(queue.mem_base_in,queue.ctrl_base,(int)data);
   81024:	e0bffc17 	ldw	r2,-16(fp)
   81028:	1007883a 	mov	r3,r2
   8102c:	e0bffe17 	ldw	r2,-8(fp)
   81030:	1009883a 	mov	r4,r2
   81034:	e0bfff17 	ldw	r2,-4(fp)
   81038:	100d883a 	mov	r6,r2
   8103c:	200b883a 	mov	r5,r4
   81040:	1809883a 	mov	r4,r3
   81044:	0084c9c0 	call	84c9c <altera_avalon_fifo_write_fifo>
}
   81048:	e037883a 	mov	sp,fp
   8104c:	dfc00117 	ldw	ra,4(sp)
   81050:	df000017 	ldw	fp,0(sp)
   81054:	dec00204 	addi	sp,sp,8
   81058:	f800283a 	ret

0008105c <dequeueINT32>:


int dequeueINT32(Queue queue)
{
   8105c:	defffa04 	addi	sp,sp,-24
   81060:	dfc00515 	stw	ra,20(sp)
   81064:	df000415 	stw	fp,16(sp)
   81068:	df000404 	addi	fp,sp,16
   8106c:	e13ffd15 	stw	r4,-12(fp)
   81070:	e17ffe15 	stw	r5,-8(fp)
   81074:	e1bfff15 	stw	r6,-4(fp)

	// Wait if the fifo is empty
	while (altera_avalon_fifo_read_status(queue.ctrl_base,1<<1) != 0)
   81078:	0001883a 	nop
   8107c:	e0bfff17 	ldw	r2,-4(fp)
   81080:	01400084 	movi	r5,2
   81084:	1009883a 	mov	r4,r2
   81088:	00849f40 	call	849f4 <altera_avalon_fifo_read_status>
   8108c:	103ffb1e 	bne	r2,zero,8107c <__alt_data_end+0xfffe107c>
	{}

    if (INIT_USAGE_DEQ == 0){
   81090:	d0a8d017 	ldw	r2,-23744(gp)
   81094:	1000051e 	bne	r2,zero,810ac <dequeueINT32+0x50>
        INIT_USAGE_DEQ = 1;
   81098:	00800044 	movi	r2,1
   8109c:	d0a8d015 	stw	r2,-23744(gp)
        printf("First time using dequeueINT32\n");
   810a0:	01000234 	movhi	r4,8
   810a4:	211af404 	addi	r4,r4,27600
   810a8:	00811c80 	call	811c8 <puts>
    }

	// Read the data
	int data = altera_avalon_fifo_read_fifo(queue.mem_base_out,queue.ctrl_base);
   810ac:	e0bffe17 	ldw	r2,-8(fp)
   810b0:	1007883a 	mov	r3,r2
   810b4:	e0bfff17 	ldw	r2,-4(fp)
   810b8:	100b883a 	mov	r5,r2
   810bc:	1809883a 	mov	r4,r3
   810c0:	0084d600 	call	84d60 <altera_avalon_fifo_read_fifo>
   810c4:	e0bffc15 	stw	r2,-16(fp)

	return data;
   810c8:	e0bffc17 	ldw	r2,-16(fp)
}
   810cc:	e037883a 	mov	sp,fp
   810d0:	dfc00117 	ldw	ra,4(sp)
   810d4:	df000017 	ldw	fp,0(sp)
   810d8:	dec00204 	addi	sp,sp,8
   810dc:	f800283a 	ret

000810e0 <__mulsi3>:
   810e0:	0005883a 	mov	r2,zero
   810e4:	20000726 	beq	r4,zero,81104 <__mulsi3+0x24>
   810e8:	20c0004c 	andi	r3,r4,1
   810ec:	2008d07a 	srli	r4,r4,1
   810f0:	18000126 	beq	r3,zero,810f8 <__mulsi3+0x18>
   810f4:	1145883a 	add	r2,r2,r5
   810f8:	294b883a 	add	r5,r5,r5
   810fc:	203ffa1e 	bne	r4,zero,810e8 <__alt_data_end+0xfffe10e8>
   81100:	f800283a 	ret
   81104:	f800283a 	ret

00081108 <_puts_r>:
   81108:	defff604 	addi	sp,sp,-40
   8110c:	dc000715 	stw	r16,28(sp)
   81110:	2021883a 	mov	r16,r4
   81114:	2809883a 	mov	r4,r5
   81118:	dc400815 	stw	r17,32(sp)
   8111c:	dfc00915 	stw	ra,36(sp)
   81120:	2823883a 	mov	r17,r5
   81124:	00811dc0 	call	811dc <strlen>
   81128:	10c00044 	addi	r3,r2,1
   8112c:	d8800115 	stw	r2,4(sp)
   81130:	00800234 	movhi	r2,8
   81134:	109afc04 	addi	r2,r2,27632
   81138:	d8800215 	stw	r2,8(sp)
   8113c:	00800044 	movi	r2,1
   81140:	d8800315 	stw	r2,12(sp)
   81144:	00800084 	movi	r2,2
   81148:	dc400015 	stw	r17,0(sp)
   8114c:	d8c00615 	stw	r3,24(sp)
   81150:	dec00415 	stw	sp,16(sp)
   81154:	d8800515 	stw	r2,20(sp)
   81158:	80000226 	beq	r16,zero,81164 <_puts_r+0x5c>
   8115c:	80800e17 	ldw	r2,56(r16)
   81160:	10001426 	beq	r2,zero,811b4 <_puts_r+0xac>
   81164:	81400217 	ldw	r5,8(r16)
   81168:	2880030b 	ldhu	r2,12(r5)
   8116c:	10c8000c 	andi	r3,r2,8192
   81170:	1800061e 	bne	r3,zero,8118c <_puts_r+0x84>
   81174:	29001917 	ldw	r4,100(r5)
   81178:	00f7ffc4 	movi	r3,-8193
   8117c:	10880014 	ori	r2,r2,8192
   81180:	20c6703a 	and	r3,r4,r3
   81184:	2880030d 	sth	r2,12(r5)
   81188:	28c01915 	stw	r3,100(r5)
   8118c:	d9800404 	addi	r6,sp,16
   81190:	8009883a 	mov	r4,r16
   81194:	00816240 	call	81624 <__sfvwrite_r>
   81198:	1000091e 	bne	r2,zero,811c0 <_puts_r+0xb8>
   8119c:	00800284 	movi	r2,10
   811a0:	dfc00917 	ldw	ra,36(sp)
   811a4:	dc400817 	ldw	r17,32(sp)
   811a8:	dc000717 	ldw	r16,28(sp)
   811ac:	dec00a04 	addi	sp,sp,40
   811b0:	f800283a 	ret
   811b4:	8009883a 	mov	r4,r16
   811b8:	00815d40 	call	815d4 <__sinit>
   811bc:	003fe906 	br	81164 <__alt_data_end+0xfffe1164>
   811c0:	00bfffc4 	movi	r2,-1
   811c4:	003ff606 	br	811a0 <__alt_data_end+0xfffe11a0>

000811c8 <puts>:
   811c8:	00800274 	movhi	r2,9
   811cc:	10a3bc04 	addi	r2,r2,-28944
   811d0:	200b883a 	mov	r5,r4
   811d4:	11000017 	ldw	r4,0(r2)
   811d8:	00811081 	jmpi	81108 <_puts_r>

000811dc <strlen>:
   811dc:	208000cc 	andi	r2,r4,3
   811e0:	10002026 	beq	r2,zero,81264 <strlen+0x88>
   811e4:	20800007 	ldb	r2,0(r4)
   811e8:	10002026 	beq	r2,zero,8126c <strlen+0x90>
   811ec:	2005883a 	mov	r2,r4
   811f0:	00000206 	br	811fc <strlen+0x20>
   811f4:	10c00007 	ldb	r3,0(r2)
   811f8:	18001826 	beq	r3,zero,8125c <strlen+0x80>
   811fc:	10800044 	addi	r2,r2,1
   81200:	10c000cc 	andi	r3,r2,3
   81204:	183ffb1e 	bne	r3,zero,811f4 <__alt_data_end+0xfffe11f4>
   81208:	10c00017 	ldw	r3,0(r2)
   8120c:	01ffbff4 	movhi	r7,65279
   81210:	39ffbfc4 	addi	r7,r7,-257
   81214:	00ca303a 	nor	r5,zero,r3
   81218:	01a02074 	movhi	r6,32897
   8121c:	19c7883a 	add	r3,r3,r7
   81220:	31a02004 	addi	r6,r6,-32640
   81224:	1946703a 	and	r3,r3,r5
   81228:	1986703a 	and	r3,r3,r6
   8122c:	1800091e 	bne	r3,zero,81254 <strlen+0x78>
   81230:	10800104 	addi	r2,r2,4
   81234:	10c00017 	ldw	r3,0(r2)
   81238:	19cb883a 	add	r5,r3,r7
   8123c:	00c6303a 	nor	r3,zero,r3
   81240:	28c6703a 	and	r3,r5,r3
   81244:	1986703a 	and	r3,r3,r6
   81248:	183ff926 	beq	r3,zero,81230 <__alt_data_end+0xfffe1230>
   8124c:	00000106 	br	81254 <strlen+0x78>
   81250:	10800044 	addi	r2,r2,1
   81254:	10c00007 	ldb	r3,0(r2)
   81258:	183ffd1e 	bne	r3,zero,81250 <__alt_data_end+0xfffe1250>
   8125c:	1105c83a 	sub	r2,r2,r4
   81260:	f800283a 	ret
   81264:	2005883a 	mov	r2,r4
   81268:	003fe706 	br	81208 <__alt_data_end+0xfffe1208>
   8126c:	0005883a 	mov	r2,zero
   81270:	f800283a 	ret

00081274 <__fp_unlock>:
   81274:	0005883a 	mov	r2,zero
   81278:	f800283a 	ret

0008127c <_cleanup_r>:
   8127c:	01400234 	movhi	r5,8
   81280:	294c8b04 	addi	r5,r5,12844
   81284:	0081bb01 	jmpi	81bb0 <_fwalk_reent>

00081288 <__sinit.part.1>:
   81288:	defff704 	addi	sp,sp,-36
   8128c:	00c00234 	movhi	r3,8
   81290:	dfc00815 	stw	ra,32(sp)
   81294:	ddc00715 	stw	r23,28(sp)
   81298:	dd800615 	stw	r22,24(sp)
   8129c:	dd400515 	stw	r21,20(sp)
   812a0:	dd000415 	stw	r20,16(sp)
   812a4:	dcc00315 	stw	r19,12(sp)
   812a8:	dc800215 	stw	r18,8(sp)
   812ac:	dc400115 	stw	r17,4(sp)
   812b0:	dc000015 	stw	r16,0(sp)
   812b4:	18c49f04 	addi	r3,r3,4732
   812b8:	24000117 	ldw	r16,4(r4)
   812bc:	20c00f15 	stw	r3,60(r4)
   812c0:	2080bb04 	addi	r2,r4,748
   812c4:	00c000c4 	movi	r3,3
   812c8:	20c0b915 	stw	r3,740(r4)
   812cc:	2080ba15 	stw	r2,744(r4)
   812d0:	2000b815 	stw	zero,736(r4)
   812d4:	05c00204 	movi	r23,8
   812d8:	00800104 	movi	r2,4
   812dc:	2025883a 	mov	r18,r4
   812e0:	b80d883a 	mov	r6,r23
   812e4:	81001704 	addi	r4,r16,92
   812e8:	000b883a 	mov	r5,zero
   812ec:	80000015 	stw	zero,0(r16)
   812f0:	80000115 	stw	zero,4(r16)
   812f4:	80000215 	stw	zero,8(r16)
   812f8:	8080030d 	sth	r2,12(r16)
   812fc:	80001915 	stw	zero,100(r16)
   81300:	8000038d 	sth	zero,14(r16)
   81304:	80000415 	stw	zero,16(r16)
   81308:	80000515 	stw	zero,20(r16)
   8130c:	80000615 	stw	zero,24(r16)
   81310:	00828080 	call	82808 <memset>
   81314:	05800234 	movhi	r22,8
   81318:	94400217 	ldw	r17,8(r18)
   8131c:	05400234 	movhi	r21,8
   81320:	05000234 	movhi	r20,8
   81324:	04c00234 	movhi	r19,8
   81328:	b58bba04 	addi	r22,r22,12008
   8132c:	ad4bd104 	addi	r21,r21,12100
   81330:	a50bf004 	addi	r20,r20,12224
   81334:	9ccc0704 	addi	r19,r19,12316
   81338:	85800815 	stw	r22,32(r16)
   8133c:	85400915 	stw	r21,36(r16)
   81340:	85000a15 	stw	r20,40(r16)
   81344:	84c00b15 	stw	r19,44(r16)
   81348:	84000715 	stw	r16,28(r16)
   8134c:	00800284 	movi	r2,10
   81350:	8880030d 	sth	r2,12(r17)
   81354:	00800044 	movi	r2,1
   81358:	b80d883a 	mov	r6,r23
   8135c:	89001704 	addi	r4,r17,92
   81360:	000b883a 	mov	r5,zero
   81364:	88000015 	stw	zero,0(r17)
   81368:	88000115 	stw	zero,4(r17)
   8136c:	88000215 	stw	zero,8(r17)
   81370:	88001915 	stw	zero,100(r17)
   81374:	8880038d 	sth	r2,14(r17)
   81378:	88000415 	stw	zero,16(r17)
   8137c:	88000515 	stw	zero,20(r17)
   81380:	88000615 	stw	zero,24(r17)
   81384:	00828080 	call	82808 <memset>
   81388:	94000317 	ldw	r16,12(r18)
   8138c:	00800484 	movi	r2,18
   81390:	8c400715 	stw	r17,28(r17)
   81394:	8d800815 	stw	r22,32(r17)
   81398:	8d400915 	stw	r21,36(r17)
   8139c:	8d000a15 	stw	r20,40(r17)
   813a0:	8cc00b15 	stw	r19,44(r17)
   813a4:	8080030d 	sth	r2,12(r16)
   813a8:	00800084 	movi	r2,2
   813ac:	80000015 	stw	zero,0(r16)
   813b0:	80000115 	stw	zero,4(r16)
   813b4:	80000215 	stw	zero,8(r16)
   813b8:	80001915 	stw	zero,100(r16)
   813bc:	8080038d 	sth	r2,14(r16)
   813c0:	80000415 	stw	zero,16(r16)
   813c4:	80000515 	stw	zero,20(r16)
   813c8:	80000615 	stw	zero,24(r16)
   813cc:	b80d883a 	mov	r6,r23
   813d0:	000b883a 	mov	r5,zero
   813d4:	81001704 	addi	r4,r16,92
   813d8:	00828080 	call	82808 <memset>
   813dc:	00800044 	movi	r2,1
   813e0:	84000715 	stw	r16,28(r16)
   813e4:	85800815 	stw	r22,32(r16)
   813e8:	85400915 	stw	r21,36(r16)
   813ec:	85000a15 	stw	r20,40(r16)
   813f0:	84c00b15 	stw	r19,44(r16)
   813f4:	90800e15 	stw	r2,56(r18)
   813f8:	dfc00817 	ldw	ra,32(sp)
   813fc:	ddc00717 	ldw	r23,28(sp)
   81400:	dd800617 	ldw	r22,24(sp)
   81404:	dd400517 	ldw	r21,20(sp)
   81408:	dd000417 	ldw	r20,16(sp)
   8140c:	dcc00317 	ldw	r19,12(sp)
   81410:	dc800217 	ldw	r18,8(sp)
   81414:	dc400117 	ldw	r17,4(sp)
   81418:	dc000017 	ldw	r16,0(sp)
   8141c:	dec00904 	addi	sp,sp,36
   81420:	f800283a 	ret

00081424 <__fp_lock>:
   81424:	0005883a 	mov	r2,zero
   81428:	f800283a 	ret

0008142c <__sfmoreglue>:
   8142c:	defffc04 	addi	sp,sp,-16
   81430:	dc800215 	stw	r18,8(sp)
   81434:	2825883a 	mov	r18,r5
   81438:	dc000015 	stw	r16,0(sp)
   8143c:	01401a04 	movi	r5,104
   81440:	2021883a 	mov	r16,r4
   81444:	913fffc4 	addi	r4,r18,-1
   81448:	dfc00315 	stw	ra,12(sp)
   8144c:	dc400115 	stw	r17,4(sp)
   81450:	00810e00 	call	810e0 <__mulsi3>
   81454:	8009883a 	mov	r4,r16
   81458:	11401d04 	addi	r5,r2,116
   8145c:	1023883a 	mov	r17,r2
   81460:	0081c740 	call	81c74 <_malloc_r>
   81464:	1021883a 	mov	r16,r2
   81468:	10000726 	beq	r2,zero,81488 <__sfmoreglue+0x5c>
   8146c:	11000304 	addi	r4,r2,12
   81470:	10000015 	stw	zero,0(r2)
   81474:	14800115 	stw	r18,4(r2)
   81478:	11000215 	stw	r4,8(r2)
   8147c:	89801a04 	addi	r6,r17,104
   81480:	000b883a 	mov	r5,zero
   81484:	00828080 	call	82808 <memset>
   81488:	8005883a 	mov	r2,r16
   8148c:	dfc00317 	ldw	ra,12(sp)
   81490:	dc800217 	ldw	r18,8(sp)
   81494:	dc400117 	ldw	r17,4(sp)
   81498:	dc000017 	ldw	r16,0(sp)
   8149c:	dec00404 	addi	sp,sp,16
   814a0:	f800283a 	ret

000814a4 <__sfp>:
   814a4:	defffb04 	addi	sp,sp,-20
   814a8:	dc000015 	stw	r16,0(sp)
   814ac:	04000274 	movhi	r16,9
   814b0:	8423bb04 	addi	r16,r16,-28948
   814b4:	dcc00315 	stw	r19,12(sp)
   814b8:	2027883a 	mov	r19,r4
   814bc:	81000017 	ldw	r4,0(r16)
   814c0:	dfc00415 	stw	ra,16(sp)
   814c4:	dc800215 	stw	r18,8(sp)
   814c8:	20800e17 	ldw	r2,56(r4)
   814cc:	dc400115 	stw	r17,4(sp)
   814d0:	1000021e 	bne	r2,zero,814dc <__sfp+0x38>
   814d4:	00812880 	call	81288 <__sinit.part.1>
   814d8:	81000017 	ldw	r4,0(r16)
   814dc:	2480b804 	addi	r18,r4,736
   814e0:	047fffc4 	movi	r17,-1
   814e4:	91000117 	ldw	r4,4(r18)
   814e8:	94000217 	ldw	r16,8(r18)
   814ec:	213fffc4 	addi	r4,r4,-1
   814f0:	20000a16 	blt	r4,zero,8151c <__sfp+0x78>
   814f4:	8080030f 	ldh	r2,12(r16)
   814f8:	10000c26 	beq	r2,zero,8152c <__sfp+0x88>
   814fc:	80c01d04 	addi	r3,r16,116
   81500:	00000206 	br	8150c <__sfp+0x68>
   81504:	18bfe60f 	ldh	r2,-104(r3)
   81508:	10000826 	beq	r2,zero,8152c <__sfp+0x88>
   8150c:	213fffc4 	addi	r4,r4,-1
   81510:	1c3ffd04 	addi	r16,r3,-12
   81514:	18c01a04 	addi	r3,r3,104
   81518:	247ffa1e 	bne	r4,r17,81504 <__alt_data_end+0xfffe1504>
   8151c:	90800017 	ldw	r2,0(r18)
   81520:	10001d26 	beq	r2,zero,81598 <__sfp+0xf4>
   81524:	1025883a 	mov	r18,r2
   81528:	003fee06 	br	814e4 <__alt_data_end+0xfffe14e4>
   8152c:	00bfffc4 	movi	r2,-1
   81530:	8080038d 	sth	r2,14(r16)
   81534:	00800044 	movi	r2,1
   81538:	8080030d 	sth	r2,12(r16)
   8153c:	80001915 	stw	zero,100(r16)
   81540:	80000015 	stw	zero,0(r16)
   81544:	80000215 	stw	zero,8(r16)
   81548:	80000115 	stw	zero,4(r16)
   8154c:	80000415 	stw	zero,16(r16)
   81550:	80000515 	stw	zero,20(r16)
   81554:	80000615 	stw	zero,24(r16)
   81558:	01800204 	movi	r6,8
   8155c:	000b883a 	mov	r5,zero
   81560:	81001704 	addi	r4,r16,92
   81564:	00828080 	call	82808 <memset>
   81568:	8005883a 	mov	r2,r16
   8156c:	80000c15 	stw	zero,48(r16)
   81570:	80000d15 	stw	zero,52(r16)
   81574:	80001115 	stw	zero,68(r16)
   81578:	80001215 	stw	zero,72(r16)
   8157c:	dfc00417 	ldw	ra,16(sp)
   81580:	dcc00317 	ldw	r19,12(sp)
   81584:	dc800217 	ldw	r18,8(sp)
   81588:	dc400117 	ldw	r17,4(sp)
   8158c:	dc000017 	ldw	r16,0(sp)
   81590:	dec00504 	addi	sp,sp,20
   81594:	f800283a 	ret
   81598:	01400104 	movi	r5,4
   8159c:	9809883a 	mov	r4,r19
   815a0:	008142c0 	call	8142c <__sfmoreglue>
   815a4:	90800015 	stw	r2,0(r18)
   815a8:	103fde1e 	bne	r2,zero,81524 <__alt_data_end+0xfffe1524>
   815ac:	00800304 	movi	r2,12
   815b0:	98800015 	stw	r2,0(r19)
   815b4:	0005883a 	mov	r2,zero
   815b8:	003ff006 	br	8157c <__alt_data_end+0xfffe157c>

000815bc <_cleanup>:
   815bc:	00800274 	movhi	r2,9
   815c0:	10a3bb04 	addi	r2,r2,-28948
   815c4:	11000017 	ldw	r4,0(r2)
   815c8:	01400234 	movhi	r5,8
   815cc:	294c8b04 	addi	r5,r5,12844
   815d0:	0081bb01 	jmpi	81bb0 <_fwalk_reent>

000815d4 <__sinit>:
   815d4:	20800e17 	ldw	r2,56(r4)
   815d8:	10000126 	beq	r2,zero,815e0 <__sinit+0xc>
   815dc:	f800283a 	ret
   815e0:	00812881 	jmpi	81288 <__sinit.part.1>

000815e4 <__sfp_lock_acquire>:
   815e4:	f800283a 	ret

000815e8 <__sfp_lock_release>:
   815e8:	f800283a 	ret

000815ec <__sinit_lock_acquire>:
   815ec:	f800283a 	ret

000815f0 <__sinit_lock_release>:
   815f0:	f800283a 	ret

000815f4 <__fp_lock_all>:
   815f4:	00800274 	movhi	r2,9
   815f8:	10a3bc04 	addi	r2,r2,-28944
   815fc:	11000017 	ldw	r4,0(r2)
   81600:	01400234 	movhi	r5,8
   81604:	29450904 	addi	r5,r5,5156
   81608:	0081aec1 	jmpi	81aec <_fwalk>

0008160c <__fp_unlock_all>:
   8160c:	00800274 	movhi	r2,9
   81610:	10a3bc04 	addi	r2,r2,-28944
   81614:	11000017 	ldw	r4,0(r2)
   81618:	01400234 	movhi	r5,8
   8161c:	29449d04 	addi	r5,r5,4724
   81620:	0081aec1 	jmpi	81aec <_fwalk>

00081624 <__sfvwrite_r>:
   81624:	30800217 	ldw	r2,8(r6)
   81628:	10006726 	beq	r2,zero,817c8 <__sfvwrite_r+0x1a4>
   8162c:	28c0030b 	ldhu	r3,12(r5)
   81630:	defff404 	addi	sp,sp,-48
   81634:	dd400715 	stw	r21,28(sp)
   81638:	dd000615 	stw	r20,24(sp)
   8163c:	dc000215 	stw	r16,8(sp)
   81640:	dfc00b15 	stw	ra,44(sp)
   81644:	df000a15 	stw	fp,40(sp)
   81648:	ddc00915 	stw	r23,36(sp)
   8164c:	dd800815 	stw	r22,32(sp)
   81650:	dcc00515 	stw	r19,20(sp)
   81654:	dc800415 	stw	r18,16(sp)
   81658:	dc400315 	stw	r17,12(sp)
   8165c:	1880020c 	andi	r2,r3,8
   81660:	2821883a 	mov	r16,r5
   81664:	202b883a 	mov	r21,r4
   81668:	3029883a 	mov	r20,r6
   8166c:	10002726 	beq	r2,zero,8170c <__sfvwrite_r+0xe8>
   81670:	28800417 	ldw	r2,16(r5)
   81674:	10002526 	beq	r2,zero,8170c <__sfvwrite_r+0xe8>
   81678:	1880008c 	andi	r2,r3,2
   8167c:	a4400017 	ldw	r17,0(r20)
   81680:	10002a26 	beq	r2,zero,8172c <__sfvwrite_r+0x108>
   81684:	05a00034 	movhi	r22,32768
   81688:	0027883a 	mov	r19,zero
   8168c:	0025883a 	mov	r18,zero
   81690:	b5bf0004 	addi	r22,r22,-1024
   81694:	980d883a 	mov	r6,r19
   81698:	a809883a 	mov	r4,r21
   8169c:	90004626 	beq	r18,zero,817b8 <__sfvwrite_r+0x194>
   816a0:	900f883a 	mov	r7,r18
   816a4:	b480022e 	bgeu	r22,r18,816b0 <__sfvwrite_r+0x8c>
   816a8:	01e00034 	movhi	r7,32768
   816ac:	39ff0004 	addi	r7,r7,-1024
   816b0:	80800917 	ldw	r2,36(r16)
   816b4:	81400717 	ldw	r5,28(r16)
   816b8:	103ee83a 	callr	r2
   816bc:	00805a0e 	bge	zero,r2,81828 <__sfvwrite_r+0x204>
   816c0:	a0c00217 	ldw	r3,8(r20)
   816c4:	98a7883a 	add	r19,r19,r2
   816c8:	90a5c83a 	sub	r18,r18,r2
   816cc:	1885c83a 	sub	r2,r3,r2
   816d0:	a0800215 	stw	r2,8(r20)
   816d4:	103fef1e 	bne	r2,zero,81694 <__alt_data_end+0xfffe1694>
   816d8:	0005883a 	mov	r2,zero
   816dc:	dfc00b17 	ldw	ra,44(sp)
   816e0:	df000a17 	ldw	fp,40(sp)
   816e4:	ddc00917 	ldw	r23,36(sp)
   816e8:	dd800817 	ldw	r22,32(sp)
   816ec:	dd400717 	ldw	r21,28(sp)
   816f0:	dd000617 	ldw	r20,24(sp)
   816f4:	dcc00517 	ldw	r19,20(sp)
   816f8:	dc800417 	ldw	r18,16(sp)
   816fc:	dc400317 	ldw	r17,12(sp)
   81700:	dc000217 	ldw	r16,8(sp)
   81704:	dec00c04 	addi	sp,sp,48
   81708:	f800283a 	ret
   8170c:	800b883a 	mov	r5,r16
   81710:	a809883a 	mov	r4,r21
   81714:	00830840 	call	83084 <__swsetup_r>
   81718:	1000ee1e 	bne	r2,zero,81ad4 <__sfvwrite_r+0x4b0>
   8171c:	80c0030b 	ldhu	r3,12(r16)
   81720:	a4400017 	ldw	r17,0(r20)
   81724:	1880008c 	andi	r2,r3,2
   81728:	103fd61e 	bne	r2,zero,81684 <__alt_data_end+0xfffe1684>
   8172c:	1880004c 	andi	r2,r3,1
   81730:	1000421e 	bne	r2,zero,8183c <__sfvwrite_r+0x218>
   81734:	0039883a 	mov	fp,zero
   81738:	0025883a 	mov	r18,zero
   8173c:	90001a26 	beq	r18,zero,817a8 <__sfvwrite_r+0x184>
   81740:	1880800c 	andi	r2,r3,512
   81744:	84c00217 	ldw	r19,8(r16)
   81748:	10002126 	beq	r2,zero,817d0 <__sfvwrite_r+0x1ac>
   8174c:	982f883a 	mov	r23,r19
   81750:	94c09636 	bltu	r18,r19,819ac <__sfvwrite_r+0x388>
   81754:	1881200c 	andi	r2,r3,1152
   81758:	1000a11e 	bne	r2,zero,819e0 <__sfvwrite_r+0x3bc>
   8175c:	81000017 	ldw	r4,0(r16)
   81760:	b80d883a 	mov	r6,r23
   81764:	e00b883a 	mov	r5,fp
   81768:	00826ac0 	call	826ac <memmove>
   8176c:	80c00217 	ldw	r3,8(r16)
   81770:	81000017 	ldw	r4,0(r16)
   81774:	9005883a 	mov	r2,r18
   81778:	1ce7c83a 	sub	r19,r3,r19
   8177c:	25cf883a 	add	r7,r4,r23
   81780:	84c00215 	stw	r19,8(r16)
   81784:	81c00015 	stw	r7,0(r16)
   81788:	a0c00217 	ldw	r3,8(r20)
   8178c:	e0b9883a 	add	fp,fp,r2
   81790:	90a5c83a 	sub	r18,r18,r2
   81794:	18a7c83a 	sub	r19,r3,r2
   81798:	a4c00215 	stw	r19,8(r20)
   8179c:	983fce26 	beq	r19,zero,816d8 <__alt_data_end+0xfffe16d8>
   817a0:	80c0030b 	ldhu	r3,12(r16)
   817a4:	903fe61e 	bne	r18,zero,81740 <__alt_data_end+0xfffe1740>
   817a8:	8f000017 	ldw	fp,0(r17)
   817ac:	8c800117 	ldw	r18,4(r17)
   817b0:	8c400204 	addi	r17,r17,8
   817b4:	003fe106 	br	8173c <__alt_data_end+0xfffe173c>
   817b8:	8cc00017 	ldw	r19,0(r17)
   817bc:	8c800117 	ldw	r18,4(r17)
   817c0:	8c400204 	addi	r17,r17,8
   817c4:	003fb306 	br	81694 <__alt_data_end+0xfffe1694>
   817c8:	0005883a 	mov	r2,zero
   817cc:	f800283a 	ret
   817d0:	81000017 	ldw	r4,0(r16)
   817d4:	80800417 	ldw	r2,16(r16)
   817d8:	11005a36 	bltu	r2,r4,81944 <__sfvwrite_r+0x320>
   817dc:	85c00517 	ldw	r23,20(r16)
   817e0:	95c05836 	bltu	r18,r23,81944 <__sfvwrite_r+0x320>
   817e4:	00a00034 	movhi	r2,32768
   817e8:	10bfffc4 	addi	r2,r2,-1
   817ec:	9009883a 	mov	r4,r18
   817f0:	1480012e 	bgeu	r2,r18,817f8 <__sfvwrite_r+0x1d4>
   817f4:	1009883a 	mov	r4,r2
   817f8:	b80b883a 	mov	r5,r23
   817fc:	0083d380 	call	83d38 <__divsi3>
   81800:	b80b883a 	mov	r5,r23
   81804:	1009883a 	mov	r4,r2
   81808:	00810e00 	call	810e0 <__mulsi3>
   8180c:	81400717 	ldw	r5,28(r16)
   81810:	80c00917 	ldw	r3,36(r16)
   81814:	100f883a 	mov	r7,r2
   81818:	e00d883a 	mov	r6,fp
   8181c:	a809883a 	mov	r4,r21
   81820:	183ee83a 	callr	r3
   81824:	00bfd816 	blt	zero,r2,81788 <__alt_data_end+0xfffe1788>
   81828:	8080030b 	ldhu	r2,12(r16)
   8182c:	10801014 	ori	r2,r2,64
   81830:	8080030d 	sth	r2,12(r16)
   81834:	00bfffc4 	movi	r2,-1
   81838:	003fa806 	br	816dc <__alt_data_end+0xfffe16dc>
   8183c:	0027883a 	mov	r19,zero
   81840:	0011883a 	mov	r8,zero
   81844:	0039883a 	mov	fp,zero
   81848:	0025883a 	mov	r18,zero
   8184c:	90001f26 	beq	r18,zero,818cc <__sfvwrite_r+0x2a8>
   81850:	40005a26 	beq	r8,zero,819bc <__sfvwrite_r+0x398>
   81854:	982d883a 	mov	r22,r19
   81858:	94c0012e 	bgeu	r18,r19,81860 <__sfvwrite_r+0x23c>
   8185c:	902d883a 	mov	r22,r18
   81860:	81000017 	ldw	r4,0(r16)
   81864:	80800417 	ldw	r2,16(r16)
   81868:	b02f883a 	mov	r23,r22
   8186c:	81c00517 	ldw	r7,20(r16)
   81870:	1100032e 	bgeu	r2,r4,81880 <__sfvwrite_r+0x25c>
   81874:	80c00217 	ldw	r3,8(r16)
   81878:	38c7883a 	add	r3,r7,r3
   8187c:	1d801816 	blt	r3,r22,818e0 <__sfvwrite_r+0x2bc>
   81880:	b1c03e16 	blt	r22,r7,8197c <__sfvwrite_r+0x358>
   81884:	80800917 	ldw	r2,36(r16)
   81888:	81400717 	ldw	r5,28(r16)
   8188c:	e00d883a 	mov	r6,fp
   81890:	da000115 	stw	r8,4(sp)
   81894:	a809883a 	mov	r4,r21
   81898:	103ee83a 	callr	r2
   8189c:	102f883a 	mov	r23,r2
   818a0:	da000117 	ldw	r8,4(sp)
   818a4:	00bfe00e 	bge	zero,r2,81828 <__alt_data_end+0xfffe1828>
   818a8:	9de7c83a 	sub	r19,r19,r23
   818ac:	98001f26 	beq	r19,zero,8192c <__sfvwrite_r+0x308>
   818b0:	a0800217 	ldw	r2,8(r20)
   818b4:	e5f9883a 	add	fp,fp,r23
   818b8:	95e5c83a 	sub	r18,r18,r23
   818bc:	15efc83a 	sub	r23,r2,r23
   818c0:	a5c00215 	stw	r23,8(r20)
   818c4:	b83f8426 	beq	r23,zero,816d8 <__alt_data_end+0xfffe16d8>
   818c8:	903fe11e 	bne	r18,zero,81850 <__alt_data_end+0xfffe1850>
   818cc:	8f000017 	ldw	fp,0(r17)
   818d0:	8c800117 	ldw	r18,4(r17)
   818d4:	0011883a 	mov	r8,zero
   818d8:	8c400204 	addi	r17,r17,8
   818dc:	003fdb06 	br	8184c <__alt_data_end+0xfffe184c>
   818e0:	180d883a 	mov	r6,r3
   818e4:	e00b883a 	mov	r5,fp
   818e8:	da000115 	stw	r8,4(sp)
   818ec:	d8c00015 	stw	r3,0(sp)
   818f0:	00826ac0 	call	826ac <memmove>
   818f4:	d8c00017 	ldw	r3,0(sp)
   818f8:	80800017 	ldw	r2,0(r16)
   818fc:	800b883a 	mov	r5,r16
   81900:	a809883a 	mov	r4,r21
   81904:	10c5883a 	add	r2,r2,r3
   81908:	80800015 	stw	r2,0(r16)
   8190c:	d8c00015 	stw	r3,0(sp)
   81910:	008354c0 	call	8354c <_fflush_r>
   81914:	d8c00017 	ldw	r3,0(sp)
   81918:	da000117 	ldw	r8,4(sp)
   8191c:	103fc21e 	bne	r2,zero,81828 <__alt_data_end+0xfffe1828>
   81920:	182f883a 	mov	r23,r3
   81924:	9de7c83a 	sub	r19,r19,r23
   81928:	983fe11e 	bne	r19,zero,818b0 <__alt_data_end+0xfffe18b0>
   8192c:	800b883a 	mov	r5,r16
   81930:	a809883a 	mov	r4,r21
   81934:	008354c0 	call	8354c <_fflush_r>
   81938:	103fbb1e 	bne	r2,zero,81828 <__alt_data_end+0xfffe1828>
   8193c:	0011883a 	mov	r8,zero
   81940:	003fdb06 	br	818b0 <__alt_data_end+0xfffe18b0>
   81944:	94c0012e 	bgeu	r18,r19,8194c <__sfvwrite_r+0x328>
   81948:	9027883a 	mov	r19,r18
   8194c:	980d883a 	mov	r6,r19
   81950:	e00b883a 	mov	r5,fp
   81954:	00826ac0 	call	826ac <memmove>
   81958:	80800217 	ldw	r2,8(r16)
   8195c:	80c00017 	ldw	r3,0(r16)
   81960:	14c5c83a 	sub	r2,r2,r19
   81964:	1cc7883a 	add	r3,r3,r19
   81968:	80800215 	stw	r2,8(r16)
   8196c:	80c00015 	stw	r3,0(r16)
   81970:	10004326 	beq	r2,zero,81a80 <__sfvwrite_r+0x45c>
   81974:	9805883a 	mov	r2,r19
   81978:	003f8306 	br	81788 <__alt_data_end+0xfffe1788>
   8197c:	b00d883a 	mov	r6,r22
   81980:	e00b883a 	mov	r5,fp
   81984:	da000115 	stw	r8,4(sp)
   81988:	00826ac0 	call	826ac <memmove>
   8198c:	80800217 	ldw	r2,8(r16)
   81990:	80c00017 	ldw	r3,0(r16)
   81994:	da000117 	ldw	r8,4(sp)
   81998:	1585c83a 	sub	r2,r2,r22
   8199c:	1dad883a 	add	r22,r3,r22
   819a0:	80800215 	stw	r2,8(r16)
   819a4:	85800015 	stw	r22,0(r16)
   819a8:	003fbf06 	br	818a8 <__alt_data_end+0xfffe18a8>
   819ac:	81000017 	ldw	r4,0(r16)
   819b0:	9027883a 	mov	r19,r18
   819b4:	902f883a 	mov	r23,r18
   819b8:	003f6906 	br	81760 <__alt_data_end+0xfffe1760>
   819bc:	900d883a 	mov	r6,r18
   819c0:	01400284 	movi	r5,10
   819c4:	e009883a 	mov	r4,fp
   819c8:	00824800 	call	82480 <memchr>
   819cc:	10003e26 	beq	r2,zero,81ac8 <__sfvwrite_r+0x4a4>
   819d0:	10800044 	addi	r2,r2,1
   819d4:	1727c83a 	sub	r19,r2,fp
   819d8:	02000044 	movi	r8,1
   819dc:	003f9d06 	br	81854 <__alt_data_end+0xfffe1854>
   819e0:	80800517 	ldw	r2,20(r16)
   819e4:	81400417 	ldw	r5,16(r16)
   819e8:	81c00017 	ldw	r7,0(r16)
   819ec:	10a7883a 	add	r19,r2,r2
   819f0:	9885883a 	add	r2,r19,r2
   819f4:	1026d7fa 	srli	r19,r2,31
   819f8:	396dc83a 	sub	r22,r7,r5
   819fc:	b1000044 	addi	r4,r22,1
   81a00:	9885883a 	add	r2,r19,r2
   81a04:	1027d07a 	srai	r19,r2,1
   81a08:	2485883a 	add	r2,r4,r18
   81a0c:	980d883a 	mov	r6,r19
   81a10:	9880022e 	bgeu	r19,r2,81a1c <__sfvwrite_r+0x3f8>
   81a14:	1027883a 	mov	r19,r2
   81a18:	100d883a 	mov	r6,r2
   81a1c:	18c1000c 	andi	r3,r3,1024
   81a20:	18001c26 	beq	r3,zero,81a94 <__sfvwrite_r+0x470>
   81a24:	300b883a 	mov	r5,r6
   81a28:	a809883a 	mov	r4,r21
   81a2c:	0081c740 	call	81c74 <_malloc_r>
   81a30:	102f883a 	mov	r23,r2
   81a34:	10002926 	beq	r2,zero,81adc <__sfvwrite_r+0x4b8>
   81a38:	81400417 	ldw	r5,16(r16)
   81a3c:	b00d883a 	mov	r6,r22
   81a40:	1009883a 	mov	r4,r2
   81a44:	00825640 	call	82564 <memcpy>
   81a48:	8080030b 	ldhu	r2,12(r16)
   81a4c:	00fedfc4 	movi	r3,-1153
   81a50:	10c4703a 	and	r2,r2,r3
   81a54:	10802014 	ori	r2,r2,128
   81a58:	8080030d 	sth	r2,12(r16)
   81a5c:	bd89883a 	add	r4,r23,r22
   81a60:	9d8fc83a 	sub	r7,r19,r22
   81a64:	85c00415 	stw	r23,16(r16)
   81a68:	84c00515 	stw	r19,20(r16)
   81a6c:	81000015 	stw	r4,0(r16)
   81a70:	9027883a 	mov	r19,r18
   81a74:	81c00215 	stw	r7,8(r16)
   81a78:	902f883a 	mov	r23,r18
   81a7c:	003f3806 	br	81760 <__alt_data_end+0xfffe1760>
   81a80:	800b883a 	mov	r5,r16
   81a84:	a809883a 	mov	r4,r21
   81a88:	008354c0 	call	8354c <_fflush_r>
   81a8c:	103fb926 	beq	r2,zero,81974 <__alt_data_end+0xfffe1974>
   81a90:	003f6506 	br	81828 <__alt_data_end+0xfffe1828>
   81a94:	a809883a 	mov	r4,r21
   81a98:	00829300 	call	82930 <_realloc_r>
   81a9c:	102f883a 	mov	r23,r2
   81aa0:	103fee1e 	bne	r2,zero,81a5c <__alt_data_end+0xfffe1a5c>
   81aa4:	81400417 	ldw	r5,16(r16)
   81aa8:	a809883a 	mov	r4,r21
   81aac:	00836fc0 	call	836fc <_free_r>
   81ab0:	8080030b 	ldhu	r2,12(r16)
   81ab4:	00ffdfc4 	movi	r3,-129
   81ab8:	1884703a 	and	r2,r3,r2
   81abc:	00c00304 	movi	r3,12
   81ac0:	a8c00015 	stw	r3,0(r21)
   81ac4:	003f5906 	br	8182c <__alt_data_end+0xfffe182c>
   81ac8:	94c00044 	addi	r19,r18,1
   81acc:	02000044 	movi	r8,1
   81ad0:	003f6006 	br	81854 <__alt_data_end+0xfffe1854>
   81ad4:	00bfffc4 	movi	r2,-1
   81ad8:	003f0006 	br	816dc <__alt_data_end+0xfffe16dc>
   81adc:	00800304 	movi	r2,12
   81ae0:	a8800015 	stw	r2,0(r21)
   81ae4:	8080030b 	ldhu	r2,12(r16)
   81ae8:	003f5006 	br	8182c <__alt_data_end+0xfffe182c>

00081aec <_fwalk>:
   81aec:	defff704 	addi	sp,sp,-36
   81af0:	dd000415 	stw	r20,16(sp)
   81af4:	dfc00815 	stw	ra,32(sp)
   81af8:	ddc00715 	stw	r23,28(sp)
   81afc:	dd800615 	stw	r22,24(sp)
   81b00:	dd400515 	stw	r21,20(sp)
   81b04:	dcc00315 	stw	r19,12(sp)
   81b08:	dc800215 	stw	r18,8(sp)
   81b0c:	dc400115 	stw	r17,4(sp)
   81b10:	dc000015 	stw	r16,0(sp)
   81b14:	2500b804 	addi	r20,r4,736
   81b18:	a0002326 	beq	r20,zero,81ba8 <_fwalk+0xbc>
   81b1c:	282b883a 	mov	r21,r5
   81b20:	002f883a 	mov	r23,zero
   81b24:	05800044 	movi	r22,1
   81b28:	04ffffc4 	movi	r19,-1
   81b2c:	a4400117 	ldw	r17,4(r20)
   81b30:	a4800217 	ldw	r18,8(r20)
   81b34:	8c7fffc4 	addi	r17,r17,-1
   81b38:	88000d16 	blt	r17,zero,81b70 <_fwalk+0x84>
   81b3c:	94000304 	addi	r16,r18,12
   81b40:	94800384 	addi	r18,r18,14
   81b44:	8080000b 	ldhu	r2,0(r16)
   81b48:	8c7fffc4 	addi	r17,r17,-1
   81b4c:	813ffd04 	addi	r4,r16,-12
   81b50:	b080042e 	bgeu	r22,r2,81b64 <_fwalk+0x78>
   81b54:	9080000f 	ldh	r2,0(r18)
   81b58:	14c00226 	beq	r2,r19,81b64 <_fwalk+0x78>
   81b5c:	a83ee83a 	callr	r21
   81b60:	b8aeb03a 	or	r23,r23,r2
   81b64:	84001a04 	addi	r16,r16,104
   81b68:	94801a04 	addi	r18,r18,104
   81b6c:	8cfff51e 	bne	r17,r19,81b44 <__alt_data_end+0xfffe1b44>
   81b70:	a5000017 	ldw	r20,0(r20)
   81b74:	a03fed1e 	bne	r20,zero,81b2c <__alt_data_end+0xfffe1b2c>
   81b78:	b805883a 	mov	r2,r23
   81b7c:	dfc00817 	ldw	ra,32(sp)
   81b80:	ddc00717 	ldw	r23,28(sp)
   81b84:	dd800617 	ldw	r22,24(sp)
   81b88:	dd400517 	ldw	r21,20(sp)
   81b8c:	dd000417 	ldw	r20,16(sp)
   81b90:	dcc00317 	ldw	r19,12(sp)
   81b94:	dc800217 	ldw	r18,8(sp)
   81b98:	dc400117 	ldw	r17,4(sp)
   81b9c:	dc000017 	ldw	r16,0(sp)
   81ba0:	dec00904 	addi	sp,sp,36
   81ba4:	f800283a 	ret
   81ba8:	002f883a 	mov	r23,zero
   81bac:	003ff206 	br	81b78 <__alt_data_end+0xfffe1b78>

00081bb0 <_fwalk_reent>:
   81bb0:	defff704 	addi	sp,sp,-36
   81bb4:	dd000415 	stw	r20,16(sp)
   81bb8:	dfc00815 	stw	ra,32(sp)
   81bbc:	ddc00715 	stw	r23,28(sp)
   81bc0:	dd800615 	stw	r22,24(sp)
   81bc4:	dd400515 	stw	r21,20(sp)
   81bc8:	dcc00315 	stw	r19,12(sp)
   81bcc:	dc800215 	stw	r18,8(sp)
   81bd0:	dc400115 	stw	r17,4(sp)
   81bd4:	dc000015 	stw	r16,0(sp)
   81bd8:	2500b804 	addi	r20,r4,736
   81bdc:	a0002326 	beq	r20,zero,81c6c <_fwalk_reent+0xbc>
   81be0:	282b883a 	mov	r21,r5
   81be4:	2027883a 	mov	r19,r4
   81be8:	002f883a 	mov	r23,zero
   81bec:	05800044 	movi	r22,1
   81bf0:	04bfffc4 	movi	r18,-1
   81bf4:	a4400117 	ldw	r17,4(r20)
   81bf8:	a4000217 	ldw	r16,8(r20)
   81bfc:	8c7fffc4 	addi	r17,r17,-1
   81c00:	88000c16 	blt	r17,zero,81c34 <_fwalk_reent+0x84>
   81c04:	84000304 	addi	r16,r16,12
   81c08:	8080000b 	ldhu	r2,0(r16)
   81c0c:	8c7fffc4 	addi	r17,r17,-1
   81c10:	817ffd04 	addi	r5,r16,-12
   81c14:	b080052e 	bgeu	r22,r2,81c2c <_fwalk_reent+0x7c>
   81c18:	8080008f 	ldh	r2,2(r16)
   81c1c:	9809883a 	mov	r4,r19
   81c20:	14800226 	beq	r2,r18,81c2c <_fwalk_reent+0x7c>
   81c24:	a83ee83a 	callr	r21
   81c28:	b8aeb03a 	or	r23,r23,r2
   81c2c:	84001a04 	addi	r16,r16,104
   81c30:	8cbff51e 	bne	r17,r18,81c08 <__alt_data_end+0xfffe1c08>
   81c34:	a5000017 	ldw	r20,0(r20)
   81c38:	a03fee1e 	bne	r20,zero,81bf4 <__alt_data_end+0xfffe1bf4>
   81c3c:	b805883a 	mov	r2,r23
   81c40:	dfc00817 	ldw	ra,32(sp)
   81c44:	ddc00717 	ldw	r23,28(sp)
   81c48:	dd800617 	ldw	r22,24(sp)
   81c4c:	dd400517 	ldw	r21,20(sp)
   81c50:	dd000417 	ldw	r20,16(sp)
   81c54:	dcc00317 	ldw	r19,12(sp)
   81c58:	dc800217 	ldw	r18,8(sp)
   81c5c:	dc400117 	ldw	r17,4(sp)
   81c60:	dc000017 	ldw	r16,0(sp)
   81c64:	dec00904 	addi	sp,sp,36
   81c68:	f800283a 	ret
   81c6c:	002f883a 	mov	r23,zero
   81c70:	003ff206 	br	81c3c <__alt_data_end+0xfffe1c3c>

00081c74 <_malloc_r>:
   81c74:	defff504 	addi	sp,sp,-44
   81c78:	dc800315 	stw	r18,12(sp)
   81c7c:	dfc00a15 	stw	ra,40(sp)
   81c80:	df000915 	stw	fp,36(sp)
   81c84:	ddc00815 	stw	r23,32(sp)
   81c88:	dd800715 	stw	r22,28(sp)
   81c8c:	dd400615 	stw	r21,24(sp)
   81c90:	dd000515 	stw	r20,20(sp)
   81c94:	dcc00415 	stw	r19,16(sp)
   81c98:	dc400215 	stw	r17,8(sp)
   81c9c:	dc000115 	stw	r16,4(sp)
   81ca0:	288002c4 	addi	r2,r5,11
   81ca4:	00c00584 	movi	r3,22
   81ca8:	2025883a 	mov	r18,r4
   81cac:	18807f2e 	bgeu	r3,r2,81eac <_malloc_r+0x238>
   81cb0:	047ffe04 	movi	r17,-8
   81cb4:	1462703a 	and	r17,r2,r17
   81cb8:	8800a316 	blt	r17,zero,81f48 <_malloc_r+0x2d4>
   81cbc:	8940a236 	bltu	r17,r5,81f48 <_malloc_r+0x2d4>
   81cc0:	00844880 	call	84488 <__malloc_lock>
   81cc4:	00807dc4 	movi	r2,503
   81cc8:	1441e92e 	bgeu	r2,r17,82470 <_malloc_r+0x7fc>
   81ccc:	8804d27a 	srli	r2,r17,9
   81cd0:	1000a126 	beq	r2,zero,81f58 <_malloc_r+0x2e4>
   81cd4:	00c00104 	movi	r3,4
   81cd8:	18811e36 	bltu	r3,r2,82154 <_malloc_r+0x4e0>
   81cdc:	8804d1ba 	srli	r2,r17,6
   81ce0:	12000e44 	addi	r8,r2,57
   81ce4:	11c00e04 	addi	r7,r2,56
   81ce8:	4209883a 	add	r4,r8,r8
   81cec:	04c00234 	movhi	r19,8
   81cf0:	2109883a 	add	r4,r4,r4
   81cf4:	9cde3704 	addi	r19,r19,30940
   81cf8:	2109883a 	add	r4,r4,r4
   81cfc:	9909883a 	add	r4,r19,r4
   81d00:	24000117 	ldw	r16,4(r4)
   81d04:	213ffe04 	addi	r4,r4,-8
   81d08:	24009726 	beq	r4,r16,81f68 <_malloc_r+0x2f4>
   81d0c:	80800117 	ldw	r2,4(r16)
   81d10:	01bfff04 	movi	r6,-4
   81d14:	014003c4 	movi	r5,15
   81d18:	1184703a 	and	r2,r2,r6
   81d1c:	1447c83a 	sub	r3,r2,r17
   81d20:	28c00716 	blt	r5,r3,81d40 <_malloc_r+0xcc>
   81d24:	1800920e 	bge	r3,zero,81f70 <_malloc_r+0x2fc>
   81d28:	84000317 	ldw	r16,12(r16)
   81d2c:	24008e26 	beq	r4,r16,81f68 <_malloc_r+0x2f4>
   81d30:	80800117 	ldw	r2,4(r16)
   81d34:	1184703a 	and	r2,r2,r6
   81d38:	1447c83a 	sub	r3,r2,r17
   81d3c:	28fff90e 	bge	r5,r3,81d24 <__alt_data_end+0xfffe1d24>
   81d40:	3809883a 	mov	r4,r7
   81d44:	01800234 	movhi	r6,8
   81d48:	9c000417 	ldw	r16,16(r19)
   81d4c:	319e3704 	addi	r6,r6,30940
   81d50:	32000204 	addi	r8,r6,8
   81d54:	82013426 	beq	r16,r8,82228 <_malloc_r+0x5b4>
   81d58:	80c00117 	ldw	r3,4(r16)
   81d5c:	00bfff04 	movi	r2,-4
   81d60:	188e703a 	and	r7,r3,r2
   81d64:	3c45c83a 	sub	r2,r7,r17
   81d68:	00c003c4 	movi	r3,15
   81d6c:	18811f16 	blt	r3,r2,821ec <_malloc_r+0x578>
   81d70:	32000515 	stw	r8,20(r6)
   81d74:	32000415 	stw	r8,16(r6)
   81d78:	10007f0e 	bge	r2,zero,81f78 <_malloc_r+0x304>
   81d7c:	00807fc4 	movi	r2,511
   81d80:	11c0fd36 	bltu	r2,r7,82178 <_malloc_r+0x504>
   81d84:	3806d0fa 	srli	r3,r7,3
   81d88:	01c00044 	movi	r7,1
   81d8c:	30800117 	ldw	r2,4(r6)
   81d90:	19400044 	addi	r5,r3,1
   81d94:	294b883a 	add	r5,r5,r5
   81d98:	1807d0ba 	srai	r3,r3,2
   81d9c:	294b883a 	add	r5,r5,r5
   81da0:	294b883a 	add	r5,r5,r5
   81da4:	298b883a 	add	r5,r5,r6
   81da8:	38c6983a 	sll	r3,r7,r3
   81dac:	29c00017 	ldw	r7,0(r5)
   81db0:	2a7ffe04 	addi	r9,r5,-8
   81db4:	1886b03a 	or	r3,r3,r2
   81db8:	82400315 	stw	r9,12(r16)
   81dbc:	81c00215 	stw	r7,8(r16)
   81dc0:	30c00115 	stw	r3,4(r6)
   81dc4:	2c000015 	stw	r16,0(r5)
   81dc8:	3c000315 	stw	r16,12(r7)
   81dcc:	2005d0ba 	srai	r2,r4,2
   81dd0:	01400044 	movi	r5,1
   81dd4:	288a983a 	sll	r5,r5,r2
   81dd8:	19406f36 	bltu	r3,r5,81f98 <_malloc_r+0x324>
   81ddc:	28c4703a 	and	r2,r5,r3
   81de0:	10000a1e 	bne	r2,zero,81e0c <_malloc_r+0x198>
   81de4:	00bfff04 	movi	r2,-4
   81de8:	294b883a 	add	r5,r5,r5
   81dec:	2088703a 	and	r4,r4,r2
   81df0:	28c4703a 	and	r2,r5,r3
   81df4:	21000104 	addi	r4,r4,4
   81df8:	1000041e 	bne	r2,zero,81e0c <_malloc_r+0x198>
   81dfc:	294b883a 	add	r5,r5,r5
   81e00:	28c4703a 	and	r2,r5,r3
   81e04:	21000104 	addi	r4,r4,4
   81e08:	103ffc26 	beq	r2,zero,81dfc <__alt_data_end+0xfffe1dfc>
   81e0c:	02bfff04 	movi	r10,-4
   81e10:	024003c4 	movi	r9,15
   81e14:	21800044 	addi	r6,r4,1
   81e18:	318d883a 	add	r6,r6,r6
   81e1c:	318d883a 	add	r6,r6,r6
   81e20:	318d883a 	add	r6,r6,r6
   81e24:	998d883a 	add	r6,r19,r6
   81e28:	333ffe04 	addi	r12,r6,-8
   81e2c:	2017883a 	mov	r11,r4
   81e30:	31800104 	addi	r6,r6,4
   81e34:	34000017 	ldw	r16,0(r6)
   81e38:	31fffd04 	addi	r7,r6,-12
   81e3c:	81c0041e 	bne	r16,r7,81e50 <_malloc_r+0x1dc>
   81e40:	0000fb06 	br	82230 <_malloc_r+0x5bc>
   81e44:	1801030e 	bge	r3,zero,82254 <_malloc_r+0x5e0>
   81e48:	84000317 	ldw	r16,12(r16)
   81e4c:	81c0f826 	beq	r16,r7,82230 <_malloc_r+0x5bc>
   81e50:	80800117 	ldw	r2,4(r16)
   81e54:	1284703a 	and	r2,r2,r10
   81e58:	1447c83a 	sub	r3,r2,r17
   81e5c:	48fff90e 	bge	r9,r3,81e44 <__alt_data_end+0xfffe1e44>
   81e60:	80800317 	ldw	r2,12(r16)
   81e64:	81000217 	ldw	r4,8(r16)
   81e68:	89400054 	ori	r5,r17,1
   81e6c:	81400115 	stw	r5,4(r16)
   81e70:	20800315 	stw	r2,12(r4)
   81e74:	11000215 	stw	r4,8(r2)
   81e78:	8463883a 	add	r17,r16,r17
   81e7c:	9c400515 	stw	r17,20(r19)
   81e80:	9c400415 	stw	r17,16(r19)
   81e84:	18800054 	ori	r2,r3,1
   81e88:	88800115 	stw	r2,4(r17)
   81e8c:	8a000315 	stw	r8,12(r17)
   81e90:	8a000215 	stw	r8,8(r17)
   81e94:	88e3883a 	add	r17,r17,r3
   81e98:	88c00015 	stw	r3,0(r17)
   81e9c:	9009883a 	mov	r4,r18
   81ea0:	00844ac0 	call	844ac <__malloc_unlock>
   81ea4:	80800204 	addi	r2,r16,8
   81ea8:	00001b06 	br	81f18 <_malloc_r+0x2a4>
   81eac:	04400404 	movi	r17,16
   81eb0:	89402536 	bltu	r17,r5,81f48 <_malloc_r+0x2d4>
   81eb4:	00844880 	call	84488 <__malloc_lock>
   81eb8:	00800184 	movi	r2,6
   81ebc:	01000084 	movi	r4,2
   81ec0:	04c00234 	movhi	r19,8
   81ec4:	1085883a 	add	r2,r2,r2
   81ec8:	9cde3704 	addi	r19,r19,30940
   81ecc:	1085883a 	add	r2,r2,r2
   81ed0:	9885883a 	add	r2,r19,r2
   81ed4:	14000117 	ldw	r16,4(r2)
   81ed8:	10fffe04 	addi	r3,r2,-8
   81edc:	80c0d926 	beq	r16,r3,82244 <_malloc_r+0x5d0>
   81ee0:	80c00117 	ldw	r3,4(r16)
   81ee4:	81000317 	ldw	r4,12(r16)
   81ee8:	00bfff04 	movi	r2,-4
   81eec:	1884703a 	and	r2,r3,r2
   81ef0:	81400217 	ldw	r5,8(r16)
   81ef4:	8085883a 	add	r2,r16,r2
   81ef8:	10c00117 	ldw	r3,4(r2)
   81efc:	29000315 	stw	r4,12(r5)
   81f00:	21400215 	stw	r5,8(r4)
   81f04:	18c00054 	ori	r3,r3,1
   81f08:	10c00115 	stw	r3,4(r2)
   81f0c:	9009883a 	mov	r4,r18
   81f10:	00844ac0 	call	844ac <__malloc_unlock>
   81f14:	80800204 	addi	r2,r16,8
   81f18:	dfc00a17 	ldw	ra,40(sp)
   81f1c:	df000917 	ldw	fp,36(sp)
   81f20:	ddc00817 	ldw	r23,32(sp)
   81f24:	dd800717 	ldw	r22,28(sp)
   81f28:	dd400617 	ldw	r21,24(sp)
   81f2c:	dd000517 	ldw	r20,20(sp)
   81f30:	dcc00417 	ldw	r19,16(sp)
   81f34:	dc800317 	ldw	r18,12(sp)
   81f38:	dc400217 	ldw	r17,8(sp)
   81f3c:	dc000117 	ldw	r16,4(sp)
   81f40:	dec00b04 	addi	sp,sp,44
   81f44:	f800283a 	ret
   81f48:	00800304 	movi	r2,12
   81f4c:	90800015 	stw	r2,0(r18)
   81f50:	0005883a 	mov	r2,zero
   81f54:	003ff006 	br	81f18 <__alt_data_end+0xfffe1f18>
   81f58:	01002004 	movi	r4,128
   81f5c:	02001004 	movi	r8,64
   81f60:	01c00fc4 	movi	r7,63
   81f64:	003f6106 	br	81cec <__alt_data_end+0xfffe1cec>
   81f68:	4009883a 	mov	r4,r8
   81f6c:	003f7506 	br	81d44 <__alt_data_end+0xfffe1d44>
   81f70:	81000317 	ldw	r4,12(r16)
   81f74:	003fde06 	br	81ef0 <__alt_data_end+0xfffe1ef0>
   81f78:	81c5883a 	add	r2,r16,r7
   81f7c:	11400117 	ldw	r5,4(r2)
   81f80:	9009883a 	mov	r4,r18
   81f84:	29400054 	ori	r5,r5,1
   81f88:	11400115 	stw	r5,4(r2)
   81f8c:	00844ac0 	call	844ac <__malloc_unlock>
   81f90:	80800204 	addi	r2,r16,8
   81f94:	003fe006 	br	81f18 <__alt_data_end+0xfffe1f18>
   81f98:	9c000217 	ldw	r16,8(r19)
   81f9c:	00bfff04 	movi	r2,-4
   81fa0:	85800117 	ldw	r22,4(r16)
   81fa4:	b0ac703a 	and	r22,r22,r2
   81fa8:	b4400336 	bltu	r22,r17,81fb8 <_malloc_r+0x344>
   81fac:	b445c83a 	sub	r2,r22,r17
   81fb0:	00c003c4 	movi	r3,15
   81fb4:	18805d16 	blt	r3,r2,8212c <_malloc_r+0x4b8>
   81fb8:	05c00274 	movhi	r23,9
   81fbc:	00800274 	movhi	r2,9
   81fc0:	10ac8e04 	addi	r2,r2,-19912
   81fc4:	bde3bd04 	addi	r23,r23,-28940
   81fc8:	15400017 	ldw	r21,0(r2)
   81fcc:	b8c00017 	ldw	r3,0(r23)
   81fd0:	00bfffc4 	movi	r2,-1
   81fd4:	858d883a 	add	r6,r16,r22
   81fd8:	8d6b883a 	add	r21,r17,r21
   81fdc:	1880ea26 	beq	r3,r2,82388 <_malloc_r+0x714>
   81fe0:	ad4403c4 	addi	r21,r21,4111
   81fe4:	00bc0004 	movi	r2,-4096
   81fe8:	a8aa703a 	and	r21,r21,r2
   81fec:	a80b883a 	mov	r5,r21
   81ff0:	9009883a 	mov	r4,r18
   81ff4:	d9800015 	stw	r6,0(sp)
   81ff8:	0082e940 	call	82e94 <_sbrk_r>
   81ffc:	1029883a 	mov	r20,r2
   82000:	00bfffc4 	movi	r2,-1
   82004:	d9800017 	ldw	r6,0(sp)
   82008:	a080e826 	beq	r20,r2,823ac <_malloc_r+0x738>
   8200c:	a180a636 	bltu	r20,r6,822a8 <_malloc_r+0x634>
   82010:	07000274 	movhi	fp,9
   82014:	e72c9704 	addi	fp,fp,-19876
   82018:	e0800017 	ldw	r2,0(fp)
   8201c:	a887883a 	add	r3,r21,r2
   82020:	e0c00015 	stw	r3,0(fp)
   82024:	3500e626 	beq	r6,r20,823c0 <_malloc_r+0x74c>
   82028:	b9000017 	ldw	r4,0(r23)
   8202c:	00bfffc4 	movi	r2,-1
   82030:	2080ee26 	beq	r4,r2,823ec <_malloc_r+0x778>
   82034:	a185c83a 	sub	r2,r20,r6
   82038:	10c5883a 	add	r2,r2,r3
   8203c:	e0800015 	stw	r2,0(fp)
   82040:	a0c001cc 	andi	r3,r20,7
   82044:	1800bc26 	beq	r3,zero,82338 <_malloc_r+0x6c4>
   82048:	a0e9c83a 	sub	r20,r20,r3
   8204c:	00840204 	movi	r2,4104
   82050:	a5000204 	addi	r20,r20,8
   82054:	10c7c83a 	sub	r3,r2,r3
   82058:	a545883a 	add	r2,r20,r21
   8205c:	1083ffcc 	andi	r2,r2,4095
   82060:	18abc83a 	sub	r21,r3,r2
   82064:	a80b883a 	mov	r5,r21
   82068:	9009883a 	mov	r4,r18
   8206c:	0082e940 	call	82e94 <_sbrk_r>
   82070:	00ffffc4 	movi	r3,-1
   82074:	10c0e126 	beq	r2,r3,823fc <_malloc_r+0x788>
   82078:	1505c83a 	sub	r2,r2,r20
   8207c:	1545883a 	add	r2,r2,r21
   82080:	10800054 	ori	r2,r2,1
   82084:	e0c00017 	ldw	r3,0(fp)
   82088:	9d000215 	stw	r20,8(r19)
   8208c:	a0800115 	stw	r2,4(r20)
   82090:	a8c7883a 	add	r3,r21,r3
   82094:	e0c00015 	stw	r3,0(fp)
   82098:	84c00e26 	beq	r16,r19,820d4 <_malloc_r+0x460>
   8209c:	018003c4 	movi	r6,15
   820a0:	3580a72e 	bgeu	r6,r22,82340 <_malloc_r+0x6cc>
   820a4:	81400117 	ldw	r5,4(r16)
   820a8:	013ffe04 	movi	r4,-8
   820ac:	b0bffd04 	addi	r2,r22,-12
   820b0:	1104703a 	and	r2,r2,r4
   820b4:	2900004c 	andi	r4,r5,1
   820b8:	2088b03a 	or	r4,r4,r2
   820bc:	81000115 	stw	r4,4(r16)
   820c0:	01400144 	movi	r5,5
   820c4:	8089883a 	add	r4,r16,r2
   820c8:	21400115 	stw	r5,4(r4)
   820cc:	21400215 	stw	r5,8(r4)
   820d0:	3080cd36 	bltu	r6,r2,82408 <_malloc_r+0x794>
   820d4:	00800274 	movhi	r2,9
   820d8:	10ac8d04 	addi	r2,r2,-19916
   820dc:	11000017 	ldw	r4,0(r2)
   820e0:	20c0012e 	bgeu	r4,r3,820e8 <_malloc_r+0x474>
   820e4:	10c00015 	stw	r3,0(r2)
   820e8:	00800274 	movhi	r2,9
   820ec:	10ac8c04 	addi	r2,r2,-19920
   820f0:	11000017 	ldw	r4,0(r2)
   820f4:	9c000217 	ldw	r16,8(r19)
   820f8:	20c0012e 	bgeu	r4,r3,82100 <_malloc_r+0x48c>
   820fc:	10c00015 	stw	r3,0(r2)
   82100:	80c00117 	ldw	r3,4(r16)
   82104:	00bfff04 	movi	r2,-4
   82108:	1886703a 	and	r3,r3,r2
   8210c:	1c45c83a 	sub	r2,r3,r17
   82110:	1c400236 	bltu	r3,r17,8211c <_malloc_r+0x4a8>
   82114:	00c003c4 	movi	r3,15
   82118:	18800416 	blt	r3,r2,8212c <_malloc_r+0x4b8>
   8211c:	9009883a 	mov	r4,r18
   82120:	00844ac0 	call	844ac <__malloc_unlock>
   82124:	0005883a 	mov	r2,zero
   82128:	003f7b06 	br	81f18 <__alt_data_end+0xfffe1f18>
   8212c:	88c00054 	ori	r3,r17,1
   82130:	80c00115 	stw	r3,4(r16)
   82134:	8463883a 	add	r17,r16,r17
   82138:	10800054 	ori	r2,r2,1
   8213c:	9c400215 	stw	r17,8(r19)
   82140:	88800115 	stw	r2,4(r17)
   82144:	9009883a 	mov	r4,r18
   82148:	00844ac0 	call	844ac <__malloc_unlock>
   8214c:	80800204 	addi	r2,r16,8
   82150:	003f7106 	br	81f18 <__alt_data_end+0xfffe1f18>
   82154:	00c00504 	movi	r3,20
   82158:	18804a2e 	bgeu	r3,r2,82284 <_malloc_r+0x610>
   8215c:	00c01504 	movi	r3,84
   82160:	18806e36 	bltu	r3,r2,8231c <_malloc_r+0x6a8>
   82164:	8804d33a 	srli	r2,r17,12
   82168:	12001bc4 	addi	r8,r2,111
   8216c:	11c01b84 	addi	r7,r2,110
   82170:	4209883a 	add	r4,r8,r8
   82174:	003edd06 	br	81cec <__alt_data_end+0xfffe1cec>
   82178:	3804d27a 	srli	r2,r7,9
   8217c:	00c00104 	movi	r3,4
   82180:	1880442e 	bgeu	r3,r2,82294 <_malloc_r+0x620>
   82184:	00c00504 	movi	r3,20
   82188:	18808136 	bltu	r3,r2,82390 <_malloc_r+0x71c>
   8218c:	11401704 	addi	r5,r2,92
   82190:	10c016c4 	addi	r3,r2,91
   82194:	294b883a 	add	r5,r5,r5
   82198:	294b883a 	add	r5,r5,r5
   8219c:	294b883a 	add	r5,r5,r5
   821a0:	994b883a 	add	r5,r19,r5
   821a4:	28800017 	ldw	r2,0(r5)
   821a8:	01800234 	movhi	r6,8
   821ac:	297ffe04 	addi	r5,r5,-8
   821b0:	319e3704 	addi	r6,r6,30940
   821b4:	28806526 	beq	r5,r2,8234c <_malloc_r+0x6d8>
   821b8:	01bfff04 	movi	r6,-4
   821bc:	10c00117 	ldw	r3,4(r2)
   821c0:	1986703a 	and	r3,r3,r6
   821c4:	38c0022e 	bgeu	r7,r3,821d0 <_malloc_r+0x55c>
   821c8:	10800217 	ldw	r2,8(r2)
   821cc:	28bffb1e 	bne	r5,r2,821bc <__alt_data_end+0xfffe21bc>
   821d0:	11400317 	ldw	r5,12(r2)
   821d4:	98c00117 	ldw	r3,4(r19)
   821d8:	81400315 	stw	r5,12(r16)
   821dc:	80800215 	stw	r2,8(r16)
   821e0:	2c000215 	stw	r16,8(r5)
   821e4:	14000315 	stw	r16,12(r2)
   821e8:	003ef806 	br	81dcc <__alt_data_end+0xfffe1dcc>
   821ec:	88c00054 	ori	r3,r17,1
   821f0:	80c00115 	stw	r3,4(r16)
   821f4:	8463883a 	add	r17,r16,r17
   821f8:	34400515 	stw	r17,20(r6)
   821fc:	34400415 	stw	r17,16(r6)
   82200:	10c00054 	ori	r3,r2,1
   82204:	8a000315 	stw	r8,12(r17)
   82208:	8a000215 	stw	r8,8(r17)
   8220c:	88c00115 	stw	r3,4(r17)
   82210:	88a3883a 	add	r17,r17,r2
   82214:	88800015 	stw	r2,0(r17)
   82218:	9009883a 	mov	r4,r18
   8221c:	00844ac0 	call	844ac <__malloc_unlock>
   82220:	80800204 	addi	r2,r16,8
   82224:	003f3c06 	br	81f18 <__alt_data_end+0xfffe1f18>
   82228:	30c00117 	ldw	r3,4(r6)
   8222c:	003ee706 	br	81dcc <__alt_data_end+0xfffe1dcc>
   82230:	5ac00044 	addi	r11,r11,1
   82234:	588000cc 	andi	r2,r11,3
   82238:	31800204 	addi	r6,r6,8
   8223c:	103efd1e 	bne	r2,zero,81e34 <__alt_data_end+0xfffe1e34>
   82240:	00002406 	br	822d4 <_malloc_r+0x660>
   82244:	14000317 	ldw	r16,12(r2)
   82248:	143f251e 	bne	r2,r16,81ee0 <__alt_data_end+0xfffe1ee0>
   8224c:	21000084 	addi	r4,r4,2
   82250:	003ebc06 	br	81d44 <__alt_data_end+0xfffe1d44>
   82254:	8085883a 	add	r2,r16,r2
   82258:	10c00117 	ldw	r3,4(r2)
   8225c:	81000317 	ldw	r4,12(r16)
   82260:	81400217 	ldw	r5,8(r16)
   82264:	18c00054 	ori	r3,r3,1
   82268:	10c00115 	stw	r3,4(r2)
   8226c:	29000315 	stw	r4,12(r5)
   82270:	21400215 	stw	r5,8(r4)
   82274:	9009883a 	mov	r4,r18
   82278:	00844ac0 	call	844ac <__malloc_unlock>
   8227c:	80800204 	addi	r2,r16,8
   82280:	003f2506 	br	81f18 <__alt_data_end+0xfffe1f18>
   82284:	12001704 	addi	r8,r2,92
   82288:	11c016c4 	addi	r7,r2,91
   8228c:	4209883a 	add	r4,r8,r8
   82290:	003e9606 	br	81cec <__alt_data_end+0xfffe1cec>
   82294:	3804d1ba 	srli	r2,r7,6
   82298:	11400e44 	addi	r5,r2,57
   8229c:	10c00e04 	addi	r3,r2,56
   822a0:	294b883a 	add	r5,r5,r5
   822a4:	003fbc06 	br	82198 <__alt_data_end+0xfffe2198>
   822a8:	84ff5926 	beq	r16,r19,82010 <__alt_data_end+0xfffe2010>
   822ac:	00800234 	movhi	r2,8
   822b0:	109e3704 	addi	r2,r2,30940
   822b4:	14000217 	ldw	r16,8(r2)
   822b8:	00bfff04 	movi	r2,-4
   822bc:	80c00117 	ldw	r3,4(r16)
   822c0:	1886703a 	and	r3,r3,r2
   822c4:	003f9106 	br	8210c <__alt_data_end+0xfffe210c>
   822c8:	60800217 	ldw	r2,8(r12)
   822cc:	213fffc4 	addi	r4,r4,-1
   822d0:	1300651e 	bne	r2,r12,82468 <_malloc_r+0x7f4>
   822d4:	208000cc 	andi	r2,r4,3
   822d8:	633ffe04 	addi	r12,r12,-8
   822dc:	103ffa1e 	bne	r2,zero,822c8 <__alt_data_end+0xfffe22c8>
   822e0:	98800117 	ldw	r2,4(r19)
   822e4:	0146303a 	nor	r3,zero,r5
   822e8:	1884703a 	and	r2,r3,r2
   822ec:	98800115 	stw	r2,4(r19)
   822f0:	294b883a 	add	r5,r5,r5
   822f4:	117f2836 	bltu	r2,r5,81f98 <__alt_data_end+0xfffe1f98>
   822f8:	283f2726 	beq	r5,zero,81f98 <__alt_data_end+0xfffe1f98>
   822fc:	2886703a 	and	r3,r5,r2
   82300:	5809883a 	mov	r4,r11
   82304:	183ec31e 	bne	r3,zero,81e14 <__alt_data_end+0xfffe1e14>
   82308:	294b883a 	add	r5,r5,r5
   8230c:	2886703a 	and	r3,r5,r2
   82310:	21000104 	addi	r4,r4,4
   82314:	183ffc26 	beq	r3,zero,82308 <__alt_data_end+0xfffe2308>
   82318:	003ebe06 	br	81e14 <__alt_data_end+0xfffe1e14>
   8231c:	00c05504 	movi	r3,340
   82320:	18801236 	bltu	r3,r2,8236c <_malloc_r+0x6f8>
   82324:	8804d3fa 	srli	r2,r17,15
   82328:	12001e04 	addi	r8,r2,120
   8232c:	11c01dc4 	addi	r7,r2,119
   82330:	4209883a 	add	r4,r8,r8
   82334:	003e6d06 	br	81cec <__alt_data_end+0xfffe1cec>
   82338:	00c40004 	movi	r3,4096
   8233c:	003f4606 	br	82058 <__alt_data_end+0xfffe2058>
   82340:	00800044 	movi	r2,1
   82344:	a0800115 	stw	r2,4(r20)
   82348:	003f7406 	br	8211c <__alt_data_end+0xfffe211c>
   8234c:	1805d0ba 	srai	r2,r3,2
   82350:	01c00044 	movi	r7,1
   82354:	30c00117 	ldw	r3,4(r6)
   82358:	388e983a 	sll	r7,r7,r2
   8235c:	2805883a 	mov	r2,r5
   82360:	38c6b03a 	or	r3,r7,r3
   82364:	30c00115 	stw	r3,4(r6)
   82368:	003f9b06 	br	821d8 <__alt_data_end+0xfffe21d8>
   8236c:	00c15504 	movi	r3,1364
   82370:	18801a36 	bltu	r3,r2,823dc <_malloc_r+0x768>
   82374:	8804d4ba 	srli	r2,r17,18
   82378:	12001f44 	addi	r8,r2,125
   8237c:	11c01f04 	addi	r7,r2,124
   82380:	4209883a 	add	r4,r8,r8
   82384:	003e5906 	br	81cec <__alt_data_end+0xfffe1cec>
   82388:	ad400404 	addi	r21,r21,16
   8238c:	003f1706 	br	81fec <__alt_data_end+0xfffe1fec>
   82390:	00c01504 	movi	r3,84
   82394:	18802336 	bltu	r3,r2,82424 <_malloc_r+0x7b0>
   82398:	3804d33a 	srli	r2,r7,12
   8239c:	11401bc4 	addi	r5,r2,111
   823a0:	10c01b84 	addi	r3,r2,110
   823a4:	294b883a 	add	r5,r5,r5
   823a8:	003f7b06 	br	82198 <__alt_data_end+0xfffe2198>
   823ac:	9c000217 	ldw	r16,8(r19)
   823b0:	00bfff04 	movi	r2,-4
   823b4:	80c00117 	ldw	r3,4(r16)
   823b8:	1886703a 	and	r3,r3,r2
   823bc:	003f5306 	br	8210c <__alt_data_end+0xfffe210c>
   823c0:	3083ffcc 	andi	r2,r6,4095
   823c4:	103f181e 	bne	r2,zero,82028 <__alt_data_end+0xfffe2028>
   823c8:	99000217 	ldw	r4,8(r19)
   823cc:	b545883a 	add	r2,r22,r21
   823d0:	10800054 	ori	r2,r2,1
   823d4:	20800115 	stw	r2,4(r4)
   823d8:	003f3e06 	br	820d4 <__alt_data_end+0xfffe20d4>
   823dc:	01003f84 	movi	r4,254
   823e0:	02001fc4 	movi	r8,127
   823e4:	01c01f84 	movi	r7,126
   823e8:	003e4006 	br	81cec <__alt_data_end+0xfffe1cec>
   823ec:	00800274 	movhi	r2,9
   823f0:	10a3bd04 	addi	r2,r2,-28940
   823f4:	15000015 	stw	r20,0(r2)
   823f8:	003f1106 	br	82040 <__alt_data_end+0xfffe2040>
   823fc:	00800044 	movi	r2,1
   82400:	002b883a 	mov	r21,zero
   82404:	003f1f06 	br	82084 <__alt_data_end+0xfffe2084>
   82408:	81400204 	addi	r5,r16,8
   8240c:	9009883a 	mov	r4,r18
   82410:	00836fc0 	call	836fc <_free_r>
   82414:	00800274 	movhi	r2,9
   82418:	10ac9704 	addi	r2,r2,-19876
   8241c:	10c00017 	ldw	r3,0(r2)
   82420:	003f2c06 	br	820d4 <__alt_data_end+0xfffe20d4>
   82424:	00c05504 	movi	r3,340
   82428:	18800536 	bltu	r3,r2,82440 <_malloc_r+0x7cc>
   8242c:	3804d3fa 	srli	r2,r7,15
   82430:	11401e04 	addi	r5,r2,120
   82434:	10c01dc4 	addi	r3,r2,119
   82438:	294b883a 	add	r5,r5,r5
   8243c:	003f5606 	br	82198 <__alt_data_end+0xfffe2198>
   82440:	00c15504 	movi	r3,1364
   82444:	18800536 	bltu	r3,r2,8245c <_malloc_r+0x7e8>
   82448:	3804d4ba 	srli	r2,r7,18
   8244c:	11401f44 	addi	r5,r2,125
   82450:	10c01f04 	addi	r3,r2,124
   82454:	294b883a 	add	r5,r5,r5
   82458:	003f4f06 	br	82198 <__alt_data_end+0xfffe2198>
   8245c:	01403f84 	movi	r5,254
   82460:	00c01f84 	movi	r3,126
   82464:	003f4c06 	br	82198 <__alt_data_end+0xfffe2198>
   82468:	98800117 	ldw	r2,4(r19)
   8246c:	003fa006 	br	822f0 <__alt_data_end+0xfffe22f0>
   82470:	8808d0fa 	srli	r4,r17,3
   82474:	20800044 	addi	r2,r4,1
   82478:	1085883a 	add	r2,r2,r2
   8247c:	003e9006 	br	81ec0 <__alt_data_end+0xfffe1ec0>

00082480 <memchr>:
   82480:	208000cc 	andi	r2,r4,3
   82484:	280f883a 	mov	r7,r5
   82488:	10003426 	beq	r2,zero,8255c <memchr+0xdc>
   8248c:	30bfffc4 	addi	r2,r6,-1
   82490:	30001a26 	beq	r6,zero,824fc <memchr+0x7c>
   82494:	20c00003 	ldbu	r3,0(r4)
   82498:	29803fcc 	andi	r6,r5,255
   8249c:	30c0051e 	bne	r6,r3,824b4 <memchr+0x34>
   824a0:	00001806 	br	82504 <memchr+0x84>
   824a4:	10001526 	beq	r2,zero,824fc <memchr+0x7c>
   824a8:	20c00003 	ldbu	r3,0(r4)
   824ac:	10bfffc4 	addi	r2,r2,-1
   824b0:	30c01426 	beq	r6,r3,82504 <memchr+0x84>
   824b4:	21000044 	addi	r4,r4,1
   824b8:	20c000cc 	andi	r3,r4,3
   824bc:	183ff91e 	bne	r3,zero,824a4 <__alt_data_end+0xfffe24a4>
   824c0:	020000c4 	movi	r8,3
   824c4:	40801136 	bltu	r8,r2,8250c <memchr+0x8c>
   824c8:	10000c26 	beq	r2,zero,824fc <memchr+0x7c>
   824cc:	20c00003 	ldbu	r3,0(r4)
   824d0:	29403fcc 	andi	r5,r5,255
   824d4:	28c00b26 	beq	r5,r3,82504 <memchr+0x84>
   824d8:	20c00044 	addi	r3,r4,1
   824dc:	39803fcc 	andi	r6,r7,255
   824e0:	2089883a 	add	r4,r4,r2
   824e4:	00000306 	br	824f4 <memchr+0x74>
   824e8:	18c00044 	addi	r3,r3,1
   824ec:	197fffc3 	ldbu	r5,-1(r3)
   824f0:	31400526 	beq	r6,r5,82508 <memchr+0x88>
   824f4:	1805883a 	mov	r2,r3
   824f8:	20fffb1e 	bne	r4,r3,824e8 <__alt_data_end+0xfffe24e8>
   824fc:	0005883a 	mov	r2,zero
   82500:	f800283a 	ret
   82504:	2005883a 	mov	r2,r4
   82508:	f800283a 	ret
   8250c:	28c03fcc 	andi	r3,r5,255
   82510:	1812923a 	slli	r9,r3,8
   82514:	02ffbff4 	movhi	r11,65279
   82518:	02a02074 	movhi	r10,32897
   8251c:	48d2b03a 	or	r9,r9,r3
   82520:	4806943a 	slli	r3,r9,16
   82524:	5affbfc4 	addi	r11,r11,-257
   82528:	52a02004 	addi	r10,r10,-32640
   8252c:	48d2b03a 	or	r9,r9,r3
   82530:	20c00017 	ldw	r3,0(r4)
   82534:	48c6f03a 	xor	r3,r9,r3
   82538:	1acd883a 	add	r6,r3,r11
   8253c:	00c6303a 	nor	r3,zero,r3
   82540:	30c6703a 	and	r3,r6,r3
   82544:	1a86703a 	and	r3,r3,r10
   82548:	183fe01e 	bne	r3,zero,824cc <__alt_data_end+0xfffe24cc>
   8254c:	10bfff04 	addi	r2,r2,-4
   82550:	21000104 	addi	r4,r4,4
   82554:	40bff636 	bltu	r8,r2,82530 <__alt_data_end+0xfffe2530>
   82558:	003fdb06 	br	824c8 <__alt_data_end+0xfffe24c8>
   8255c:	3005883a 	mov	r2,r6
   82560:	003fd706 	br	824c0 <__alt_data_end+0xfffe24c0>

00082564 <memcpy>:
   82564:	defffd04 	addi	sp,sp,-12
   82568:	dfc00215 	stw	ra,8(sp)
   8256c:	dc400115 	stw	r17,4(sp)
   82570:	dc000015 	stw	r16,0(sp)
   82574:	00c003c4 	movi	r3,15
   82578:	2005883a 	mov	r2,r4
   8257c:	1980452e 	bgeu	r3,r6,82694 <memcpy+0x130>
   82580:	2906b03a 	or	r3,r5,r4
   82584:	18c000cc 	andi	r3,r3,3
   82588:	1800441e 	bne	r3,zero,8269c <memcpy+0x138>
   8258c:	347ffc04 	addi	r17,r6,-16
   82590:	8822d13a 	srli	r17,r17,4
   82594:	28c00104 	addi	r3,r5,4
   82598:	23400104 	addi	r13,r4,4
   8259c:	8820913a 	slli	r16,r17,4
   825a0:	2b000204 	addi	r12,r5,8
   825a4:	22c00204 	addi	r11,r4,8
   825a8:	84000504 	addi	r16,r16,20
   825ac:	2a800304 	addi	r10,r5,12
   825b0:	22400304 	addi	r9,r4,12
   825b4:	2c21883a 	add	r16,r5,r16
   825b8:	2811883a 	mov	r8,r5
   825bc:	200f883a 	mov	r7,r4
   825c0:	41000017 	ldw	r4,0(r8)
   825c4:	1fc00017 	ldw	ra,0(r3)
   825c8:	63c00017 	ldw	r15,0(r12)
   825cc:	39000015 	stw	r4,0(r7)
   825d0:	53800017 	ldw	r14,0(r10)
   825d4:	6fc00015 	stw	ra,0(r13)
   825d8:	5bc00015 	stw	r15,0(r11)
   825dc:	4b800015 	stw	r14,0(r9)
   825e0:	18c00404 	addi	r3,r3,16
   825e4:	39c00404 	addi	r7,r7,16
   825e8:	42000404 	addi	r8,r8,16
   825ec:	6b400404 	addi	r13,r13,16
   825f0:	63000404 	addi	r12,r12,16
   825f4:	5ac00404 	addi	r11,r11,16
   825f8:	52800404 	addi	r10,r10,16
   825fc:	4a400404 	addi	r9,r9,16
   82600:	1c3fef1e 	bne	r3,r16,825c0 <__alt_data_end+0xfffe25c0>
   82604:	89c00044 	addi	r7,r17,1
   82608:	380e913a 	slli	r7,r7,4
   8260c:	310003cc 	andi	r4,r6,15
   82610:	02c000c4 	movi	r11,3
   82614:	11c7883a 	add	r3,r2,r7
   82618:	29cb883a 	add	r5,r5,r7
   8261c:	5900212e 	bgeu	r11,r4,826a4 <memcpy+0x140>
   82620:	1813883a 	mov	r9,r3
   82624:	2811883a 	mov	r8,r5
   82628:	200f883a 	mov	r7,r4
   8262c:	42800017 	ldw	r10,0(r8)
   82630:	4a400104 	addi	r9,r9,4
   82634:	39ffff04 	addi	r7,r7,-4
   82638:	4abfff15 	stw	r10,-4(r9)
   8263c:	42000104 	addi	r8,r8,4
   82640:	59fffa36 	bltu	r11,r7,8262c <__alt_data_end+0xfffe262c>
   82644:	213fff04 	addi	r4,r4,-4
   82648:	2008d0ba 	srli	r4,r4,2
   8264c:	318000cc 	andi	r6,r6,3
   82650:	21000044 	addi	r4,r4,1
   82654:	2109883a 	add	r4,r4,r4
   82658:	2109883a 	add	r4,r4,r4
   8265c:	1907883a 	add	r3,r3,r4
   82660:	290b883a 	add	r5,r5,r4
   82664:	30000626 	beq	r6,zero,82680 <memcpy+0x11c>
   82668:	198d883a 	add	r6,r3,r6
   8266c:	29c00003 	ldbu	r7,0(r5)
   82670:	18c00044 	addi	r3,r3,1
   82674:	29400044 	addi	r5,r5,1
   82678:	19ffffc5 	stb	r7,-1(r3)
   8267c:	19bffb1e 	bne	r3,r6,8266c <__alt_data_end+0xfffe266c>
   82680:	dfc00217 	ldw	ra,8(sp)
   82684:	dc400117 	ldw	r17,4(sp)
   82688:	dc000017 	ldw	r16,0(sp)
   8268c:	dec00304 	addi	sp,sp,12
   82690:	f800283a 	ret
   82694:	2007883a 	mov	r3,r4
   82698:	003ff206 	br	82664 <__alt_data_end+0xfffe2664>
   8269c:	2007883a 	mov	r3,r4
   826a0:	003ff106 	br	82668 <__alt_data_end+0xfffe2668>
   826a4:	200d883a 	mov	r6,r4
   826a8:	003fee06 	br	82664 <__alt_data_end+0xfffe2664>

000826ac <memmove>:
   826ac:	2005883a 	mov	r2,r4
   826b0:	29000b2e 	bgeu	r5,r4,826e0 <memmove+0x34>
   826b4:	298f883a 	add	r7,r5,r6
   826b8:	21c0092e 	bgeu	r4,r7,826e0 <memmove+0x34>
   826bc:	2187883a 	add	r3,r4,r6
   826c0:	198bc83a 	sub	r5,r3,r6
   826c4:	30004826 	beq	r6,zero,827e8 <memmove+0x13c>
   826c8:	39ffffc4 	addi	r7,r7,-1
   826cc:	39000003 	ldbu	r4,0(r7)
   826d0:	18ffffc4 	addi	r3,r3,-1
   826d4:	19000005 	stb	r4,0(r3)
   826d8:	28fffb1e 	bne	r5,r3,826c8 <__alt_data_end+0xfffe26c8>
   826dc:	f800283a 	ret
   826e0:	00c003c4 	movi	r3,15
   826e4:	1980412e 	bgeu	r3,r6,827ec <memmove+0x140>
   826e8:	2886b03a 	or	r3,r5,r2
   826ec:	18c000cc 	andi	r3,r3,3
   826f0:	1800401e 	bne	r3,zero,827f4 <memmove+0x148>
   826f4:	33fffc04 	addi	r15,r6,-16
   826f8:	781ed13a 	srli	r15,r15,4
   826fc:	28c00104 	addi	r3,r5,4
   82700:	13400104 	addi	r13,r2,4
   82704:	781c913a 	slli	r14,r15,4
   82708:	2b000204 	addi	r12,r5,8
   8270c:	12c00204 	addi	r11,r2,8
   82710:	73800504 	addi	r14,r14,20
   82714:	2a800304 	addi	r10,r5,12
   82718:	12400304 	addi	r9,r2,12
   8271c:	2b9d883a 	add	r14,r5,r14
   82720:	2811883a 	mov	r8,r5
   82724:	100f883a 	mov	r7,r2
   82728:	41000017 	ldw	r4,0(r8)
   8272c:	39c00404 	addi	r7,r7,16
   82730:	18c00404 	addi	r3,r3,16
   82734:	393ffc15 	stw	r4,-16(r7)
   82738:	193ffc17 	ldw	r4,-16(r3)
   8273c:	6b400404 	addi	r13,r13,16
   82740:	5ac00404 	addi	r11,r11,16
   82744:	693ffc15 	stw	r4,-16(r13)
   82748:	61000017 	ldw	r4,0(r12)
   8274c:	4a400404 	addi	r9,r9,16
   82750:	42000404 	addi	r8,r8,16
   82754:	593ffc15 	stw	r4,-16(r11)
   82758:	51000017 	ldw	r4,0(r10)
   8275c:	63000404 	addi	r12,r12,16
   82760:	52800404 	addi	r10,r10,16
   82764:	493ffc15 	stw	r4,-16(r9)
   82768:	1bbfef1e 	bne	r3,r14,82728 <__alt_data_end+0xfffe2728>
   8276c:	79000044 	addi	r4,r15,1
   82770:	2008913a 	slli	r4,r4,4
   82774:	328003cc 	andi	r10,r6,15
   82778:	02c000c4 	movi	r11,3
   8277c:	1107883a 	add	r3,r2,r4
   82780:	290b883a 	add	r5,r5,r4
   82784:	5a801e2e 	bgeu	r11,r10,82800 <memmove+0x154>
   82788:	1813883a 	mov	r9,r3
   8278c:	2811883a 	mov	r8,r5
   82790:	500f883a 	mov	r7,r10
   82794:	41000017 	ldw	r4,0(r8)
   82798:	4a400104 	addi	r9,r9,4
   8279c:	39ffff04 	addi	r7,r7,-4
   827a0:	493fff15 	stw	r4,-4(r9)
   827a4:	42000104 	addi	r8,r8,4
   827a8:	59fffa36 	bltu	r11,r7,82794 <__alt_data_end+0xfffe2794>
   827ac:	513fff04 	addi	r4,r10,-4
   827b0:	2008d0ba 	srli	r4,r4,2
   827b4:	318000cc 	andi	r6,r6,3
   827b8:	21000044 	addi	r4,r4,1
   827bc:	2109883a 	add	r4,r4,r4
   827c0:	2109883a 	add	r4,r4,r4
   827c4:	1907883a 	add	r3,r3,r4
   827c8:	290b883a 	add	r5,r5,r4
   827cc:	30000b26 	beq	r6,zero,827fc <memmove+0x150>
   827d0:	198d883a 	add	r6,r3,r6
   827d4:	29c00003 	ldbu	r7,0(r5)
   827d8:	18c00044 	addi	r3,r3,1
   827dc:	29400044 	addi	r5,r5,1
   827e0:	19ffffc5 	stb	r7,-1(r3)
   827e4:	19bffb1e 	bne	r3,r6,827d4 <__alt_data_end+0xfffe27d4>
   827e8:	f800283a 	ret
   827ec:	1007883a 	mov	r3,r2
   827f0:	003ff606 	br	827cc <__alt_data_end+0xfffe27cc>
   827f4:	1007883a 	mov	r3,r2
   827f8:	003ff506 	br	827d0 <__alt_data_end+0xfffe27d0>
   827fc:	f800283a 	ret
   82800:	500d883a 	mov	r6,r10
   82804:	003ff106 	br	827cc <__alt_data_end+0xfffe27cc>

00082808 <memset>:
   82808:	20c000cc 	andi	r3,r4,3
   8280c:	2005883a 	mov	r2,r4
   82810:	18004426 	beq	r3,zero,82924 <memset+0x11c>
   82814:	31ffffc4 	addi	r7,r6,-1
   82818:	30004026 	beq	r6,zero,8291c <memset+0x114>
   8281c:	2813883a 	mov	r9,r5
   82820:	200d883a 	mov	r6,r4
   82824:	2007883a 	mov	r3,r4
   82828:	00000406 	br	8283c <memset+0x34>
   8282c:	3a3fffc4 	addi	r8,r7,-1
   82830:	31800044 	addi	r6,r6,1
   82834:	38003926 	beq	r7,zero,8291c <memset+0x114>
   82838:	400f883a 	mov	r7,r8
   8283c:	18c00044 	addi	r3,r3,1
   82840:	32400005 	stb	r9,0(r6)
   82844:	1a0000cc 	andi	r8,r3,3
   82848:	403ff81e 	bne	r8,zero,8282c <__alt_data_end+0xfffe282c>
   8284c:	010000c4 	movi	r4,3
   82850:	21c02d2e 	bgeu	r4,r7,82908 <memset+0x100>
   82854:	29003fcc 	andi	r4,r5,255
   82858:	200c923a 	slli	r6,r4,8
   8285c:	3108b03a 	or	r4,r6,r4
   82860:	200c943a 	slli	r6,r4,16
   82864:	218cb03a 	or	r6,r4,r6
   82868:	010003c4 	movi	r4,15
   8286c:	21c0182e 	bgeu	r4,r7,828d0 <memset+0xc8>
   82870:	3b3ffc04 	addi	r12,r7,-16
   82874:	6018d13a 	srli	r12,r12,4
   82878:	1a000104 	addi	r8,r3,4
   8287c:	1ac00204 	addi	r11,r3,8
   82880:	6008913a 	slli	r4,r12,4
   82884:	1a800304 	addi	r10,r3,12
   82888:	1813883a 	mov	r9,r3
   8288c:	21000504 	addi	r4,r4,20
   82890:	1909883a 	add	r4,r3,r4
   82894:	49800015 	stw	r6,0(r9)
   82898:	41800015 	stw	r6,0(r8)
   8289c:	59800015 	stw	r6,0(r11)
   828a0:	51800015 	stw	r6,0(r10)
   828a4:	42000404 	addi	r8,r8,16
   828a8:	4a400404 	addi	r9,r9,16
   828ac:	5ac00404 	addi	r11,r11,16
   828b0:	52800404 	addi	r10,r10,16
   828b4:	413ff71e 	bne	r8,r4,82894 <__alt_data_end+0xfffe2894>
   828b8:	63000044 	addi	r12,r12,1
   828bc:	6018913a 	slli	r12,r12,4
   828c0:	39c003cc 	andi	r7,r7,15
   828c4:	010000c4 	movi	r4,3
   828c8:	1b07883a 	add	r3,r3,r12
   828cc:	21c00e2e 	bgeu	r4,r7,82908 <memset+0x100>
   828d0:	1813883a 	mov	r9,r3
   828d4:	3811883a 	mov	r8,r7
   828d8:	010000c4 	movi	r4,3
   828dc:	49800015 	stw	r6,0(r9)
   828e0:	423fff04 	addi	r8,r8,-4
   828e4:	4a400104 	addi	r9,r9,4
   828e8:	223ffc36 	bltu	r4,r8,828dc <__alt_data_end+0xfffe28dc>
   828ec:	393fff04 	addi	r4,r7,-4
   828f0:	2008d0ba 	srli	r4,r4,2
   828f4:	39c000cc 	andi	r7,r7,3
   828f8:	21000044 	addi	r4,r4,1
   828fc:	2109883a 	add	r4,r4,r4
   82900:	2109883a 	add	r4,r4,r4
   82904:	1907883a 	add	r3,r3,r4
   82908:	38000526 	beq	r7,zero,82920 <memset+0x118>
   8290c:	19cf883a 	add	r7,r3,r7
   82910:	19400005 	stb	r5,0(r3)
   82914:	18c00044 	addi	r3,r3,1
   82918:	38fffd1e 	bne	r7,r3,82910 <__alt_data_end+0xfffe2910>
   8291c:	f800283a 	ret
   82920:	f800283a 	ret
   82924:	2007883a 	mov	r3,r4
   82928:	300f883a 	mov	r7,r6
   8292c:	003fc706 	br	8284c <__alt_data_end+0xfffe284c>

00082930 <_realloc_r>:
   82930:	defff604 	addi	sp,sp,-40
   82934:	dc800215 	stw	r18,8(sp)
   82938:	dfc00915 	stw	ra,36(sp)
   8293c:	df000815 	stw	fp,32(sp)
   82940:	ddc00715 	stw	r23,28(sp)
   82944:	dd800615 	stw	r22,24(sp)
   82948:	dd400515 	stw	r21,20(sp)
   8294c:	dd000415 	stw	r20,16(sp)
   82950:	dcc00315 	stw	r19,12(sp)
   82954:	dc400115 	stw	r17,4(sp)
   82958:	dc000015 	stw	r16,0(sp)
   8295c:	3025883a 	mov	r18,r6
   82960:	2800b726 	beq	r5,zero,82c40 <_realloc_r+0x310>
   82964:	282b883a 	mov	r21,r5
   82968:	2029883a 	mov	r20,r4
   8296c:	00844880 	call	84488 <__malloc_lock>
   82970:	a8bfff17 	ldw	r2,-4(r21)
   82974:	043fff04 	movi	r16,-4
   82978:	90c002c4 	addi	r3,r18,11
   8297c:	01000584 	movi	r4,22
   82980:	acfffe04 	addi	r19,r21,-8
   82984:	1420703a 	and	r16,r2,r16
   82988:	20c0332e 	bgeu	r4,r3,82a58 <_realloc_r+0x128>
   8298c:	047ffe04 	movi	r17,-8
   82990:	1c62703a 	and	r17,r3,r17
   82994:	8807883a 	mov	r3,r17
   82998:	88005816 	blt	r17,zero,82afc <_realloc_r+0x1cc>
   8299c:	8c805736 	bltu	r17,r18,82afc <_realloc_r+0x1cc>
   829a0:	80c0300e 	bge	r16,r3,82a64 <_realloc_r+0x134>
   829a4:	07000234 	movhi	fp,8
   829a8:	e71e3704 	addi	fp,fp,30940
   829ac:	e1c00217 	ldw	r7,8(fp)
   829b0:	9c09883a 	add	r4,r19,r16
   829b4:	22000117 	ldw	r8,4(r4)
   829b8:	21c06326 	beq	r4,r7,82b48 <_realloc_r+0x218>
   829bc:	017fff84 	movi	r5,-2
   829c0:	414a703a 	and	r5,r8,r5
   829c4:	214b883a 	add	r5,r4,r5
   829c8:	29800117 	ldw	r6,4(r5)
   829cc:	3180004c 	andi	r6,r6,1
   829d0:	30003f26 	beq	r6,zero,82ad0 <_realloc_r+0x1a0>
   829d4:	1080004c 	andi	r2,r2,1
   829d8:	10008326 	beq	r2,zero,82be8 <_realloc_r+0x2b8>
   829dc:	900b883a 	mov	r5,r18
   829e0:	a009883a 	mov	r4,r20
   829e4:	0081c740 	call	81c74 <_malloc_r>
   829e8:	1025883a 	mov	r18,r2
   829ec:	10011e26 	beq	r2,zero,82e68 <_realloc_r+0x538>
   829f0:	a93fff17 	ldw	r4,-4(r21)
   829f4:	10fffe04 	addi	r3,r2,-8
   829f8:	00bfff84 	movi	r2,-2
   829fc:	2084703a 	and	r2,r4,r2
   82a00:	9885883a 	add	r2,r19,r2
   82a04:	1880ee26 	beq	r3,r2,82dc0 <_realloc_r+0x490>
   82a08:	81bfff04 	addi	r6,r16,-4
   82a0c:	00800904 	movi	r2,36
   82a10:	1180b836 	bltu	r2,r6,82cf4 <_realloc_r+0x3c4>
   82a14:	00c004c4 	movi	r3,19
   82a18:	19809636 	bltu	r3,r6,82c74 <_realloc_r+0x344>
   82a1c:	9005883a 	mov	r2,r18
   82a20:	a807883a 	mov	r3,r21
   82a24:	19000017 	ldw	r4,0(r3)
   82a28:	11000015 	stw	r4,0(r2)
   82a2c:	19000117 	ldw	r4,4(r3)
   82a30:	11000115 	stw	r4,4(r2)
   82a34:	18c00217 	ldw	r3,8(r3)
   82a38:	10c00215 	stw	r3,8(r2)
   82a3c:	a80b883a 	mov	r5,r21
   82a40:	a009883a 	mov	r4,r20
   82a44:	00836fc0 	call	836fc <_free_r>
   82a48:	a009883a 	mov	r4,r20
   82a4c:	00844ac0 	call	844ac <__malloc_unlock>
   82a50:	9005883a 	mov	r2,r18
   82a54:	00001206 	br	82aa0 <_realloc_r+0x170>
   82a58:	00c00404 	movi	r3,16
   82a5c:	1823883a 	mov	r17,r3
   82a60:	003fce06 	br	8299c <__alt_data_end+0xfffe299c>
   82a64:	a825883a 	mov	r18,r21
   82a68:	8445c83a 	sub	r2,r16,r17
   82a6c:	00c003c4 	movi	r3,15
   82a70:	18802636 	bltu	r3,r2,82b0c <_realloc_r+0x1dc>
   82a74:	99800117 	ldw	r6,4(r19)
   82a78:	9c07883a 	add	r3,r19,r16
   82a7c:	3180004c 	andi	r6,r6,1
   82a80:	3420b03a 	or	r16,r6,r16
   82a84:	9c000115 	stw	r16,4(r19)
   82a88:	18800117 	ldw	r2,4(r3)
   82a8c:	10800054 	ori	r2,r2,1
   82a90:	18800115 	stw	r2,4(r3)
   82a94:	a009883a 	mov	r4,r20
   82a98:	00844ac0 	call	844ac <__malloc_unlock>
   82a9c:	9005883a 	mov	r2,r18
   82aa0:	dfc00917 	ldw	ra,36(sp)
   82aa4:	df000817 	ldw	fp,32(sp)
   82aa8:	ddc00717 	ldw	r23,28(sp)
   82aac:	dd800617 	ldw	r22,24(sp)
   82ab0:	dd400517 	ldw	r21,20(sp)
   82ab4:	dd000417 	ldw	r20,16(sp)
   82ab8:	dcc00317 	ldw	r19,12(sp)
   82abc:	dc800217 	ldw	r18,8(sp)
   82ac0:	dc400117 	ldw	r17,4(sp)
   82ac4:	dc000017 	ldw	r16,0(sp)
   82ac8:	dec00a04 	addi	sp,sp,40
   82acc:	f800283a 	ret
   82ad0:	017fff04 	movi	r5,-4
   82ad4:	414a703a 	and	r5,r8,r5
   82ad8:	814d883a 	add	r6,r16,r5
   82adc:	30c01f16 	blt	r6,r3,82b5c <_realloc_r+0x22c>
   82ae0:	20800317 	ldw	r2,12(r4)
   82ae4:	20c00217 	ldw	r3,8(r4)
   82ae8:	a825883a 	mov	r18,r21
   82aec:	3021883a 	mov	r16,r6
   82af0:	18800315 	stw	r2,12(r3)
   82af4:	10c00215 	stw	r3,8(r2)
   82af8:	003fdb06 	br	82a68 <__alt_data_end+0xfffe2a68>
   82afc:	00800304 	movi	r2,12
   82b00:	a0800015 	stw	r2,0(r20)
   82b04:	0005883a 	mov	r2,zero
   82b08:	003fe506 	br	82aa0 <__alt_data_end+0xfffe2aa0>
   82b0c:	98c00117 	ldw	r3,4(r19)
   82b10:	9c4b883a 	add	r5,r19,r17
   82b14:	11000054 	ori	r4,r2,1
   82b18:	18c0004c 	andi	r3,r3,1
   82b1c:	1c62b03a 	or	r17,r3,r17
   82b20:	9c400115 	stw	r17,4(r19)
   82b24:	29000115 	stw	r4,4(r5)
   82b28:	2885883a 	add	r2,r5,r2
   82b2c:	10c00117 	ldw	r3,4(r2)
   82b30:	29400204 	addi	r5,r5,8
   82b34:	a009883a 	mov	r4,r20
   82b38:	18c00054 	ori	r3,r3,1
   82b3c:	10c00115 	stw	r3,4(r2)
   82b40:	00836fc0 	call	836fc <_free_r>
   82b44:	003fd306 	br	82a94 <__alt_data_end+0xfffe2a94>
   82b48:	017fff04 	movi	r5,-4
   82b4c:	414a703a 	and	r5,r8,r5
   82b50:	89800404 	addi	r6,r17,16
   82b54:	8151883a 	add	r8,r16,r5
   82b58:	4180590e 	bge	r8,r6,82cc0 <_realloc_r+0x390>
   82b5c:	1080004c 	andi	r2,r2,1
   82b60:	103f9e1e 	bne	r2,zero,829dc <__alt_data_end+0xfffe29dc>
   82b64:	adbffe17 	ldw	r22,-8(r21)
   82b68:	00bfff04 	movi	r2,-4
   82b6c:	9dadc83a 	sub	r22,r19,r22
   82b70:	b1800117 	ldw	r6,4(r22)
   82b74:	3084703a 	and	r2,r6,r2
   82b78:	20002026 	beq	r4,zero,82bfc <_realloc_r+0x2cc>
   82b7c:	80af883a 	add	r23,r16,r2
   82b80:	b96f883a 	add	r23,r23,r5
   82b84:	21c05f26 	beq	r4,r7,82d04 <_realloc_r+0x3d4>
   82b88:	b8c01c16 	blt	r23,r3,82bfc <_realloc_r+0x2cc>
   82b8c:	20800317 	ldw	r2,12(r4)
   82b90:	20c00217 	ldw	r3,8(r4)
   82b94:	81bfff04 	addi	r6,r16,-4
   82b98:	01000904 	movi	r4,36
   82b9c:	18800315 	stw	r2,12(r3)
   82ba0:	10c00215 	stw	r3,8(r2)
   82ba4:	b0c00217 	ldw	r3,8(r22)
   82ba8:	b0800317 	ldw	r2,12(r22)
   82bac:	b4800204 	addi	r18,r22,8
   82bb0:	18800315 	stw	r2,12(r3)
   82bb4:	10c00215 	stw	r3,8(r2)
   82bb8:	21801b36 	bltu	r4,r6,82c28 <_realloc_r+0x2f8>
   82bbc:	008004c4 	movi	r2,19
   82bc0:	1180352e 	bgeu	r2,r6,82c98 <_realloc_r+0x368>
   82bc4:	a8800017 	ldw	r2,0(r21)
   82bc8:	b0800215 	stw	r2,8(r22)
   82bcc:	a8800117 	ldw	r2,4(r21)
   82bd0:	b0800315 	stw	r2,12(r22)
   82bd4:	008006c4 	movi	r2,27
   82bd8:	11807f36 	bltu	r2,r6,82dd8 <_realloc_r+0x4a8>
   82bdc:	b0800404 	addi	r2,r22,16
   82be0:	ad400204 	addi	r21,r21,8
   82be4:	00002d06 	br	82c9c <_realloc_r+0x36c>
   82be8:	adbffe17 	ldw	r22,-8(r21)
   82bec:	00bfff04 	movi	r2,-4
   82bf0:	9dadc83a 	sub	r22,r19,r22
   82bf4:	b1000117 	ldw	r4,4(r22)
   82bf8:	2084703a 	and	r2,r4,r2
   82bfc:	b03f7726 	beq	r22,zero,829dc <__alt_data_end+0xfffe29dc>
   82c00:	80af883a 	add	r23,r16,r2
   82c04:	b8ff7516 	blt	r23,r3,829dc <__alt_data_end+0xfffe29dc>
   82c08:	b0800317 	ldw	r2,12(r22)
   82c0c:	b0c00217 	ldw	r3,8(r22)
   82c10:	81bfff04 	addi	r6,r16,-4
   82c14:	01000904 	movi	r4,36
   82c18:	18800315 	stw	r2,12(r3)
   82c1c:	10c00215 	stw	r3,8(r2)
   82c20:	b4800204 	addi	r18,r22,8
   82c24:	21bfe52e 	bgeu	r4,r6,82bbc <__alt_data_end+0xfffe2bbc>
   82c28:	a80b883a 	mov	r5,r21
   82c2c:	9009883a 	mov	r4,r18
   82c30:	00826ac0 	call	826ac <memmove>
   82c34:	b821883a 	mov	r16,r23
   82c38:	b027883a 	mov	r19,r22
   82c3c:	003f8a06 	br	82a68 <__alt_data_end+0xfffe2a68>
   82c40:	300b883a 	mov	r5,r6
   82c44:	dfc00917 	ldw	ra,36(sp)
   82c48:	df000817 	ldw	fp,32(sp)
   82c4c:	ddc00717 	ldw	r23,28(sp)
   82c50:	dd800617 	ldw	r22,24(sp)
   82c54:	dd400517 	ldw	r21,20(sp)
   82c58:	dd000417 	ldw	r20,16(sp)
   82c5c:	dcc00317 	ldw	r19,12(sp)
   82c60:	dc800217 	ldw	r18,8(sp)
   82c64:	dc400117 	ldw	r17,4(sp)
   82c68:	dc000017 	ldw	r16,0(sp)
   82c6c:	dec00a04 	addi	sp,sp,40
   82c70:	0081c741 	jmpi	81c74 <_malloc_r>
   82c74:	a8c00017 	ldw	r3,0(r21)
   82c78:	90c00015 	stw	r3,0(r18)
   82c7c:	a8c00117 	ldw	r3,4(r21)
   82c80:	90c00115 	stw	r3,4(r18)
   82c84:	00c006c4 	movi	r3,27
   82c88:	19804536 	bltu	r3,r6,82da0 <_realloc_r+0x470>
   82c8c:	90800204 	addi	r2,r18,8
   82c90:	a8c00204 	addi	r3,r21,8
   82c94:	003f6306 	br	82a24 <__alt_data_end+0xfffe2a24>
   82c98:	9005883a 	mov	r2,r18
   82c9c:	a8c00017 	ldw	r3,0(r21)
   82ca0:	b821883a 	mov	r16,r23
   82ca4:	b027883a 	mov	r19,r22
   82ca8:	10c00015 	stw	r3,0(r2)
   82cac:	a8c00117 	ldw	r3,4(r21)
   82cb0:	10c00115 	stw	r3,4(r2)
   82cb4:	a8c00217 	ldw	r3,8(r21)
   82cb8:	10c00215 	stw	r3,8(r2)
   82cbc:	003f6a06 	br	82a68 <__alt_data_end+0xfffe2a68>
   82cc0:	9c67883a 	add	r19,r19,r17
   82cc4:	4445c83a 	sub	r2,r8,r17
   82cc8:	e4c00215 	stw	r19,8(fp)
   82ccc:	10800054 	ori	r2,r2,1
   82cd0:	98800115 	stw	r2,4(r19)
   82cd4:	a8bfff17 	ldw	r2,-4(r21)
   82cd8:	a009883a 	mov	r4,r20
   82cdc:	1080004c 	andi	r2,r2,1
   82ce0:	1462b03a 	or	r17,r2,r17
   82ce4:	ac7fff15 	stw	r17,-4(r21)
   82ce8:	00844ac0 	call	844ac <__malloc_unlock>
   82cec:	a805883a 	mov	r2,r21
   82cf0:	003f6b06 	br	82aa0 <__alt_data_end+0xfffe2aa0>
   82cf4:	a80b883a 	mov	r5,r21
   82cf8:	9009883a 	mov	r4,r18
   82cfc:	00826ac0 	call	826ac <memmove>
   82d00:	003f4e06 	br	82a3c <__alt_data_end+0xfffe2a3c>
   82d04:	89000404 	addi	r4,r17,16
   82d08:	b93fbc16 	blt	r23,r4,82bfc <__alt_data_end+0xfffe2bfc>
   82d0c:	b0800317 	ldw	r2,12(r22)
   82d10:	b0c00217 	ldw	r3,8(r22)
   82d14:	81bfff04 	addi	r6,r16,-4
   82d18:	01000904 	movi	r4,36
   82d1c:	18800315 	stw	r2,12(r3)
   82d20:	10c00215 	stw	r3,8(r2)
   82d24:	b4800204 	addi	r18,r22,8
   82d28:	21804336 	bltu	r4,r6,82e38 <_realloc_r+0x508>
   82d2c:	008004c4 	movi	r2,19
   82d30:	11803f2e 	bgeu	r2,r6,82e30 <_realloc_r+0x500>
   82d34:	a8800017 	ldw	r2,0(r21)
   82d38:	b0800215 	stw	r2,8(r22)
   82d3c:	a8800117 	ldw	r2,4(r21)
   82d40:	b0800315 	stw	r2,12(r22)
   82d44:	008006c4 	movi	r2,27
   82d48:	11803f36 	bltu	r2,r6,82e48 <_realloc_r+0x518>
   82d4c:	b0800404 	addi	r2,r22,16
   82d50:	ad400204 	addi	r21,r21,8
   82d54:	a8c00017 	ldw	r3,0(r21)
   82d58:	10c00015 	stw	r3,0(r2)
   82d5c:	a8c00117 	ldw	r3,4(r21)
   82d60:	10c00115 	stw	r3,4(r2)
   82d64:	a8c00217 	ldw	r3,8(r21)
   82d68:	10c00215 	stw	r3,8(r2)
   82d6c:	b447883a 	add	r3,r22,r17
   82d70:	bc45c83a 	sub	r2,r23,r17
   82d74:	e0c00215 	stw	r3,8(fp)
   82d78:	10800054 	ori	r2,r2,1
   82d7c:	18800115 	stw	r2,4(r3)
   82d80:	b0800117 	ldw	r2,4(r22)
   82d84:	a009883a 	mov	r4,r20
   82d88:	1080004c 	andi	r2,r2,1
   82d8c:	1462b03a 	or	r17,r2,r17
   82d90:	b4400115 	stw	r17,4(r22)
   82d94:	00844ac0 	call	844ac <__malloc_unlock>
   82d98:	9005883a 	mov	r2,r18
   82d9c:	003f4006 	br	82aa0 <__alt_data_end+0xfffe2aa0>
   82da0:	a8c00217 	ldw	r3,8(r21)
   82da4:	90c00215 	stw	r3,8(r18)
   82da8:	a8c00317 	ldw	r3,12(r21)
   82dac:	90c00315 	stw	r3,12(r18)
   82db0:	30801126 	beq	r6,r2,82df8 <_realloc_r+0x4c8>
   82db4:	90800404 	addi	r2,r18,16
   82db8:	a8c00404 	addi	r3,r21,16
   82dbc:	003f1906 	br	82a24 <__alt_data_end+0xfffe2a24>
   82dc0:	90ffff17 	ldw	r3,-4(r18)
   82dc4:	00bfff04 	movi	r2,-4
   82dc8:	a825883a 	mov	r18,r21
   82dcc:	1884703a 	and	r2,r3,r2
   82dd0:	80a1883a 	add	r16,r16,r2
   82dd4:	003f2406 	br	82a68 <__alt_data_end+0xfffe2a68>
   82dd8:	a8800217 	ldw	r2,8(r21)
   82ddc:	b0800415 	stw	r2,16(r22)
   82de0:	a8800317 	ldw	r2,12(r21)
   82de4:	b0800515 	stw	r2,20(r22)
   82de8:	31000a26 	beq	r6,r4,82e14 <_realloc_r+0x4e4>
   82dec:	b0800604 	addi	r2,r22,24
   82df0:	ad400404 	addi	r21,r21,16
   82df4:	003fa906 	br	82c9c <__alt_data_end+0xfffe2c9c>
   82df8:	a9000417 	ldw	r4,16(r21)
   82dfc:	90800604 	addi	r2,r18,24
   82e00:	a8c00604 	addi	r3,r21,24
   82e04:	91000415 	stw	r4,16(r18)
   82e08:	a9000517 	ldw	r4,20(r21)
   82e0c:	91000515 	stw	r4,20(r18)
   82e10:	003f0406 	br	82a24 <__alt_data_end+0xfffe2a24>
   82e14:	a8c00417 	ldw	r3,16(r21)
   82e18:	ad400604 	addi	r21,r21,24
   82e1c:	b0800804 	addi	r2,r22,32
   82e20:	b0c00615 	stw	r3,24(r22)
   82e24:	a8ffff17 	ldw	r3,-4(r21)
   82e28:	b0c00715 	stw	r3,28(r22)
   82e2c:	003f9b06 	br	82c9c <__alt_data_end+0xfffe2c9c>
   82e30:	9005883a 	mov	r2,r18
   82e34:	003fc706 	br	82d54 <__alt_data_end+0xfffe2d54>
   82e38:	a80b883a 	mov	r5,r21
   82e3c:	9009883a 	mov	r4,r18
   82e40:	00826ac0 	call	826ac <memmove>
   82e44:	003fc906 	br	82d6c <__alt_data_end+0xfffe2d6c>
   82e48:	a8800217 	ldw	r2,8(r21)
   82e4c:	b0800415 	stw	r2,16(r22)
   82e50:	a8800317 	ldw	r2,12(r21)
   82e54:	b0800515 	stw	r2,20(r22)
   82e58:	31000726 	beq	r6,r4,82e78 <_realloc_r+0x548>
   82e5c:	b0800604 	addi	r2,r22,24
   82e60:	ad400404 	addi	r21,r21,16
   82e64:	003fbb06 	br	82d54 <__alt_data_end+0xfffe2d54>
   82e68:	a009883a 	mov	r4,r20
   82e6c:	00844ac0 	call	844ac <__malloc_unlock>
   82e70:	0005883a 	mov	r2,zero
   82e74:	003f0a06 	br	82aa0 <__alt_data_end+0xfffe2aa0>
   82e78:	a8c00417 	ldw	r3,16(r21)
   82e7c:	ad400604 	addi	r21,r21,24
   82e80:	b0800804 	addi	r2,r22,32
   82e84:	b0c00615 	stw	r3,24(r22)
   82e88:	a8ffff17 	ldw	r3,-4(r21)
   82e8c:	b0c00715 	stw	r3,28(r22)
   82e90:	003fb006 	br	82d54 <__alt_data_end+0xfffe2d54>

00082e94 <_sbrk_r>:
   82e94:	defffd04 	addi	sp,sp,-12
   82e98:	dc000015 	stw	r16,0(sp)
   82e9c:	04000274 	movhi	r16,9
   82ea0:	dc400115 	stw	r17,4(sp)
   82ea4:	842c8f04 	addi	r16,r16,-19908
   82ea8:	2023883a 	mov	r17,r4
   82eac:	2809883a 	mov	r4,r5
   82eb0:	dfc00215 	stw	ra,8(sp)
   82eb4:	80000015 	stw	zero,0(r16)
   82eb8:	00846940 	call	84694 <sbrk>
   82ebc:	00ffffc4 	movi	r3,-1
   82ec0:	10c00526 	beq	r2,r3,82ed8 <_sbrk_r+0x44>
   82ec4:	dfc00217 	ldw	ra,8(sp)
   82ec8:	dc400117 	ldw	r17,4(sp)
   82ecc:	dc000017 	ldw	r16,0(sp)
   82ed0:	dec00304 	addi	sp,sp,12
   82ed4:	f800283a 	ret
   82ed8:	80c00017 	ldw	r3,0(r16)
   82edc:	183ff926 	beq	r3,zero,82ec4 <__alt_data_end+0xfffe2ec4>
   82ee0:	88c00015 	stw	r3,0(r17)
   82ee4:	003ff706 	br	82ec4 <__alt_data_end+0xfffe2ec4>

00082ee8 <__sread>:
   82ee8:	defffe04 	addi	sp,sp,-8
   82eec:	dc000015 	stw	r16,0(sp)
   82ef0:	2821883a 	mov	r16,r5
   82ef4:	2940038f 	ldh	r5,14(r5)
   82ef8:	dfc00115 	stw	ra,4(sp)
   82efc:	0083c280 	call	83c28 <_read_r>
   82f00:	10000716 	blt	r2,zero,82f20 <__sread+0x38>
   82f04:	80c01417 	ldw	r3,80(r16)
   82f08:	1887883a 	add	r3,r3,r2
   82f0c:	80c01415 	stw	r3,80(r16)
   82f10:	dfc00117 	ldw	ra,4(sp)
   82f14:	dc000017 	ldw	r16,0(sp)
   82f18:	dec00204 	addi	sp,sp,8
   82f1c:	f800283a 	ret
   82f20:	80c0030b 	ldhu	r3,12(r16)
   82f24:	18fbffcc 	andi	r3,r3,61439
   82f28:	80c0030d 	sth	r3,12(r16)
   82f2c:	dfc00117 	ldw	ra,4(sp)
   82f30:	dc000017 	ldw	r16,0(sp)
   82f34:	dec00204 	addi	sp,sp,8
   82f38:	f800283a 	ret

00082f3c <__seofread>:
   82f3c:	0005883a 	mov	r2,zero
   82f40:	f800283a 	ret

00082f44 <__swrite>:
   82f44:	2880030b 	ldhu	r2,12(r5)
   82f48:	defffb04 	addi	sp,sp,-20
   82f4c:	dcc00315 	stw	r19,12(sp)
   82f50:	dc800215 	stw	r18,8(sp)
   82f54:	dc400115 	stw	r17,4(sp)
   82f58:	dc000015 	stw	r16,0(sp)
   82f5c:	dfc00415 	stw	ra,16(sp)
   82f60:	10c0400c 	andi	r3,r2,256
   82f64:	2821883a 	mov	r16,r5
   82f68:	2023883a 	mov	r17,r4
   82f6c:	3025883a 	mov	r18,r6
   82f70:	3827883a 	mov	r19,r7
   82f74:	18000526 	beq	r3,zero,82f8c <__swrite+0x48>
   82f78:	2940038f 	ldh	r5,14(r5)
   82f7c:	01c00084 	movi	r7,2
   82f80:	000d883a 	mov	r6,zero
   82f84:	0083a0c0 	call	83a0c <_lseek_r>
   82f88:	8080030b 	ldhu	r2,12(r16)
   82f8c:	8140038f 	ldh	r5,14(r16)
   82f90:	10bbffcc 	andi	r2,r2,61439
   82f94:	980f883a 	mov	r7,r19
   82f98:	900d883a 	mov	r6,r18
   82f9c:	8809883a 	mov	r4,r17
   82fa0:	8080030d 	sth	r2,12(r16)
   82fa4:	dfc00417 	ldw	ra,16(sp)
   82fa8:	dcc00317 	ldw	r19,12(sp)
   82fac:	dc800217 	ldw	r18,8(sp)
   82fb0:	dc400117 	ldw	r17,4(sp)
   82fb4:	dc000017 	ldw	r16,0(sp)
   82fb8:	dec00504 	addi	sp,sp,20
   82fbc:	00830241 	jmpi	83024 <_write_r>

00082fc0 <__sseek>:
   82fc0:	defffe04 	addi	sp,sp,-8
   82fc4:	dc000015 	stw	r16,0(sp)
   82fc8:	2821883a 	mov	r16,r5
   82fcc:	2940038f 	ldh	r5,14(r5)
   82fd0:	dfc00115 	stw	ra,4(sp)
   82fd4:	0083a0c0 	call	83a0c <_lseek_r>
   82fd8:	00ffffc4 	movi	r3,-1
   82fdc:	10c00826 	beq	r2,r3,83000 <__sseek+0x40>
   82fe0:	80c0030b 	ldhu	r3,12(r16)
   82fe4:	80801415 	stw	r2,80(r16)
   82fe8:	18c40014 	ori	r3,r3,4096
   82fec:	80c0030d 	sth	r3,12(r16)
   82ff0:	dfc00117 	ldw	ra,4(sp)
   82ff4:	dc000017 	ldw	r16,0(sp)
   82ff8:	dec00204 	addi	sp,sp,8
   82ffc:	f800283a 	ret
   83000:	80c0030b 	ldhu	r3,12(r16)
   83004:	18fbffcc 	andi	r3,r3,61439
   83008:	80c0030d 	sth	r3,12(r16)
   8300c:	dfc00117 	ldw	ra,4(sp)
   83010:	dc000017 	ldw	r16,0(sp)
   83014:	dec00204 	addi	sp,sp,8
   83018:	f800283a 	ret

0008301c <__sclose>:
   8301c:	2940038f 	ldh	r5,14(r5)
   83020:	00831d81 	jmpi	831d8 <_close_r>

00083024 <_write_r>:
   83024:	defffd04 	addi	sp,sp,-12
   83028:	2805883a 	mov	r2,r5
   8302c:	dc000015 	stw	r16,0(sp)
   83030:	04000274 	movhi	r16,9
   83034:	dc400115 	stw	r17,4(sp)
   83038:	300b883a 	mov	r5,r6
   8303c:	842c8f04 	addi	r16,r16,-19908
   83040:	2023883a 	mov	r17,r4
   83044:	380d883a 	mov	r6,r7
   83048:	1009883a 	mov	r4,r2
   8304c:	dfc00215 	stw	ra,8(sp)
   83050:	80000015 	stw	zero,0(r16)
   83054:	00847800 	call	84780 <write>
   83058:	00ffffc4 	movi	r3,-1
   8305c:	10c00526 	beq	r2,r3,83074 <_write_r+0x50>
   83060:	dfc00217 	ldw	ra,8(sp)
   83064:	dc400117 	ldw	r17,4(sp)
   83068:	dc000017 	ldw	r16,0(sp)
   8306c:	dec00304 	addi	sp,sp,12
   83070:	f800283a 	ret
   83074:	80c00017 	ldw	r3,0(r16)
   83078:	183ff926 	beq	r3,zero,83060 <__alt_data_end+0xfffe3060>
   8307c:	88c00015 	stw	r3,0(r17)
   83080:	003ff706 	br	83060 <__alt_data_end+0xfffe3060>

00083084 <__swsetup_r>:
   83084:	00800274 	movhi	r2,9
   83088:	defffd04 	addi	sp,sp,-12
   8308c:	10a3bc04 	addi	r2,r2,-28944
   83090:	dc400115 	stw	r17,4(sp)
   83094:	2023883a 	mov	r17,r4
   83098:	11000017 	ldw	r4,0(r2)
   8309c:	dc000015 	stw	r16,0(sp)
   830a0:	dfc00215 	stw	ra,8(sp)
   830a4:	2821883a 	mov	r16,r5
   830a8:	20000226 	beq	r4,zero,830b4 <__swsetup_r+0x30>
   830ac:	20800e17 	ldw	r2,56(r4)
   830b0:	10003126 	beq	r2,zero,83178 <__swsetup_r+0xf4>
   830b4:	8080030b 	ldhu	r2,12(r16)
   830b8:	10c0020c 	andi	r3,r2,8
   830bc:	1009883a 	mov	r4,r2
   830c0:	18000f26 	beq	r3,zero,83100 <__swsetup_r+0x7c>
   830c4:	80c00417 	ldw	r3,16(r16)
   830c8:	18001526 	beq	r3,zero,83120 <__swsetup_r+0x9c>
   830cc:	1100004c 	andi	r4,r2,1
   830d0:	20001c1e 	bne	r4,zero,83144 <__swsetup_r+0xc0>
   830d4:	1080008c 	andi	r2,r2,2
   830d8:	1000291e 	bne	r2,zero,83180 <__swsetup_r+0xfc>
   830dc:	80800517 	ldw	r2,20(r16)
   830e0:	80800215 	stw	r2,8(r16)
   830e4:	18001c26 	beq	r3,zero,83158 <__swsetup_r+0xd4>
   830e8:	0005883a 	mov	r2,zero
   830ec:	dfc00217 	ldw	ra,8(sp)
   830f0:	dc400117 	ldw	r17,4(sp)
   830f4:	dc000017 	ldw	r16,0(sp)
   830f8:	dec00304 	addi	sp,sp,12
   830fc:	f800283a 	ret
   83100:	2080040c 	andi	r2,r4,16
   83104:	10002e26 	beq	r2,zero,831c0 <__swsetup_r+0x13c>
   83108:	2080010c 	andi	r2,r4,4
   8310c:	10001e1e 	bne	r2,zero,83188 <__swsetup_r+0x104>
   83110:	80c00417 	ldw	r3,16(r16)
   83114:	20800214 	ori	r2,r4,8
   83118:	8080030d 	sth	r2,12(r16)
   8311c:	183feb1e 	bne	r3,zero,830cc <__alt_data_end+0xfffe30cc>
   83120:	1100a00c 	andi	r4,r2,640
   83124:	01408004 	movi	r5,512
   83128:	217fe826 	beq	r4,r5,830cc <__alt_data_end+0xfffe30cc>
   8312c:	800b883a 	mov	r5,r16
   83130:	8809883a 	mov	r4,r17
   83134:	0083a6c0 	call	83a6c <__smakebuf_r>
   83138:	8080030b 	ldhu	r2,12(r16)
   8313c:	80c00417 	ldw	r3,16(r16)
   83140:	003fe206 	br	830cc <__alt_data_end+0xfffe30cc>
   83144:	80800517 	ldw	r2,20(r16)
   83148:	80000215 	stw	zero,8(r16)
   8314c:	0085c83a 	sub	r2,zero,r2
   83150:	80800615 	stw	r2,24(r16)
   83154:	183fe41e 	bne	r3,zero,830e8 <__alt_data_end+0xfffe30e8>
   83158:	80c0030b 	ldhu	r3,12(r16)
   8315c:	0005883a 	mov	r2,zero
   83160:	1900200c 	andi	r4,r3,128
   83164:	203fe126 	beq	r4,zero,830ec <__alt_data_end+0xfffe30ec>
   83168:	18c01014 	ori	r3,r3,64
   8316c:	80c0030d 	sth	r3,12(r16)
   83170:	00bfffc4 	movi	r2,-1
   83174:	003fdd06 	br	830ec <__alt_data_end+0xfffe30ec>
   83178:	00815d40 	call	815d4 <__sinit>
   8317c:	003fcd06 	br	830b4 <__alt_data_end+0xfffe30b4>
   83180:	0005883a 	mov	r2,zero
   83184:	003fd606 	br	830e0 <__alt_data_end+0xfffe30e0>
   83188:	81400c17 	ldw	r5,48(r16)
   8318c:	28000626 	beq	r5,zero,831a8 <__swsetup_r+0x124>
   83190:	80801004 	addi	r2,r16,64
   83194:	28800326 	beq	r5,r2,831a4 <__swsetup_r+0x120>
   83198:	8809883a 	mov	r4,r17
   8319c:	00836fc0 	call	836fc <_free_r>
   831a0:	8100030b 	ldhu	r4,12(r16)
   831a4:	80000c15 	stw	zero,48(r16)
   831a8:	80c00417 	ldw	r3,16(r16)
   831ac:	00bff6c4 	movi	r2,-37
   831b0:	1108703a 	and	r4,r2,r4
   831b4:	80000115 	stw	zero,4(r16)
   831b8:	80c00015 	stw	r3,0(r16)
   831bc:	003fd506 	br	83114 <__alt_data_end+0xfffe3114>
   831c0:	00800244 	movi	r2,9
   831c4:	88800015 	stw	r2,0(r17)
   831c8:	20801014 	ori	r2,r4,64
   831cc:	8080030d 	sth	r2,12(r16)
   831d0:	00bfffc4 	movi	r2,-1
   831d4:	003fc506 	br	830ec <__alt_data_end+0xfffe30ec>

000831d8 <_close_r>:
   831d8:	defffd04 	addi	sp,sp,-12
   831dc:	dc000015 	stw	r16,0(sp)
   831e0:	04000274 	movhi	r16,9
   831e4:	dc400115 	stw	r17,4(sp)
   831e8:	842c8f04 	addi	r16,r16,-19908
   831ec:	2023883a 	mov	r17,r4
   831f0:	2809883a 	mov	r4,r5
   831f4:	dfc00215 	stw	ra,8(sp)
   831f8:	80000015 	stw	zero,0(r16)
   831fc:	0083f280 	call	83f28 <close>
   83200:	00ffffc4 	movi	r3,-1
   83204:	10c00526 	beq	r2,r3,8321c <_close_r+0x44>
   83208:	dfc00217 	ldw	ra,8(sp)
   8320c:	dc400117 	ldw	r17,4(sp)
   83210:	dc000017 	ldw	r16,0(sp)
   83214:	dec00304 	addi	sp,sp,12
   83218:	f800283a 	ret
   8321c:	80c00017 	ldw	r3,0(r16)
   83220:	183ff926 	beq	r3,zero,83208 <__alt_data_end+0xfffe3208>
   83224:	88c00015 	stw	r3,0(r17)
   83228:	003ff706 	br	83208 <__alt_data_end+0xfffe3208>

0008322c <_fclose_r>:
   8322c:	28003926 	beq	r5,zero,83314 <_fclose_r+0xe8>
   83230:	defffc04 	addi	sp,sp,-16
   83234:	dc400115 	stw	r17,4(sp)
   83238:	dc000015 	stw	r16,0(sp)
   8323c:	dfc00315 	stw	ra,12(sp)
   83240:	dc800215 	stw	r18,8(sp)
   83244:	2023883a 	mov	r17,r4
   83248:	2821883a 	mov	r16,r5
   8324c:	20000226 	beq	r4,zero,83258 <_fclose_r+0x2c>
   83250:	20800e17 	ldw	r2,56(r4)
   83254:	10002726 	beq	r2,zero,832f4 <_fclose_r+0xc8>
   83258:	8080030f 	ldh	r2,12(r16)
   8325c:	1000071e 	bne	r2,zero,8327c <_fclose_r+0x50>
   83260:	0005883a 	mov	r2,zero
   83264:	dfc00317 	ldw	ra,12(sp)
   83268:	dc800217 	ldw	r18,8(sp)
   8326c:	dc400117 	ldw	r17,4(sp)
   83270:	dc000017 	ldw	r16,0(sp)
   83274:	dec00404 	addi	sp,sp,16
   83278:	f800283a 	ret
   8327c:	800b883a 	mov	r5,r16
   83280:	8809883a 	mov	r4,r17
   83284:	00833300 	call	83330 <__sflush_r>
   83288:	1025883a 	mov	r18,r2
   8328c:	80800b17 	ldw	r2,44(r16)
   83290:	10000426 	beq	r2,zero,832a4 <_fclose_r+0x78>
   83294:	81400717 	ldw	r5,28(r16)
   83298:	8809883a 	mov	r4,r17
   8329c:	103ee83a 	callr	r2
   832a0:	10001616 	blt	r2,zero,832fc <_fclose_r+0xd0>
   832a4:	8080030b 	ldhu	r2,12(r16)
   832a8:	1080200c 	andi	r2,r2,128
   832ac:	1000151e 	bne	r2,zero,83304 <_fclose_r+0xd8>
   832b0:	81400c17 	ldw	r5,48(r16)
   832b4:	28000526 	beq	r5,zero,832cc <_fclose_r+0xa0>
   832b8:	80801004 	addi	r2,r16,64
   832bc:	28800226 	beq	r5,r2,832c8 <_fclose_r+0x9c>
   832c0:	8809883a 	mov	r4,r17
   832c4:	00836fc0 	call	836fc <_free_r>
   832c8:	80000c15 	stw	zero,48(r16)
   832cc:	81401117 	ldw	r5,68(r16)
   832d0:	28000326 	beq	r5,zero,832e0 <_fclose_r+0xb4>
   832d4:	8809883a 	mov	r4,r17
   832d8:	00836fc0 	call	836fc <_free_r>
   832dc:	80001115 	stw	zero,68(r16)
   832e0:	00815e40 	call	815e4 <__sfp_lock_acquire>
   832e4:	8000030d 	sth	zero,12(r16)
   832e8:	00815e80 	call	815e8 <__sfp_lock_release>
   832ec:	9005883a 	mov	r2,r18
   832f0:	003fdc06 	br	83264 <__alt_data_end+0xfffe3264>
   832f4:	00815d40 	call	815d4 <__sinit>
   832f8:	003fd706 	br	83258 <__alt_data_end+0xfffe3258>
   832fc:	04bfffc4 	movi	r18,-1
   83300:	003fe806 	br	832a4 <__alt_data_end+0xfffe32a4>
   83304:	81400417 	ldw	r5,16(r16)
   83308:	8809883a 	mov	r4,r17
   8330c:	00836fc0 	call	836fc <_free_r>
   83310:	003fe706 	br	832b0 <__alt_data_end+0xfffe32b0>
   83314:	0005883a 	mov	r2,zero
   83318:	f800283a 	ret

0008331c <fclose>:
   8331c:	00800274 	movhi	r2,9
   83320:	10a3bc04 	addi	r2,r2,-28944
   83324:	200b883a 	mov	r5,r4
   83328:	11000017 	ldw	r4,0(r2)
   8332c:	008322c1 	jmpi	8322c <_fclose_r>

00083330 <__sflush_r>:
   83330:	2880030b 	ldhu	r2,12(r5)
   83334:	defffb04 	addi	sp,sp,-20
   83338:	dcc00315 	stw	r19,12(sp)
   8333c:	dc400115 	stw	r17,4(sp)
   83340:	dfc00415 	stw	ra,16(sp)
   83344:	dc800215 	stw	r18,8(sp)
   83348:	dc000015 	stw	r16,0(sp)
   8334c:	10c0020c 	andi	r3,r2,8
   83350:	2823883a 	mov	r17,r5
   83354:	2027883a 	mov	r19,r4
   83358:	1800311e 	bne	r3,zero,83420 <__sflush_r+0xf0>
   8335c:	28c00117 	ldw	r3,4(r5)
   83360:	10820014 	ori	r2,r2,2048
   83364:	2880030d 	sth	r2,12(r5)
   83368:	00c04b0e 	bge	zero,r3,83498 <__sflush_r+0x168>
   8336c:	8a000a17 	ldw	r8,40(r17)
   83370:	40002326 	beq	r8,zero,83400 <__sflush_r+0xd0>
   83374:	9c000017 	ldw	r16,0(r19)
   83378:	10c4000c 	andi	r3,r2,4096
   8337c:	98000015 	stw	zero,0(r19)
   83380:	18004826 	beq	r3,zero,834a4 <__sflush_r+0x174>
   83384:	89801417 	ldw	r6,80(r17)
   83388:	10c0010c 	andi	r3,r2,4
   8338c:	18000626 	beq	r3,zero,833a8 <__sflush_r+0x78>
   83390:	88c00117 	ldw	r3,4(r17)
   83394:	88800c17 	ldw	r2,48(r17)
   83398:	30cdc83a 	sub	r6,r6,r3
   8339c:	10000226 	beq	r2,zero,833a8 <__sflush_r+0x78>
   833a0:	88800f17 	ldw	r2,60(r17)
   833a4:	308dc83a 	sub	r6,r6,r2
   833a8:	89400717 	ldw	r5,28(r17)
   833ac:	000f883a 	mov	r7,zero
   833b0:	9809883a 	mov	r4,r19
   833b4:	403ee83a 	callr	r8
   833b8:	00ffffc4 	movi	r3,-1
   833bc:	10c04426 	beq	r2,r3,834d0 <__sflush_r+0x1a0>
   833c0:	88c0030b 	ldhu	r3,12(r17)
   833c4:	89000417 	ldw	r4,16(r17)
   833c8:	88000115 	stw	zero,4(r17)
   833cc:	197dffcc 	andi	r5,r3,63487
   833d0:	8940030d 	sth	r5,12(r17)
   833d4:	89000015 	stw	r4,0(r17)
   833d8:	18c4000c 	andi	r3,r3,4096
   833dc:	18002c1e 	bne	r3,zero,83490 <__sflush_r+0x160>
   833e0:	89400c17 	ldw	r5,48(r17)
   833e4:	9c000015 	stw	r16,0(r19)
   833e8:	28000526 	beq	r5,zero,83400 <__sflush_r+0xd0>
   833ec:	88801004 	addi	r2,r17,64
   833f0:	28800226 	beq	r5,r2,833fc <__sflush_r+0xcc>
   833f4:	9809883a 	mov	r4,r19
   833f8:	00836fc0 	call	836fc <_free_r>
   833fc:	88000c15 	stw	zero,48(r17)
   83400:	0005883a 	mov	r2,zero
   83404:	dfc00417 	ldw	ra,16(sp)
   83408:	dcc00317 	ldw	r19,12(sp)
   8340c:	dc800217 	ldw	r18,8(sp)
   83410:	dc400117 	ldw	r17,4(sp)
   83414:	dc000017 	ldw	r16,0(sp)
   83418:	dec00504 	addi	sp,sp,20
   8341c:	f800283a 	ret
   83420:	2c800417 	ldw	r18,16(r5)
   83424:	903ff626 	beq	r18,zero,83400 <__alt_data_end+0xfffe3400>
   83428:	2c000017 	ldw	r16,0(r5)
   8342c:	108000cc 	andi	r2,r2,3
   83430:	2c800015 	stw	r18,0(r5)
   83434:	84a1c83a 	sub	r16,r16,r18
   83438:	1000131e 	bne	r2,zero,83488 <__sflush_r+0x158>
   8343c:	28800517 	ldw	r2,20(r5)
   83440:	88800215 	stw	r2,8(r17)
   83444:	04000316 	blt	zero,r16,83454 <__sflush_r+0x124>
   83448:	003fed06 	br	83400 <__alt_data_end+0xfffe3400>
   8344c:	90a5883a 	add	r18,r18,r2
   83450:	043feb0e 	bge	zero,r16,83400 <__alt_data_end+0xfffe3400>
   83454:	88800917 	ldw	r2,36(r17)
   83458:	89400717 	ldw	r5,28(r17)
   8345c:	800f883a 	mov	r7,r16
   83460:	900d883a 	mov	r6,r18
   83464:	9809883a 	mov	r4,r19
   83468:	103ee83a 	callr	r2
   8346c:	80a1c83a 	sub	r16,r16,r2
   83470:	00bff616 	blt	zero,r2,8344c <__alt_data_end+0xfffe344c>
   83474:	88c0030b 	ldhu	r3,12(r17)
   83478:	00bfffc4 	movi	r2,-1
   8347c:	18c01014 	ori	r3,r3,64
   83480:	88c0030d 	sth	r3,12(r17)
   83484:	003fdf06 	br	83404 <__alt_data_end+0xfffe3404>
   83488:	0005883a 	mov	r2,zero
   8348c:	003fec06 	br	83440 <__alt_data_end+0xfffe3440>
   83490:	88801415 	stw	r2,80(r17)
   83494:	003fd206 	br	833e0 <__alt_data_end+0xfffe33e0>
   83498:	28c00f17 	ldw	r3,60(r5)
   8349c:	00ffb316 	blt	zero,r3,8336c <__alt_data_end+0xfffe336c>
   834a0:	003fd706 	br	83400 <__alt_data_end+0xfffe3400>
   834a4:	89400717 	ldw	r5,28(r17)
   834a8:	000d883a 	mov	r6,zero
   834ac:	01c00044 	movi	r7,1
   834b0:	9809883a 	mov	r4,r19
   834b4:	403ee83a 	callr	r8
   834b8:	100d883a 	mov	r6,r2
   834bc:	00bfffc4 	movi	r2,-1
   834c0:	30801426 	beq	r6,r2,83514 <__sflush_r+0x1e4>
   834c4:	8880030b 	ldhu	r2,12(r17)
   834c8:	8a000a17 	ldw	r8,40(r17)
   834cc:	003fae06 	br	83388 <__alt_data_end+0xfffe3388>
   834d0:	98c00017 	ldw	r3,0(r19)
   834d4:	183fba26 	beq	r3,zero,833c0 <__alt_data_end+0xfffe33c0>
   834d8:	01000744 	movi	r4,29
   834dc:	19000626 	beq	r3,r4,834f8 <__sflush_r+0x1c8>
   834e0:	01000584 	movi	r4,22
   834e4:	19000426 	beq	r3,r4,834f8 <__sflush_r+0x1c8>
   834e8:	88c0030b 	ldhu	r3,12(r17)
   834ec:	18c01014 	ori	r3,r3,64
   834f0:	88c0030d 	sth	r3,12(r17)
   834f4:	003fc306 	br	83404 <__alt_data_end+0xfffe3404>
   834f8:	8880030b 	ldhu	r2,12(r17)
   834fc:	88c00417 	ldw	r3,16(r17)
   83500:	88000115 	stw	zero,4(r17)
   83504:	10bdffcc 	andi	r2,r2,63487
   83508:	8880030d 	sth	r2,12(r17)
   8350c:	88c00015 	stw	r3,0(r17)
   83510:	003fb306 	br	833e0 <__alt_data_end+0xfffe33e0>
   83514:	98800017 	ldw	r2,0(r19)
   83518:	103fea26 	beq	r2,zero,834c4 <__alt_data_end+0xfffe34c4>
   8351c:	00c00744 	movi	r3,29
   83520:	10c00226 	beq	r2,r3,8352c <__sflush_r+0x1fc>
   83524:	00c00584 	movi	r3,22
   83528:	10c0031e 	bne	r2,r3,83538 <__sflush_r+0x208>
   8352c:	9c000015 	stw	r16,0(r19)
   83530:	0005883a 	mov	r2,zero
   83534:	003fb306 	br	83404 <__alt_data_end+0xfffe3404>
   83538:	88c0030b 	ldhu	r3,12(r17)
   8353c:	3005883a 	mov	r2,r6
   83540:	18c01014 	ori	r3,r3,64
   83544:	88c0030d 	sth	r3,12(r17)
   83548:	003fae06 	br	83404 <__alt_data_end+0xfffe3404>

0008354c <_fflush_r>:
   8354c:	defffd04 	addi	sp,sp,-12
   83550:	dc000115 	stw	r16,4(sp)
   83554:	dfc00215 	stw	ra,8(sp)
   83558:	2021883a 	mov	r16,r4
   8355c:	20000226 	beq	r4,zero,83568 <_fflush_r+0x1c>
   83560:	20800e17 	ldw	r2,56(r4)
   83564:	10000c26 	beq	r2,zero,83598 <_fflush_r+0x4c>
   83568:	2880030f 	ldh	r2,12(r5)
   8356c:	1000051e 	bne	r2,zero,83584 <_fflush_r+0x38>
   83570:	0005883a 	mov	r2,zero
   83574:	dfc00217 	ldw	ra,8(sp)
   83578:	dc000117 	ldw	r16,4(sp)
   8357c:	dec00304 	addi	sp,sp,12
   83580:	f800283a 	ret
   83584:	8009883a 	mov	r4,r16
   83588:	dfc00217 	ldw	ra,8(sp)
   8358c:	dc000117 	ldw	r16,4(sp)
   83590:	dec00304 	addi	sp,sp,12
   83594:	00833301 	jmpi	83330 <__sflush_r>
   83598:	d9400015 	stw	r5,0(sp)
   8359c:	00815d40 	call	815d4 <__sinit>
   835a0:	d9400017 	ldw	r5,0(sp)
   835a4:	003ff006 	br	83568 <__alt_data_end+0xfffe3568>

000835a8 <fflush>:
   835a8:	20000526 	beq	r4,zero,835c0 <fflush+0x18>
   835ac:	00800274 	movhi	r2,9
   835b0:	10a3bc04 	addi	r2,r2,-28944
   835b4:	200b883a 	mov	r5,r4
   835b8:	11000017 	ldw	r4,0(r2)
   835bc:	008354c1 	jmpi	8354c <_fflush_r>
   835c0:	00800274 	movhi	r2,9
   835c4:	10a3bb04 	addi	r2,r2,-28948
   835c8:	11000017 	ldw	r4,0(r2)
   835cc:	01400234 	movhi	r5,8
   835d0:	294d5304 	addi	r5,r5,13644
   835d4:	0081bb01 	jmpi	81bb0 <_fwalk_reent>

000835d8 <_malloc_trim_r>:
   835d8:	defffb04 	addi	sp,sp,-20
   835dc:	dcc00315 	stw	r19,12(sp)
   835e0:	04c00234 	movhi	r19,8
   835e4:	dc800215 	stw	r18,8(sp)
   835e8:	dc400115 	stw	r17,4(sp)
   835ec:	dc000015 	stw	r16,0(sp)
   835f0:	dfc00415 	stw	ra,16(sp)
   835f4:	2821883a 	mov	r16,r5
   835f8:	9cde3704 	addi	r19,r19,30940
   835fc:	2025883a 	mov	r18,r4
   83600:	00844880 	call	84488 <__malloc_lock>
   83604:	98800217 	ldw	r2,8(r19)
   83608:	14400117 	ldw	r17,4(r2)
   8360c:	00bfff04 	movi	r2,-4
   83610:	88a2703a 	and	r17,r17,r2
   83614:	8c21c83a 	sub	r16,r17,r16
   83618:	8403fbc4 	addi	r16,r16,4079
   8361c:	8020d33a 	srli	r16,r16,12
   83620:	0083ffc4 	movi	r2,4095
   83624:	843fffc4 	addi	r16,r16,-1
   83628:	8020933a 	slli	r16,r16,12
   8362c:	1400060e 	bge	r2,r16,83648 <_malloc_trim_r+0x70>
   83630:	000b883a 	mov	r5,zero
   83634:	9009883a 	mov	r4,r18
   83638:	0082e940 	call	82e94 <_sbrk_r>
   8363c:	98c00217 	ldw	r3,8(r19)
   83640:	1c47883a 	add	r3,r3,r17
   83644:	10c00a26 	beq	r2,r3,83670 <_malloc_trim_r+0x98>
   83648:	9009883a 	mov	r4,r18
   8364c:	00844ac0 	call	844ac <__malloc_unlock>
   83650:	0005883a 	mov	r2,zero
   83654:	dfc00417 	ldw	ra,16(sp)
   83658:	dcc00317 	ldw	r19,12(sp)
   8365c:	dc800217 	ldw	r18,8(sp)
   83660:	dc400117 	ldw	r17,4(sp)
   83664:	dc000017 	ldw	r16,0(sp)
   83668:	dec00504 	addi	sp,sp,20
   8366c:	f800283a 	ret
   83670:	040bc83a 	sub	r5,zero,r16
   83674:	9009883a 	mov	r4,r18
   83678:	0082e940 	call	82e94 <_sbrk_r>
   8367c:	00ffffc4 	movi	r3,-1
   83680:	10c00d26 	beq	r2,r3,836b8 <_malloc_trim_r+0xe0>
   83684:	00c00274 	movhi	r3,9
   83688:	18ec9704 	addi	r3,r3,-19876
   8368c:	18800017 	ldw	r2,0(r3)
   83690:	99000217 	ldw	r4,8(r19)
   83694:	8c23c83a 	sub	r17,r17,r16
   83698:	8c400054 	ori	r17,r17,1
   8369c:	1421c83a 	sub	r16,r2,r16
   836a0:	24400115 	stw	r17,4(r4)
   836a4:	9009883a 	mov	r4,r18
   836a8:	1c000015 	stw	r16,0(r3)
   836ac:	00844ac0 	call	844ac <__malloc_unlock>
   836b0:	00800044 	movi	r2,1
   836b4:	003fe706 	br	83654 <__alt_data_end+0xfffe3654>
   836b8:	000b883a 	mov	r5,zero
   836bc:	9009883a 	mov	r4,r18
   836c0:	0082e940 	call	82e94 <_sbrk_r>
   836c4:	99000217 	ldw	r4,8(r19)
   836c8:	014003c4 	movi	r5,15
   836cc:	1107c83a 	sub	r3,r2,r4
   836d0:	28ffdd0e 	bge	r5,r3,83648 <__alt_data_end+0xfffe3648>
   836d4:	01400274 	movhi	r5,9
   836d8:	2963bd04 	addi	r5,r5,-28940
   836dc:	29400017 	ldw	r5,0(r5)
   836e0:	18c00054 	ori	r3,r3,1
   836e4:	20c00115 	stw	r3,4(r4)
   836e8:	00c00274 	movhi	r3,9
   836ec:	1145c83a 	sub	r2,r2,r5
   836f0:	18ec9704 	addi	r3,r3,-19876
   836f4:	18800015 	stw	r2,0(r3)
   836f8:	003fd306 	br	83648 <__alt_data_end+0xfffe3648>

000836fc <_free_r>:
   836fc:	28004126 	beq	r5,zero,83804 <_free_r+0x108>
   83700:	defffd04 	addi	sp,sp,-12
   83704:	dc400115 	stw	r17,4(sp)
   83708:	dc000015 	stw	r16,0(sp)
   8370c:	2023883a 	mov	r17,r4
   83710:	2821883a 	mov	r16,r5
   83714:	dfc00215 	stw	ra,8(sp)
   83718:	00844880 	call	84488 <__malloc_lock>
   8371c:	81ffff17 	ldw	r7,-4(r16)
   83720:	00bfff84 	movi	r2,-2
   83724:	01000234 	movhi	r4,8
   83728:	81bffe04 	addi	r6,r16,-8
   8372c:	3884703a 	and	r2,r7,r2
   83730:	211e3704 	addi	r4,r4,30940
   83734:	308b883a 	add	r5,r6,r2
   83738:	2a400117 	ldw	r9,4(r5)
   8373c:	22000217 	ldw	r8,8(r4)
   83740:	00ffff04 	movi	r3,-4
   83744:	48c6703a 	and	r3,r9,r3
   83748:	2a005726 	beq	r5,r8,838a8 <_free_r+0x1ac>
   8374c:	28c00115 	stw	r3,4(r5)
   83750:	39c0004c 	andi	r7,r7,1
   83754:	3800091e 	bne	r7,zero,8377c <_free_r+0x80>
   83758:	823ffe17 	ldw	r8,-8(r16)
   8375c:	22400204 	addi	r9,r4,8
   83760:	320dc83a 	sub	r6,r6,r8
   83764:	31c00217 	ldw	r7,8(r6)
   83768:	1205883a 	add	r2,r2,r8
   8376c:	3a406526 	beq	r7,r9,83904 <_free_r+0x208>
   83770:	32000317 	ldw	r8,12(r6)
   83774:	3a000315 	stw	r8,12(r7)
   83778:	41c00215 	stw	r7,8(r8)
   8377c:	28cf883a 	add	r7,r5,r3
   83780:	39c00117 	ldw	r7,4(r7)
   83784:	39c0004c 	andi	r7,r7,1
   83788:	38003a26 	beq	r7,zero,83874 <_free_r+0x178>
   8378c:	10c00054 	ori	r3,r2,1
   83790:	30c00115 	stw	r3,4(r6)
   83794:	3087883a 	add	r3,r6,r2
   83798:	18800015 	stw	r2,0(r3)
   8379c:	00c07fc4 	movi	r3,511
   837a0:	18801936 	bltu	r3,r2,83808 <_free_r+0x10c>
   837a4:	1004d0fa 	srli	r2,r2,3
   837a8:	01c00044 	movi	r7,1
   837ac:	21400117 	ldw	r5,4(r4)
   837b0:	10c00044 	addi	r3,r2,1
   837b4:	18c7883a 	add	r3,r3,r3
   837b8:	1005d0ba 	srai	r2,r2,2
   837bc:	18c7883a 	add	r3,r3,r3
   837c0:	18c7883a 	add	r3,r3,r3
   837c4:	1907883a 	add	r3,r3,r4
   837c8:	3884983a 	sll	r2,r7,r2
   837cc:	19c00017 	ldw	r7,0(r3)
   837d0:	1a3ffe04 	addi	r8,r3,-8
   837d4:	1144b03a 	or	r2,r2,r5
   837d8:	32000315 	stw	r8,12(r6)
   837dc:	31c00215 	stw	r7,8(r6)
   837e0:	20800115 	stw	r2,4(r4)
   837e4:	19800015 	stw	r6,0(r3)
   837e8:	39800315 	stw	r6,12(r7)
   837ec:	8809883a 	mov	r4,r17
   837f0:	dfc00217 	ldw	ra,8(sp)
   837f4:	dc400117 	ldw	r17,4(sp)
   837f8:	dc000017 	ldw	r16,0(sp)
   837fc:	dec00304 	addi	sp,sp,12
   83800:	00844ac1 	jmpi	844ac <__malloc_unlock>
   83804:	f800283a 	ret
   83808:	100ad27a 	srli	r5,r2,9
   8380c:	00c00104 	movi	r3,4
   83810:	19404a36 	bltu	r3,r5,8393c <_free_r+0x240>
   83814:	100ad1ba 	srli	r5,r2,6
   83818:	28c00e44 	addi	r3,r5,57
   8381c:	18c7883a 	add	r3,r3,r3
   83820:	29400e04 	addi	r5,r5,56
   83824:	18c7883a 	add	r3,r3,r3
   83828:	18c7883a 	add	r3,r3,r3
   8382c:	1909883a 	add	r4,r3,r4
   83830:	20c00017 	ldw	r3,0(r4)
   83834:	01c00234 	movhi	r7,8
   83838:	213ffe04 	addi	r4,r4,-8
   8383c:	39de3704 	addi	r7,r7,30940
   83840:	20c04426 	beq	r4,r3,83954 <_free_r+0x258>
   83844:	01ffff04 	movi	r7,-4
   83848:	19400117 	ldw	r5,4(r3)
   8384c:	29ca703a 	and	r5,r5,r7
   83850:	1140022e 	bgeu	r2,r5,8385c <_free_r+0x160>
   83854:	18c00217 	ldw	r3,8(r3)
   83858:	20fffb1e 	bne	r4,r3,83848 <__alt_data_end+0xfffe3848>
   8385c:	19000317 	ldw	r4,12(r3)
   83860:	31000315 	stw	r4,12(r6)
   83864:	30c00215 	stw	r3,8(r6)
   83868:	21800215 	stw	r6,8(r4)
   8386c:	19800315 	stw	r6,12(r3)
   83870:	003fde06 	br	837ec <__alt_data_end+0xfffe37ec>
   83874:	29c00217 	ldw	r7,8(r5)
   83878:	10c5883a 	add	r2,r2,r3
   8387c:	00c00234 	movhi	r3,8
   83880:	18de3904 	addi	r3,r3,30948
   83884:	38c03b26 	beq	r7,r3,83974 <_free_r+0x278>
   83888:	2a000317 	ldw	r8,12(r5)
   8388c:	11400054 	ori	r5,r2,1
   83890:	3087883a 	add	r3,r6,r2
   83894:	3a000315 	stw	r8,12(r7)
   83898:	41c00215 	stw	r7,8(r8)
   8389c:	31400115 	stw	r5,4(r6)
   838a0:	18800015 	stw	r2,0(r3)
   838a4:	003fbd06 	br	8379c <__alt_data_end+0xfffe379c>
   838a8:	39c0004c 	andi	r7,r7,1
   838ac:	10c5883a 	add	r2,r2,r3
   838b0:	3800071e 	bne	r7,zero,838d0 <_free_r+0x1d4>
   838b4:	81fffe17 	ldw	r7,-8(r16)
   838b8:	31cdc83a 	sub	r6,r6,r7
   838bc:	30c00317 	ldw	r3,12(r6)
   838c0:	31400217 	ldw	r5,8(r6)
   838c4:	11c5883a 	add	r2,r2,r7
   838c8:	28c00315 	stw	r3,12(r5)
   838cc:	19400215 	stw	r5,8(r3)
   838d0:	10c00054 	ori	r3,r2,1
   838d4:	30c00115 	stw	r3,4(r6)
   838d8:	00c00274 	movhi	r3,9
   838dc:	18e3be04 	addi	r3,r3,-28936
   838e0:	18c00017 	ldw	r3,0(r3)
   838e4:	21800215 	stw	r6,8(r4)
   838e8:	10ffc036 	bltu	r2,r3,837ec <__alt_data_end+0xfffe37ec>
   838ec:	00800274 	movhi	r2,9
   838f0:	10ac8e04 	addi	r2,r2,-19912
   838f4:	11400017 	ldw	r5,0(r2)
   838f8:	8809883a 	mov	r4,r17
   838fc:	00835d80 	call	835d8 <_malloc_trim_r>
   83900:	003fba06 	br	837ec <__alt_data_end+0xfffe37ec>
   83904:	28c9883a 	add	r4,r5,r3
   83908:	21000117 	ldw	r4,4(r4)
   8390c:	2100004c 	andi	r4,r4,1
   83910:	2000391e 	bne	r4,zero,839f8 <_free_r+0x2fc>
   83914:	29c00217 	ldw	r7,8(r5)
   83918:	29000317 	ldw	r4,12(r5)
   8391c:	1885883a 	add	r2,r3,r2
   83920:	10c00054 	ori	r3,r2,1
   83924:	39000315 	stw	r4,12(r7)
   83928:	21c00215 	stw	r7,8(r4)
   8392c:	30c00115 	stw	r3,4(r6)
   83930:	308d883a 	add	r6,r6,r2
   83934:	30800015 	stw	r2,0(r6)
   83938:	003fac06 	br	837ec <__alt_data_end+0xfffe37ec>
   8393c:	00c00504 	movi	r3,20
   83940:	19401536 	bltu	r3,r5,83998 <_free_r+0x29c>
   83944:	28c01704 	addi	r3,r5,92
   83948:	18c7883a 	add	r3,r3,r3
   8394c:	294016c4 	addi	r5,r5,91
   83950:	003fb406 	br	83824 <__alt_data_end+0xfffe3824>
   83954:	280bd0ba 	srai	r5,r5,2
   83958:	00c00044 	movi	r3,1
   8395c:	38800117 	ldw	r2,4(r7)
   83960:	194a983a 	sll	r5,r3,r5
   83964:	2007883a 	mov	r3,r4
   83968:	2884b03a 	or	r2,r5,r2
   8396c:	38800115 	stw	r2,4(r7)
   83970:	003fbb06 	br	83860 <__alt_data_end+0xfffe3860>
   83974:	21800515 	stw	r6,20(r4)
   83978:	21800415 	stw	r6,16(r4)
   8397c:	10c00054 	ori	r3,r2,1
   83980:	31c00315 	stw	r7,12(r6)
   83984:	31c00215 	stw	r7,8(r6)
   83988:	30c00115 	stw	r3,4(r6)
   8398c:	308d883a 	add	r6,r6,r2
   83990:	30800015 	stw	r2,0(r6)
   83994:	003f9506 	br	837ec <__alt_data_end+0xfffe37ec>
   83998:	00c01504 	movi	r3,84
   8399c:	19400536 	bltu	r3,r5,839b4 <_free_r+0x2b8>
   839a0:	100ad33a 	srli	r5,r2,12
   839a4:	28c01bc4 	addi	r3,r5,111
   839a8:	18c7883a 	add	r3,r3,r3
   839ac:	29401b84 	addi	r5,r5,110
   839b0:	003f9c06 	br	83824 <__alt_data_end+0xfffe3824>
   839b4:	00c05504 	movi	r3,340
   839b8:	19400536 	bltu	r3,r5,839d0 <_free_r+0x2d4>
   839bc:	100ad3fa 	srli	r5,r2,15
   839c0:	28c01e04 	addi	r3,r5,120
   839c4:	18c7883a 	add	r3,r3,r3
   839c8:	29401dc4 	addi	r5,r5,119
   839cc:	003f9506 	br	83824 <__alt_data_end+0xfffe3824>
   839d0:	00c15504 	movi	r3,1364
   839d4:	19400536 	bltu	r3,r5,839ec <_free_r+0x2f0>
   839d8:	100ad4ba 	srli	r5,r2,18
   839dc:	28c01f44 	addi	r3,r5,125
   839e0:	18c7883a 	add	r3,r3,r3
   839e4:	29401f04 	addi	r5,r5,124
   839e8:	003f8e06 	br	83824 <__alt_data_end+0xfffe3824>
   839ec:	00c03f84 	movi	r3,254
   839f0:	01401f84 	movi	r5,126
   839f4:	003f8b06 	br	83824 <__alt_data_end+0xfffe3824>
   839f8:	10c00054 	ori	r3,r2,1
   839fc:	30c00115 	stw	r3,4(r6)
   83a00:	308d883a 	add	r6,r6,r2
   83a04:	30800015 	stw	r2,0(r6)
   83a08:	003f7806 	br	837ec <__alt_data_end+0xfffe37ec>

00083a0c <_lseek_r>:
   83a0c:	defffd04 	addi	sp,sp,-12
   83a10:	2805883a 	mov	r2,r5
   83a14:	dc000015 	stw	r16,0(sp)
   83a18:	04000274 	movhi	r16,9
   83a1c:	dc400115 	stw	r17,4(sp)
   83a20:	300b883a 	mov	r5,r6
   83a24:	842c8f04 	addi	r16,r16,-19908
   83a28:	2023883a 	mov	r17,r4
   83a2c:	380d883a 	mov	r6,r7
   83a30:	1009883a 	mov	r4,r2
   83a34:	dfc00215 	stw	ra,8(sp)
   83a38:	80000015 	stw	zero,0(r16)
   83a3c:	00843300 	call	84330 <lseek>
   83a40:	00ffffc4 	movi	r3,-1
   83a44:	10c00526 	beq	r2,r3,83a5c <_lseek_r+0x50>
   83a48:	dfc00217 	ldw	ra,8(sp)
   83a4c:	dc400117 	ldw	r17,4(sp)
   83a50:	dc000017 	ldw	r16,0(sp)
   83a54:	dec00304 	addi	sp,sp,12
   83a58:	f800283a 	ret
   83a5c:	80c00017 	ldw	r3,0(r16)
   83a60:	183ff926 	beq	r3,zero,83a48 <__alt_data_end+0xfffe3a48>
   83a64:	88c00015 	stw	r3,0(r17)
   83a68:	003ff706 	br	83a48 <__alt_data_end+0xfffe3a48>

00083a6c <__smakebuf_r>:
   83a6c:	2880030b 	ldhu	r2,12(r5)
   83a70:	10c0008c 	andi	r3,r2,2
   83a74:	1800411e 	bne	r3,zero,83b7c <__smakebuf_r+0x110>
   83a78:	deffec04 	addi	sp,sp,-80
   83a7c:	dc000f15 	stw	r16,60(sp)
   83a80:	2821883a 	mov	r16,r5
   83a84:	2940038f 	ldh	r5,14(r5)
   83a88:	dc401015 	stw	r17,64(sp)
   83a8c:	dfc01315 	stw	ra,76(sp)
   83a90:	dcc01215 	stw	r19,72(sp)
   83a94:	dc801115 	stw	r18,68(sp)
   83a98:	2023883a 	mov	r17,r4
   83a9c:	28001c16 	blt	r5,zero,83b10 <__smakebuf_r+0xa4>
   83aa0:	d80d883a 	mov	r6,sp
   83aa4:	0083c880 	call	83c88 <_fstat_r>
   83aa8:	10001816 	blt	r2,zero,83b0c <__smakebuf_r+0xa0>
   83aac:	d8800117 	ldw	r2,4(sp)
   83ab0:	00e00014 	movui	r3,32768
   83ab4:	10bc000c 	andi	r2,r2,61440
   83ab8:	14c80020 	cmpeqi	r19,r2,8192
   83abc:	10c03726 	beq	r2,r3,83b9c <__smakebuf_r+0x130>
   83ac0:	80c0030b 	ldhu	r3,12(r16)
   83ac4:	18c20014 	ori	r3,r3,2048
   83ac8:	80c0030d 	sth	r3,12(r16)
   83acc:	00c80004 	movi	r3,8192
   83ad0:	10c0521e 	bne	r2,r3,83c1c <__smakebuf_r+0x1b0>
   83ad4:	8140038f 	ldh	r5,14(r16)
   83ad8:	8809883a 	mov	r4,r17
   83adc:	0083ce40 	call	83ce4 <_isatty_r>
   83ae0:	10004c26 	beq	r2,zero,83c14 <__smakebuf_r+0x1a8>
   83ae4:	8080030b 	ldhu	r2,12(r16)
   83ae8:	80c010c4 	addi	r3,r16,67
   83aec:	80c00015 	stw	r3,0(r16)
   83af0:	10800054 	ori	r2,r2,1
   83af4:	8080030d 	sth	r2,12(r16)
   83af8:	00800044 	movi	r2,1
   83afc:	80c00415 	stw	r3,16(r16)
   83b00:	80800515 	stw	r2,20(r16)
   83b04:	04810004 	movi	r18,1024
   83b08:	00000706 	br	83b28 <__smakebuf_r+0xbc>
   83b0c:	8080030b 	ldhu	r2,12(r16)
   83b10:	10c0200c 	andi	r3,r2,128
   83b14:	18001f1e 	bne	r3,zero,83b94 <__smakebuf_r+0x128>
   83b18:	04810004 	movi	r18,1024
   83b1c:	10820014 	ori	r2,r2,2048
   83b20:	8080030d 	sth	r2,12(r16)
   83b24:	0027883a 	mov	r19,zero
   83b28:	900b883a 	mov	r5,r18
   83b2c:	8809883a 	mov	r4,r17
   83b30:	0081c740 	call	81c74 <_malloc_r>
   83b34:	10002c26 	beq	r2,zero,83be8 <__smakebuf_r+0x17c>
   83b38:	80c0030b 	ldhu	r3,12(r16)
   83b3c:	01000234 	movhi	r4,8
   83b40:	21049f04 	addi	r4,r4,4732
   83b44:	89000f15 	stw	r4,60(r17)
   83b48:	18c02014 	ori	r3,r3,128
   83b4c:	80c0030d 	sth	r3,12(r16)
   83b50:	80800015 	stw	r2,0(r16)
   83b54:	80800415 	stw	r2,16(r16)
   83b58:	84800515 	stw	r18,20(r16)
   83b5c:	98001a1e 	bne	r19,zero,83bc8 <__smakebuf_r+0x15c>
   83b60:	dfc01317 	ldw	ra,76(sp)
   83b64:	dcc01217 	ldw	r19,72(sp)
   83b68:	dc801117 	ldw	r18,68(sp)
   83b6c:	dc401017 	ldw	r17,64(sp)
   83b70:	dc000f17 	ldw	r16,60(sp)
   83b74:	dec01404 	addi	sp,sp,80
   83b78:	f800283a 	ret
   83b7c:	288010c4 	addi	r2,r5,67
   83b80:	28800015 	stw	r2,0(r5)
   83b84:	28800415 	stw	r2,16(r5)
   83b88:	00800044 	movi	r2,1
   83b8c:	28800515 	stw	r2,20(r5)
   83b90:	f800283a 	ret
   83b94:	04801004 	movi	r18,64
   83b98:	003fe006 	br	83b1c <__alt_data_end+0xfffe3b1c>
   83b9c:	81000a17 	ldw	r4,40(r16)
   83ba0:	00c00234 	movhi	r3,8
   83ba4:	18cbf004 	addi	r3,r3,12224
   83ba8:	20ffc51e 	bne	r4,r3,83ac0 <__alt_data_end+0xfffe3ac0>
   83bac:	8080030b 	ldhu	r2,12(r16)
   83bb0:	04810004 	movi	r18,1024
   83bb4:	84801315 	stw	r18,76(r16)
   83bb8:	1484b03a 	or	r2,r2,r18
   83bbc:	8080030d 	sth	r2,12(r16)
   83bc0:	0027883a 	mov	r19,zero
   83bc4:	003fd806 	br	83b28 <__alt_data_end+0xfffe3b28>
   83bc8:	8140038f 	ldh	r5,14(r16)
   83bcc:	8809883a 	mov	r4,r17
   83bd0:	0083ce40 	call	83ce4 <_isatty_r>
   83bd4:	103fe226 	beq	r2,zero,83b60 <__alt_data_end+0xfffe3b60>
   83bd8:	8080030b 	ldhu	r2,12(r16)
   83bdc:	10800054 	ori	r2,r2,1
   83be0:	8080030d 	sth	r2,12(r16)
   83be4:	003fde06 	br	83b60 <__alt_data_end+0xfffe3b60>
   83be8:	8080030b 	ldhu	r2,12(r16)
   83bec:	10c0800c 	andi	r3,r2,512
   83bf0:	183fdb1e 	bne	r3,zero,83b60 <__alt_data_end+0xfffe3b60>
   83bf4:	10800094 	ori	r2,r2,2
   83bf8:	80c010c4 	addi	r3,r16,67
   83bfc:	8080030d 	sth	r2,12(r16)
   83c00:	00800044 	movi	r2,1
   83c04:	80c00015 	stw	r3,0(r16)
   83c08:	80c00415 	stw	r3,16(r16)
   83c0c:	80800515 	stw	r2,20(r16)
   83c10:	003fd306 	br	83b60 <__alt_data_end+0xfffe3b60>
   83c14:	04810004 	movi	r18,1024
   83c18:	003fc306 	br	83b28 <__alt_data_end+0xfffe3b28>
   83c1c:	0027883a 	mov	r19,zero
   83c20:	04810004 	movi	r18,1024
   83c24:	003fc006 	br	83b28 <__alt_data_end+0xfffe3b28>

00083c28 <_read_r>:
   83c28:	defffd04 	addi	sp,sp,-12
   83c2c:	2805883a 	mov	r2,r5
   83c30:	dc000015 	stw	r16,0(sp)
   83c34:	04000274 	movhi	r16,9
   83c38:	dc400115 	stw	r17,4(sp)
   83c3c:	300b883a 	mov	r5,r6
   83c40:	842c8f04 	addi	r16,r16,-19908
   83c44:	2023883a 	mov	r17,r4
   83c48:	380d883a 	mov	r6,r7
   83c4c:	1009883a 	mov	r4,r2
   83c50:	dfc00215 	stw	ra,8(sp)
   83c54:	80000015 	stw	zero,0(r16)
   83c58:	008450c0 	call	8450c <read>
   83c5c:	00ffffc4 	movi	r3,-1
   83c60:	10c00526 	beq	r2,r3,83c78 <_read_r+0x50>
   83c64:	dfc00217 	ldw	ra,8(sp)
   83c68:	dc400117 	ldw	r17,4(sp)
   83c6c:	dc000017 	ldw	r16,0(sp)
   83c70:	dec00304 	addi	sp,sp,12
   83c74:	f800283a 	ret
   83c78:	80c00017 	ldw	r3,0(r16)
   83c7c:	183ff926 	beq	r3,zero,83c64 <__alt_data_end+0xfffe3c64>
   83c80:	88c00015 	stw	r3,0(r17)
   83c84:	003ff706 	br	83c64 <__alt_data_end+0xfffe3c64>

00083c88 <_fstat_r>:
   83c88:	defffd04 	addi	sp,sp,-12
   83c8c:	2805883a 	mov	r2,r5
   83c90:	dc000015 	stw	r16,0(sp)
   83c94:	04000274 	movhi	r16,9
   83c98:	dc400115 	stw	r17,4(sp)
   83c9c:	842c8f04 	addi	r16,r16,-19908
   83ca0:	2023883a 	mov	r17,r4
   83ca4:	300b883a 	mov	r5,r6
   83ca8:	1009883a 	mov	r4,r2
   83cac:	dfc00215 	stw	ra,8(sp)
   83cb0:	80000015 	stw	zero,0(r16)
   83cb4:	00840680 	call	84068 <fstat>
   83cb8:	00ffffc4 	movi	r3,-1
   83cbc:	10c00526 	beq	r2,r3,83cd4 <_fstat_r+0x4c>
   83cc0:	dfc00217 	ldw	ra,8(sp)
   83cc4:	dc400117 	ldw	r17,4(sp)
   83cc8:	dc000017 	ldw	r16,0(sp)
   83ccc:	dec00304 	addi	sp,sp,12
   83cd0:	f800283a 	ret
   83cd4:	80c00017 	ldw	r3,0(r16)
   83cd8:	183ff926 	beq	r3,zero,83cc0 <__alt_data_end+0xfffe3cc0>
   83cdc:	88c00015 	stw	r3,0(r17)
   83ce0:	003ff706 	br	83cc0 <__alt_data_end+0xfffe3cc0>

00083ce4 <_isatty_r>:
   83ce4:	defffd04 	addi	sp,sp,-12
   83ce8:	dc000015 	stw	r16,0(sp)
   83cec:	04000274 	movhi	r16,9
   83cf0:	dc400115 	stw	r17,4(sp)
   83cf4:	842c8f04 	addi	r16,r16,-19908
   83cf8:	2023883a 	mov	r17,r4
   83cfc:	2809883a 	mov	r4,r5
   83d00:	dfc00215 	stw	ra,8(sp)
   83d04:	80000015 	stw	zero,0(r16)
   83d08:	008415c0 	call	8415c <isatty>
   83d0c:	00ffffc4 	movi	r3,-1
   83d10:	10c00526 	beq	r2,r3,83d28 <_isatty_r+0x44>
   83d14:	dfc00217 	ldw	ra,8(sp)
   83d18:	dc400117 	ldw	r17,4(sp)
   83d1c:	dc000017 	ldw	r16,0(sp)
   83d20:	dec00304 	addi	sp,sp,12
   83d24:	f800283a 	ret
   83d28:	80c00017 	ldw	r3,0(r16)
   83d2c:	183ff926 	beq	r3,zero,83d14 <__alt_data_end+0xfffe3d14>
   83d30:	88c00015 	stw	r3,0(r17)
   83d34:	003ff706 	br	83d14 <__alt_data_end+0xfffe3d14>

00083d38 <__divsi3>:
   83d38:	20001b16 	blt	r4,zero,83da8 <__divsi3+0x70>
   83d3c:	000f883a 	mov	r7,zero
   83d40:	28001616 	blt	r5,zero,83d9c <__divsi3+0x64>
   83d44:	200d883a 	mov	r6,r4
   83d48:	29001a2e 	bgeu	r5,r4,83db4 <__divsi3+0x7c>
   83d4c:	00800804 	movi	r2,32
   83d50:	00c00044 	movi	r3,1
   83d54:	00000106 	br	83d5c <__divsi3+0x24>
   83d58:	10000d26 	beq	r2,zero,83d90 <__divsi3+0x58>
   83d5c:	294b883a 	add	r5,r5,r5
   83d60:	10bfffc4 	addi	r2,r2,-1
   83d64:	18c7883a 	add	r3,r3,r3
   83d68:	293ffb36 	bltu	r5,r4,83d58 <__alt_data_end+0xfffe3d58>
   83d6c:	0005883a 	mov	r2,zero
   83d70:	18000726 	beq	r3,zero,83d90 <__divsi3+0x58>
   83d74:	0005883a 	mov	r2,zero
   83d78:	31400236 	bltu	r6,r5,83d84 <__divsi3+0x4c>
   83d7c:	314dc83a 	sub	r6,r6,r5
   83d80:	10c4b03a 	or	r2,r2,r3
   83d84:	1806d07a 	srli	r3,r3,1
   83d88:	280ad07a 	srli	r5,r5,1
   83d8c:	183ffa1e 	bne	r3,zero,83d78 <__alt_data_end+0xfffe3d78>
   83d90:	38000126 	beq	r7,zero,83d98 <__divsi3+0x60>
   83d94:	0085c83a 	sub	r2,zero,r2
   83d98:	f800283a 	ret
   83d9c:	014bc83a 	sub	r5,zero,r5
   83da0:	39c0005c 	xori	r7,r7,1
   83da4:	003fe706 	br	83d44 <__alt_data_end+0xfffe3d44>
   83da8:	0109c83a 	sub	r4,zero,r4
   83dac:	01c00044 	movi	r7,1
   83db0:	003fe306 	br	83d40 <__alt_data_end+0xfffe3d40>
   83db4:	00c00044 	movi	r3,1
   83db8:	003fee06 	br	83d74 <__alt_data_end+0xfffe3d74>

00083dbc <__modsi3>:
   83dbc:	20001716 	blt	r4,zero,83e1c <__modsi3+0x60>
   83dc0:	000f883a 	mov	r7,zero
   83dc4:	2005883a 	mov	r2,r4
   83dc8:	28001216 	blt	r5,zero,83e14 <__modsi3+0x58>
   83dcc:	2900162e 	bgeu	r5,r4,83e28 <__modsi3+0x6c>
   83dd0:	01800804 	movi	r6,32
   83dd4:	00c00044 	movi	r3,1
   83dd8:	00000106 	br	83de0 <__modsi3+0x24>
   83ddc:	30000a26 	beq	r6,zero,83e08 <__modsi3+0x4c>
   83de0:	294b883a 	add	r5,r5,r5
   83de4:	31bfffc4 	addi	r6,r6,-1
   83de8:	18c7883a 	add	r3,r3,r3
   83dec:	293ffb36 	bltu	r5,r4,83ddc <__alt_data_end+0xfffe3ddc>
   83df0:	18000526 	beq	r3,zero,83e08 <__modsi3+0x4c>
   83df4:	1806d07a 	srli	r3,r3,1
   83df8:	11400136 	bltu	r2,r5,83e00 <__modsi3+0x44>
   83dfc:	1145c83a 	sub	r2,r2,r5
   83e00:	280ad07a 	srli	r5,r5,1
   83e04:	183ffb1e 	bne	r3,zero,83df4 <__alt_data_end+0xfffe3df4>
   83e08:	38000126 	beq	r7,zero,83e10 <__modsi3+0x54>
   83e0c:	0085c83a 	sub	r2,zero,r2
   83e10:	f800283a 	ret
   83e14:	014bc83a 	sub	r5,zero,r5
   83e18:	003fec06 	br	83dcc <__alt_data_end+0xfffe3dcc>
   83e1c:	0109c83a 	sub	r4,zero,r4
   83e20:	01c00044 	movi	r7,1
   83e24:	003fe706 	br	83dc4 <__alt_data_end+0xfffe3dc4>
   83e28:	00c00044 	movi	r3,1
   83e2c:	003ff106 	br	83df4 <__alt_data_end+0xfffe3df4>

00083e30 <__udivsi3>:
   83e30:	200d883a 	mov	r6,r4
   83e34:	2900152e 	bgeu	r5,r4,83e8c <__udivsi3+0x5c>
   83e38:	28001416 	blt	r5,zero,83e8c <__udivsi3+0x5c>
   83e3c:	00800804 	movi	r2,32
   83e40:	00c00044 	movi	r3,1
   83e44:	00000206 	br	83e50 <__udivsi3+0x20>
   83e48:	10000e26 	beq	r2,zero,83e84 <__udivsi3+0x54>
   83e4c:	28000516 	blt	r5,zero,83e64 <__udivsi3+0x34>
   83e50:	294b883a 	add	r5,r5,r5
   83e54:	10bfffc4 	addi	r2,r2,-1
   83e58:	18c7883a 	add	r3,r3,r3
   83e5c:	293ffa36 	bltu	r5,r4,83e48 <__alt_data_end+0xfffe3e48>
   83e60:	18000826 	beq	r3,zero,83e84 <__udivsi3+0x54>
   83e64:	0005883a 	mov	r2,zero
   83e68:	31400236 	bltu	r6,r5,83e74 <__udivsi3+0x44>
   83e6c:	314dc83a 	sub	r6,r6,r5
   83e70:	10c4b03a 	or	r2,r2,r3
   83e74:	1806d07a 	srli	r3,r3,1
   83e78:	280ad07a 	srli	r5,r5,1
   83e7c:	183ffa1e 	bne	r3,zero,83e68 <__alt_data_end+0xfffe3e68>
   83e80:	f800283a 	ret
   83e84:	0005883a 	mov	r2,zero
   83e88:	f800283a 	ret
   83e8c:	00c00044 	movi	r3,1
   83e90:	003ff406 	br	83e64 <__alt_data_end+0xfffe3e64>

00083e94 <__umodsi3>:
   83e94:	2005883a 	mov	r2,r4
   83e98:	2900122e 	bgeu	r5,r4,83ee4 <__umodsi3+0x50>
   83e9c:	28001116 	blt	r5,zero,83ee4 <__umodsi3+0x50>
   83ea0:	01800804 	movi	r6,32
   83ea4:	00c00044 	movi	r3,1
   83ea8:	00000206 	br	83eb4 <__umodsi3+0x20>
   83eac:	30000c26 	beq	r6,zero,83ee0 <__umodsi3+0x4c>
   83eb0:	28000516 	blt	r5,zero,83ec8 <__umodsi3+0x34>
   83eb4:	294b883a 	add	r5,r5,r5
   83eb8:	31bfffc4 	addi	r6,r6,-1
   83ebc:	18c7883a 	add	r3,r3,r3
   83ec0:	293ffa36 	bltu	r5,r4,83eac <__alt_data_end+0xfffe3eac>
   83ec4:	18000626 	beq	r3,zero,83ee0 <__umodsi3+0x4c>
   83ec8:	1806d07a 	srli	r3,r3,1
   83ecc:	11400136 	bltu	r2,r5,83ed4 <__umodsi3+0x40>
   83ed0:	1145c83a 	sub	r2,r2,r5
   83ed4:	280ad07a 	srli	r5,r5,1
   83ed8:	183ffb1e 	bne	r3,zero,83ec8 <__alt_data_end+0xfffe3ec8>
   83edc:	f800283a 	ret
   83ee0:	f800283a 	ret
   83ee4:	00c00044 	movi	r3,1
   83ee8:	003ff706 	br	83ec8 <__alt_data_end+0xfffe3ec8>

00083eec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   83eec:	defffe04 	addi	sp,sp,-8
   83ef0:	dfc00115 	stw	ra,4(sp)
   83ef4:	df000015 	stw	fp,0(sp)
   83ef8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   83efc:	d0a00917 	ldw	r2,-32732(gp)
   83f00:	10000326 	beq	r2,zero,83f10 <alt_get_errno+0x24>
   83f04:	d0a00917 	ldw	r2,-32732(gp)
   83f08:	103ee83a 	callr	r2
   83f0c:	00000106 	br	83f14 <alt_get_errno+0x28>
   83f10:	d0a8d404 	addi	r2,gp,-23728
}
   83f14:	e037883a 	mov	sp,fp
   83f18:	dfc00117 	ldw	ra,4(sp)
   83f1c:	df000017 	ldw	fp,0(sp)
   83f20:	dec00204 	addi	sp,sp,8
   83f24:	f800283a 	ret

00083f28 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   83f28:	defffb04 	addi	sp,sp,-20
   83f2c:	dfc00415 	stw	ra,16(sp)
   83f30:	df000315 	stw	fp,12(sp)
   83f34:	df000304 	addi	fp,sp,12
   83f38:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   83f3c:	e0bfff17 	ldw	r2,-4(fp)
   83f40:	10000816 	blt	r2,zero,83f64 <close+0x3c>
   83f44:	01400304 	movi	r5,12
   83f48:	e13fff17 	ldw	r4,-4(fp)
   83f4c:	00810e00 	call	810e0 <__mulsi3>
   83f50:	1007883a 	mov	r3,r2
   83f54:	00800234 	movhi	r2,8
   83f58:	109f4304 	addi	r2,r2,32012
   83f5c:	1885883a 	add	r2,r3,r2
   83f60:	00000106 	br	83f68 <close+0x40>
   83f64:	0005883a 	mov	r2,zero
   83f68:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   83f6c:	e0bffd17 	ldw	r2,-12(fp)
   83f70:	10001926 	beq	r2,zero,83fd8 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   83f74:	e0bffd17 	ldw	r2,-12(fp)
   83f78:	10800017 	ldw	r2,0(r2)
   83f7c:	10800417 	ldw	r2,16(r2)
   83f80:	10000626 	beq	r2,zero,83f9c <close+0x74>
   83f84:	e0bffd17 	ldw	r2,-12(fp)
   83f88:	10800017 	ldw	r2,0(r2)
   83f8c:	10800417 	ldw	r2,16(r2)
   83f90:	e13ffd17 	ldw	r4,-12(fp)
   83f94:	103ee83a 	callr	r2
   83f98:	00000106 	br	83fa0 <close+0x78>
   83f9c:	0005883a 	mov	r2,zero
   83fa0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   83fa4:	e13fff17 	ldw	r4,-4(fp)
   83fa8:	00846100 	call	84610 <alt_release_fd>
    if (rval < 0)
   83fac:	e0bffe17 	ldw	r2,-8(fp)
   83fb0:	1000070e 	bge	r2,zero,83fd0 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   83fb4:	0083eec0 	call	83eec <alt_get_errno>
   83fb8:	1007883a 	mov	r3,r2
   83fbc:	e0bffe17 	ldw	r2,-8(fp)
   83fc0:	0085c83a 	sub	r2,zero,r2
   83fc4:	18800015 	stw	r2,0(r3)
      return -1;
   83fc8:	00bfffc4 	movi	r2,-1
   83fcc:	00000706 	br	83fec <close+0xc4>
    }
    return 0;
   83fd0:	0005883a 	mov	r2,zero
   83fd4:	00000506 	br	83fec <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   83fd8:	0083eec0 	call	83eec <alt_get_errno>
   83fdc:	1007883a 	mov	r3,r2
   83fe0:	00801444 	movi	r2,81
   83fe4:	18800015 	stw	r2,0(r3)
    return -1;
   83fe8:	00bfffc4 	movi	r2,-1
  }
}
   83fec:	e037883a 	mov	sp,fp
   83ff0:	dfc00117 	ldw	ra,4(sp)
   83ff4:	df000017 	ldw	fp,0(sp)
   83ff8:	dec00204 	addi	sp,sp,8
   83ffc:	f800283a 	ret

00084000 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   84000:	defffc04 	addi	sp,sp,-16
   84004:	df000315 	stw	fp,12(sp)
   84008:	df000304 	addi	fp,sp,12
   8400c:	e13ffd15 	stw	r4,-12(fp)
   84010:	e17ffe15 	stw	r5,-8(fp)
   84014:	e1bfff15 	stw	r6,-4(fp)
  return len;
   84018:	e0bfff17 	ldw	r2,-4(fp)
}
   8401c:	e037883a 	mov	sp,fp
   84020:	df000017 	ldw	fp,0(sp)
   84024:	dec00104 	addi	sp,sp,4
   84028:	f800283a 	ret

0008402c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8402c:	defffe04 	addi	sp,sp,-8
   84030:	dfc00115 	stw	ra,4(sp)
   84034:	df000015 	stw	fp,0(sp)
   84038:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8403c:	d0a00917 	ldw	r2,-32732(gp)
   84040:	10000326 	beq	r2,zero,84050 <alt_get_errno+0x24>
   84044:	d0a00917 	ldw	r2,-32732(gp)
   84048:	103ee83a 	callr	r2
   8404c:	00000106 	br	84054 <alt_get_errno+0x28>
   84050:	d0a8d404 	addi	r2,gp,-23728
}
   84054:	e037883a 	mov	sp,fp
   84058:	dfc00117 	ldw	ra,4(sp)
   8405c:	df000017 	ldw	fp,0(sp)
   84060:	dec00204 	addi	sp,sp,8
   84064:	f800283a 	ret

00084068 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   84068:	defffb04 	addi	sp,sp,-20
   8406c:	dfc00415 	stw	ra,16(sp)
   84070:	df000315 	stw	fp,12(sp)
   84074:	df000304 	addi	fp,sp,12
   84078:	e13ffe15 	stw	r4,-8(fp)
   8407c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   84080:	e0bffe17 	ldw	r2,-8(fp)
   84084:	10000816 	blt	r2,zero,840a8 <fstat+0x40>
   84088:	01400304 	movi	r5,12
   8408c:	e13ffe17 	ldw	r4,-8(fp)
   84090:	00810e00 	call	810e0 <__mulsi3>
   84094:	1007883a 	mov	r3,r2
   84098:	00800234 	movhi	r2,8
   8409c:	109f4304 	addi	r2,r2,32012
   840a0:	1885883a 	add	r2,r3,r2
   840a4:	00000106 	br	840ac <fstat+0x44>
   840a8:	0005883a 	mov	r2,zero
   840ac:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   840b0:	e0bffd17 	ldw	r2,-12(fp)
   840b4:	10001026 	beq	r2,zero,840f8 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   840b8:	e0bffd17 	ldw	r2,-12(fp)
   840bc:	10800017 	ldw	r2,0(r2)
   840c0:	10800817 	ldw	r2,32(r2)
   840c4:	10000726 	beq	r2,zero,840e4 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   840c8:	e0bffd17 	ldw	r2,-12(fp)
   840cc:	10800017 	ldw	r2,0(r2)
   840d0:	10800817 	ldw	r2,32(r2)
   840d4:	e17fff17 	ldw	r5,-4(fp)
   840d8:	e13ffd17 	ldw	r4,-12(fp)
   840dc:	103ee83a 	callr	r2
   840e0:	00000a06 	br	8410c <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   840e4:	e0bfff17 	ldw	r2,-4(fp)
   840e8:	00c80004 	movi	r3,8192
   840ec:	10c00115 	stw	r3,4(r2)
      return 0;
   840f0:	0005883a 	mov	r2,zero
   840f4:	00000506 	br	8410c <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   840f8:	008402c0 	call	8402c <alt_get_errno>
   840fc:	1007883a 	mov	r3,r2
   84100:	00801444 	movi	r2,81
   84104:	18800015 	stw	r2,0(r3)
    return -1;
   84108:	00bfffc4 	movi	r2,-1
  }
}
   8410c:	e037883a 	mov	sp,fp
   84110:	dfc00117 	ldw	ra,4(sp)
   84114:	df000017 	ldw	fp,0(sp)
   84118:	dec00204 	addi	sp,sp,8
   8411c:	f800283a 	ret

00084120 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   84120:	defffe04 	addi	sp,sp,-8
   84124:	dfc00115 	stw	ra,4(sp)
   84128:	df000015 	stw	fp,0(sp)
   8412c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   84130:	d0a00917 	ldw	r2,-32732(gp)
   84134:	10000326 	beq	r2,zero,84144 <alt_get_errno+0x24>
   84138:	d0a00917 	ldw	r2,-32732(gp)
   8413c:	103ee83a 	callr	r2
   84140:	00000106 	br	84148 <alt_get_errno+0x28>
   84144:	d0a8d404 	addi	r2,gp,-23728
}
   84148:	e037883a 	mov	sp,fp
   8414c:	dfc00117 	ldw	ra,4(sp)
   84150:	df000017 	ldw	fp,0(sp)
   84154:	dec00204 	addi	sp,sp,8
   84158:	f800283a 	ret

0008415c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   8415c:	deffed04 	addi	sp,sp,-76
   84160:	dfc01215 	stw	ra,72(sp)
   84164:	df001115 	stw	fp,68(sp)
   84168:	df001104 	addi	fp,sp,68
   8416c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   84170:	e0bfff17 	ldw	r2,-4(fp)
   84174:	10000816 	blt	r2,zero,84198 <isatty+0x3c>
   84178:	01400304 	movi	r5,12
   8417c:	e13fff17 	ldw	r4,-4(fp)
   84180:	00810e00 	call	810e0 <__mulsi3>
   84184:	1007883a 	mov	r3,r2
   84188:	00800234 	movhi	r2,8
   8418c:	109f4304 	addi	r2,r2,32012
   84190:	1885883a 	add	r2,r3,r2
   84194:	00000106 	br	8419c <isatty+0x40>
   84198:	0005883a 	mov	r2,zero
   8419c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   841a0:	e0bfef17 	ldw	r2,-68(fp)
   841a4:	10000e26 	beq	r2,zero,841e0 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   841a8:	e0bfef17 	ldw	r2,-68(fp)
   841ac:	10800017 	ldw	r2,0(r2)
   841b0:	10800817 	ldw	r2,32(r2)
   841b4:	1000021e 	bne	r2,zero,841c0 <isatty+0x64>
    {
      return 1;
   841b8:	00800044 	movi	r2,1
   841bc:	00000d06 	br	841f4 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   841c0:	e0bff004 	addi	r2,fp,-64
   841c4:	100b883a 	mov	r5,r2
   841c8:	e13fff17 	ldw	r4,-4(fp)
   841cc:	00840680 	call	84068 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   841d0:	e0bff117 	ldw	r2,-60(fp)
   841d4:	10880020 	cmpeqi	r2,r2,8192
   841d8:	10803fcc 	andi	r2,r2,255
   841dc:	00000506 	br	841f4 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   841e0:	00841200 	call	84120 <alt_get_errno>
   841e4:	1007883a 	mov	r3,r2
   841e8:	00801444 	movi	r2,81
   841ec:	18800015 	stw	r2,0(r3)
    return 0;
   841f0:	0005883a 	mov	r2,zero
  }
}
   841f4:	e037883a 	mov	sp,fp
   841f8:	dfc00117 	ldw	ra,4(sp)
   841fc:	df000017 	ldw	fp,0(sp)
   84200:	dec00204 	addi	sp,sp,8
   84204:	f800283a 	ret

00084208 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   84208:	defffc04 	addi	sp,sp,-16
   8420c:	df000315 	stw	fp,12(sp)
   84210:	df000304 	addi	fp,sp,12
   84214:	e13ffd15 	stw	r4,-12(fp)
   84218:	e17ffe15 	stw	r5,-8(fp)
   8421c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   84220:	e0fffe17 	ldw	r3,-8(fp)
   84224:	e0bffd17 	ldw	r2,-12(fp)
   84228:	18800c26 	beq	r3,r2,8425c <alt_load_section+0x54>
  {
    while( to != end )
   8422c:	00000806 	br	84250 <alt_load_section+0x48>
    {
      *to++ = *from++;
   84230:	e0bffe17 	ldw	r2,-8(fp)
   84234:	10c00104 	addi	r3,r2,4
   84238:	e0fffe15 	stw	r3,-8(fp)
   8423c:	e0fffd17 	ldw	r3,-12(fp)
   84240:	19000104 	addi	r4,r3,4
   84244:	e13ffd15 	stw	r4,-12(fp)
   84248:	18c00017 	ldw	r3,0(r3)
   8424c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   84250:	e0fffe17 	ldw	r3,-8(fp)
   84254:	e0bfff17 	ldw	r2,-4(fp)
   84258:	18bff51e 	bne	r3,r2,84230 <__alt_data_end+0xfffe4230>
    {
      *to++ = *from++;
    }
  }
}
   8425c:	0001883a 	nop
   84260:	e037883a 	mov	sp,fp
   84264:	df000017 	ldw	fp,0(sp)
   84268:	dec00104 	addi	sp,sp,4
   8426c:	f800283a 	ret

00084270 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   84270:	defffe04 	addi	sp,sp,-8
   84274:	dfc00115 	stw	ra,4(sp)
   84278:	df000015 	stw	fp,0(sp)
   8427c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   84280:	01800274 	movhi	r6,9
   84284:	31a3c904 	addi	r6,r6,-28892
   84288:	01400234 	movhi	r5,8
   8428c:	295b0b04 	addi	r5,r5,27692
   84290:	01000274 	movhi	r4,9
   84294:	2123c904 	addi	r4,r4,-28892
   84298:	00842080 	call	84208 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   8429c:	01800234 	movhi	r6,8
   842a0:	31808c04 	addi	r6,r6,560
   842a4:	01400234 	movhi	r5,8
   842a8:	29400804 	addi	r5,r5,32
   842ac:	01000234 	movhi	r4,8
   842b0:	21000804 	addi	r4,r4,32
   842b4:	00842080 	call	84208 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   842b8:	01800234 	movhi	r6,8
   842bc:	319b0b04 	addi	r6,r6,27692
   842c0:	01400234 	movhi	r5,8
   842c4:	295ae804 	addi	r5,r5,27552
   842c8:	01000234 	movhi	r4,8
   842cc:	211ae804 	addi	r4,r4,27552
   842d0:	00842080 	call	84208 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   842d4:	0085ae80 	call	85ae8 <alt_dcache_flush_all>
  alt_icache_flush_all();
   842d8:	0085ca80 	call	85ca8 <alt_icache_flush_all>
}
   842dc:	0001883a 	nop
   842e0:	e037883a 	mov	sp,fp
   842e4:	dfc00117 	ldw	ra,4(sp)
   842e8:	df000017 	ldw	fp,0(sp)
   842ec:	dec00204 	addi	sp,sp,8
   842f0:	f800283a 	ret

000842f4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   842f4:	defffe04 	addi	sp,sp,-8
   842f8:	dfc00115 	stw	ra,4(sp)
   842fc:	df000015 	stw	fp,0(sp)
   84300:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   84304:	d0a00917 	ldw	r2,-32732(gp)
   84308:	10000326 	beq	r2,zero,84318 <alt_get_errno+0x24>
   8430c:	d0a00917 	ldw	r2,-32732(gp)
   84310:	103ee83a 	callr	r2
   84314:	00000106 	br	8431c <alt_get_errno+0x28>
   84318:	d0a8d404 	addi	r2,gp,-23728
}
   8431c:	e037883a 	mov	sp,fp
   84320:	dfc00117 	ldw	ra,4(sp)
   84324:	df000017 	ldw	fp,0(sp)
   84328:	dec00204 	addi	sp,sp,8
   8432c:	f800283a 	ret

00084330 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   84330:	defff904 	addi	sp,sp,-28
   84334:	dfc00615 	stw	ra,24(sp)
   84338:	df000515 	stw	fp,20(sp)
   8433c:	df000504 	addi	fp,sp,20
   84340:	e13ffd15 	stw	r4,-12(fp)
   84344:	e17ffe15 	stw	r5,-8(fp)
   84348:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   8434c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   84350:	e0bffd17 	ldw	r2,-12(fp)
   84354:	10000816 	blt	r2,zero,84378 <lseek+0x48>
   84358:	01400304 	movi	r5,12
   8435c:	e13ffd17 	ldw	r4,-12(fp)
   84360:	00810e00 	call	810e0 <__mulsi3>
   84364:	1007883a 	mov	r3,r2
   84368:	00800234 	movhi	r2,8
   8436c:	109f4304 	addi	r2,r2,32012
   84370:	1885883a 	add	r2,r3,r2
   84374:	00000106 	br	8437c <lseek+0x4c>
   84378:	0005883a 	mov	r2,zero
   8437c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   84380:	e0bffc17 	ldw	r2,-16(fp)
   84384:	10001026 	beq	r2,zero,843c8 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   84388:	e0bffc17 	ldw	r2,-16(fp)
   8438c:	10800017 	ldw	r2,0(r2)
   84390:	10800717 	ldw	r2,28(r2)
   84394:	10000926 	beq	r2,zero,843bc <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   84398:	e0bffc17 	ldw	r2,-16(fp)
   8439c:	10800017 	ldw	r2,0(r2)
   843a0:	10800717 	ldw	r2,28(r2)
   843a4:	e1bfff17 	ldw	r6,-4(fp)
   843a8:	e17ffe17 	ldw	r5,-8(fp)
   843ac:	e13ffc17 	ldw	r4,-16(fp)
   843b0:	103ee83a 	callr	r2
   843b4:	e0bffb15 	stw	r2,-20(fp)
   843b8:	00000506 	br	843d0 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   843bc:	00bfde84 	movi	r2,-134
   843c0:	e0bffb15 	stw	r2,-20(fp)
   843c4:	00000206 	br	843d0 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   843c8:	00bfebc4 	movi	r2,-81
   843cc:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   843d0:	e0bffb17 	ldw	r2,-20(fp)
   843d4:	1000070e 	bge	r2,zero,843f4 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   843d8:	00842f40 	call	842f4 <alt_get_errno>
   843dc:	1007883a 	mov	r3,r2
   843e0:	e0bffb17 	ldw	r2,-20(fp)
   843e4:	0085c83a 	sub	r2,zero,r2
   843e8:	18800015 	stw	r2,0(r3)
    rc = -1;
   843ec:	00bfffc4 	movi	r2,-1
   843f0:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   843f4:	e0bffb17 	ldw	r2,-20(fp)
}
   843f8:	e037883a 	mov	sp,fp
   843fc:	dfc00117 	ldw	ra,4(sp)
   84400:	df000017 	ldw	fp,0(sp)
   84404:	dec00204 	addi	sp,sp,8
   84408:	f800283a 	ret

0008440c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   8440c:	defffd04 	addi	sp,sp,-12
   84410:	dfc00215 	stw	ra,8(sp)
   84414:	df000115 	stw	fp,4(sp)
   84418:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   8441c:	0009883a 	mov	r4,zero
   84420:	00848b40 	call	848b4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   84424:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   84428:	00848ec0 	call	848ec <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   8442c:	01800234 	movhi	r6,8
   84430:	319b0104 	addi	r6,r6,27652
   84434:	01400234 	movhi	r5,8
   84438:	295b0104 	addi	r5,r5,27652
   8443c:	01000234 	movhi	r4,8
   84440:	211b0104 	addi	r4,r4,27652
   84444:	008604c0 	call	8604c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   84448:	0085be80 	call	85be8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   8444c:	01000234 	movhi	r4,8
   84450:	21171204 	addi	r4,r4,23624
   84454:	008680c0 	call	8680c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   84458:	d0a8d517 	ldw	r2,-23724(gp)
   8445c:	d0e8d617 	ldw	r3,-23720(gp)
   84460:	d128d717 	ldw	r4,-23716(gp)
   84464:	200d883a 	mov	r6,r4
   84468:	180b883a 	mov	r5,r3
   8446c:	1009883a 	mov	r4,r2
   84470:	0080e5c0 	call	80e5c <main>
   84474:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   84478:	01000044 	movi	r4,1
   8447c:	0083f280 	call	83f28 <close>
  exit (result);
   84480:	e13fff17 	ldw	r4,-4(fp)
   84484:	00868200 	call	86820 <exit>

00084488 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   84488:	defffe04 	addi	sp,sp,-8
   8448c:	df000115 	stw	fp,4(sp)
   84490:	df000104 	addi	fp,sp,4
   84494:	e13fff15 	stw	r4,-4(fp)
}
   84498:	0001883a 	nop
   8449c:	e037883a 	mov	sp,fp
   844a0:	df000017 	ldw	fp,0(sp)
   844a4:	dec00104 	addi	sp,sp,4
   844a8:	f800283a 	ret

000844ac <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   844ac:	defffe04 	addi	sp,sp,-8
   844b0:	df000115 	stw	fp,4(sp)
   844b4:	df000104 	addi	fp,sp,4
   844b8:	e13fff15 	stw	r4,-4(fp)
}
   844bc:	0001883a 	nop
   844c0:	e037883a 	mov	sp,fp
   844c4:	df000017 	ldw	fp,0(sp)
   844c8:	dec00104 	addi	sp,sp,4
   844cc:	f800283a 	ret

000844d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   844d0:	defffe04 	addi	sp,sp,-8
   844d4:	dfc00115 	stw	ra,4(sp)
   844d8:	df000015 	stw	fp,0(sp)
   844dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   844e0:	d0a00917 	ldw	r2,-32732(gp)
   844e4:	10000326 	beq	r2,zero,844f4 <alt_get_errno+0x24>
   844e8:	d0a00917 	ldw	r2,-32732(gp)
   844ec:	103ee83a 	callr	r2
   844f0:	00000106 	br	844f8 <alt_get_errno+0x28>
   844f4:	d0a8d404 	addi	r2,gp,-23728
}
   844f8:	e037883a 	mov	sp,fp
   844fc:	dfc00117 	ldw	ra,4(sp)
   84500:	df000017 	ldw	fp,0(sp)
   84504:	dec00204 	addi	sp,sp,8
   84508:	f800283a 	ret

0008450c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   8450c:	defff904 	addi	sp,sp,-28
   84510:	dfc00615 	stw	ra,24(sp)
   84514:	df000515 	stw	fp,20(sp)
   84518:	df000504 	addi	fp,sp,20
   8451c:	e13ffd15 	stw	r4,-12(fp)
   84520:	e17ffe15 	stw	r5,-8(fp)
   84524:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   84528:	e0bffd17 	ldw	r2,-12(fp)
   8452c:	10000816 	blt	r2,zero,84550 <read+0x44>
   84530:	01400304 	movi	r5,12
   84534:	e13ffd17 	ldw	r4,-12(fp)
   84538:	00810e00 	call	810e0 <__mulsi3>
   8453c:	1007883a 	mov	r3,r2
   84540:	00800234 	movhi	r2,8
   84544:	109f4304 	addi	r2,r2,32012
   84548:	1885883a 	add	r2,r3,r2
   8454c:	00000106 	br	84554 <read+0x48>
   84550:	0005883a 	mov	r2,zero
   84554:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   84558:	e0bffb17 	ldw	r2,-20(fp)
   8455c:	10002226 	beq	r2,zero,845e8 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   84560:	e0bffb17 	ldw	r2,-20(fp)
   84564:	10800217 	ldw	r2,8(r2)
   84568:	108000cc 	andi	r2,r2,3
   8456c:	10800060 	cmpeqi	r2,r2,1
   84570:	1000181e 	bne	r2,zero,845d4 <read+0xc8>
        (fd->dev->read))
   84574:	e0bffb17 	ldw	r2,-20(fp)
   84578:	10800017 	ldw	r2,0(r2)
   8457c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   84580:	10001426 	beq	r2,zero,845d4 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   84584:	e0bffb17 	ldw	r2,-20(fp)
   84588:	10800017 	ldw	r2,0(r2)
   8458c:	10800517 	ldw	r2,20(r2)
   84590:	e0ffff17 	ldw	r3,-4(fp)
   84594:	180d883a 	mov	r6,r3
   84598:	e17ffe17 	ldw	r5,-8(fp)
   8459c:	e13ffb17 	ldw	r4,-20(fp)
   845a0:	103ee83a 	callr	r2
   845a4:	e0bffc15 	stw	r2,-16(fp)
   845a8:	e0bffc17 	ldw	r2,-16(fp)
   845ac:	1000070e 	bge	r2,zero,845cc <read+0xc0>
        {
          ALT_ERRNO = -rval;
   845b0:	00844d00 	call	844d0 <alt_get_errno>
   845b4:	1007883a 	mov	r3,r2
   845b8:	e0bffc17 	ldw	r2,-16(fp)
   845bc:	0085c83a 	sub	r2,zero,r2
   845c0:	18800015 	stw	r2,0(r3)
          return -1;
   845c4:	00bfffc4 	movi	r2,-1
   845c8:	00000c06 	br	845fc <read+0xf0>
        }
        return rval;
   845cc:	e0bffc17 	ldw	r2,-16(fp)
   845d0:	00000a06 	br	845fc <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   845d4:	00844d00 	call	844d0 <alt_get_errno>
   845d8:	1007883a 	mov	r3,r2
   845dc:	00800344 	movi	r2,13
   845e0:	18800015 	stw	r2,0(r3)
   845e4:	00000406 	br	845f8 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   845e8:	00844d00 	call	844d0 <alt_get_errno>
   845ec:	1007883a 	mov	r3,r2
   845f0:	00801444 	movi	r2,81
   845f4:	18800015 	stw	r2,0(r3)
  }
  return -1;
   845f8:	00bfffc4 	movi	r2,-1
}
   845fc:	e037883a 	mov	sp,fp
   84600:	dfc00117 	ldw	ra,4(sp)
   84604:	df000017 	ldw	fp,0(sp)
   84608:	dec00204 	addi	sp,sp,8
   8460c:	f800283a 	ret

00084610 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   84610:	defffc04 	addi	sp,sp,-16
   84614:	dfc00315 	stw	ra,12(sp)
   84618:	df000215 	stw	fp,8(sp)
   8461c:	dc000115 	stw	r16,4(sp)
   84620:	df000204 	addi	fp,sp,8
   84624:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   84628:	e0bffe17 	ldw	r2,-8(fp)
   8462c:	108000d0 	cmplti	r2,r2,3
   84630:	1000111e 	bne	r2,zero,84678 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   84634:	04000234 	movhi	r16,8
   84638:	841f4304 	addi	r16,r16,32012
   8463c:	e0bffe17 	ldw	r2,-8(fp)
   84640:	01400304 	movi	r5,12
   84644:	1009883a 	mov	r4,r2
   84648:	00810e00 	call	810e0 <__mulsi3>
   8464c:	8085883a 	add	r2,r16,r2
   84650:	10800204 	addi	r2,r2,8
   84654:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   84658:	04000234 	movhi	r16,8
   8465c:	841f4304 	addi	r16,r16,32012
   84660:	e0bffe17 	ldw	r2,-8(fp)
   84664:	01400304 	movi	r5,12
   84668:	1009883a 	mov	r4,r2
   8466c:	00810e00 	call	810e0 <__mulsi3>
   84670:	8085883a 	add	r2,r16,r2
   84674:	10000015 	stw	zero,0(r2)
  }
}
   84678:	0001883a 	nop
   8467c:	e6ffff04 	addi	sp,fp,-4
   84680:	dfc00217 	ldw	ra,8(sp)
   84684:	df000117 	ldw	fp,4(sp)
   84688:	dc000017 	ldw	r16,0(sp)
   8468c:	dec00304 	addi	sp,sp,12
   84690:	f800283a 	ret

00084694 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   84694:	defff904 	addi	sp,sp,-28
   84698:	df000615 	stw	fp,24(sp)
   8469c:	df000604 	addi	fp,sp,24
   846a0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   846a4:	0005303a 	rdctl	r2,status
   846a8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   846ac:	e0fffe17 	ldw	r3,-8(fp)
   846b0:	00bfff84 	movi	r2,-2
   846b4:	1884703a 	and	r2,r3,r2
   846b8:	1001703a 	wrctl	status,r2
  
  return context;
   846bc:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   846c0:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   846c4:	d0a00a17 	ldw	r2,-32728(gp)
   846c8:	10c000c4 	addi	r3,r2,3
   846cc:	00bfff04 	movi	r2,-4
   846d0:	1884703a 	and	r2,r3,r2
   846d4:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   846d8:	d0e00a17 	ldw	r3,-32728(gp)
   846dc:	e0bfff17 	ldw	r2,-4(fp)
   846e0:	1887883a 	add	r3,r3,r2
   846e4:	008002b4 	movhi	r2,10
   846e8:	10800004 	addi	r2,r2,0
   846ec:	10c0062e 	bgeu	r2,r3,84708 <sbrk+0x74>
   846f0:	e0bffb17 	ldw	r2,-20(fp)
   846f4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   846f8:	e0bffa17 	ldw	r2,-24(fp)
   846fc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   84700:	00bfffc4 	movi	r2,-1
   84704:	00000b06 	br	84734 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   84708:	d0a00a17 	ldw	r2,-32728(gp)
   8470c:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   84710:	d0e00a17 	ldw	r3,-32728(gp)
   84714:	e0bfff17 	ldw	r2,-4(fp)
   84718:	1885883a 	add	r2,r3,r2
   8471c:	d0a00a15 	stw	r2,-32728(gp)
   84720:	e0bffb17 	ldw	r2,-20(fp)
   84724:	e0bffc15 	stw	r2,-16(fp)
   84728:	e0bffc17 	ldw	r2,-16(fp)
   8472c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   84730:	e0bffd17 	ldw	r2,-12(fp)
} 
   84734:	e037883a 	mov	sp,fp
   84738:	df000017 	ldw	fp,0(sp)
   8473c:	dec00104 	addi	sp,sp,4
   84740:	f800283a 	ret

00084744 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   84744:	defffe04 	addi	sp,sp,-8
   84748:	dfc00115 	stw	ra,4(sp)
   8474c:	df000015 	stw	fp,0(sp)
   84750:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   84754:	d0a00917 	ldw	r2,-32732(gp)
   84758:	10000326 	beq	r2,zero,84768 <alt_get_errno+0x24>
   8475c:	d0a00917 	ldw	r2,-32732(gp)
   84760:	103ee83a 	callr	r2
   84764:	00000106 	br	8476c <alt_get_errno+0x28>
   84768:	d0a8d404 	addi	r2,gp,-23728
}
   8476c:	e037883a 	mov	sp,fp
   84770:	dfc00117 	ldw	ra,4(sp)
   84774:	df000017 	ldw	fp,0(sp)
   84778:	dec00204 	addi	sp,sp,8
   8477c:	f800283a 	ret

00084780 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   84780:	defff904 	addi	sp,sp,-28
   84784:	dfc00615 	stw	ra,24(sp)
   84788:	df000515 	stw	fp,20(sp)
   8478c:	df000504 	addi	fp,sp,20
   84790:	e13ffd15 	stw	r4,-12(fp)
   84794:	e17ffe15 	stw	r5,-8(fp)
   84798:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8479c:	e0bffd17 	ldw	r2,-12(fp)
   847a0:	10000816 	blt	r2,zero,847c4 <write+0x44>
   847a4:	01400304 	movi	r5,12
   847a8:	e13ffd17 	ldw	r4,-12(fp)
   847ac:	00810e00 	call	810e0 <__mulsi3>
   847b0:	1007883a 	mov	r3,r2
   847b4:	00800234 	movhi	r2,8
   847b8:	109f4304 	addi	r2,r2,32012
   847bc:	1885883a 	add	r2,r3,r2
   847c0:	00000106 	br	847c8 <write+0x48>
   847c4:	0005883a 	mov	r2,zero
   847c8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   847cc:	e0bffb17 	ldw	r2,-20(fp)
   847d0:	10002126 	beq	r2,zero,84858 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   847d4:	e0bffb17 	ldw	r2,-20(fp)
   847d8:	10800217 	ldw	r2,8(r2)
   847dc:	108000cc 	andi	r2,r2,3
   847e0:	10001826 	beq	r2,zero,84844 <write+0xc4>
   847e4:	e0bffb17 	ldw	r2,-20(fp)
   847e8:	10800017 	ldw	r2,0(r2)
   847ec:	10800617 	ldw	r2,24(r2)
   847f0:	10001426 	beq	r2,zero,84844 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   847f4:	e0bffb17 	ldw	r2,-20(fp)
   847f8:	10800017 	ldw	r2,0(r2)
   847fc:	10800617 	ldw	r2,24(r2)
   84800:	e0ffff17 	ldw	r3,-4(fp)
   84804:	180d883a 	mov	r6,r3
   84808:	e17ffe17 	ldw	r5,-8(fp)
   8480c:	e13ffb17 	ldw	r4,-20(fp)
   84810:	103ee83a 	callr	r2
   84814:	e0bffc15 	stw	r2,-16(fp)
   84818:	e0bffc17 	ldw	r2,-16(fp)
   8481c:	1000070e 	bge	r2,zero,8483c <write+0xbc>
      {
        ALT_ERRNO = -rval;
   84820:	00847440 	call	84744 <alt_get_errno>
   84824:	1007883a 	mov	r3,r2
   84828:	e0bffc17 	ldw	r2,-16(fp)
   8482c:	0085c83a 	sub	r2,zero,r2
   84830:	18800015 	stw	r2,0(r3)
        return -1;
   84834:	00bfffc4 	movi	r2,-1
   84838:	00000c06 	br	8486c <write+0xec>
      }
      return rval;
   8483c:	e0bffc17 	ldw	r2,-16(fp)
   84840:	00000a06 	br	8486c <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   84844:	00847440 	call	84744 <alt_get_errno>
   84848:	1007883a 	mov	r3,r2
   8484c:	00800344 	movi	r2,13
   84850:	18800015 	stw	r2,0(r3)
   84854:	00000406 	br	84868 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   84858:	00847440 	call	84744 <alt_get_errno>
   8485c:	1007883a 	mov	r3,r2
   84860:	00801444 	movi	r2,81
   84864:	18800015 	stw	r2,0(r3)
  }
  return -1;
   84868:	00bfffc4 	movi	r2,-1
}
   8486c:	e037883a 	mov	sp,fp
   84870:	dfc00117 	ldw	ra,4(sp)
   84874:	df000017 	ldw	fp,0(sp)
   84878:	dec00204 	addi	sp,sp,8
   8487c:	f800283a 	ret

00084880 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   84880:	defffd04 	addi	sp,sp,-12
   84884:	dfc00215 	stw	ra,8(sp)
   84888:	df000115 	stw	fp,4(sp)
   8488c:	df000104 	addi	fp,sp,4
   84890:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   84894:	d1600604 	addi	r5,gp,-32744
   84898:	e13fff17 	ldw	r4,-4(fp)
   8489c:	0085b440 	call	85b44 <alt_dev_llist_insert>
}
   848a0:	e037883a 	mov	sp,fp
   848a4:	dfc00117 	ldw	ra,4(sp)
   848a8:	df000017 	ldw	fp,0(sp)
   848ac:	dec00204 	addi	sp,sp,8
   848b0:	f800283a 	ret

000848b4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   848b4:	defffd04 	addi	sp,sp,-12
   848b8:	dfc00215 	stw	ra,8(sp)
   848bc:	df000115 	stw	fp,4(sp)
   848c0:	df000104 	addi	fp,sp,4
   848c4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU_1E, cpu_1e);
   848c8:	00864f00 	call	864f0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   848cc:	00800044 	movi	r2,1
   848d0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   848d4:	0001883a 	nop
   848d8:	e037883a 	mov	sp,fp
   848dc:	dfc00117 	ldw	ra,4(sp)
   848e0:	df000017 	ldw	fp,0(sp)
   848e4:	dec00204 	addi	sp,sp,8
   848e8:	f800283a 	ret

000848ec <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   848ec:	defffe04 	addi	sp,sp,-8
   848f0:	dfc00115 	stw	ra,4(sp)
   848f4:	df000015 	stw	fp,0(sp)
   848f8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_1E, timer_1e);
   848fc:	01c0fa04 	movi	r7,1000
   84900:	01800044 	movi	r6,1
   84904:	000b883a 	mov	r5,zero
   84908:	01020034 	movhi	r4,2048
   8490c:	21041804 	addi	r4,r4,4192
   84910:	00859400 	call	85940 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_FIFO_INIT ( FIFO_1D, fifo_1d);
   84914:	0001883a 	nop
    ALTERA_AVALON_FIFO_INIT ( FIFO_1E, fifo_1e);
   84918:	0001883a 	nop
    ALTERA_AVALON_FIFO_INIT ( FIFO_Q_5, fifo_q_5);
   8491c:	0001883a 	nop
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_1E, jtag_uart_1e);
   84920:	01800404 	movi	r6,16
   84924:	000b883a 	mov	r5,zero
   84928:	01000234 	movhi	r4,8
   8492c:	211fad04 	addi	r4,r4,32436
   84930:	0084fc40 	call	84fc4 <altera_avalon_jtag_uart_init>
   84934:	01000234 	movhi	r4,8
   84938:	211fa304 	addi	r4,r4,32396
   8493c:	00848800 	call	84880 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_1E, sysid_1e);
   84940:	0001883a 	nop
}
   84944:	0001883a 	nop
   84948:	e037883a 	mov	sp,fp
   8494c:	dfc00117 	ldw	ra,4(sp)
   84950:	df000017 	ldw	fp,0(sp)
   84954:	dec00204 	addi	sp,sp,8
   84958:	f800283a 	ret

0008495c <altera_avalon_fifo_init>:



int altera_avalon_fifo_init(alt_u32 address, alt_u32 ienable,
                            alt_u32 emptymark, alt_u32 fullmark)
{
   8495c:	defffa04 	addi	sp,sp,-24
   84960:	dfc00515 	stw	ra,20(sp)
   84964:	df000415 	stw	fp,16(sp)
   84968:	df000404 	addi	fp,sp,16
   8496c:	e13ffc15 	stw	r4,-16(fp)
   84970:	e17ffd15 	stw	r5,-12(fp)
   84974:	e1bffe15 	stw	r6,-8(fp)
   84978:	e1ffff15 	stw	r7,-4(fp)
    if(altera_avalon_fifo_clear_event(address, ALTERA_AVALON_FIFO_EVENT_ALL) != ALTERA_AVALON_FIFO_OK)
   8497c:	01400fc4 	movi	r5,63
   84980:	e13ffc17 	ldw	r4,-16(fp)
   84984:	0084b280 	call	84b28 <altera_avalon_fifo_clear_event>
   84988:	10000226 	beq	r2,zero,84994 <altera_avalon_fifo_init+0x38>
    {
        return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
   8498c:	00bfffc4 	movi	r2,-1
   84990:	00001306 	br	849e0 <altera_avalon_fifo_init+0x84>
    }

    if( altera_avalon_fifo_write_ienable(address, ienable) != ALTERA_AVALON_FIFO_OK)
   84994:	e17ffd17 	ldw	r5,-12(fp)
   84998:	e13ffc17 	ldw	r4,-16(fp)
   8499c:	0084b880 	call	84b88 <altera_avalon_fifo_write_ienable>
   849a0:	10000226 	beq	r2,zero,849ac <altera_avalon_fifo_init+0x50>
    {
         return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
   849a4:	00bfff84 	movi	r2,-2
   849a8:	00000d06 	br	849e0 <altera_avalon_fifo_init+0x84>
    }

    if( altera_avalon_fifo_write_almostfull(address, fullmark) != ALTERA_AVALON_FIFO_OK)
   849ac:	e17fff17 	ldw	r5,-4(fp)
   849b0:	e13ffc17 	ldw	r4,-16(fp)
   849b4:	0084be40 	call	84be4 <altera_avalon_fifo_write_almostfull>
   849b8:	10000226 	beq	r2,zero,849c4 <altera_avalon_fifo_init+0x68>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   849bc:	00bfff44 	movi	r2,-3
   849c0:	00000706 	br	849e0 <altera_avalon_fifo_init+0x84>
    }
  
    if( altera_avalon_fifo_write_almostempty(address, emptymark) != ALTERA_AVALON_FIFO_OK)
   849c4:	e17ffe17 	ldw	r5,-8(fp)
   849c8:	e13ffc17 	ldw	r4,-16(fp)
   849cc:	0084c400 	call	84c40 <altera_avalon_fifo_write_almostempty>
   849d0:	10000226 	beq	r2,zero,849dc <altera_avalon_fifo_init+0x80>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   849d4:	00bfff44 	movi	r2,-3
   849d8:	00000106 	br	849e0 <altera_avalon_fifo_init+0x84>
    }

    return ALTERA_AVALON_FIFO_OK;
   849dc:	0005883a 	mov	r2,zero
}
   849e0:	e037883a 	mov	sp,fp
   849e4:	dfc00117 	ldw	ra,4(sp)
   849e8:	df000017 	ldw	fp,0(sp)
   849ec:	dec00204 	addi	sp,sp,8
   849f0:	f800283a 	ret

000849f4 <altera_avalon_fifo_read_status>:

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
   849f4:	defffd04 	addi	sp,sp,-12
   849f8:	df000215 	stw	fp,8(sp)
   849fc:	df000204 	addi	fp,sp,8
   84a00:	e13ffe15 	stw	r4,-8(fp)
   84a04:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
   84a08:	e0bffe17 	ldw	r2,-8(fp)
   84a0c:	10800104 	addi	r2,r2,4
   84a10:	10800037 	ldwio	r2,0(r2)
   84a14:	1007883a 	mov	r3,r2
   84a18:	e0bfff17 	ldw	r2,-4(fp)
   84a1c:	1884703a 	and	r2,r3,r2
}
   84a20:	e037883a 	mov	sp,fp
   84a24:	df000017 	ldw	fp,0(sp)
   84a28:	dec00104 	addi	sp,sp,4
   84a2c:	f800283a 	ret

00084a30 <altera_avalon_fifo_read_ienable>:

int altera_avalon_fifo_read_ienable(alt_u32 address, alt_u32 mask)
{
   84a30:	defffd04 	addi	sp,sp,-12
   84a34:	df000215 	stw	fp,8(sp)
   84a38:	df000204 	addi	fp,sp,8
   84a3c:	e13ffe15 	stw	r4,-8(fp)
   84a40:	e17fff15 	stw	r5,-4(fp)
	
    return (IORD_ALTERA_AVALON_FIFO_IENABLE(address) & mask);
   84a44:	e0bffe17 	ldw	r2,-8(fp)
   84a48:	10800304 	addi	r2,r2,12
   84a4c:	10800037 	ldwio	r2,0(r2)
   84a50:	1007883a 	mov	r3,r2
   84a54:	e0bfff17 	ldw	r2,-4(fp)
   84a58:	1884703a 	and	r2,r3,r2
}
   84a5c:	e037883a 	mov	sp,fp
   84a60:	df000017 	ldw	fp,0(sp)
   84a64:	dec00104 	addi	sp,sp,4
   84a68:	f800283a 	ret

00084a6c <altera_avalon_fifo_read_almostfull>:

int altera_avalon_fifo_read_almostfull(alt_u32 address)
{
   84a6c:	defffe04 	addi	sp,sp,-8
   84a70:	df000115 	stw	fp,4(sp)
   84a74:	df000104 	addi	fp,sp,4
   84a78:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address);
   84a7c:	e0bfff17 	ldw	r2,-4(fp)
   84a80:	10800404 	addi	r2,r2,16
   84a84:	10800037 	ldwio	r2,0(r2)
}
   84a88:	e037883a 	mov	sp,fp
   84a8c:	df000017 	ldw	fp,0(sp)
   84a90:	dec00104 	addi	sp,sp,4
   84a94:	f800283a 	ret

00084a98 <altera_avalon_fifo_read_almostempty>:

int altera_avalon_fifo_read_almostempty(alt_u32 address)
{
   84a98:	defffe04 	addi	sp,sp,-8
   84a9c:	df000115 	stw	fp,4(sp)
   84aa0:	df000104 	addi	fp,sp,4
   84aa4:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address);
   84aa8:	e0bfff17 	ldw	r2,-4(fp)
   84aac:	10800504 	addi	r2,r2,20
   84ab0:	10800037 	ldwio	r2,0(r2)
}
   84ab4:	e037883a 	mov	sp,fp
   84ab8:	df000017 	ldw	fp,0(sp)
   84abc:	dec00104 	addi	sp,sp,4
   84ac0:	f800283a 	ret

00084ac4 <altera_avalon_fifo_read_event>:

int altera_avalon_fifo_read_event(alt_u32 address, alt_u32 mask)
{
   84ac4:	defffd04 	addi	sp,sp,-12
   84ac8:	df000215 	stw	fp,8(sp)
   84acc:	df000204 	addi	fp,sp,8
   84ad0:	e13ffe15 	stw	r4,-8(fp)
   84ad4:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask);
   84ad8:	e0bffe17 	ldw	r2,-8(fp)
   84adc:	10800204 	addi	r2,r2,8
   84ae0:	10800037 	ldwio	r2,0(r2)
   84ae4:	1007883a 	mov	r3,r2
   84ae8:	e0bfff17 	ldw	r2,-4(fp)
   84aec:	1884703a 	and	r2,r3,r2
}
   84af0:	e037883a 	mov	sp,fp
   84af4:	df000017 	ldw	fp,0(sp)
   84af8:	dec00104 	addi	sp,sp,4
   84afc:	f800283a 	ret

00084b00 <altera_avalon_fifo_read_level>:

int altera_avalon_fifo_read_level(alt_u32 address)
{
   84b00:	defffe04 	addi	sp,sp,-8
   84b04:	df000115 	stw	fp,4(sp)
   84b08:	df000104 	addi	fp,sp,4
   84b0c:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_LEVEL(address);
   84b10:	e0bfff17 	ldw	r2,-4(fp)
   84b14:	10800037 	ldwio	r2,0(r2)
}
   84b18:	e037883a 	mov	sp,fp
   84b1c:	df000017 	ldw	fp,0(sp)
   84b20:	dec00104 	addi	sp,sp,4
   84b24:	f800283a 	ret

00084b28 <altera_avalon_fifo_clear_event>:

int altera_avalon_fifo_clear_event(alt_u32 address, alt_u32 mask)
{
   84b28:	defffd04 	addi	sp,sp,-12
   84b2c:	df000215 	stw	fp,8(sp)
   84b30:	df000204 	addi	fp,sp,8
   84b34:	e13ffe15 	stw	r4,-8(fp)
   84b38:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_EVENT(address, mask);
   84b3c:	e0bffe17 	ldw	r2,-8(fp)
   84b40:	10800204 	addi	r2,r2,8
   84b44:	1007883a 	mov	r3,r2
   84b48:	e0bfff17 	ldw	r2,-4(fp)
   84b4c:	18800035 	stwio	r2,0(r3)
    if((IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask) == 0)
   84b50:	e0bffe17 	ldw	r2,-8(fp)
   84b54:	10800204 	addi	r2,r2,8
   84b58:	10800037 	ldwio	r2,0(r2)
   84b5c:	1007883a 	mov	r3,r2
   84b60:	e0bfff17 	ldw	r2,-4(fp)
   84b64:	1884703a 	and	r2,r3,r2
   84b68:	1000021e 	bne	r2,zero,84b74 <altera_avalon_fifo_clear_event+0x4c>
        return ALTERA_AVALON_FIFO_OK;
   84b6c:	0005883a 	mov	r2,zero
   84b70:	00000106 	br	84b78 <altera_avalon_fifo_clear_event+0x50>
    else
    return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
   84b74:	00bfffc4 	movi	r2,-1
}
   84b78:	e037883a 	mov	sp,fp
   84b7c:	df000017 	ldw	fp,0(sp)
   84b80:	dec00104 	addi	sp,sp,4
   84b84:	f800283a 	ret

00084b88 <altera_avalon_fifo_write_ienable>:

int altera_avalon_fifo_write_ienable(alt_u32 address, alt_u32 mask)
{
   84b88:	defffd04 	addi	sp,sp,-12
   84b8c:	df000215 	stw	fp,8(sp)
   84b90:	df000204 	addi	fp,sp,8
   84b94:	e13ffe15 	stw	r4,-8(fp)
   84b98:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_IENABLE(address, mask);
   84b9c:	e0bffe17 	ldw	r2,-8(fp)
   84ba0:	10800304 	addi	r2,r2,12
   84ba4:	1007883a 	mov	r3,r2
   84ba8:	e0bfff17 	ldw	r2,-4(fp)
   84bac:	18800035 	stwio	r2,0(r3)
    if(IORD_ALTERA_AVALON_FIFO_IENABLE(address) == mask)
   84bb0:	e0bffe17 	ldw	r2,-8(fp)
   84bb4:	10800304 	addi	r2,r2,12
   84bb8:	10800037 	ldwio	r2,0(r2)
   84bbc:	1007883a 	mov	r3,r2
   84bc0:	e0bfff17 	ldw	r2,-4(fp)
   84bc4:	1880021e 	bne	r3,r2,84bd0 <altera_avalon_fifo_write_ienable+0x48>
        return ALTERA_AVALON_FIFO_OK;
   84bc8:	0005883a 	mov	r2,zero
   84bcc:	00000106 	br	84bd4 <altera_avalon_fifo_write_ienable+0x4c>
    else
        return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
   84bd0:	00bfff84 	movi	r2,-2
}
   84bd4:	e037883a 	mov	sp,fp
   84bd8:	df000017 	ldw	fp,0(sp)
   84bdc:	dec00104 	addi	sp,sp,4
   84be0:	f800283a 	ret

00084be4 <altera_avalon_fifo_write_almostfull>:

int altera_avalon_fifo_write_almostfull(alt_u32 address, alt_u32 data)
{
   84be4:	defffd04 	addi	sp,sp,-12
   84be8:	df000215 	stw	fp,8(sp)
   84bec:	df000204 	addi	fp,sp,8
   84bf0:	e13ffe15 	stw	r4,-8(fp)
   84bf4:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTFULL(address, data);
   84bf8:	e0bffe17 	ldw	r2,-8(fp)
   84bfc:	10800404 	addi	r2,r2,16
   84c00:	1007883a 	mov	r3,r2
   84c04:	e0bfff17 	ldw	r2,-4(fp)
   84c08:	18800035 	stwio	r2,0(r3)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address) == data)
   84c0c:	e0bffe17 	ldw	r2,-8(fp)
   84c10:	10800404 	addi	r2,r2,16
   84c14:	10800037 	ldwio	r2,0(r2)
   84c18:	1007883a 	mov	r3,r2
   84c1c:	e0bfff17 	ldw	r2,-4(fp)
   84c20:	1880021e 	bne	r3,r2,84c2c <altera_avalon_fifo_write_almostfull+0x48>
        return ALTERA_AVALON_FIFO_OK;
   84c24:	0005883a 	mov	r2,zero
   84c28:	00000106 	br	84c30 <altera_avalon_fifo_write_almostfull+0x4c>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   84c2c:	00bfff44 	movi	r2,-3
}
   84c30:	e037883a 	mov	sp,fp
   84c34:	df000017 	ldw	fp,0(sp)
   84c38:	dec00104 	addi	sp,sp,4
   84c3c:	f800283a 	ret

00084c40 <altera_avalon_fifo_write_almostempty>:

int altera_avalon_fifo_write_almostempty(alt_u32 address, alt_u32 data)
{
   84c40:	defffd04 	addi	sp,sp,-12
   84c44:	df000215 	stw	fp,8(sp)
   84c48:	df000204 	addi	fp,sp,8
   84c4c:	e13ffe15 	stw	r4,-8(fp)
   84c50:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address, data);
   84c54:	e0bffe17 	ldw	r2,-8(fp)
   84c58:	10800504 	addi	r2,r2,20
   84c5c:	1007883a 	mov	r3,r2
   84c60:	e0bfff17 	ldw	r2,-4(fp)
   84c64:	18800035 	stwio	r2,0(r3)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address) == data)
   84c68:	e0bffe17 	ldw	r2,-8(fp)
   84c6c:	10800504 	addi	r2,r2,20
   84c70:	10800037 	ldwio	r2,0(r2)
   84c74:	1007883a 	mov	r3,r2
   84c78:	e0bfff17 	ldw	r2,-4(fp)
   84c7c:	1880021e 	bne	r3,r2,84c88 <altera_avalon_fifo_write_almostempty+0x48>
        return ALTERA_AVALON_FIFO_OK;
   84c80:	0005883a 	mov	r2,zero
   84c84:	00000106 	br	84c8c <altera_avalon_fifo_write_almostempty+0x4c>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   84c88:	00bfff44 	movi	r2,-3
}
   84c8c:	e037883a 	mov	sp,fp
   84c90:	df000017 	ldw	fp,0(sp)
   84c94:	dec00104 	addi	sp,sp,4
   84c98:	f800283a 	ret

00084c9c <altera_avalon_fifo_write_fifo>:

int altera_avalon_fifo_write_fifo(alt_u32 write_address,
                                  alt_u32 ctrl_address,
                                  alt_u32 data)
{
   84c9c:	defffb04 	addi	sp,sp,-20
   84ca0:	dfc00415 	stw	ra,16(sp)
   84ca4:	df000315 	stw	fp,12(sp)
   84ca8:	df000304 	addi	fp,sp,12
   84cac:	e13ffd15 	stw	r4,-12(fp)
   84cb0:	e17ffe15 	stw	r5,-8(fp)
   84cb4:	e1bfff15 	stw	r6,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
   84cb8:	01400044 	movi	r5,1
   84cbc:	e13ffe17 	ldw	r4,-8(fp)
   84cc0:	00849f40 	call	849f4 <altera_avalon_fifo_read_status>
   84cc4:	1000051e 	bne	r2,zero,84cdc <altera_avalon_fifo_write_fifo+0x40>
    {
        IOWR_ALTERA_AVALON_FIFO_DATA(write_address, data);
   84cc8:	e0bffd17 	ldw	r2,-12(fp)
   84ccc:	e0ffff17 	ldw	r3,-4(fp)
   84cd0:	10c00035 	stwio	r3,0(r2)
        return ALTERA_AVALON_FIFO_OK;
   84cd4:	0005883a 	mov	r2,zero
   84cd8:	00000106 	br	84ce0 <altera_avalon_fifo_write_fifo+0x44>
    }
    else
    {
        return ALTERA_AVALON_FIFO_FULL;
   84cdc:	00bfff04 	movi	r2,-4
    }
}
   84ce0:	e037883a 	mov	sp,fp
   84ce4:	dfc00117 	ldw	ra,4(sp)
   84ce8:	df000017 	ldw	fp,0(sp)
   84cec:	dec00204 	addi	sp,sp,8
   84cf0:	f800283a 	ret

00084cf4 <altera_avalon_read_fifo>:

int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)
{
   84cf4:	defffa04 	addi	sp,sp,-24
   84cf8:	dfc00515 	stw	ra,20(sp)
   84cfc:	df000415 	stw	fp,16(sp)
   84d00:	df000404 	addi	fp,sp,16
   84d04:	e13ffd15 	stw	r4,-12(fp)
   84d08:	e17ffe15 	stw	r5,-8(fp)
   84d0c:	e1bfff15 	stw	r6,-4(fp)
    int return_val = 0;
   84d10:	e03ffc15 	stw	zero,-16(fp)
    *data = 0;
   84d14:	e0bfff17 	ldw	r2,-4(fp)
   84d18:	10000015 	stw	zero,0(r2)
    
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
   84d1c:	01400084 	movi	r5,2
   84d20:	e13ffe17 	ldw	r4,-8(fp)
   84d24:	00849f40 	call	849f4 <altera_avalon_fifo_read_status>
   84d28:	1000071e 	bne	r2,zero,84d48 <altera_avalon_read_fifo+0x54>
    {
        return_val = altera_avalon_fifo_read_level(ctrl_address);
   84d2c:	e13ffe17 	ldw	r4,-8(fp)
   84d30:	0084b000 	call	84b00 <altera_avalon_fifo_read_level>
   84d34:	e0bffc15 	stw	r2,-16(fp)
        *data = IORD_ALTERA_AVALON_FIFO_DATA(read_address);
   84d38:	e0bffd17 	ldw	r2,-12(fp)
   84d3c:	10c00037 	ldwio	r3,0(r2)
   84d40:	e0bfff17 	ldw	r2,-4(fp)
   84d44:	10c00015 	stw	r3,0(r2)
    
    }
    return return_val;
   84d48:	e0bffc17 	ldw	r2,-16(fp)
}
   84d4c:	e037883a 	mov	sp,fp
   84d50:	dfc00117 	ldw	ra,4(sp)
   84d54:	df000017 	ldw	fp,0(sp)
   84d58:	dec00204 	addi	sp,sp,8
   84d5c:	f800283a 	ret

00084d60 <altera_avalon_fifo_read_fifo>:

int altera_avalon_fifo_read_fifo(alt_u32 read_address, alt_u32 ctrl_address)
{
   84d60:	defffc04 	addi	sp,sp,-16
   84d64:	dfc00315 	stw	ra,12(sp)
   84d68:	df000215 	stw	fp,8(sp)
   84d6c:	df000204 	addi	fp,sp,8
   84d70:	e13ffe15 	stw	r4,-8(fp)
   84d74:	e17fff15 	stw	r5,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
   84d78:	01400084 	movi	r5,2
   84d7c:	e13fff17 	ldw	r4,-4(fp)
   84d80:	00849f40 	call	849f4 <altera_avalon_fifo_read_status>
   84d84:	1000031e 	bne	r2,zero,84d94 <altera_avalon_fifo_read_fifo+0x34>
    {
        return IORD_ALTERA_AVALON_FIFO_DATA(read_address);
   84d88:	e0bffe17 	ldw	r2,-8(fp)
   84d8c:	10800037 	ldwio	r2,0(r2)
   84d90:	00000106 	br	84d98 <altera_avalon_fifo_read_fifo+0x38>
    }
    return 0;
   84d94:	0005883a 	mov	r2,zero
}
   84d98:	e037883a 	mov	sp,fp
   84d9c:	dfc00117 	ldw	ra,4(sp)
   84da0:	df000017 	ldw	fp,0(sp)
   84da4:	dec00204 	addi	sp,sp,8
   84da8:	f800283a 	ret

00084dac <altera_avalon_fifo_write_other_info>:

int altera_avalon_fifo_write_other_info(alt_u32 write_address,
					alt_u32 ctrl_address,
					alt_u32 data)
{
   84dac:	defffb04 	addi	sp,sp,-20
   84db0:	dfc00415 	stw	ra,16(sp)
   84db4:	df000315 	stw	fp,12(sp)
   84db8:	df000304 	addi	fp,sp,12
   84dbc:	e13ffd15 	stw	r4,-12(fp)
   84dc0:	e17ffe15 	stw	r5,-8(fp)
   84dc4:	e1bfff15 	stw	r6,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
   84dc8:	01400044 	movi	r5,1
   84dcc:	e13ffe17 	ldw	r4,-8(fp)
   84dd0:	00849f40 	call	849f4 <altera_avalon_fifo_read_status>
   84dd4:	1000071e 	bne	r2,zero,84df4 <altera_avalon_fifo_write_other_info+0x48>
    {
	IOWR_ALTERA_AVALON_FIFO_OTHER_INFO(write_address, data);
   84dd8:	e0bffd17 	ldw	r2,-12(fp)
   84ddc:	10800104 	addi	r2,r2,4
   84de0:	1007883a 	mov	r3,r2
   84de4:	e0bfff17 	ldw	r2,-4(fp)
   84de8:	18800035 	stwio	r2,0(r3)
	return ALTERA_AVALON_FIFO_OK;
   84dec:	0005883a 	mov	r2,zero
   84df0:	00000106 	br	84df8 <altera_avalon_fifo_write_other_info+0x4c>
    }
    else
    {
	return ALTERA_AVALON_FIFO_FULL;
   84df4:	00bfff04 	movi	r2,-4
    }
}
   84df8:	e037883a 	mov	sp,fp
   84dfc:	dfc00117 	ldw	ra,4(sp)
   84e00:	df000017 	ldw	fp,0(sp)
   84e04:	dec00204 	addi	sp,sp,8
   84e08:	f800283a 	ret

00084e0c <altera_avalon_fifo_read_other_info>:

int altera_avalon_fifo_read_other_info(alt_u32 read_address)
{
   84e0c:	defffe04 	addi	sp,sp,-8
   84e10:	df000115 	stw	fp,4(sp)
   84e14:	df000104 	addi	fp,sp,4
   84e18:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_OTHER_INFO(read_address);
   84e1c:	e0bfff17 	ldw	r2,-4(fp)
   84e20:	10800104 	addi	r2,r2,4
   84e24:	10800037 	ldwio	r2,0(r2)
}
   84e28:	e037883a 	mov	sp,fp
   84e2c:	df000017 	ldw	fp,0(sp)
   84e30:	dec00104 	addi	sp,sp,4
   84e34:	f800283a 	ret

00084e38 <altera_avalon_fifo_read_backpressure>:

int altera_avalon_fifo_read_backpressure (alt_u32 read_address){
   84e38:	defffe04 	addi	sp,sp,-8
   84e3c:	df000115 	stw	fp,4(sp)
   84e40:	df000104 	addi	fp,sp,4
   84e44:	e13fff15 	stw	r4,-4(fp)
    // Read data from FIFO directly. If FIFO is empty and backpressure is supported, this call is backpressure.
    return IORD_ALTERA_AVALON_FIFO_DATA(read_address);  
   84e48:	e0bfff17 	ldw	r2,-4(fp)
   84e4c:	10800037 	ldwio	r2,0(r2)
}
   84e50:	e037883a 	mov	sp,fp
   84e54:	df000017 	ldw	fp,0(sp)
   84e58:	dec00104 	addi	sp,sp,4
   84e5c:	f800283a 	ret

00084e60 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   84e60:	defffa04 	addi	sp,sp,-24
   84e64:	dfc00515 	stw	ra,20(sp)
   84e68:	df000415 	stw	fp,16(sp)
   84e6c:	df000404 	addi	fp,sp,16
   84e70:	e13ffd15 	stw	r4,-12(fp)
   84e74:	e17ffe15 	stw	r5,-8(fp)
   84e78:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   84e7c:	e0bffd17 	ldw	r2,-12(fp)
   84e80:	10800017 	ldw	r2,0(r2)
   84e84:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   84e88:	e0bffc17 	ldw	r2,-16(fp)
   84e8c:	10c00a04 	addi	r3,r2,40
   84e90:	e0bffd17 	ldw	r2,-12(fp)
   84e94:	10800217 	ldw	r2,8(r2)
   84e98:	100f883a 	mov	r7,r2
   84e9c:	e1bfff17 	ldw	r6,-4(fp)
   84ea0:	e17ffe17 	ldw	r5,-8(fp)
   84ea4:	1809883a 	mov	r4,r3
   84ea8:	00854880 	call	85488 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   84eac:	e037883a 	mov	sp,fp
   84eb0:	dfc00117 	ldw	ra,4(sp)
   84eb4:	df000017 	ldw	fp,0(sp)
   84eb8:	dec00204 	addi	sp,sp,8
   84ebc:	f800283a 	ret

00084ec0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   84ec0:	defffa04 	addi	sp,sp,-24
   84ec4:	dfc00515 	stw	ra,20(sp)
   84ec8:	df000415 	stw	fp,16(sp)
   84ecc:	df000404 	addi	fp,sp,16
   84ed0:	e13ffd15 	stw	r4,-12(fp)
   84ed4:	e17ffe15 	stw	r5,-8(fp)
   84ed8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   84edc:	e0bffd17 	ldw	r2,-12(fp)
   84ee0:	10800017 	ldw	r2,0(r2)
   84ee4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   84ee8:	e0bffc17 	ldw	r2,-16(fp)
   84eec:	10c00a04 	addi	r3,r2,40
   84ef0:	e0bffd17 	ldw	r2,-12(fp)
   84ef4:	10800217 	ldw	r2,8(r2)
   84ef8:	100f883a 	mov	r7,r2
   84efc:	e1bfff17 	ldw	r6,-4(fp)
   84f00:	e17ffe17 	ldw	r5,-8(fp)
   84f04:	1809883a 	mov	r4,r3
   84f08:	00856a40 	call	856a4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   84f0c:	e037883a 	mov	sp,fp
   84f10:	dfc00117 	ldw	ra,4(sp)
   84f14:	df000017 	ldw	fp,0(sp)
   84f18:	dec00204 	addi	sp,sp,8
   84f1c:	f800283a 	ret

00084f20 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   84f20:	defffc04 	addi	sp,sp,-16
   84f24:	dfc00315 	stw	ra,12(sp)
   84f28:	df000215 	stw	fp,8(sp)
   84f2c:	df000204 	addi	fp,sp,8
   84f30:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   84f34:	e0bfff17 	ldw	r2,-4(fp)
   84f38:	10800017 	ldw	r2,0(r2)
   84f3c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   84f40:	e0bffe17 	ldw	r2,-8(fp)
   84f44:	10c00a04 	addi	r3,r2,40
   84f48:	e0bfff17 	ldw	r2,-4(fp)
   84f4c:	10800217 	ldw	r2,8(r2)
   84f50:	100b883a 	mov	r5,r2
   84f54:	1809883a 	mov	r4,r3
   84f58:	00853300 	call	85330 <altera_avalon_jtag_uart_close>
}
   84f5c:	e037883a 	mov	sp,fp
   84f60:	dfc00117 	ldw	ra,4(sp)
   84f64:	df000017 	ldw	fp,0(sp)
   84f68:	dec00204 	addi	sp,sp,8
   84f6c:	f800283a 	ret

00084f70 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   84f70:	defffa04 	addi	sp,sp,-24
   84f74:	dfc00515 	stw	ra,20(sp)
   84f78:	df000415 	stw	fp,16(sp)
   84f7c:	df000404 	addi	fp,sp,16
   84f80:	e13ffd15 	stw	r4,-12(fp)
   84f84:	e17ffe15 	stw	r5,-8(fp)
   84f88:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   84f8c:	e0bffd17 	ldw	r2,-12(fp)
   84f90:	10800017 	ldw	r2,0(r2)
   84f94:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   84f98:	e0bffc17 	ldw	r2,-16(fp)
   84f9c:	10800a04 	addi	r2,r2,40
   84fa0:	e1bfff17 	ldw	r6,-4(fp)
   84fa4:	e17ffe17 	ldw	r5,-8(fp)
   84fa8:	1009883a 	mov	r4,r2
   84fac:	00853980 	call	85398 <altera_avalon_jtag_uart_ioctl>
}
   84fb0:	e037883a 	mov	sp,fp
   84fb4:	dfc00117 	ldw	ra,4(sp)
   84fb8:	df000017 	ldw	fp,0(sp)
   84fbc:	dec00204 	addi	sp,sp,8
   84fc0:	f800283a 	ret

00084fc4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   84fc4:	defffa04 	addi	sp,sp,-24
   84fc8:	dfc00515 	stw	ra,20(sp)
   84fcc:	df000415 	stw	fp,16(sp)
   84fd0:	df000404 	addi	fp,sp,16
   84fd4:	e13ffd15 	stw	r4,-12(fp)
   84fd8:	e17ffe15 	stw	r5,-8(fp)
   84fdc:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   84fe0:	e0bffd17 	ldw	r2,-12(fp)
   84fe4:	00c00044 	movi	r3,1
   84fe8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   84fec:	e0bffd17 	ldw	r2,-12(fp)
   84ff0:	10800017 	ldw	r2,0(r2)
   84ff4:	10800104 	addi	r2,r2,4
   84ff8:	1007883a 	mov	r3,r2
   84ffc:	e0bffd17 	ldw	r2,-12(fp)
   85000:	10800817 	ldw	r2,32(r2)
   85004:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   85008:	e0bffe17 	ldw	r2,-8(fp)
   8500c:	e0ffff17 	ldw	r3,-4(fp)
   85010:	d8000015 	stw	zero,0(sp)
   85014:	e1fffd17 	ldw	r7,-12(fp)
   85018:	01800234 	movhi	r6,8
   8501c:	31942104 	addi	r6,r6,20612
   85020:	180b883a 	mov	r5,r3
   85024:	1009883a 	mov	r4,r2
   85028:	0085cc80 	call	85cc8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   8502c:	e0bffd17 	ldw	r2,-12(fp)
   85030:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   85034:	e0bffd17 	ldw	r2,-12(fp)
   85038:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   8503c:	d0e8d917 	ldw	r3,-23708(gp)
   85040:	e1fffd17 	ldw	r7,-12(fp)
   85044:	01800234 	movhi	r6,8
   85048:	3194a404 	addi	r6,r6,21136
   8504c:	180b883a 	mov	r5,r3
   85050:	1009883a 	mov	r4,r2
   85054:	00859bc0 	call	859bc <alt_alarm_start>
   85058:	1000040e 	bge	r2,zero,8506c <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   8505c:	e0fffd17 	ldw	r3,-12(fp)
   85060:	00a00034 	movhi	r2,32768
   85064:	10bfffc4 	addi	r2,r2,-1
   85068:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   8506c:	0001883a 	nop
   85070:	e037883a 	mov	sp,fp
   85074:	dfc00117 	ldw	ra,4(sp)
   85078:	df000017 	ldw	fp,0(sp)
   8507c:	dec00204 	addi	sp,sp,8
   85080:	f800283a 	ret

00085084 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   85084:	defff804 	addi	sp,sp,-32
   85088:	df000715 	stw	fp,28(sp)
   8508c:	df000704 	addi	fp,sp,28
   85090:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   85094:	e0bfff17 	ldw	r2,-4(fp)
   85098:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   8509c:	e0bffb17 	ldw	r2,-20(fp)
   850a0:	10800017 	ldw	r2,0(r2)
   850a4:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   850a8:	e0bffc17 	ldw	r2,-16(fp)
   850ac:	10800104 	addi	r2,r2,4
   850b0:	10800037 	ldwio	r2,0(r2)
   850b4:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   850b8:	e0bffd17 	ldw	r2,-12(fp)
   850bc:	1080c00c 	andi	r2,r2,768
   850c0:	10006d26 	beq	r2,zero,85278 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   850c4:	e0bffd17 	ldw	r2,-12(fp)
   850c8:	1080400c 	andi	r2,r2,256
   850cc:	10003526 	beq	r2,zero,851a4 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   850d0:	00800074 	movhi	r2,1
   850d4:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   850d8:	e0bffb17 	ldw	r2,-20(fp)
   850dc:	10800a17 	ldw	r2,40(r2)
   850e0:	10800044 	addi	r2,r2,1
   850e4:	1081ffcc 	andi	r2,r2,2047
   850e8:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   850ec:	e0bffb17 	ldw	r2,-20(fp)
   850f0:	10c00b17 	ldw	r3,44(r2)
   850f4:	e0bffe17 	ldw	r2,-8(fp)
   850f8:	18801526 	beq	r3,r2,85150 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   850fc:	e0bffc17 	ldw	r2,-16(fp)
   85100:	10800037 	ldwio	r2,0(r2)
   85104:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   85108:	e0bff917 	ldw	r2,-28(fp)
   8510c:	10a0000c 	andi	r2,r2,32768
   85110:	10001126 	beq	r2,zero,85158 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   85114:	e0bffb17 	ldw	r2,-20(fp)
   85118:	10800a17 	ldw	r2,40(r2)
   8511c:	e0fff917 	ldw	r3,-28(fp)
   85120:	1809883a 	mov	r4,r3
   85124:	e0fffb17 	ldw	r3,-20(fp)
   85128:	1885883a 	add	r2,r3,r2
   8512c:	10800e04 	addi	r2,r2,56
   85130:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   85134:	e0bffb17 	ldw	r2,-20(fp)
   85138:	10800a17 	ldw	r2,40(r2)
   8513c:	10800044 	addi	r2,r2,1
   85140:	10c1ffcc 	andi	r3,r2,2047
   85144:	e0bffb17 	ldw	r2,-20(fp)
   85148:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   8514c:	003fe206 	br	850d8 <__alt_data_end+0xfffe50d8>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   85150:	0001883a 	nop
   85154:	00000106 	br	8515c <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   85158:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   8515c:	e0bff917 	ldw	r2,-28(fp)
   85160:	10bfffec 	andhi	r2,r2,65535
   85164:	10000f26 	beq	r2,zero,851a4 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   85168:	e0bffb17 	ldw	r2,-20(fp)
   8516c:	10c00817 	ldw	r3,32(r2)
   85170:	00bfff84 	movi	r2,-2
   85174:	1886703a 	and	r3,r3,r2
   85178:	e0bffb17 	ldw	r2,-20(fp)
   8517c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   85180:	e0bffc17 	ldw	r2,-16(fp)
   85184:	10800104 	addi	r2,r2,4
   85188:	1007883a 	mov	r3,r2
   8518c:	e0bffb17 	ldw	r2,-20(fp)
   85190:	10800817 	ldw	r2,32(r2)
   85194:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   85198:	e0bffc17 	ldw	r2,-16(fp)
   8519c:	10800104 	addi	r2,r2,4
   851a0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   851a4:	e0bffd17 	ldw	r2,-12(fp)
   851a8:	1080800c 	andi	r2,r2,512
   851ac:	103fbe26 	beq	r2,zero,850a8 <__alt_data_end+0xfffe50a8>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   851b0:	e0bffd17 	ldw	r2,-12(fp)
   851b4:	1004d43a 	srli	r2,r2,16
   851b8:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   851bc:	00001406 	br	85210 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   851c0:	e0bffc17 	ldw	r2,-16(fp)
   851c4:	e0fffb17 	ldw	r3,-20(fp)
   851c8:	18c00d17 	ldw	r3,52(r3)
   851cc:	e13ffb17 	ldw	r4,-20(fp)
   851d0:	20c7883a 	add	r3,r4,r3
   851d4:	18c20e04 	addi	r3,r3,2104
   851d8:	18c00003 	ldbu	r3,0(r3)
   851dc:	18c03fcc 	andi	r3,r3,255
   851e0:	18c0201c 	xori	r3,r3,128
   851e4:	18ffe004 	addi	r3,r3,-128
   851e8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   851ec:	e0bffb17 	ldw	r2,-20(fp)
   851f0:	10800d17 	ldw	r2,52(r2)
   851f4:	10800044 	addi	r2,r2,1
   851f8:	10c1ffcc 	andi	r3,r2,2047
   851fc:	e0bffb17 	ldw	r2,-20(fp)
   85200:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   85204:	e0bffa17 	ldw	r2,-24(fp)
   85208:	10bfffc4 	addi	r2,r2,-1
   8520c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   85210:	e0bffa17 	ldw	r2,-24(fp)
   85214:	10000526 	beq	r2,zero,8522c <altera_avalon_jtag_uart_irq+0x1a8>
   85218:	e0bffb17 	ldw	r2,-20(fp)
   8521c:	10c00d17 	ldw	r3,52(r2)
   85220:	e0bffb17 	ldw	r2,-20(fp)
   85224:	10800c17 	ldw	r2,48(r2)
   85228:	18bfe51e 	bne	r3,r2,851c0 <__alt_data_end+0xfffe51c0>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   8522c:	e0bffa17 	ldw	r2,-24(fp)
   85230:	103f9d26 	beq	r2,zero,850a8 <__alt_data_end+0xfffe50a8>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   85234:	e0bffb17 	ldw	r2,-20(fp)
   85238:	10c00817 	ldw	r3,32(r2)
   8523c:	00bfff44 	movi	r2,-3
   85240:	1886703a 	and	r3,r3,r2
   85244:	e0bffb17 	ldw	r2,-20(fp)
   85248:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   8524c:	e0bffb17 	ldw	r2,-20(fp)
   85250:	10800017 	ldw	r2,0(r2)
   85254:	10800104 	addi	r2,r2,4
   85258:	1007883a 	mov	r3,r2
   8525c:	e0bffb17 	ldw	r2,-20(fp)
   85260:	10800817 	ldw	r2,32(r2)
   85264:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   85268:	e0bffc17 	ldw	r2,-16(fp)
   8526c:	10800104 	addi	r2,r2,4
   85270:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   85274:	003f8c06 	br	850a8 <__alt_data_end+0xfffe50a8>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   85278:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   8527c:	0001883a 	nop
   85280:	e037883a 	mov	sp,fp
   85284:	df000017 	ldw	fp,0(sp)
   85288:	dec00104 	addi	sp,sp,4
   8528c:	f800283a 	ret

00085290 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   85290:	defff804 	addi	sp,sp,-32
   85294:	df000715 	stw	fp,28(sp)
   85298:	df000704 	addi	fp,sp,28
   8529c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   852a0:	e0bffb17 	ldw	r2,-20(fp)
   852a4:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   852a8:	e0bff917 	ldw	r2,-28(fp)
   852ac:	10800017 	ldw	r2,0(r2)
   852b0:	10800104 	addi	r2,r2,4
   852b4:	10800037 	ldwio	r2,0(r2)
   852b8:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   852bc:	e0bffa17 	ldw	r2,-24(fp)
   852c0:	1081000c 	andi	r2,r2,1024
   852c4:	10000b26 	beq	r2,zero,852f4 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   852c8:	e0bff917 	ldw	r2,-28(fp)
   852cc:	10800017 	ldw	r2,0(r2)
   852d0:	10800104 	addi	r2,r2,4
   852d4:	1007883a 	mov	r3,r2
   852d8:	e0bff917 	ldw	r2,-28(fp)
   852dc:	10800817 	ldw	r2,32(r2)
   852e0:	10810014 	ori	r2,r2,1024
   852e4:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   852e8:	e0bff917 	ldw	r2,-28(fp)
   852ec:	10000915 	stw	zero,36(r2)
   852f0:	00000a06 	br	8531c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   852f4:	e0bff917 	ldw	r2,-28(fp)
   852f8:	10c00917 	ldw	r3,36(r2)
   852fc:	00a00034 	movhi	r2,32768
   85300:	10bfff04 	addi	r2,r2,-4
   85304:	10c00536 	bltu	r2,r3,8531c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   85308:	e0bff917 	ldw	r2,-28(fp)
   8530c:	10800917 	ldw	r2,36(r2)
   85310:	10c00044 	addi	r3,r2,1
   85314:	e0bff917 	ldw	r2,-28(fp)
   85318:	10c00915 	stw	r3,36(r2)
   8531c:	d0a8d917 	ldw	r2,-23708(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   85320:	e037883a 	mov	sp,fp
   85324:	df000017 	ldw	fp,0(sp)
   85328:	dec00104 	addi	sp,sp,4
   8532c:	f800283a 	ret

00085330 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   85330:	defffd04 	addi	sp,sp,-12
   85334:	df000215 	stw	fp,8(sp)
   85338:	df000204 	addi	fp,sp,8
   8533c:	e13ffe15 	stw	r4,-8(fp)
   85340:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   85344:	00000506 	br	8535c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   85348:	e0bfff17 	ldw	r2,-4(fp)
   8534c:	1090000c 	andi	r2,r2,16384
   85350:	10000226 	beq	r2,zero,8535c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   85354:	00bffd44 	movi	r2,-11
   85358:	00000b06 	br	85388 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   8535c:	e0bffe17 	ldw	r2,-8(fp)
   85360:	10c00d17 	ldw	r3,52(r2)
   85364:	e0bffe17 	ldw	r2,-8(fp)
   85368:	10800c17 	ldw	r2,48(r2)
   8536c:	18800526 	beq	r3,r2,85384 <altera_avalon_jtag_uart_close+0x54>
   85370:	e0bffe17 	ldw	r2,-8(fp)
   85374:	10c00917 	ldw	r3,36(r2)
   85378:	e0bffe17 	ldw	r2,-8(fp)
   8537c:	10800117 	ldw	r2,4(r2)
   85380:	18bff136 	bltu	r3,r2,85348 <__alt_data_end+0xfffe5348>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   85384:	0005883a 	mov	r2,zero
}
   85388:	e037883a 	mov	sp,fp
   8538c:	df000017 	ldw	fp,0(sp)
   85390:	dec00104 	addi	sp,sp,4
   85394:	f800283a 	ret

00085398 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   85398:	defffa04 	addi	sp,sp,-24
   8539c:	df000515 	stw	fp,20(sp)
   853a0:	df000504 	addi	fp,sp,20
   853a4:	e13ffd15 	stw	r4,-12(fp)
   853a8:	e17ffe15 	stw	r5,-8(fp)
   853ac:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   853b0:	00bff9c4 	movi	r2,-25
   853b4:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   853b8:	e0bffe17 	ldw	r2,-8(fp)
   853bc:	10da8060 	cmpeqi	r3,r2,27137
   853c0:	1800031e 	bne	r3,zero,853d0 <altera_avalon_jtag_uart_ioctl+0x38>
   853c4:	109a80a0 	cmpeqi	r2,r2,27138
   853c8:	1000181e 	bne	r2,zero,8542c <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   853cc:	00002906 	br	85474 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   853d0:	e0bffd17 	ldw	r2,-12(fp)
   853d4:	10c00117 	ldw	r3,4(r2)
   853d8:	00a00034 	movhi	r2,32768
   853dc:	10bfffc4 	addi	r2,r2,-1
   853e0:	18802126 	beq	r3,r2,85468 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   853e4:	e0bfff17 	ldw	r2,-4(fp)
   853e8:	10800017 	ldw	r2,0(r2)
   853ec:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   853f0:	e0bffc17 	ldw	r2,-16(fp)
   853f4:	10800090 	cmplti	r2,r2,2
   853f8:	1000061e 	bne	r2,zero,85414 <altera_avalon_jtag_uart_ioctl+0x7c>
   853fc:	e0fffc17 	ldw	r3,-16(fp)
   85400:	00a00034 	movhi	r2,32768
   85404:	10bfffc4 	addi	r2,r2,-1
   85408:	18800226 	beq	r3,r2,85414 <altera_avalon_jtag_uart_ioctl+0x7c>
   8540c:	e0bffc17 	ldw	r2,-16(fp)
   85410:	00000206 	br	8541c <altera_avalon_jtag_uart_ioctl+0x84>
   85414:	00a00034 	movhi	r2,32768
   85418:	10bfff84 	addi	r2,r2,-2
   8541c:	e0fffd17 	ldw	r3,-12(fp)
   85420:	18800115 	stw	r2,4(r3)
      rc = 0;
   85424:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   85428:	00000f06 	br	85468 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   8542c:	e0bffd17 	ldw	r2,-12(fp)
   85430:	10c00117 	ldw	r3,4(r2)
   85434:	00a00034 	movhi	r2,32768
   85438:	10bfffc4 	addi	r2,r2,-1
   8543c:	18800c26 	beq	r3,r2,85470 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   85440:	e0bffd17 	ldw	r2,-12(fp)
   85444:	10c00917 	ldw	r3,36(r2)
   85448:	e0bffd17 	ldw	r2,-12(fp)
   8544c:	10800117 	ldw	r2,4(r2)
   85450:	1885803a 	cmpltu	r2,r3,r2
   85454:	10c03fcc 	andi	r3,r2,255
   85458:	e0bfff17 	ldw	r2,-4(fp)
   8545c:	10c00015 	stw	r3,0(r2)
      rc = 0;
   85460:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   85464:	00000206 	br	85470 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   85468:	0001883a 	nop
   8546c:	00000106 	br	85474 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   85470:	0001883a 	nop

  default:
    break;
  }

  return rc;
   85474:	e0bffb17 	ldw	r2,-20(fp)
}
   85478:	e037883a 	mov	sp,fp
   8547c:	df000017 	ldw	fp,0(sp)
   85480:	dec00104 	addi	sp,sp,4
   85484:	f800283a 	ret

00085488 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   85488:	defff304 	addi	sp,sp,-52
   8548c:	dfc00c15 	stw	ra,48(sp)
   85490:	df000b15 	stw	fp,44(sp)
   85494:	df000b04 	addi	fp,sp,44
   85498:	e13ffc15 	stw	r4,-16(fp)
   8549c:	e17ffd15 	stw	r5,-12(fp)
   854a0:	e1bffe15 	stw	r6,-8(fp)
   854a4:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   854a8:	e0bffd17 	ldw	r2,-12(fp)
   854ac:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   854b0:	00004706 	br	855d0 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   854b4:	e0bffc17 	ldw	r2,-16(fp)
   854b8:	10800a17 	ldw	r2,40(r2)
   854bc:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   854c0:	e0bffc17 	ldw	r2,-16(fp)
   854c4:	10800b17 	ldw	r2,44(r2)
   854c8:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   854cc:	e0fff717 	ldw	r3,-36(fp)
   854d0:	e0bff817 	ldw	r2,-32(fp)
   854d4:	18800536 	bltu	r3,r2,854ec <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   854d8:	e0fff717 	ldw	r3,-36(fp)
   854dc:	e0bff817 	ldw	r2,-32(fp)
   854e0:	1885c83a 	sub	r2,r3,r2
   854e4:	e0bff615 	stw	r2,-40(fp)
   854e8:	00000406 	br	854fc <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   854ec:	00c20004 	movi	r3,2048
   854f0:	e0bff817 	ldw	r2,-32(fp)
   854f4:	1885c83a 	sub	r2,r3,r2
   854f8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   854fc:	e0bff617 	ldw	r2,-40(fp)
   85500:	10001e26 	beq	r2,zero,8557c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   85504:	e0fffe17 	ldw	r3,-8(fp)
   85508:	e0bff617 	ldw	r2,-40(fp)
   8550c:	1880022e 	bgeu	r3,r2,85518 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   85510:	e0bffe17 	ldw	r2,-8(fp)
   85514:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   85518:	e0bffc17 	ldw	r2,-16(fp)
   8551c:	10c00e04 	addi	r3,r2,56
   85520:	e0bff817 	ldw	r2,-32(fp)
   85524:	1885883a 	add	r2,r3,r2
   85528:	e1bff617 	ldw	r6,-40(fp)
   8552c:	100b883a 	mov	r5,r2
   85530:	e13ff517 	ldw	r4,-44(fp)
   85534:	00825640 	call	82564 <memcpy>
      ptr   += n;
   85538:	e0fff517 	ldw	r3,-44(fp)
   8553c:	e0bff617 	ldw	r2,-40(fp)
   85540:	1885883a 	add	r2,r3,r2
   85544:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   85548:	e0fffe17 	ldw	r3,-8(fp)
   8554c:	e0bff617 	ldw	r2,-40(fp)
   85550:	1885c83a 	sub	r2,r3,r2
   85554:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   85558:	e0fff817 	ldw	r3,-32(fp)
   8555c:	e0bff617 	ldw	r2,-40(fp)
   85560:	1885883a 	add	r2,r3,r2
   85564:	10c1ffcc 	andi	r3,r2,2047
   85568:	e0bffc17 	ldw	r2,-16(fp)
   8556c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   85570:	e0bffe17 	ldw	r2,-8(fp)
   85574:	00bfcf16 	blt	zero,r2,854b4 <__alt_data_end+0xfffe54b4>
   85578:	00000106 	br	85580 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   8557c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   85580:	e0fff517 	ldw	r3,-44(fp)
   85584:	e0bffd17 	ldw	r2,-12(fp)
   85588:	1880141e 	bne	r3,r2,855dc <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   8558c:	e0bfff17 	ldw	r2,-4(fp)
   85590:	1090000c 	andi	r2,r2,16384
   85594:	1000131e 	bne	r2,zero,855e4 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   85598:	0001883a 	nop
   8559c:	e0bffc17 	ldw	r2,-16(fp)
   855a0:	10c00a17 	ldw	r3,40(r2)
   855a4:	e0bff717 	ldw	r2,-36(fp)
   855a8:	1880051e 	bne	r3,r2,855c0 <altera_avalon_jtag_uart_read+0x138>
   855ac:	e0bffc17 	ldw	r2,-16(fp)
   855b0:	10c00917 	ldw	r3,36(r2)
   855b4:	e0bffc17 	ldw	r2,-16(fp)
   855b8:	10800117 	ldw	r2,4(r2)
   855bc:	18bff736 	bltu	r3,r2,8559c <__alt_data_end+0xfffe559c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   855c0:	e0bffc17 	ldw	r2,-16(fp)
   855c4:	10c00a17 	ldw	r3,40(r2)
   855c8:	e0bff717 	ldw	r2,-36(fp)
   855cc:	18800726 	beq	r3,r2,855ec <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   855d0:	e0bffe17 	ldw	r2,-8(fp)
   855d4:	00bfb716 	blt	zero,r2,854b4 <__alt_data_end+0xfffe54b4>
   855d8:	00000506 	br	855f0 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   855dc:	0001883a 	nop
   855e0:	00000306 	br	855f0 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   855e4:	0001883a 	nop
   855e8:	00000106 	br	855f0 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   855ec:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   855f0:	e0fff517 	ldw	r3,-44(fp)
   855f4:	e0bffd17 	ldw	r2,-12(fp)
   855f8:	18801826 	beq	r3,r2,8565c <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   855fc:	0005303a 	rdctl	r2,status
   85600:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   85604:	e0fffb17 	ldw	r3,-20(fp)
   85608:	00bfff84 	movi	r2,-2
   8560c:	1884703a 	and	r2,r3,r2
   85610:	1001703a 	wrctl	status,r2
  
  return context;
   85614:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   85618:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   8561c:	e0bffc17 	ldw	r2,-16(fp)
   85620:	10800817 	ldw	r2,32(r2)
   85624:	10c00054 	ori	r3,r2,1
   85628:	e0bffc17 	ldw	r2,-16(fp)
   8562c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   85630:	e0bffc17 	ldw	r2,-16(fp)
   85634:	10800017 	ldw	r2,0(r2)
   85638:	10800104 	addi	r2,r2,4
   8563c:	1007883a 	mov	r3,r2
   85640:	e0bffc17 	ldw	r2,-16(fp)
   85644:	10800817 	ldw	r2,32(r2)
   85648:	18800035 	stwio	r2,0(r3)
   8564c:	e0bffa17 	ldw	r2,-24(fp)
   85650:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   85654:	e0bff917 	ldw	r2,-28(fp)
   85658:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   8565c:	e0fff517 	ldw	r3,-44(fp)
   85660:	e0bffd17 	ldw	r2,-12(fp)
   85664:	18800426 	beq	r3,r2,85678 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   85668:	e0fff517 	ldw	r3,-44(fp)
   8566c:	e0bffd17 	ldw	r2,-12(fp)
   85670:	1885c83a 	sub	r2,r3,r2
   85674:	00000606 	br	85690 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   85678:	e0bfff17 	ldw	r2,-4(fp)
   8567c:	1090000c 	andi	r2,r2,16384
   85680:	10000226 	beq	r2,zero,8568c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   85684:	00bffd44 	movi	r2,-11
   85688:	00000106 	br	85690 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   8568c:	00bffec4 	movi	r2,-5
}
   85690:	e037883a 	mov	sp,fp
   85694:	dfc00117 	ldw	ra,4(sp)
   85698:	df000017 	ldw	fp,0(sp)
   8569c:	dec00204 	addi	sp,sp,8
   856a0:	f800283a 	ret

000856a4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   856a4:	defff304 	addi	sp,sp,-52
   856a8:	dfc00c15 	stw	ra,48(sp)
   856ac:	df000b15 	stw	fp,44(sp)
   856b0:	df000b04 	addi	fp,sp,44
   856b4:	e13ffc15 	stw	r4,-16(fp)
   856b8:	e17ffd15 	stw	r5,-12(fp)
   856bc:	e1bffe15 	stw	r6,-8(fp)
   856c0:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   856c4:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   856c8:	e0bffd17 	ldw	r2,-12(fp)
   856cc:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   856d0:	00003706 	br	857b0 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   856d4:	e0bffc17 	ldw	r2,-16(fp)
   856d8:	10800c17 	ldw	r2,48(r2)
   856dc:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   856e0:	e0bffc17 	ldw	r2,-16(fp)
   856e4:	10800d17 	ldw	r2,52(r2)
   856e8:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   856ec:	e0fff917 	ldw	r3,-28(fp)
   856f0:	e0bff517 	ldw	r2,-44(fp)
   856f4:	1880062e 	bgeu	r3,r2,85710 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   856f8:	e0fff517 	ldw	r3,-44(fp)
   856fc:	e0bff917 	ldw	r2,-28(fp)
   85700:	1885c83a 	sub	r2,r3,r2
   85704:	10bfffc4 	addi	r2,r2,-1
   85708:	e0bff615 	stw	r2,-40(fp)
   8570c:	00000b06 	br	8573c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   85710:	e0bff517 	ldw	r2,-44(fp)
   85714:	10000526 	beq	r2,zero,8572c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   85718:	00c20004 	movi	r3,2048
   8571c:	e0bff917 	ldw	r2,-28(fp)
   85720:	1885c83a 	sub	r2,r3,r2
   85724:	e0bff615 	stw	r2,-40(fp)
   85728:	00000406 	br	8573c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   8572c:	00c1ffc4 	movi	r3,2047
   85730:	e0bff917 	ldw	r2,-28(fp)
   85734:	1885c83a 	sub	r2,r3,r2
   85738:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   8573c:	e0bff617 	ldw	r2,-40(fp)
   85740:	10001e26 	beq	r2,zero,857bc <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   85744:	e0fffe17 	ldw	r3,-8(fp)
   85748:	e0bff617 	ldw	r2,-40(fp)
   8574c:	1880022e 	bgeu	r3,r2,85758 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   85750:	e0bffe17 	ldw	r2,-8(fp)
   85754:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   85758:	e0bffc17 	ldw	r2,-16(fp)
   8575c:	10c20e04 	addi	r3,r2,2104
   85760:	e0bff917 	ldw	r2,-28(fp)
   85764:	1885883a 	add	r2,r3,r2
   85768:	e1bff617 	ldw	r6,-40(fp)
   8576c:	e17ffd17 	ldw	r5,-12(fp)
   85770:	1009883a 	mov	r4,r2
   85774:	00825640 	call	82564 <memcpy>
      ptr   += n;
   85778:	e0fffd17 	ldw	r3,-12(fp)
   8577c:	e0bff617 	ldw	r2,-40(fp)
   85780:	1885883a 	add	r2,r3,r2
   85784:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   85788:	e0fffe17 	ldw	r3,-8(fp)
   8578c:	e0bff617 	ldw	r2,-40(fp)
   85790:	1885c83a 	sub	r2,r3,r2
   85794:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   85798:	e0fff917 	ldw	r3,-28(fp)
   8579c:	e0bff617 	ldw	r2,-40(fp)
   857a0:	1885883a 	add	r2,r3,r2
   857a4:	10c1ffcc 	andi	r3,r2,2047
   857a8:	e0bffc17 	ldw	r2,-16(fp)
   857ac:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   857b0:	e0bffe17 	ldw	r2,-8(fp)
   857b4:	00bfc716 	blt	zero,r2,856d4 <__alt_data_end+0xfffe56d4>
   857b8:	00000106 	br	857c0 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   857bc:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   857c0:	0005303a 	rdctl	r2,status
   857c4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   857c8:	e0fffb17 	ldw	r3,-20(fp)
   857cc:	00bfff84 	movi	r2,-2
   857d0:	1884703a 	and	r2,r3,r2
   857d4:	1001703a 	wrctl	status,r2
  
  return context;
   857d8:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   857dc:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   857e0:	e0bffc17 	ldw	r2,-16(fp)
   857e4:	10800817 	ldw	r2,32(r2)
   857e8:	10c00094 	ori	r3,r2,2
   857ec:	e0bffc17 	ldw	r2,-16(fp)
   857f0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   857f4:	e0bffc17 	ldw	r2,-16(fp)
   857f8:	10800017 	ldw	r2,0(r2)
   857fc:	10800104 	addi	r2,r2,4
   85800:	1007883a 	mov	r3,r2
   85804:	e0bffc17 	ldw	r2,-16(fp)
   85808:	10800817 	ldw	r2,32(r2)
   8580c:	18800035 	stwio	r2,0(r3)
   85810:	e0bffa17 	ldw	r2,-24(fp)
   85814:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   85818:	e0bff817 	ldw	r2,-32(fp)
   8581c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   85820:	e0bffe17 	ldw	r2,-8(fp)
   85824:	0080100e 	bge	zero,r2,85868 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   85828:	e0bfff17 	ldw	r2,-4(fp)
   8582c:	1090000c 	andi	r2,r2,16384
   85830:	1000101e 	bne	r2,zero,85874 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   85834:	0001883a 	nop
   85838:	e0bffc17 	ldw	r2,-16(fp)
   8583c:	10c00d17 	ldw	r3,52(r2)
   85840:	e0bff517 	ldw	r2,-44(fp)
   85844:	1880051e 	bne	r3,r2,8585c <altera_avalon_jtag_uart_write+0x1b8>
   85848:	e0bffc17 	ldw	r2,-16(fp)
   8584c:	10c00917 	ldw	r3,36(r2)
   85850:	e0bffc17 	ldw	r2,-16(fp)
   85854:	10800117 	ldw	r2,4(r2)
   85858:	18bff736 	bltu	r3,r2,85838 <__alt_data_end+0xfffe5838>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   8585c:	e0bffc17 	ldw	r2,-16(fp)
   85860:	10800917 	ldw	r2,36(r2)
   85864:	1000051e 	bne	r2,zero,8587c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   85868:	e0bffe17 	ldw	r2,-8(fp)
   8586c:	00bfd016 	blt	zero,r2,857b0 <__alt_data_end+0xfffe57b0>
   85870:	00000306 	br	85880 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   85874:	0001883a 	nop
   85878:	00000106 	br	85880 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   8587c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   85880:	e0fffd17 	ldw	r3,-12(fp)
   85884:	e0bff717 	ldw	r2,-36(fp)
   85888:	18800426 	beq	r3,r2,8589c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   8588c:	e0fffd17 	ldw	r3,-12(fp)
   85890:	e0bff717 	ldw	r2,-36(fp)
   85894:	1885c83a 	sub	r2,r3,r2
   85898:	00000606 	br	858b4 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   8589c:	e0bfff17 	ldw	r2,-4(fp)
   858a0:	1090000c 	andi	r2,r2,16384
   858a4:	10000226 	beq	r2,zero,858b0 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   858a8:	00bffd44 	movi	r2,-11
   858ac:	00000106 	br	858b4 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   858b0:	00bffec4 	movi	r2,-5
}
   858b4:	e037883a 	mov	sp,fp
   858b8:	dfc00117 	ldw	ra,4(sp)
   858bc:	df000017 	ldw	fp,0(sp)
   858c0:	dec00204 	addi	sp,sp,8
   858c4:	f800283a 	ret

000858c8 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   858c8:	defffa04 	addi	sp,sp,-24
   858cc:	dfc00515 	stw	ra,20(sp)
   858d0:	df000415 	stw	fp,16(sp)
   858d4:	df000404 	addi	fp,sp,16
   858d8:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   858dc:	0007883a 	mov	r3,zero
   858e0:	e0bfff17 	ldw	r2,-4(fp)
   858e4:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   858e8:	e0bfff17 	ldw	r2,-4(fp)
   858ec:	10800104 	addi	r2,r2,4
   858f0:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   858f4:	0005303a 	rdctl	r2,status
   858f8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   858fc:	e0fffd17 	ldw	r3,-12(fp)
   85900:	00bfff84 	movi	r2,-2
   85904:	1884703a 	and	r2,r3,r2
   85908:	1001703a 	wrctl	status,r2
  
  return context;
   8590c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   85910:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   85914:	00863e80 	call	863e8 <alt_tick>
   85918:	e0bffc17 	ldw	r2,-16(fp)
   8591c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   85920:	e0bffe17 	ldw	r2,-8(fp)
   85924:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   85928:	0001883a 	nop
   8592c:	e037883a 	mov	sp,fp
   85930:	dfc00117 	ldw	ra,4(sp)
   85934:	df000017 	ldw	fp,0(sp)
   85938:	dec00204 	addi	sp,sp,8
   8593c:	f800283a 	ret

00085940 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   85940:	defff804 	addi	sp,sp,-32
   85944:	dfc00715 	stw	ra,28(sp)
   85948:	df000615 	stw	fp,24(sp)
   8594c:	df000604 	addi	fp,sp,24
   85950:	e13ffc15 	stw	r4,-16(fp)
   85954:	e17ffd15 	stw	r5,-12(fp)
   85958:	e1bffe15 	stw	r6,-8(fp)
   8595c:	e1ffff15 	stw	r7,-4(fp)
   85960:	e0bfff17 	ldw	r2,-4(fp)
   85964:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   85968:	d0a8d917 	ldw	r2,-23708(gp)
   8596c:	1000021e 	bne	r2,zero,85978 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   85970:	e0bffb17 	ldw	r2,-20(fp)
   85974:	d0a8d915 	stw	r2,-23708(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   85978:	e0bffc17 	ldw	r2,-16(fp)
   8597c:	10800104 	addi	r2,r2,4
   85980:	00c001c4 	movi	r3,7
   85984:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   85988:	d8000015 	stw	zero,0(sp)
   8598c:	e1fffc17 	ldw	r7,-16(fp)
   85990:	01800234 	movhi	r6,8
   85994:	31963204 	addi	r6,r6,22728
   85998:	e17ffe17 	ldw	r5,-8(fp)
   8599c:	e13ffd17 	ldw	r4,-12(fp)
   859a0:	0085cc80 	call	85cc8 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   859a4:	0001883a 	nop
   859a8:	e037883a 	mov	sp,fp
   859ac:	dfc00117 	ldw	ra,4(sp)
   859b0:	df000017 	ldw	fp,0(sp)
   859b4:	dec00204 	addi	sp,sp,8
   859b8:	f800283a 	ret

000859bc <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   859bc:	defff504 	addi	sp,sp,-44
   859c0:	df000a15 	stw	fp,40(sp)
   859c4:	df000a04 	addi	fp,sp,40
   859c8:	e13ffc15 	stw	r4,-16(fp)
   859cc:	e17ffd15 	stw	r5,-12(fp)
   859d0:	e1bffe15 	stw	r6,-8(fp)
   859d4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   859d8:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   859dc:	d0a8d917 	ldw	r2,-23708(gp)
  
  if (alt_ticks_per_second ())
   859e0:	10003c26 	beq	r2,zero,85ad4 <alt_alarm_start+0x118>
  {
    if (alarm)
   859e4:	e0bffc17 	ldw	r2,-16(fp)
   859e8:	10003826 	beq	r2,zero,85acc <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   859ec:	e0bffc17 	ldw	r2,-16(fp)
   859f0:	e0fffe17 	ldw	r3,-8(fp)
   859f4:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   859f8:	e0bffc17 	ldw	r2,-16(fp)
   859fc:	e0ffff17 	ldw	r3,-4(fp)
   85a00:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   85a04:	0005303a 	rdctl	r2,status
   85a08:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   85a0c:	e0fff917 	ldw	r3,-28(fp)
   85a10:	00bfff84 	movi	r2,-2
   85a14:	1884703a 	and	r2,r3,r2
   85a18:	1001703a 	wrctl	status,r2
  
  return context;
   85a1c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   85a20:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   85a24:	d0a8da17 	ldw	r2,-23704(gp)
      
      current_nticks = alt_nticks();
   85a28:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   85a2c:	e0fffd17 	ldw	r3,-12(fp)
   85a30:	e0bff617 	ldw	r2,-40(fp)
   85a34:	1885883a 	add	r2,r3,r2
   85a38:	10c00044 	addi	r3,r2,1
   85a3c:	e0bffc17 	ldw	r2,-16(fp)
   85a40:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   85a44:	e0bffc17 	ldw	r2,-16(fp)
   85a48:	10c00217 	ldw	r3,8(r2)
   85a4c:	e0bff617 	ldw	r2,-40(fp)
   85a50:	1880042e 	bgeu	r3,r2,85a64 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   85a54:	e0bffc17 	ldw	r2,-16(fp)
   85a58:	00c00044 	movi	r3,1
   85a5c:	10c00405 	stb	r3,16(r2)
   85a60:	00000206 	br	85a6c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   85a64:	e0bffc17 	ldw	r2,-16(fp)
   85a68:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   85a6c:	e0bffc17 	ldw	r2,-16(fp)
   85a70:	d0e00c04 	addi	r3,gp,-32720
   85a74:	e0fffa15 	stw	r3,-24(fp)
   85a78:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   85a7c:	e0bffb17 	ldw	r2,-20(fp)
   85a80:	e0fffa17 	ldw	r3,-24(fp)
   85a84:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   85a88:	e0bffa17 	ldw	r2,-24(fp)
   85a8c:	10c00017 	ldw	r3,0(r2)
   85a90:	e0bffb17 	ldw	r2,-20(fp)
   85a94:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   85a98:	e0bffa17 	ldw	r2,-24(fp)
   85a9c:	10800017 	ldw	r2,0(r2)
   85aa0:	e0fffb17 	ldw	r3,-20(fp)
   85aa4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   85aa8:	e0bffa17 	ldw	r2,-24(fp)
   85aac:	e0fffb17 	ldw	r3,-20(fp)
   85ab0:	10c00015 	stw	r3,0(r2)
   85ab4:	e0bff817 	ldw	r2,-32(fp)
   85ab8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   85abc:	e0bff717 	ldw	r2,-36(fp)
   85ac0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   85ac4:	0005883a 	mov	r2,zero
   85ac8:	00000306 	br	85ad8 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   85acc:	00bffa84 	movi	r2,-22
   85ad0:	00000106 	br	85ad8 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   85ad4:	00bfde84 	movi	r2,-134
  }
}
   85ad8:	e037883a 	mov	sp,fp
   85adc:	df000017 	ldw	fp,0(sp)
   85ae0:	dec00104 	addi	sp,sp,4
   85ae4:	f800283a 	ret

00085ae8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   85ae8:	deffff04 	addi	sp,sp,-4
   85aec:	df000015 	stw	fp,0(sp)
   85af0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   85af4:	0001883a 	nop
   85af8:	e037883a 	mov	sp,fp
   85afc:	df000017 	ldw	fp,0(sp)
   85b00:	dec00104 	addi	sp,sp,4
   85b04:	f800283a 	ret

00085b08 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   85b08:	defffe04 	addi	sp,sp,-8
   85b0c:	dfc00115 	stw	ra,4(sp)
   85b10:	df000015 	stw	fp,0(sp)
   85b14:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   85b18:	d0a00917 	ldw	r2,-32732(gp)
   85b1c:	10000326 	beq	r2,zero,85b2c <alt_get_errno+0x24>
   85b20:	d0a00917 	ldw	r2,-32732(gp)
   85b24:	103ee83a 	callr	r2
   85b28:	00000106 	br	85b30 <alt_get_errno+0x28>
   85b2c:	d0a8d404 	addi	r2,gp,-23728
}
   85b30:	e037883a 	mov	sp,fp
   85b34:	dfc00117 	ldw	ra,4(sp)
   85b38:	df000017 	ldw	fp,0(sp)
   85b3c:	dec00204 	addi	sp,sp,8
   85b40:	f800283a 	ret

00085b44 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   85b44:	defffa04 	addi	sp,sp,-24
   85b48:	dfc00515 	stw	ra,20(sp)
   85b4c:	df000415 	stw	fp,16(sp)
   85b50:	df000404 	addi	fp,sp,16
   85b54:	e13ffe15 	stw	r4,-8(fp)
   85b58:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   85b5c:	e0bffe17 	ldw	r2,-8(fp)
   85b60:	10000326 	beq	r2,zero,85b70 <alt_dev_llist_insert+0x2c>
   85b64:	e0bffe17 	ldw	r2,-8(fp)
   85b68:	10800217 	ldw	r2,8(r2)
   85b6c:	1000061e 	bne	r2,zero,85b88 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   85b70:	0085b080 	call	85b08 <alt_get_errno>
   85b74:	1007883a 	mov	r3,r2
   85b78:	00800584 	movi	r2,22
   85b7c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   85b80:	00bffa84 	movi	r2,-22
   85b84:	00001306 	br	85bd4 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   85b88:	e0bffe17 	ldw	r2,-8(fp)
   85b8c:	e0ffff17 	ldw	r3,-4(fp)
   85b90:	e0fffc15 	stw	r3,-16(fp)
   85b94:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   85b98:	e0bffd17 	ldw	r2,-12(fp)
   85b9c:	e0fffc17 	ldw	r3,-16(fp)
   85ba0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   85ba4:	e0bffc17 	ldw	r2,-16(fp)
   85ba8:	10c00017 	ldw	r3,0(r2)
   85bac:	e0bffd17 	ldw	r2,-12(fp)
   85bb0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   85bb4:	e0bffc17 	ldw	r2,-16(fp)
   85bb8:	10800017 	ldw	r2,0(r2)
   85bbc:	e0fffd17 	ldw	r3,-12(fp)
   85bc0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   85bc4:	e0bffc17 	ldw	r2,-16(fp)
   85bc8:	e0fffd17 	ldw	r3,-12(fp)
   85bcc:	10c00015 	stw	r3,0(r2)

  return 0;  
   85bd0:	0005883a 	mov	r2,zero
}
   85bd4:	e037883a 	mov	sp,fp
   85bd8:	dfc00117 	ldw	ra,4(sp)
   85bdc:	df000017 	ldw	fp,0(sp)
   85be0:	dec00204 	addi	sp,sp,8
   85be4:	f800283a 	ret

00085be8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   85be8:	defffd04 	addi	sp,sp,-12
   85bec:	dfc00215 	stw	ra,8(sp)
   85bf0:	df000115 	stw	fp,4(sp)
   85bf4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   85bf8:	00800234 	movhi	r2,8
   85bfc:	109ae704 	addi	r2,r2,27548
   85c00:	e0bfff15 	stw	r2,-4(fp)
   85c04:	00000606 	br	85c20 <_do_ctors+0x38>
        (*ctor) (); 
   85c08:	e0bfff17 	ldw	r2,-4(fp)
   85c0c:	10800017 	ldw	r2,0(r2)
   85c10:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   85c14:	e0bfff17 	ldw	r2,-4(fp)
   85c18:	10bfff04 	addi	r2,r2,-4
   85c1c:	e0bfff15 	stw	r2,-4(fp)
   85c20:	e0ffff17 	ldw	r3,-4(fp)
   85c24:	00800234 	movhi	r2,8
   85c28:	109ae804 	addi	r2,r2,27552
   85c2c:	18bff62e 	bgeu	r3,r2,85c08 <__alt_data_end+0xfffe5c08>
        (*ctor) (); 
}
   85c30:	0001883a 	nop
   85c34:	e037883a 	mov	sp,fp
   85c38:	dfc00117 	ldw	ra,4(sp)
   85c3c:	df000017 	ldw	fp,0(sp)
   85c40:	dec00204 	addi	sp,sp,8
   85c44:	f800283a 	ret

00085c48 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   85c48:	defffd04 	addi	sp,sp,-12
   85c4c:	dfc00215 	stw	ra,8(sp)
   85c50:	df000115 	stw	fp,4(sp)
   85c54:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   85c58:	00800234 	movhi	r2,8
   85c5c:	109ae704 	addi	r2,r2,27548
   85c60:	e0bfff15 	stw	r2,-4(fp)
   85c64:	00000606 	br	85c80 <_do_dtors+0x38>
        (*dtor) (); 
   85c68:	e0bfff17 	ldw	r2,-4(fp)
   85c6c:	10800017 	ldw	r2,0(r2)
   85c70:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   85c74:	e0bfff17 	ldw	r2,-4(fp)
   85c78:	10bfff04 	addi	r2,r2,-4
   85c7c:	e0bfff15 	stw	r2,-4(fp)
   85c80:	e0ffff17 	ldw	r3,-4(fp)
   85c84:	00800234 	movhi	r2,8
   85c88:	109ae804 	addi	r2,r2,27552
   85c8c:	18bff62e 	bgeu	r3,r2,85c68 <__alt_data_end+0xfffe5c68>
        (*dtor) (); 
}
   85c90:	0001883a 	nop
   85c94:	e037883a 	mov	sp,fp
   85c98:	dfc00117 	ldw	ra,4(sp)
   85c9c:	df000017 	ldw	fp,0(sp)
   85ca0:	dec00204 	addi	sp,sp,8
   85ca4:	f800283a 	ret

00085ca8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   85ca8:	deffff04 	addi	sp,sp,-4
   85cac:	df000015 	stw	fp,0(sp)
   85cb0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   85cb4:	0001883a 	nop
   85cb8:	e037883a 	mov	sp,fp
   85cbc:	df000017 	ldw	fp,0(sp)
   85cc0:	dec00104 	addi	sp,sp,4
   85cc4:	f800283a 	ret

00085cc8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   85cc8:	defff904 	addi	sp,sp,-28
   85ccc:	dfc00615 	stw	ra,24(sp)
   85cd0:	df000515 	stw	fp,20(sp)
   85cd4:	df000504 	addi	fp,sp,20
   85cd8:	e13ffc15 	stw	r4,-16(fp)
   85cdc:	e17ffd15 	stw	r5,-12(fp)
   85ce0:	e1bffe15 	stw	r6,-8(fp)
   85ce4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   85ce8:	e0800217 	ldw	r2,8(fp)
   85cec:	d8800015 	stw	r2,0(sp)
   85cf0:	e1ffff17 	ldw	r7,-4(fp)
   85cf4:	e1bffe17 	ldw	r6,-8(fp)
   85cf8:	e17ffd17 	ldw	r5,-12(fp)
   85cfc:	e13ffc17 	ldw	r4,-16(fp)
   85d00:	0085e780 	call	85e78 <alt_iic_isr_register>
}  
   85d04:	e037883a 	mov	sp,fp
   85d08:	dfc00117 	ldw	ra,4(sp)
   85d0c:	df000017 	ldw	fp,0(sp)
   85d10:	dec00204 	addi	sp,sp,8
   85d14:	f800283a 	ret

00085d18 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   85d18:	defff904 	addi	sp,sp,-28
   85d1c:	df000615 	stw	fp,24(sp)
   85d20:	df000604 	addi	fp,sp,24
   85d24:	e13ffe15 	stw	r4,-8(fp)
   85d28:	e17fff15 	stw	r5,-4(fp)
   85d2c:	e0bfff17 	ldw	r2,-4(fp)
   85d30:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   85d34:	0005303a 	rdctl	r2,status
   85d38:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   85d3c:	e0fffb17 	ldw	r3,-20(fp)
   85d40:	00bfff84 	movi	r2,-2
   85d44:	1884703a 	and	r2,r3,r2
   85d48:	1001703a 	wrctl	status,r2
  
  return context;
   85d4c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   85d50:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   85d54:	00c00044 	movi	r3,1
   85d58:	e0bffa17 	ldw	r2,-24(fp)
   85d5c:	1884983a 	sll	r2,r3,r2
   85d60:	1007883a 	mov	r3,r2
   85d64:	d0a8d817 	ldw	r2,-23712(gp)
   85d68:	1884b03a 	or	r2,r3,r2
   85d6c:	d0a8d815 	stw	r2,-23712(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   85d70:	d0a8d817 	ldw	r2,-23712(gp)
   85d74:	100170fa 	wrctl	ienable,r2
   85d78:	e0bffc17 	ldw	r2,-16(fp)
   85d7c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   85d80:	e0bffd17 	ldw	r2,-12(fp)
   85d84:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   85d88:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   85d8c:	0001883a 	nop
}
   85d90:	e037883a 	mov	sp,fp
   85d94:	df000017 	ldw	fp,0(sp)
   85d98:	dec00104 	addi	sp,sp,4
   85d9c:	f800283a 	ret

00085da0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   85da0:	defff904 	addi	sp,sp,-28
   85da4:	df000615 	stw	fp,24(sp)
   85da8:	df000604 	addi	fp,sp,24
   85dac:	e13ffe15 	stw	r4,-8(fp)
   85db0:	e17fff15 	stw	r5,-4(fp)
   85db4:	e0bfff17 	ldw	r2,-4(fp)
   85db8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   85dbc:	0005303a 	rdctl	r2,status
   85dc0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   85dc4:	e0fffb17 	ldw	r3,-20(fp)
   85dc8:	00bfff84 	movi	r2,-2
   85dcc:	1884703a 	and	r2,r3,r2
   85dd0:	1001703a 	wrctl	status,r2
  
  return context;
   85dd4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   85dd8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   85ddc:	00c00044 	movi	r3,1
   85de0:	e0bffa17 	ldw	r2,-24(fp)
   85de4:	1884983a 	sll	r2,r3,r2
   85de8:	0084303a 	nor	r2,zero,r2
   85dec:	1007883a 	mov	r3,r2
   85df0:	d0a8d817 	ldw	r2,-23712(gp)
   85df4:	1884703a 	and	r2,r3,r2
   85df8:	d0a8d815 	stw	r2,-23712(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   85dfc:	d0a8d817 	ldw	r2,-23712(gp)
   85e00:	100170fa 	wrctl	ienable,r2
   85e04:	e0bffc17 	ldw	r2,-16(fp)
   85e08:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   85e0c:	e0bffd17 	ldw	r2,-12(fp)
   85e10:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   85e14:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   85e18:	0001883a 	nop
}
   85e1c:	e037883a 	mov	sp,fp
   85e20:	df000017 	ldw	fp,0(sp)
   85e24:	dec00104 	addi	sp,sp,4
   85e28:	f800283a 	ret

00085e2c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   85e2c:	defffc04 	addi	sp,sp,-16
   85e30:	df000315 	stw	fp,12(sp)
   85e34:	df000304 	addi	fp,sp,12
   85e38:	e13ffe15 	stw	r4,-8(fp)
   85e3c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   85e40:	000530fa 	rdctl	r2,ienable
   85e44:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   85e48:	00c00044 	movi	r3,1
   85e4c:	e0bfff17 	ldw	r2,-4(fp)
   85e50:	1884983a 	sll	r2,r3,r2
   85e54:	1007883a 	mov	r3,r2
   85e58:	e0bffd17 	ldw	r2,-12(fp)
   85e5c:	1884703a 	and	r2,r3,r2
   85e60:	1004c03a 	cmpne	r2,r2,zero
   85e64:	10803fcc 	andi	r2,r2,255
}
   85e68:	e037883a 	mov	sp,fp
   85e6c:	df000017 	ldw	fp,0(sp)
   85e70:	dec00104 	addi	sp,sp,4
   85e74:	f800283a 	ret

00085e78 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   85e78:	defff504 	addi	sp,sp,-44
   85e7c:	dfc00a15 	stw	ra,40(sp)
   85e80:	df000915 	stw	fp,36(sp)
   85e84:	df000904 	addi	fp,sp,36
   85e88:	e13ffc15 	stw	r4,-16(fp)
   85e8c:	e17ffd15 	stw	r5,-12(fp)
   85e90:	e1bffe15 	stw	r6,-8(fp)
   85e94:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   85e98:	00bffa84 	movi	r2,-22
   85e9c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   85ea0:	e0bffd17 	ldw	r2,-12(fp)
   85ea4:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   85ea8:	e0bff817 	ldw	r2,-32(fp)
   85eac:	10800808 	cmpgei	r2,r2,32
   85eb0:	1000271e 	bne	r2,zero,85f50 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   85eb4:	0005303a 	rdctl	r2,status
   85eb8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   85ebc:	e0fffb17 	ldw	r3,-20(fp)
   85ec0:	00bfff84 	movi	r2,-2
   85ec4:	1884703a 	and	r2,r3,r2
   85ec8:	1001703a 	wrctl	status,r2
  
  return context;
   85ecc:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   85ed0:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   85ed4:	00800274 	movhi	r2,9
   85ed8:	10aca104 	addi	r2,r2,-19836
   85edc:	e0fff817 	ldw	r3,-32(fp)
   85ee0:	180690fa 	slli	r3,r3,3
   85ee4:	10c5883a 	add	r2,r2,r3
   85ee8:	e0fffe17 	ldw	r3,-8(fp)
   85eec:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   85ef0:	00800274 	movhi	r2,9
   85ef4:	10aca104 	addi	r2,r2,-19836
   85ef8:	e0fff817 	ldw	r3,-32(fp)
   85efc:	180690fa 	slli	r3,r3,3
   85f00:	10c5883a 	add	r2,r2,r3
   85f04:	10800104 	addi	r2,r2,4
   85f08:	e0ffff17 	ldw	r3,-4(fp)
   85f0c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   85f10:	e0bffe17 	ldw	r2,-8(fp)
   85f14:	10000526 	beq	r2,zero,85f2c <alt_iic_isr_register+0xb4>
   85f18:	e0bff817 	ldw	r2,-32(fp)
   85f1c:	100b883a 	mov	r5,r2
   85f20:	e13ffc17 	ldw	r4,-16(fp)
   85f24:	0085d180 	call	85d18 <alt_ic_irq_enable>
   85f28:	00000406 	br	85f3c <alt_iic_isr_register+0xc4>
   85f2c:	e0bff817 	ldw	r2,-32(fp)
   85f30:	100b883a 	mov	r5,r2
   85f34:	e13ffc17 	ldw	r4,-16(fp)
   85f38:	0085da00 	call	85da0 <alt_ic_irq_disable>
   85f3c:	e0bff715 	stw	r2,-36(fp)
   85f40:	e0bffa17 	ldw	r2,-24(fp)
   85f44:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   85f48:	e0bff917 	ldw	r2,-28(fp)
   85f4c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   85f50:	e0bff717 	ldw	r2,-36(fp)
}
   85f54:	e037883a 	mov	sp,fp
   85f58:	dfc00117 	ldw	ra,4(sp)
   85f5c:	df000017 	ldw	fp,0(sp)
   85f60:	dec00204 	addi	sp,sp,8
   85f64:	f800283a 	ret

00085f68 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   85f68:	defff804 	addi	sp,sp,-32
   85f6c:	dfc00715 	stw	ra,28(sp)
   85f70:	df000615 	stw	fp,24(sp)
   85f74:	dc000515 	stw	r16,20(sp)
   85f78:	df000604 	addi	fp,sp,24
   85f7c:	e13ffb15 	stw	r4,-20(fp)
   85f80:	e17ffc15 	stw	r5,-16(fp)
   85f84:	e1bffd15 	stw	r6,-12(fp)
   85f88:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   85f8c:	e1bffe17 	ldw	r6,-8(fp)
   85f90:	e17ffd17 	ldw	r5,-12(fp)
   85f94:	e13ffc17 	ldw	r4,-16(fp)
   85f98:	00861f00 	call	861f0 <open>
   85f9c:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   85fa0:	e0bffa17 	ldw	r2,-24(fp)
   85fa4:	10002216 	blt	r2,zero,86030 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   85fa8:	04000234 	movhi	r16,8
   85fac:	841f4304 	addi	r16,r16,32012
   85fb0:	e0bffa17 	ldw	r2,-24(fp)
   85fb4:	01400304 	movi	r5,12
   85fb8:	1009883a 	mov	r4,r2
   85fbc:	00810e00 	call	810e0 <__mulsi3>
   85fc0:	8085883a 	add	r2,r16,r2
   85fc4:	10c00017 	ldw	r3,0(r2)
   85fc8:	e0bffb17 	ldw	r2,-20(fp)
   85fcc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   85fd0:	04000234 	movhi	r16,8
   85fd4:	841f4304 	addi	r16,r16,32012
   85fd8:	e0bffa17 	ldw	r2,-24(fp)
   85fdc:	01400304 	movi	r5,12
   85fe0:	1009883a 	mov	r4,r2
   85fe4:	00810e00 	call	810e0 <__mulsi3>
   85fe8:	8085883a 	add	r2,r16,r2
   85fec:	10800104 	addi	r2,r2,4
   85ff0:	10c00017 	ldw	r3,0(r2)
   85ff4:	e0bffb17 	ldw	r2,-20(fp)
   85ff8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   85ffc:	04000234 	movhi	r16,8
   86000:	841f4304 	addi	r16,r16,32012
   86004:	e0bffa17 	ldw	r2,-24(fp)
   86008:	01400304 	movi	r5,12
   8600c:	1009883a 	mov	r4,r2
   86010:	00810e00 	call	810e0 <__mulsi3>
   86014:	8085883a 	add	r2,r16,r2
   86018:	10800204 	addi	r2,r2,8
   8601c:	10c00017 	ldw	r3,0(r2)
   86020:	e0bffb17 	ldw	r2,-20(fp)
   86024:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   86028:	e13ffa17 	ldw	r4,-24(fp)
   8602c:	00846100 	call	84610 <alt_release_fd>
  }
} 
   86030:	0001883a 	nop
   86034:	e6ffff04 	addi	sp,fp,-4
   86038:	dfc00217 	ldw	ra,8(sp)
   8603c:	df000117 	ldw	fp,4(sp)
   86040:	dc000017 	ldw	r16,0(sp)
   86044:	dec00304 	addi	sp,sp,12
   86048:	f800283a 	ret

0008604c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   8604c:	defffb04 	addi	sp,sp,-20
   86050:	dfc00415 	stw	ra,16(sp)
   86054:	df000315 	stw	fp,12(sp)
   86058:	df000304 	addi	fp,sp,12
   8605c:	e13ffd15 	stw	r4,-12(fp)
   86060:	e17ffe15 	stw	r5,-8(fp)
   86064:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   86068:	01c07fc4 	movi	r7,511
   8606c:	01800044 	movi	r6,1
   86070:	e17ffd17 	ldw	r5,-12(fp)
   86074:	01000234 	movhi	r4,8
   86078:	211f4604 	addi	r4,r4,32024
   8607c:	0085f680 	call	85f68 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   86080:	01c07fc4 	movi	r7,511
   86084:	000d883a 	mov	r6,zero
   86088:	e17ffe17 	ldw	r5,-8(fp)
   8608c:	01000234 	movhi	r4,8
   86090:	211f4304 	addi	r4,r4,32012
   86094:	0085f680 	call	85f68 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   86098:	01c07fc4 	movi	r7,511
   8609c:	01800044 	movi	r6,1
   860a0:	e17fff17 	ldw	r5,-4(fp)
   860a4:	01000234 	movhi	r4,8
   860a8:	211f4904 	addi	r4,r4,32036
   860ac:	0085f680 	call	85f68 <alt_open_fd>
}  
   860b0:	0001883a 	nop
   860b4:	e037883a 	mov	sp,fp
   860b8:	dfc00117 	ldw	ra,4(sp)
   860bc:	df000017 	ldw	fp,0(sp)
   860c0:	dec00204 	addi	sp,sp,8
   860c4:	f800283a 	ret

000860c8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   860c8:	defffe04 	addi	sp,sp,-8
   860cc:	dfc00115 	stw	ra,4(sp)
   860d0:	df000015 	stw	fp,0(sp)
   860d4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   860d8:	d0a00917 	ldw	r2,-32732(gp)
   860dc:	10000326 	beq	r2,zero,860ec <alt_get_errno+0x24>
   860e0:	d0a00917 	ldw	r2,-32732(gp)
   860e4:	103ee83a 	callr	r2
   860e8:	00000106 	br	860f0 <alt_get_errno+0x28>
   860ec:	d0a8d404 	addi	r2,gp,-23728
}
   860f0:	e037883a 	mov	sp,fp
   860f4:	dfc00117 	ldw	ra,4(sp)
   860f8:	df000017 	ldw	fp,0(sp)
   860fc:	dec00204 	addi	sp,sp,8
   86100:	f800283a 	ret

00086104 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   86104:	defffb04 	addi	sp,sp,-20
   86108:	dfc00415 	stw	ra,16(sp)
   8610c:	df000315 	stw	fp,12(sp)
   86110:	dc000215 	stw	r16,8(sp)
   86114:	df000304 	addi	fp,sp,12
   86118:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   8611c:	e0bffe17 	ldw	r2,-8(fp)
   86120:	10800217 	ldw	r2,8(r2)
   86124:	10d00034 	orhi	r3,r2,16384
   86128:	e0bffe17 	ldw	r2,-8(fp)
   8612c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   86130:	e03ffd15 	stw	zero,-12(fp)
   86134:	00002306 	br	861c4 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   86138:	04000234 	movhi	r16,8
   8613c:	841f4304 	addi	r16,r16,32012
   86140:	e0bffd17 	ldw	r2,-12(fp)
   86144:	01400304 	movi	r5,12
   86148:	1009883a 	mov	r4,r2
   8614c:	00810e00 	call	810e0 <__mulsi3>
   86150:	8085883a 	add	r2,r16,r2
   86154:	10c00017 	ldw	r3,0(r2)
   86158:	e0bffe17 	ldw	r2,-8(fp)
   8615c:	10800017 	ldw	r2,0(r2)
   86160:	1880151e 	bne	r3,r2,861b8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   86164:	04000234 	movhi	r16,8
   86168:	841f4304 	addi	r16,r16,32012
   8616c:	e0bffd17 	ldw	r2,-12(fp)
   86170:	01400304 	movi	r5,12
   86174:	1009883a 	mov	r4,r2
   86178:	00810e00 	call	810e0 <__mulsi3>
   8617c:	8085883a 	add	r2,r16,r2
   86180:	10800204 	addi	r2,r2,8
   86184:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   86188:	10000b0e 	bge	r2,zero,861b8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   8618c:	01400304 	movi	r5,12
   86190:	e13ffd17 	ldw	r4,-12(fp)
   86194:	00810e00 	call	810e0 <__mulsi3>
   86198:	1007883a 	mov	r3,r2
   8619c:	00800234 	movhi	r2,8
   861a0:	109f4304 	addi	r2,r2,32012
   861a4:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   861a8:	e0bffe17 	ldw	r2,-8(fp)
   861ac:	18800226 	beq	r3,r2,861b8 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   861b0:	00bffcc4 	movi	r2,-13
   861b4:	00000806 	br	861d8 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   861b8:	e0bffd17 	ldw	r2,-12(fp)
   861bc:	10800044 	addi	r2,r2,1
   861c0:	e0bffd15 	stw	r2,-12(fp)
   861c4:	d0a00817 	ldw	r2,-32736(gp)
   861c8:	1007883a 	mov	r3,r2
   861cc:	e0bffd17 	ldw	r2,-12(fp)
   861d0:	18bfd92e 	bgeu	r3,r2,86138 <__alt_data_end+0xfffe6138>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   861d4:	0005883a 	mov	r2,zero
}
   861d8:	e6ffff04 	addi	sp,fp,-4
   861dc:	dfc00217 	ldw	ra,8(sp)
   861e0:	df000117 	ldw	fp,4(sp)
   861e4:	dc000017 	ldw	r16,0(sp)
   861e8:	dec00304 	addi	sp,sp,12
   861ec:	f800283a 	ret

000861f0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   861f0:	defff604 	addi	sp,sp,-40
   861f4:	dfc00915 	stw	ra,36(sp)
   861f8:	df000815 	stw	fp,32(sp)
   861fc:	df000804 	addi	fp,sp,32
   86200:	e13ffd15 	stw	r4,-12(fp)
   86204:	e17ffe15 	stw	r5,-8(fp)
   86208:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   8620c:	00bfffc4 	movi	r2,-1
   86210:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   86214:	00bffb44 	movi	r2,-19
   86218:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   8621c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   86220:	d1600604 	addi	r5,gp,-32744
   86224:	e13ffd17 	ldw	r4,-12(fp)
   86228:	00865140 	call	86514 <alt_find_dev>
   8622c:	e0bff815 	stw	r2,-32(fp)
   86230:	e0bff817 	ldw	r2,-32(fp)
   86234:	1000051e 	bne	r2,zero,8624c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   86238:	e13ffd17 	ldw	r4,-12(fp)
   8623c:	00865a40 	call	865a4 <alt_find_file>
   86240:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   86244:	00800044 	movi	r2,1
   86248:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   8624c:	e0bff817 	ldw	r2,-32(fp)
   86250:	10002b26 	beq	r2,zero,86300 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   86254:	e13ff817 	ldw	r4,-32(fp)
   86258:	00866ac0 	call	866ac <alt_get_fd>
   8625c:	e0bff915 	stw	r2,-28(fp)
   86260:	e0bff917 	ldw	r2,-28(fp)
   86264:	1000030e 	bge	r2,zero,86274 <open+0x84>
    {
      status = index;
   86268:	e0bff917 	ldw	r2,-28(fp)
   8626c:	e0bffa15 	stw	r2,-24(fp)
   86270:	00002506 	br	86308 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   86274:	01400304 	movi	r5,12
   86278:	e13ff917 	ldw	r4,-28(fp)
   8627c:	00810e00 	call	810e0 <__mulsi3>
   86280:	1007883a 	mov	r3,r2
   86284:	00800234 	movhi	r2,8
   86288:	109f4304 	addi	r2,r2,32012
   8628c:	1885883a 	add	r2,r3,r2
   86290:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   86294:	e0fffe17 	ldw	r3,-8(fp)
   86298:	00900034 	movhi	r2,16384
   8629c:	10bfffc4 	addi	r2,r2,-1
   862a0:	1886703a 	and	r3,r3,r2
   862a4:	e0bffc17 	ldw	r2,-16(fp)
   862a8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   862ac:	e0bffb17 	ldw	r2,-20(fp)
   862b0:	1000051e 	bne	r2,zero,862c8 <open+0xd8>
   862b4:	e13ffc17 	ldw	r4,-16(fp)
   862b8:	00861040 	call	86104 <alt_file_locked>
   862bc:	e0bffa15 	stw	r2,-24(fp)
   862c0:	e0bffa17 	ldw	r2,-24(fp)
   862c4:	10001016 	blt	r2,zero,86308 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   862c8:	e0bff817 	ldw	r2,-32(fp)
   862cc:	10800317 	ldw	r2,12(r2)
   862d0:	10000826 	beq	r2,zero,862f4 <open+0x104>
   862d4:	e0bff817 	ldw	r2,-32(fp)
   862d8:	10800317 	ldw	r2,12(r2)
   862dc:	e1ffff17 	ldw	r7,-4(fp)
   862e0:	e1bffe17 	ldw	r6,-8(fp)
   862e4:	e17ffd17 	ldw	r5,-12(fp)
   862e8:	e13ffc17 	ldw	r4,-16(fp)
   862ec:	103ee83a 	callr	r2
   862f0:	00000106 	br	862f8 <open+0x108>
   862f4:	0005883a 	mov	r2,zero
   862f8:	e0bffa15 	stw	r2,-24(fp)
   862fc:	00000206 	br	86308 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   86300:	00bffb44 	movi	r2,-19
   86304:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   86308:	e0bffa17 	ldw	r2,-24(fp)
   8630c:	1000090e 	bge	r2,zero,86334 <open+0x144>
  {
    alt_release_fd (index);  
   86310:	e13ff917 	ldw	r4,-28(fp)
   86314:	00846100 	call	84610 <alt_release_fd>
    ALT_ERRNO = -status;
   86318:	00860c80 	call	860c8 <alt_get_errno>
   8631c:	1007883a 	mov	r3,r2
   86320:	e0bffa17 	ldw	r2,-24(fp)
   86324:	0085c83a 	sub	r2,zero,r2
   86328:	18800015 	stw	r2,0(r3)
    return -1;
   8632c:	00bfffc4 	movi	r2,-1
   86330:	00000106 	br	86338 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   86334:	e0bff917 	ldw	r2,-28(fp)
}
   86338:	e037883a 	mov	sp,fp
   8633c:	dfc00117 	ldw	ra,4(sp)
   86340:	df000017 	ldw	fp,0(sp)
   86344:	dec00204 	addi	sp,sp,8
   86348:	f800283a 	ret

0008634c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   8634c:	defffa04 	addi	sp,sp,-24
   86350:	df000515 	stw	fp,20(sp)
   86354:	df000504 	addi	fp,sp,20
   86358:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8635c:	0005303a 	rdctl	r2,status
   86360:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   86364:	e0fffc17 	ldw	r3,-16(fp)
   86368:	00bfff84 	movi	r2,-2
   8636c:	1884703a 	and	r2,r3,r2
   86370:	1001703a 	wrctl	status,r2
  
  return context;
   86374:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   86378:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   8637c:	e0bfff17 	ldw	r2,-4(fp)
   86380:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   86384:	e0bffd17 	ldw	r2,-12(fp)
   86388:	10800017 	ldw	r2,0(r2)
   8638c:	e0fffd17 	ldw	r3,-12(fp)
   86390:	18c00117 	ldw	r3,4(r3)
   86394:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   86398:	e0bffd17 	ldw	r2,-12(fp)
   8639c:	10800117 	ldw	r2,4(r2)
   863a0:	e0fffd17 	ldw	r3,-12(fp)
   863a4:	18c00017 	ldw	r3,0(r3)
   863a8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   863ac:	e0bffd17 	ldw	r2,-12(fp)
   863b0:	e0fffd17 	ldw	r3,-12(fp)
   863b4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   863b8:	e0bffd17 	ldw	r2,-12(fp)
   863bc:	e0fffd17 	ldw	r3,-12(fp)
   863c0:	10c00015 	stw	r3,0(r2)
   863c4:	e0bffb17 	ldw	r2,-20(fp)
   863c8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   863cc:	e0bffe17 	ldw	r2,-8(fp)
   863d0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   863d4:	0001883a 	nop
   863d8:	e037883a 	mov	sp,fp
   863dc:	df000017 	ldw	fp,0(sp)
   863e0:	dec00104 	addi	sp,sp,4
   863e4:	f800283a 	ret

000863e8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   863e8:	defffb04 	addi	sp,sp,-20
   863ec:	dfc00415 	stw	ra,16(sp)
   863f0:	df000315 	stw	fp,12(sp)
   863f4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   863f8:	d0a00c17 	ldw	r2,-32720(gp)
   863fc:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   86400:	d0a8da17 	ldw	r2,-23704(gp)
   86404:	10800044 	addi	r2,r2,1
   86408:	d0a8da15 	stw	r2,-23704(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   8640c:	00002e06 	br	864c8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   86410:	e0bffd17 	ldw	r2,-12(fp)
   86414:	10800017 	ldw	r2,0(r2)
   86418:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   8641c:	e0bffd17 	ldw	r2,-12(fp)
   86420:	10800403 	ldbu	r2,16(r2)
   86424:	10803fcc 	andi	r2,r2,255
   86428:	10000426 	beq	r2,zero,8643c <alt_tick+0x54>
   8642c:	d0a8da17 	ldw	r2,-23704(gp)
   86430:	1000021e 	bne	r2,zero,8643c <alt_tick+0x54>
    {
      alarm->rollover = 0;
   86434:	e0bffd17 	ldw	r2,-12(fp)
   86438:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   8643c:	e0bffd17 	ldw	r2,-12(fp)
   86440:	10800217 	ldw	r2,8(r2)
   86444:	d0e8da17 	ldw	r3,-23704(gp)
   86448:	18801d36 	bltu	r3,r2,864c0 <alt_tick+0xd8>
   8644c:	e0bffd17 	ldw	r2,-12(fp)
   86450:	10800403 	ldbu	r2,16(r2)
   86454:	10803fcc 	andi	r2,r2,255
   86458:	1000191e 	bne	r2,zero,864c0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   8645c:	e0bffd17 	ldw	r2,-12(fp)
   86460:	10800317 	ldw	r2,12(r2)
   86464:	e0fffd17 	ldw	r3,-12(fp)
   86468:	18c00517 	ldw	r3,20(r3)
   8646c:	1809883a 	mov	r4,r3
   86470:	103ee83a 	callr	r2
   86474:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   86478:	e0bfff17 	ldw	r2,-4(fp)
   8647c:	1000031e 	bne	r2,zero,8648c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   86480:	e13ffd17 	ldw	r4,-12(fp)
   86484:	008634c0 	call	8634c <alt_alarm_stop>
   86488:	00000d06 	br	864c0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   8648c:	e0bffd17 	ldw	r2,-12(fp)
   86490:	10c00217 	ldw	r3,8(r2)
   86494:	e0bfff17 	ldw	r2,-4(fp)
   86498:	1887883a 	add	r3,r3,r2
   8649c:	e0bffd17 	ldw	r2,-12(fp)
   864a0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   864a4:	e0bffd17 	ldw	r2,-12(fp)
   864a8:	10c00217 	ldw	r3,8(r2)
   864ac:	d0a8da17 	ldw	r2,-23704(gp)
   864b0:	1880032e 	bgeu	r3,r2,864c0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   864b4:	e0bffd17 	ldw	r2,-12(fp)
   864b8:	00c00044 	movi	r3,1
   864bc:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   864c0:	e0bffe17 	ldw	r2,-8(fp)
   864c4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   864c8:	e0fffd17 	ldw	r3,-12(fp)
   864cc:	d0a00c04 	addi	r2,gp,-32720
   864d0:	18bfcf1e 	bne	r3,r2,86410 <__alt_data_end+0xfffe6410>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   864d4:	0001883a 	nop
}
   864d8:	0001883a 	nop
   864dc:	e037883a 	mov	sp,fp
   864e0:	dfc00117 	ldw	ra,4(sp)
   864e4:	df000017 	ldw	fp,0(sp)
   864e8:	dec00204 	addi	sp,sp,8
   864ec:	f800283a 	ret

000864f0 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   864f0:	deffff04 	addi	sp,sp,-4
   864f4:	df000015 	stw	fp,0(sp)
   864f8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   864fc:	000170fa 	wrctl	ienable,zero
}
   86500:	0001883a 	nop
   86504:	e037883a 	mov	sp,fp
   86508:	df000017 	ldw	fp,0(sp)
   8650c:	dec00104 	addi	sp,sp,4
   86510:	f800283a 	ret

00086514 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   86514:	defffa04 	addi	sp,sp,-24
   86518:	dfc00515 	stw	ra,20(sp)
   8651c:	df000415 	stw	fp,16(sp)
   86520:	df000404 	addi	fp,sp,16
   86524:	e13ffe15 	stw	r4,-8(fp)
   86528:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   8652c:	e0bfff17 	ldw	r2,-4(fp)
   86530:	10800017 	ldw	r2,0(r2)
   86534:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   86538:	e13ffe17 	ldw	r4,-8(fp)
   8653c:	00811dc0 	call	811dc <strlen>
   86540:	10800044 	addi	r2,r2,1
   86544:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   86548:	00000d06 	br	86580 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   8654c:	e0bffc17 	ldw	r2,-16(fp)
   86550:	10800217 	ldw	r2,8(r2)
   86554:	e0fffd17 	ldw	r3,-12(fp)
   86558:	180d883a 	mov	r6,r3
   8655c:	e17ffe17 	ldw	r5,-8(fp)
   86560:	1009883a 	mov	r4,r2
   86564:	00868580 	call	86858 <memcmp>
   86568:	1000021e 	bne	r2,zero,86574 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   8656c:	e0bffc17 	ldw	r2,-16(fp)
   86570:	00000706 	br	86590 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   86574:	e0bffc17 	ldw	r2,-16(fp)
   86578:	10800017 	ldw	r2,0(r2)
   8657c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   86580:	e0fffc17 	ldw	r3,-16(fp)
   86584:	e0bfff17 	ldw	r2,-4(fp)
   86588:	18bff01e 	bne	r3,r2,8654c <__alt_data_end+0xfffe654c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   8658c:	0005883a 	mov	r2,zero
}
   86590:	e037883a 	mov	sp,fp
   86594:	dfc00117 	ldw	ra,4(sp)
   86598:	df000017 	ldw	fp,0(sp)
   8659c:	dec00204 	addi	sp,sp,8
   865a0:	f800283a 	ret

000865a4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   865a4:	defffb04 	addi	sp,sp,-20
   865a8:	dfc00415 	stw	ra,16(sp)
   865ac:	df000315 	stw	fp,12(sp)
   865b0:	df000304 	addi	fp,sp,12
   865b4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   865b8:	d0a00417 	ldw	r2,-32752(gp)
   865bc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   865c0:	00003106 	br	86688 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   865c4:	e0bffd17 	ldw	r2,-12(fp)
   865c8:	10800217 	ldw	r2,8(r2)
   865cc:	1009883a 	mov	r4,r2
   865d0:	00811dc0 	call	811dc <strlen>
   865d4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   865d8:	e0bffd17 	ldw	r2,-12(fp)
   865dc:	10c00217 	ldw	r3,8(r2)
   865e0:	e0bffe17 	ldw	r2,-8(fp)
   865e4:	10bfffc4 	addi	r2,r2,-1
   865e8:	1885883a 	add	r2,r3,r2
   865ec:	10800003 	ldbu	r2,0(r2)
   865f0:	10803fcc 	andi	r2,r2,255
   865f4:	1080201c 	xori	r2,r2,128
   865f8:	10bfe004 	addi	r2,r2,-128
   865fc:	10800bd8 	cmpnei	r2,r2,47
   86600:	1000031e 	bne	r2,zero,86610 <alt_find_file+0x6c>
    {
      len -= 1;
   86604:	e0bffe17 	ldw	r2,-8(fp)
   86608:	10bfffc4 	addi	r2,r2,-1
   8660c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   86610:	e0bffe17 	ldw	r2,-8(fp)
   86614:	e0ffff17 	ldw	r3,-4(fp)
   86618:	1885883a 	add	r2,r3,r2
   8661c:	10800003 	ldbu	r2,0(r2)
   86620:	10803fcc 	andi	r2,r2,255
   86624:	1080201c 	xori	r2,r2,128
   86628:	10bfe004 	addi	r2,r2,-128
   8662c:	10800be0 	cmpeqi	r2,r2,47
   86630:	1000081e 	bne	r2,zero,86654 <alt_find_file+0xb0>
   86634:	e0bffe17 	ldw	r2,-8(fp)
   86638:	e0ffff17 	ldw	r3,-4(fp)
   8663c:	1885883a 	add	r2,r3,r2
   86640:	10800003 	ldbu	r2,0(r2)
   86644:	10803fcc 	andi	r2,r2,255
   86648:	1080201c 	xori	r2,r2,128
   8664c:	10bfe004 	addi	r2,r2,-128
   86650:	10000a1e 	bne	r2,zero,8667c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   86654:	e0bffd17 	ldw	r2,-12(fp)
   86658:	10800217 	ldw	r2,8(r2)
   8665c:	e0fffe17 	ldw	r3,-8(fp)
   86660:	180d883a 	mov	r6,r3
   86664:	e17fff17 	ldw	r5,-4(fp)
   86668:	1009883a 	mov	r4,r2
   8666c:	00868580 	call	86858 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   86670:	1000021e 	bne	r2,zero,8667c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   86674:	e0bffd17 	ldw	r2,-12(fp)
   86678:	00000706 	br	86698 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   8667c:	e0bffd17 	ldw	r2,-12(fp)
   86680:	10800017 	ldw	r2,0(r2)
   86684:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   86688:	e0fffd17 	ldw	r3,-12(fp)
   8668c:	d0a00404 	addi	r2,gp,-32752
   86690:	18bfcc1e 	bne	r3,r2,865c4 <__alt_data_end+0xfffe65c4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   86694:	0005883a 	mov	r2,zero
}
   86698:	e037883a 	mov	sp,fp
   8669c:	dfc00117 	ldw	ra,4(sp)
   866a0:	df000017 	ldw	fp,0(sp)
   866a4:	dec00204 	addi	sp,sp,8
   866a8:	f800283a 	ret

000866ac <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   866ac:	defffa04 	addi	sp,sp,-24
   866b0:	dfc00515 	stw	ra,20(sp)
   866b4:	df000415 	stw	fp,16(sp)
   866b8:	dc000315 	stw	r16,12(sp)
   866bc:	df000404 	addi	fp,sp,16
   866c0:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   866c4:	00bffa04 	movi	r2,-24
   866c8:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   866cc:	e03ffc15 	stw	zero,-16(fp)
   866d0:	00001d06 	br	86748 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   866d4:	04000234 	movhi	r16,8
   866d8:	841f4304 	addi	r16,r16,32012
   866dc:	e0bffc17 	ldw	r2,-16(fp)
   866e0:	01400304 	movi	r5,12
   866e4:	1009883a 	mov	r4,r2
   866e8:	00810e00 	call	810e0 <__mulsi3>
   866ec:	8085883a 	add	r2,r16,r2
   866f0:	10800017 	ldw	r2,0(r2)
   866f4:	1000111e 	bne	r2,zero,8673c <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   866f8:	04000234 	movhi	r16,8
   866fc:	841f4304 	addi	r16,r16,32012
   86700:	e0bffc17 	ldw	r2,-16(fp)
   86704:	01400304 	movi	r5,12
   86708:	1009883a 	mov	r4,r2
   8670c:	00810e00 	call	810e0 <__mulsi3>
   86710:	8085883a 	add	r2,r16,r2
   86714:	e0fffe17 	ldw	r3,-8(fp)
   86718:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   8671c:	d0e00817 	ldw	r3,-32736(gp)
   86720:	e0bffc17 	ldw	r2,-16(fp)
   86724:	1880020e 	bge	r3,r2,86730 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   86728:	e0bffc17 	ldw	r2,-16(fp)
   8672c:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
   86730:	e0bffc17 	ldw	r2,-16(fp)
   86734:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   86738:	00000606 	br	86754 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   8673c:	e0bffc17 	ldw	r2,-16(fp)
   86740:	10800044 	addi	r2,r2,1
   86744:	e0bffc15 	stw	r2,-16(fp)
   86748:	e0bffc17 	ldw	r2,-16(fp)
   8674c:	10800810 	cmplti	r2,r2,32
   86750:	103fe01e 	bne	r2,zero,866d4 <__alt_data_end+0xfffe66d4>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   86754:	e0bffd17 	ldw	r2,-12(fp)
}
   86758:	e6ffff04 	addi	sp,fp,-4
   8675c:	dfc00217 	ldw	ra,8(sp)
   86760:	df000117 	ldw	fp,4(sp)
   86764:	dc000017 	ldw	r16,0(sp)
   86768:	dec00304 	addi	sp,sp,12
   8676c:	f800283a 	ret

00086770 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   86770:	defffe04 	addi	sp,sp,-8
   86774:	df000115 	stw	fp,4(sp)
   86778:	df000104 	addi	fp,sp,4
   8677c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   86780:	e0bfff17 	ldw	r2,-4(fp)
   86784:	10bffe84 	addi	r2,r2,-6
   86788:	10c00428 	cmpgeui	r3,r2,16
   8678c:	18001a1e 	bne	r3,zero,867f8 <alt_exception_cause_generated_bad_addr+0x88>
   86790:	100690ba 	slli	r3,r2,2
   86794:	00800234 	movhi	r2,8
   86798:	1099ea04 	addi	r2,r2,26536
   8679c:	1885883a 	add	r2,r3,r2
   867a0:	10800017 	ldw	r2,0(r2)
   867a4:	1000683a 	jmp	r2
   867a8:	000867e8 	cmpgeui	zero,zero,8607
   867ac:	000867e8 	cmpgeui	zero,zero,8607
   867b0:	000867f8 	rdprs	zero,zero,8607
   867b4:	000867f8 	rdprs	zero,zero,8607
   867b8:	000867f8 	rdprs	zero,zero,8607
   867bc:	000867e8 	cmpgeui	zero,zero,8607
   867c0:	000867f0 	cmpltui	zero,zero,8607
   867c4:	000867f8 	rdprs	zero,zero,8607
   867c8:	000867e8 	cmpgeui	zero,zero,8607
   867cc:	000867e8 	cmpgeui	zero,zero,8607
   867d0:	000867f8 	rdprs	zero,zero,8607
   867d4:	000867e8 	cmpgeui	zero,zero,8607
   867d8:	000867f0 	cmpltui	zero,zero,8607
   867dc:	000867f8 	rdprs	zero,zero,8607
   867e0:	000867f8 	rdprs	zero,zero,8607
   867e4:	000867e8 	cmpgeui	zero,zero,8607
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   867e8:	00800044 	movi	r2,1
   867ec:	00000306 	br	867fc <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   867f0:	0005883a 	mov	r2,zero
   867f4:	00000106 	br	867fc <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   867f8:	0005883a 	mov	r2,zero
  }
}
   867fc:	e037883a 	mov	sp,fp
   86800:	df000017 	ldw	fp,0(sp)
   86804:	dec00104 	addi	sp,sp,4
   86808:	f800283a 	ret

0008680c <atexit>:
   8680c:	200b883a 	mov	r5,r4
   86810:	000f883a 	mov	r7,zero
   86814:	000d883a 	mov	r6,zero
   86818:	0009883a 	mov	r4,zero
   8681c:	00868d41 	jmpi	868d4 <__register_exitproc>

00086820 <exit>:
   86820:	defffe04 	addi	sp,sp,-8
   86824:	000b883a 	mov	r5,zero
   86828:	dc000015 	stw	r16,0(sp)
   8682c:	dfc00115 	stw	ra,4(sp)
   86830:	2021883a 	mov	r16,r4
   86834:	00869ec0 	call	869ec <__call_exitprocs>
   86838:	00800274 	movhi	r2,9
   8683c:	10a3bb04 	addi	r2,r2,-28948
   86840:	11000017 	ldw	r4,0(r2)
   86844:	20800f17 	ldw	r2,60(r4)
   86848:	10000126 	beq	r2,zero,86850 <exit+0x30>
   8684c:	103ee83a 	callr	r2
   86850:	8009883a 	mov	r4,r16
   86854:	0086b6c0 	call	86b6c <_exit>

00086858 <memcmp>:
   86858:	01c000c4 	movi	r7,3
   8685c:	3980192e 	bgeu	r7,r6,868c4 <memcmp+0x6c>
   86860:	2144b03a 	or	r2,r4,r5
   86864:	11c4703a 	and	r2,r2,r7
   86868:	10000f26 	beq	r2,zero,868a8 <memcmp+0x50>
   8686c:	20800003 	ldbu	r2,0(r4)
   86870:	28c00003 	ldbu	r3,0(r5)
   86874:	10c0151e 	bne	r2,r3,868cc <memcmp+0x74>
   86878:	31bfff84 	addi	r6,r6,-2
   8687c:	01ffffc4 	movi	r7,-1
   86880:	00000406 	br	86894 <memcmp+0x3c>
   86884:	20800003 	ldbu	r2,0(r4)
   86888:	28c00003 	ldbu	r3,0(r5)
   8688c:	31bfffc4 	addi	r6,r6,-1
   86890:	10c00e1e 	bne	r2,r3,868cc <memcmp+0x74>
   86894:	21000044 	addi	r4,r4,1
   86898:	29400044 	addi	r5,r5,1
   8689c:	31fff91e 	bne	r6,r7,86884 <__alt_data_end+0xfffe6884>
   868a0:	0005883a 	mov	r2,zero
   868a4:	f800283a 	ret
   868a8:	20c00017 	ldw	r3,0(r4)
   868ac:	28800017 	ldw	r2,0(r5)
   868b0:	18bfee1e 	bne	r3,r2,8686c <__alt_data_end+0xfffe686c>
   868b4:	31bfff04 	addi	r6,r6,-4
   868b8:	21000104 	addi	r4,r4,4
   868bc:	29400104 	addi	r5,r5,4
   868c0:	39bff936 	bltu	r7,r6,868a8 <__alt_data_end+0xfffe68a8>
   868c4:	303fe91e 	bne	r6,zero,8686c <__alt_data_end+0xfffe686c>
   868c8:	003ff506 	br	868a0 <__alt_data_end+0xfffe68a0>
   868cc:	10c5c83a 	sub	r2,r2,r3
   868d0:	f800283a 	ret

000868d4 <__register_exitproc>:
   868d4:	defffa04 	addi	sp,sp,-24
   868d8:	dc000315 	stw	r16,12(sp)
   868dc:	04000274 	movhi	r16,9
   868e0:	8423bb04 	addi	r16,r16,-28948
   868e4:	80c00017 	ldw	r3,0(r16)
   868e8:	dc400415 	stw	r17,16(sp)
   868ec:	dfc00515 	stw	ra,20(sp)
   868f0:	18805217 	ldw	r2,328(r3)
   868f4:	2023883a 	mov	r17,r4
   868f8:	10003726 	beq	r2,zero,869d8 <__register_exitproc+0x104>
   868fc:	10c00117 	ldw	r3,4(r2)
   86900:	010007c4 	movi	r4,31
   86904:	20c00e16 	blt	r4,r3,86940 <__register_exitproc+0x6c>
   86908:	1a000044 	addi	r8,r3,1
   8690c:	8800221e 	bne	r17,zero,86998 <__register_exitproc+0xc4>
   86910:	18c00084 	addi	r3,r3,2
   86914:	18c7883a 	add	r3,r3,r3
   86918:	18c7883a 	add	r3,r3,r3
   8691c:	12000115 	stw	r8,4(r2)
   86920:	10c7883a 	add	r3,r2,r3
   86924:	19400015 	stw	r5,0(r3)
   86928:	0005883a 	mov	r2,zero
   8692c:	dfc00517 	ldw	ra,20(sp)
   86930:	dc400417 	ldw	r17,16(sp)
   86934:	dc000317 	ldw	r16,12(sp)
   86938:	dec00604 	addi	sp,sp,24
   8693c:	f800283a 	ret
   86940:	00800034 	movhi	r2,0
   86944:	10800004 	addi	r2,r2,0
   86948:	10002626 	beq	r2,zero,869e4 <__register_exitproc+0x110>
   8694c:	01006404 	movi	r4,400
   86950:	d9400015 	stw	r5,0(sp)
   86954:	d9800115 	stw	r6,4(sp)
   86958:	d9c00215 	stw	r7,8(sp)
   8695c:	00000000 	call	0 <__alt_mem_sdram_controller>
   86960:	d9400017 	ldw	r5,0(sp)
   86964:	d9800117 	ldw	r6,4(sp)
   86968:	d9c00217 	ldw	r7,8(sp)
   8696c:	10001d26 	beq	r2,zero,869e4 <__register_exitproc+0x110>
   86970:	81000017 	ldw	r4,0(r16)
   86974:	10000115 	stw	zero,4(r2)
   86978:	02000044 	movi	r8,1
   8697c:	22405217 	ldw	r9,328(r4)
   86980:	0007883a 	mov	r3,zero
   86984:	12400015 	stw	r9,0(r2)
   86988:	20805215 	stw	r2,328(r4)
   8698c:	10006215 	stw	zero,392(r2)
   86990:	10006315 	stw	zero,396(r2)
   86994:	883fde26 	beq	r17,zero,86910 <__alt_data_end+0xfffe6910>
   86998:	18c9883a 	add	r4,r3,r3
   8699c:	2109883a 	add	r4,r4,r4
   869a0:	1109883a 	add	r4,r2,r4
   869a4:	21802215 	stw	r6,136(r4)
   869a8:	01800044 	movi	r6,1
   869ac:	12406217 	ldw	r9,392(r2)
   869b0:	30cc983a 	sll	r6,r6,r3
   869b4:	4992b03a 	or	r9,r9,r6
   869b8:	12406215 	stw	r9,392(r2)
   869bc:	21c04215 	stw	r7,264(r4)
   869c0:	01000084 	movi	r4,2
   869c4:	893fd21e 	bne	r17,r4,86910 <__alt_data_end+0xfffe6910>
   869c8:	11006317 	ldw	r4,396(r2)
   869cc:	218cb03a 	or	r6,r4,r6
   869d0:	11806315 	stw	r6,396(r2)
   869d4:	003fce06 	br	86910 <__alt_data_end+0xfffe6910>
   869d8:	18805304 	addi	r2,r3,332
   869dc:	18805215 	stw	r2,328(r3)
   869e0:	003fc606 	br	868fc <__alt_data_end+0xfffe68fc>
   869e4:	00bfffc4 	movi	r2,-1
   869e8:	003fd006 	br	8692c <__alt_data_end+0xfffe692c>

000869ec <__call_exitprocs>:
   869ec:	defff504 	addi	sp,sp,-44
   869f0:	df000915 	stw	fp,36(sp)
   869f4:	dd400615 	stw	r21,24(sp)
   869f8:	dc800315 	stw	r18,12(sp)
   869fc:	dfc00a15 	stw	ra,40(sp)
   86a00:	ddc00815 	stw	r23,32(sp)
   86a04:	dd800715 	stw	r22,28(sp)
   86a08:	dd000515 	stw	r20,20(sp)
   86a0c:	dcc00415 	stw	r19,16(sp)
   86a10:	dc400215 	stw	r17,8(sp)
   86a14:	dc000115 	stw	r16,4(sp)
   86a18:	d9000015 	stw	r4,0(sp)
   86a1c:	2839883a 	mov	fp,r5
   86a20:	04800044 	movi	r18,1
   86a24:	057fffc4 	movi	r21,-1
   86a28:	00800274 	movhi	r2,9
   86a2c:	10a3bb04 	addi	r2,r2,-28948
   86a30:	12000017 	ldw	r8,0(r2)
   86a34:	45005217 	ldw	r20,328(r8)
   86a38:	44c05204 	addi	r19,r8,328
   86a3c:	a0001c26 	beq	r20,zero,86ab0 <__call_exitprocs+0xc4>
   86a40:	a0800117 	ldw	r2,4(r20)
   86a44:	15ffffc4 	addi	r23,r2,-1
   86a48:	b8000d16 	blt	r23,zero,86a80 <__call_exitprocs+0x94>
   86a4c:	14000044 	addi	r16,r2,1
   86a50:	8421883a 	add	r16,r16,r16
   86a54:	8421883a 	add	r16,r16,r16
   86a58:	84402004 	addi	r17,r16,128
   86a5c:	a463883a 	add	r17,r20,r17
   86a60:	a421883a 	add	r16,r20,r16
   86a64:	e0001e26 	beq	fp,zero,86ae0 <__call_exitprocs+0xf4>
   86a68:	80804017 	ldw	r2,256(r16)
   86a6c:	e0801c26 	beq	fp,r2,86ae0 <__call_exitprocs+0xf4>
   86a70:	bdffffc4 	addi	r23,r23,-1
   86a74:	843fff04 	addi	r16,r16,-4
   86a78:	8c7fff04 	addi	r17,r17,-4
   86a7c:	bd7ff91e 	bne	r23,r21,86a64 <__alt_data_end+0xfffe6a64>
   86a80:	00800034 	movhi	r2,0
   86a84:	10800004 	addi	r2,r2,0
   86a88:	10000926 	beq	r2,zero,86ab0 <__call_exitprocs+0xc4>
   86a8c:	a0800117 	ldw	r2,4(r20)
   86a90:	1000301e 	bne	r2,zero,86b54 <__call_exitprocs+0x168>
   86a94:	a0800017 	ldw	r2,0(r20)
   86a98:	10003226 	beq	r2,zero,86b64 <__call_exitprocs+0x178>
   86a9c:	a009883a 	mov	r4,r20
   86aa0:	98800015 	stw	r2,0(r19)
   86aa4:	00000000 	call	0 <__alt_mem_sdram_controller>
   86aa8:	9d000017 	ldw	r20,0(r19)
   86aac:	a03fe41e 	bne	r20,zero,86a40 <__alt_data_end+0xfffe6a40>
   86ab0:	dfc00a17 	ldw	ra,40(sp)
   86ab4:	df000917 	ldw	fp,36(sp)
   86ab8:	ddc00817 	ldw	r23,32(sp)
   86abc:	dd800717 	ldw	r22,28(sp)
   86ac0:	dd400617 	ldw	r21,24(sp)
   86ac4:	dd000517 	ldw	r20,20(sp)
   86ac8:	dcc00417 	ldw	r19,16(sp)
   86acc:	dc800317 	ldw	r18,12(sp)
   86ad0:	dc400217 	ldw	r17,8(sp)
   86ad4:	dc000117 	ldw	r16,4(sp)
   86ad8:	dec00b04 	addi	sp,sp,44
   86adc:	f800283a 	ret
   86ae0:	a0800117 	ldw	r2,4(r20)
   86ae4:	80c00017 	ldw	r3,0(r16)
   86ae8:	10bfffc4 	addi	r2,r2,-1
   86aec:	15c01426 	beq	r2,r23,86b40 <__call_exitprocs+0x154>
   86af0:	80000015 	stw	zero,0(r16)
   86af4:	183fde26 	beq	r3,zero,86a70 <__alt_data_end+0xfffe6a70>
   86af8:	95c8983a 	sll	r4,r18,r23
   86afc:	a0806217 	ldw	r2,392(r20)
   86b00:	a5800117 	ldw	r22,4(r20)
   86b04:	2084703a 	and	r2,r4,r2
   86b08:	10000b26 	beq	r2,zero,86b38 <__call_exitprocs+0x14c>
   86b0c:	a0806317 	ldw	r2,396(r20)
   86b10:	2088703a 	and	r4,r4,r2
   86b14:	20000c1e 	bne	r4,zero,86b48 <__call_exitprocs+0x15c>
   86b18:	89400017 	ldw	r5,0(r17)
   86b1c:	d9000017 	ldw	r4,0(sp)
   86b20:	183ee83a 	callr	r3
   86b24:	a0800117 	ldw	r2,4(r20)
   86b28:	15bfbf1e 	bne	r2,r22,86a28 <__alt_data_end+0xfffe6a28>
   86b2c:	98800017 	ldw	r2,0(r19)
   86b30:	153fcf26 	beq	r2,r20,86a70 <__alt_data_end+0xfffe6a70>
   86b34:	003fbc06 	br	86a28 <__alt_data_end+0xfffe6a28>
   86b38:	183ee83a 	callr	r3
   86b3c:	003ff906 	br	86b24 <__alt_data_end+0xfffe6b24>
   86b40:	a5c00115 	stw	r23,4(r20)
   86b44:	003feb06 	br	86af4 <__alt_data_end+0xfffe6af4>
   86b48:	89000017 	ldw	r4,0(r17)
   86b4c:	183ee83a 	callr	r3
   86b50:	003ff406 	br	86b24 <__alt_data_end+0xfffe6b24>
   86b54:	a0800017 	ldw	r2,0(r20)
   86b58:	a027883a 	mov	r19,r20
   86b5c:	1029883a 	mov	r20,r2
   86b60:	003fb606 	br	86a3c <__alt_data_end+0xfffe6a3c>
   86b64:	0005883a 	mov	r2,zero
   86b68:	003ffb06 	br	86b58 <__alt_data_end+0xfffe6b58>

00086b6c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   86b6c:	defffd04 	addi	sp,sp,-12
   86b70:	df000215 	stw	fp,8(sp)
   86b74:	df000204 	addi	fp,sp,8
   86b78:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   86b7c:	0001883a 	nop
   86b80:	e0bfff17 	ldw	r2,-4(fp)
   86b84:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   86b88:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   86b8c:	10000226 	beq	r2,zero,86b98 <_exit+0x2c>
    ALT_SIM_FAIL();
   86b90:	002af070 	cmpltui	zero,zero,43969
   86b94:	00000106 	br	86b9c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   86b98:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   86b9c:	003fff06 	br	86b9c <__alt_data_end+0xfffe6b9c>

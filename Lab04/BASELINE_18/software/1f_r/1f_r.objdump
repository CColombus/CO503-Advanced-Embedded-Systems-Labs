
1f_r.elf:     file format elf32-littlenios2
1f_r.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000a0230

Program Header:
    LOAD off    0x00001000 vaddr 0x000a0000 paddr 0x000a0000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x000a0020 paddr 0x000a0020 align 2**12
         filesz 0x000116e4 memsz 0x000116e4 flags r-x
    LOAD off    0x00012704 vaddr 0x000b1704 paddr 0x000b32d8 align 2**12
         filesz 0x00001bd4 memsz 0x00001bd4 flags rw-
    LOAD off    0x00014eac vaddr 0x000b4eac paddr 0x000b4eac align 2**12
         filesz 0x00000000 memsz 0x00000168 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  000a0000  000a0000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  000a0020  000a0020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001113c  000a0230  000a0230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000398  000b136c  000b136c  0001236c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001bd4  000b1704  000b32d8  00012704  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000168  000b4eac  000b4eac  00014eac  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_controller 00000000  000b5014  000b5014  000142d8  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000142d8  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000010f0  00000000  00000000  00014300  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002ad5c  00000000  00000000  000153f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000aacf  00000000  00000000  0004014c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000d0ba  00000000  00000000  0004ac1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000027e8  00000000  00000000  00057cd8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00004069  00000000  00000000  0005a4c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000187cb  00000000  00000000  0005e529  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00076cf4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001a30  00000000  00000000  00076d08  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0007c16e  2**0
                  CONTENTS, READONLY
 18 .cpu          00000006  00000000  00000000  0007c171  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0007c177  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0007c178  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0007c179  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0007c17d  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0007c181  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000c  00000000  00000000  0007c185  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000c  00000000  00000000  0007c191  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000c  00000000  00000000  0007c19d  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000008  00000000  00000000  0007c1a9  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000001f  00000000  00000000  0007c1b1  2**0
                  CONTENTS, READONLY
 29 .jdi          0001a8cc  00000000  00000000  0007c1d0  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     001b57e3  00000000  00000000  00096a9c  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
000a0000 l    d  .entry	00000000 .entry
000a0020 l    d  .exceptions	00000000 .exceptions
000a0230 l    d  .text	00000000 .text
000b136c l    d  .rodata	00000000 .rodata
000b1704 l    d  .rwdata	00000000 .rwdata
000b4eac l    d  .bss	00000000 .bss
000b5014 l    d  .sdram_controller	00000000 .sdram_controller
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../1f_r_bsp//obj/HAL/src/crt0.o
000a0268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 queue_wrapper.c
00000000 l    df *ABS*	00000000 queue.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000a0a28 l     F .text	00000008 __fp_unlock
000a0a3c l     F .text	0000019c __sinit.part.1
000a0bd8 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 fputc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fseeko.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
000b177c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
000a2860 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcat.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000b1442 l     O .rodata	00000010 zeroes.4404
000a5084 l     F .text	000000bc __sbprintf
000b1452 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 dtoa.c
000a54a0 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
000b1fc8 l     O .rwdata	00000020 lc_ctype_charset
000b1fa8 l     O .rwdata	00000020 lc_message_charset
000b1fe8 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
000b1480 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
000a8fa8 l     F .text	000000fc __sprint_r.part.0
000b15a4 l     O .rodata	00000010 zeroes.4349
000aa5e4 l     F .text	000000bc __sbprintf
000b15b4 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
000ae1ac l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
000ae2c0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
000ae2ec l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
000ae3e0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
000ae4c8 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
000ae5b4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
000ae790 l     F .text	0000003c alt_get_errno
000ae7cc l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
000aea14 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000b3280 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
000aec88 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
000aedc4 l     F .text	00000034 alt_dev_reg
000b21c8 l     O .rwdata	00001060 jtag_uart_1f
000b3228 l     O .rwdata	00000028 altera_hostfs
00000000 l    df *ABS*	00000000 altera_avalon_fifo_util.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
000af5d0 l     F .text	0000020c altera_avalon_jtag_uart_irq
000af7dc l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
000afe14 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_hostfs.c
000b3284 l     O .rwdata	00000009 hcinfo.2538
000b3290 l     O .rwdata	0000000a hcinfo.2551
000b329c l     O .rwdata	00000009 hcinfo.2560
000b32a8 l     O .rwdata	0000000a hcinfo.2573
000b32b4 l     O .rwdata	0000000a hcinfo.2586
000b32c0 l     O .rwdata	0000000a hcinfo.2612
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000b04d8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_fs_reg.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000b0c14 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
000b4ee8 g     O .bss	00000004 alt_instruction_exception_handler
000a871c g     F .text	00000074 _mprec_log10
000a8808 g     F .text	0000008c __any_on
000a72c4 g     F .text	00000054 _isatty_r
000b148c g     O .rodata	00000028 __mprec_tinytens
000ae6cc g     F .text	0000007c alt_main
000a2c64 g     F .text	00000090 strcpy
000a278c g     F .text	000000c0 _puts_r
000b4f14 g     O .bss	00000100 alt_irq
000b1710 g     O .rwdata	0000000c q1c
000a73f4 g     F .text	00000060 _lseek_r
000af130 g     F .text	0000005c altera_avalon_fifo_write_almostfull
000b32d8 g       *ABS*	00000000 __flash_rwdata_start
000a6d50 g     F .text	000000ac __sflags
000acb84 g     F .text	00000088 .hidden __eqdf2
000b5014 g       *ABS*	00000000 __alt_heap_start
000a25e8 g     F .text	0000003c printf
000aa984 g     F .text	0000009c _wcrtomb_r
000a2b7c g     F .text	0000005c __sseek
000a0d88 g     F .text	00000010 __sinit
000a5140 g     F .text	00000140 __swbuf_r
000a7318 g     F .text	0000007c _setlocale_r
000a0be0 g     F .text	00000078 __sfmoreglue
000b1764 g     O .rwdata	0000000c q5
000ae76c g     F .text	00000024 __malloc_unlock
000aff08 g     F .text	0000011c alt_hostfs_open
000a7680 g     F .text	0000015c memmove
000aeea8 g     F .text	00000098 altera_avalon_fifo_init
000a0d70 g     F .text	00000018 _cleanup
000af1e8 g     F .text	00000058 altera_avalon_fifo_write_fifo
000a77dc g     F .text	000000a8 _Balloc
000acc0c g     F .text	000000dc .hidden __gtdf2
000b0f18 g     F .text	00000024 altera_nios2_gen2_irq_init
000a0000 g     F .entry	0000000c __reset
000af384 g     F .text	00000028 altera_avalon_fifo_read_backpressure
000a0020 g       *ABS*	00000000 __flash_exceptions_start
000a1884 g     F .text	0000005c _fstat_r
000b4eb4 g     O .bss	00000004 errno
000a2af8 g     F .text	00000008 __seofread
00000000 g       *ABS*	00000000 __alt_mem_sdram_controller
000b4ed4 g     O .bss	00000004 alt_argv
000bb250 g       *ABS*	00000000 _gp
000af074 g     F .text	00000060 altera_avalon_fifo_clear_event
000b2048 g     O .rwdata	00000180 alt_fd_list
000b0140 g     F .text	00000068 alt_hostfs_seek
000b0678 g     F .text	00000090 alt_find_dev
000a7538 g     F .text	00000148 memcpy
000a0a30 g     F .text	0000000c _cleanup_r
000adfc4 g     F .text	000000dc .hidden __floatsidf
000b0810 g     F .text	00000080 alt_fs_reg
000b0cf8 g     F .text	0000007c alt_io_redirect
000acce8 g     F .text	000000f4 .hidden __ltdf2
000b136c g       *ABS*	00000000 __DTOR_END__
000a284c g     F .text	00000014 puts
000b0f3c g     F .text	0000009c alt_exception_cause_generated_bad_addr
000b1740 g     O .rwdata	0000000c q2
000a8e58 g     F .text	00000074 __fpclassifyd
000a8678 g     F .text	000000a4 __ratio
000aa5c8 g     F .text	0000001c __vfiprintf_internal
000af9d4 g     F .text	0000021c altera_avalon_jtag_uart_read
000a25b8 g     F .text	00000030 _printf_r
000ab824 g     F .text	00000064 .hidden __udivsi3
000ae41c g     F .text	000000ac isatty
000b14dc g     O .rodata	000000c8 __mprec_tens
000a7394 g     F .text	0000000c __locale_charset
000b4ec0 g     O .bss	00000004 __malloc_top_pad
000b3260 g     O .rwdata	00000004 __mb_cur_max
000a73c4 g     F .text	0000000c _localeconv_r
000a7c10 g     F .text	0000003c __i2b
000a6dfc g     F .text	000004c8 __sfvwrite_r
000a2a50 g     F .text	00000054 _sbrk_r
000b0068 g     F .text	0000006c alt_hostfs_read
000a8894 g     F .text	00000060 _read_r
000b3278 g     O .rwdata	00000004 alt_max_fd
000a067c g     F .text	000000f0 _fclose_r
000a09f8 g     F .text	00000030 fflush
000b4ebc g     O .bss	00000004 __malloc_max_sbrked_mem
000ab908 g     F .text	000008ac .hidden __adddf3
000a8420 g     F .text	0000010c __b2d
000ab168 g     F .text	000005c4 .hidden __umoddi3
000ae5f0 g     F .text	000000dc lseek
000b3250 g     O .rwdata	00000004 _global_impure_ptr
000a88f4 g     F .text	00000564 _realloc_r
000b5014 g       *ABS*	00000000 __bss_end
000b0b24 g     F .text	000000f0 alt_iic_isr_register
000b0e10 g     F .text	00000108 alt_tick
000aab6c g     F .text	000005fc .hidden __udivdi3
000aa8e0 g     F .text	00000024 _fputwc_r
000b14b4 g     O .rodata	00000028 __mprec_bigtens
000a79f4 g     F .text	00000104 __s2b
000ae0a0 g     F .text	000000a8 .hidden __floatunsidf
000a8160 g     F .text	00000060 __mcmp
000a0da8 g     F .text	00000018 __fp_lock_all
000b0ad8 g     F .text	0000004c alt_ic_irq_enabled
000b0d74 g     F .text	0000009c alt_alarm_stop
000b4edc g     O .bss	00000004 alt_irq_active
000a1424 g     F .text	00000444 _fseeko_r
000b0024 g     F .text	00000044 alt_hostfs_close
000a00fc g     F .exceptions	000000d4 alt_irq_handler
000b2020 g     O .rwdata	00000028 alt_dev_null
000b04b8 g     F .text	00000020 alt_dcache_flush_all
000a7af8 g     F .text	00000068 __hi0bits
000adf44 g     F .text	00000080 .hidden __fixdfsi
000af0d4 g     F .text	0000005c altera_avalon_fifo_write_ienable
000b32d8 g       *ABS*	00000000 __ram_rwdata_end
000aefe4 g     F .text	0000002c altera_avalon_fifo_read_almostempty
000b3270 g     O .rwdata	00000008 alt_dev_list
000a0f30 g     F .text	00000044 _fputc_r
000aecc4 g     F .text	00000100 write
000a2624 g     F .text	000000a0 _putc_r
000b1704 g       *ABS*	00000000 __ram_rodata_end
000ae328 g     F .text	000000b8 fstat
000a0f0c g     F .text	00000024 fprintf
000acce8 g     F .text	000000f4 .hidden __ledf2
000b4eb0 g     O .bss	00000004 INIT_USAGE_DEQ
000a2be0 g     F .text	00000084 strcat
000a0530 g     F .text	0000003c RECV2
000a7ed8 g     F .text	00000140 __pow5mult
000a90bc g     F .text	0000150c ___vfiprintf_internal_r
000b4ecc g     O .bss	00000004 __nlocale_changed
000ab888 g     F .text	00000058 .hidden __umodsi3
000b5014 g       *ABS*	00000000 end
000a1868 g     F .text	0000001c fseeko
000a1408 g     F .text	0000001c fseek
000af510 g     F .text	000000c0 altera_avalon_jtag_uart_init
000a01d0 g     F .exceptions	00000060 alt_instruction_exception_entry
000af010 g     F .text	0000003c altera_avalon_fifo_read_event
000b136c g       *ABS*	00000000 __CTOR_LIST__
000c0000 g       *ABS*	00000000 __alt_stack_pointer
000afe8c g     F .text	0000007c alt_avalon_timer_sc_init
000ae148 g     F .text	00000064 .hidden __clzsi2
000afbf0 g     F .text	00000224 altera_avalon_jtag_uart_write
000a0d98 g     F .text	00000004 __sfp_lock_acquire
000af2ac g     F .text	0000004c altera_avalon_fifo_read_fifo
000a7454 g     F .text	000000e4 memchr
000a2d8c g     F .text	000022dc ___vfprintf_internal_r
000a10f4 g     F .text	00000310 _free_r
000a73a0 g     F .text	00000010 __locale_mb_cur_max
000b11b8 g     F .text	00000180 __call_exitprocs
000b4ec8 g     O .bss	00000004 __mlocale_changed
000b3258 g     O .rwdata	00000004 __malloc_sbrk_base
000a0230 g     F .text	0000003c _start
000b4ee0 g     O .bss	00000004 _alt_tick_rate
000a8018 g     F .text	00000148 __lshift
000a056c g     F .text	0000008c enqueueINT32
000b4ee4 g     O .bss	00000004 _alt_nticks
000aea50 g     F .text	00000104 read
000aee30 g     F .text	00000078 alt_sys_init
000a2558 g     F .text	00000060 _open_r
000b10a0 g     F .text	00000118 __register_exitproc
000b171c g     O .rwdata	0000000c q1d
000b174c g     O .rwdata	0000000c q3
000a7c4c g     F .text	0000028c __multiply
000af87c g     F .text	00000068 altera_avalon_jtag_uart_close
000ab8e0 g     F .text	00000028 .hidden __mulsi3
000b1704 g       *ABS*	00000000 __ram_rwdata_start
000b136c g       *ABS*	00000000 __ram_rodata_start
000b4eec g     O .bss	00000028 __malloc_current_mallinfo
000a852c g     F .text	0000014c __d2b
000b1734 g     O .rwdata	0000000c q1
000af3ac g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000b0890 g     F .text	000000c4 alt_get_fd
000a544c g     F .text	00000054 _close_r
000b1024 g     F .text	0000007c memcmp
000af46c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
000b5014 g       *ABS*	00000000 __alt_stack_base
000af4bc g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
000a52f8 g     F .text	00000154 __swsetup_r
000aef40 g     F .text	0000003c altera_avalon_fifo_read_status
000ac1b4 g     F .text	000009d0 .hidden __divdf3
000a0c58 g     F .text	00000118 __sfp
000a8790 g     F .text	00000078 __copybits
000b1ba0 g     O .rwdata	00000408 __malloc_av_
000a0da4 g     F .text	00000004 __sinit_lock_release
000acddc g     F .text	0000086c .hidden __muldf3
000a2aa4 g     F .text	00000054 __sread
000af358 g     F .text	0000002c altera_avalon_fifo_read_other_info
000b0708 g     F .text	00000108 alt_find_file
000b0514 g     F .text	000000a4 alt_dev_llist_insert
000ae748 g     F .text	00000024 __malloc_lock
000a0ee4 g     F .text	00000028 _fprintf_r
000aebd8 g     F .text	000000b0 sbrk
000a099c g     F .text	0000005c _fflush_r
000aa6a0 g     F .text	000000dc _calloc_r
000a0ecc g     F .text	00000018 fopen
000b4eac g       *ABS*	00000000 __bss_start
000a2430 g     F .text	00000128 memset
000a026c g     F .text	00000288 main
000b4ed8 g     O .bss	00000004 alt_envp
000b4eb8 g     O .bss	00000004 __malloc_max_total_mem
000af40c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
000af04c g     F .text	00000028 altera_avalon_fifo_read_level
000a5280 g     F .text	00000018 __swbuf
000a2bd8 g     F .text	00000008 __sclose
000c0000 g       *ABS*	00000000 __alt_heap_limit
000a076c g     F .text	00000014 fclose
000a56c8 g     F .text	00001688 _dtoa_r
000a1c24 g     F .text	0000080c _malloc_r
000aaae0 g     F .text	00000030 __ascii_wctomb
000a04f4 g     F .text	0000003c RECV1
000b327c g     O .rwdata	00000004 alt_errno
000b1704 g     O .rwdata	0000000c q1b
000a18e0 g     F .text	000000c4 _fwalk
000a26c4 g     F .text	000000c8 putc
000ab72c g     F .text	00000084 .hidden __divsi3
000a0fd0 g     F .text	00000124 _malloc_trim_r
000b136c g       *ABS*	00000000 __CTOR_END__
000a8ecc g     F .text	000000dc strcmp
000b136c g       *ABS*	00000000 __flash_rodata_start
000b136c g       *ABS*	00000000 __DTOR_LIST__
000acb84 g     F .text	00000088 .hidden __nedf2
000aedf8 g     F .text	00000038 alt_irq_init
000aeb54 g     F .text	00000084 alt_release_fd
000b15c4 g     O .rodata	00000100 .hidden __clz_tab
000b4ec4 g     O .bss	00000004 _PathLocale
000b0fd8 g     F .text	00000014 atexit
000a5298 g     F .text	00000060 _write_r
000b1770 g     O .rwdata	0000000c q6
000a73d0 g     F .text	00000018 setlocale
000b4eac g     O .bss	00000004 INIT_USAGE_ENQ
000b3254 g     O .rwdata	00000004 _impure_ptr
000b4ed0 g     O .bss	00000004 alt_argc
000a0780 g     F .text	0000021c __sflush_r
000b0618 g     F .text	00000060 _do_dtors
000a73bc g     F .text	00000008 __locale_cjk_lang
000a1404 g     F .text	00000004 _fseek_r
000a287c g     F .text	000001d4 __srefill_r
000a0020 g       .exceptions	00000000 alt_irq_entry
000a83bc g     F .text	00000064 __ulp
000a0dc0 g     F .text	00000018 __fp_unlock_all
000a0f74 g     F .text	0000005c fputc
000b1728 g     O .rwdata	0000000c q1e
000b3268 g     O .rwdata	00000008 alt_fs_list
000b00d4 g     F .text	0000006c alt_hostfs_write
000a0020 g       *ABS*	00000000 __ram_exceptions_start
000a73e8 g     F .text	0000000c localeconv
000af2f8 g     F .text	00000060 altera_avalon_fifo_write_other_info
000b0974 g     F .text	00000050 alt_ic_isr_register
000b32d8 g       *ABS*	00000000 _edata
000b5014 g       *ABS*	00000000 _end
000aa77c g     F .text	00000164 __fputwc
000a0230 g       *ABS*	00000000 __ram_exceptions_end
000af8e4 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
000b0a4c g     F .text	0000008c alt_ic_irq_disable
000a2b00 g     F .text	0000007c __swrite
000b325c g     O .rwdata	00000004 __malloc_trim_threshold
000a73b0 g     F .text	0000000c __locale_msgcharset
000b0fec g     F .text	00000038 exit
000a19a4 g     F .text	000000c4 _fwalk_reent
000a81c0 g     F .text	000001fc __mdiff
000ab7b0 g     F .text	00000074 .hidden __modsi3
000aef7c g     F .text	0000003c altera_avalon_fifo_read_ienable
000c0000 g       *ABS*	00000000 __alt_data_end
000a0020 g     F .exceptions	00000000 alt_exception
000a0d9c g     F .text	00000004 __sfp_lock_release
000a0dd8 g     F .text	000000f4 _fopen_r
000b1338 g     F .text	00000034 _exit
000b038c g     F .text	0000012c alt_alarm_start
000aefb8 g     F .text	0000002c altera_avalon_fifo_read_almostfull
000a1a68 g     F .text	000001bc __smakebuf_r
000b1758 g     O .rwdata	0000000c q4
000a2cf4 g     F .text	00000098 strlen
000ae8b8 g     F .text	0000015c open
000af240 g     F .text	0000006c altera_avalon_read_fifo
000acc0c g     F .text	000000dc .hidden __gedf2
000a05f8 g     F .text	00000084 dequeueINT32
000b3264 g     O .rwdata	00000004 __wctomb
000a90a4 g     F .text	00000018 __sprint_r
000b0954 g     F .text	00000020 alt_icache_flush_all
000b32cc g     O .rwdata	00000004 alt_priority_mask
000b09c4 g     F .text	00000088 alt_ic_irq_enable
000a5068 g     F .text	0000001c __vfprintf_internal
000aab10 g     F .text	0000005c _wctomb_r
000ad648 g     F .text	000008fc .hidden __subdf3
000a7b60 g     F .text	000000b0 __lo0bits
000af18c g     F .text	0000005c altera_avalon_fifo_write_almostempty
000b32d0 g     O .rwdata	00000008 alt_alarm_list
000b05b8 g     F .text	00000060 _do_ctors
000aaa20 g     F .text	000000c0 wcrtomb
000ae1e8 g     F .text	000000d8 close
000ae530 g     F .text	00000084 alt_load
000aa904 g     F .text	00000080 fputwc
000a0da0 g     F .text	00000004 __sinit_lock_acquire
000a78ac g     F .text	00000148 __multadd
000a7884 g     F .text	00000028 _Bfree
000b01a8 g     F .text	000001e4 alt_hostfs_fstat



Disassembly of section .entry:

000a0000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   a0000:	004002b4 	movhi	at,10
    ori r1, r1, %lo(_start)
   a0004:	08408c14 	ori	at,at,560
    jmp r1
   a0008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

000a0020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   a0020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   a0024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   a0028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   a002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   a0030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   a0034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   a0038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   a003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   a0040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   a0044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   a0048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   a004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   a0050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   a0054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   a0058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   a005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   a0060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   a0064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   a0068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   a006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   a0070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   a0074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   a0078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   a007c:	10000326 	beq	r2,zero,a008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   a0080:	20000226 	beq	r4,zero,a008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   a0084:	00a00fc0 	call	a00fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   a0088:	00000706 	br	a00a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   a008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   a0090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   a0094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   a0098:	00a01d00 	call	a01d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   a009c:	1000021e 	bne	r2,zero,a00a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   a00a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   a00a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   a00a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   a00ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   a00b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   a00b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   a00b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   a00bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   a00c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   a00c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   a00c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   a00cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   a00d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   a00d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   a00d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   a00dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   a00e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   a00e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   a00e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   a00ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   a00f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   a00f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   a00f8:	ef80083a 	eret

000a00fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   a00fc:	defff904 	addi	sp,sp,-28
   a0100:	dfc00615 	stw	ra,24(sp)
   a0104:	df000515 	stw	fp,20(sp)
   a0108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   a010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   a0110:	0005313a 	rdctl	r2,ipending
   a0114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   a0118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   a011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   a0120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   a0124:	00800044 	movi	r2,1
   a0128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   a012c:	e0fffb17 	ldw	r3,-20(fp)
   a0130:	e0bffc17 	ldw	r2,-16(fp)
   a0134:	1884703a 	and	r2,r3,r2
   a0138:	10001426 	beq	r2,zero,a018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   a013c:	008002f4 	movhi	r2,11
   a0140:	1093c504 	addi	r2,r2,20244
   a0144:	e0fffd17 	ldw	r3,-12(fp)
   a0148:	180690fa 	slli	r3,r3,3
   a014c:	10c5883a 	add	r2,r2,r3
   a0150:	10c00017 	ldw	r3,0(r2)
   a0154:	008002f4 	movhi	r2,11
   a0158:	1093c504 	addi	r2,r2,20244
   a015c:	e13ffd17 	ldw	r4,-12(fp)
   a0160:	200890fa 	slli	r4,r4,3
   a0164:	1105883a 	add	r2,r2,r4
   a0168:	10800104 	addi	r2,r2,4
   a016c:	10800017 	ldw	r2,0(r2)
   a0170:	1009883a 	mov	r4,r2
   a0174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   a0178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   a017c:	0005313a 	rdctl	r2,ipending
   a0180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   a0184:	e0bfff17 	ldw	r2,-4(fp)
   a0188:	00000706 	br	a01a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   a018c:	e0bffc17 	ldw	r2,-16(fp)
   a0190:	1085883a 	add	r2,r2,r2
   a0194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   a0198:	e0bffd17 	ldw	r2,-12(fp)
   a019c:	10800044 	addi	r2,r2,1
   a01a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   a01a4:	003fe106 	br	a012c <__alt_data_end+0xfffe012c>

    active = alt_irq_pending ();
   a01a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   a01ac:	e0bffb17 	ldw	r2,-20(fp)
   a01b0:	103fdb1e 	bne	r2,zero,a0120 <__alt_data_end+0xfffe0120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   a01b4:	0001883a 	nop
}
   a01b8:	0001883a 	nop
   a01bc:	e037883a 	mov	sp,fp
   a01c0:	dfc00117 	ldw	ra,4(sp)
   a01c4:	df000017 	ldw	fp,0(sp)
   a01c8:	dec00204 	addi	sp,sp,8
   a01cc:	f800283a 	ret

000a01d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   a01d0:	defffb04 	addi	sp,sp,-20
   a01d4:	dfc00415 	stw	ra,16(sp)
   a01d8:	df000315 	stw	fp,12(sp)
   a01dc:	df000304 	addi	fp,sp,12
   a01e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   a01e4:	00bfffc4 	movi	r2,-1
   a01e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
   a01ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   a01f0:	d0a72617 	ldw	r2,-25448(gp)
   a01f4:	10000726 	beq	r2,zero,a0214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   a01f8:	d0a72617 	ldw	r2,-25448(gp)
   a01fc:	e0fffd17 	ldw	r3,-12(fp)
   a0200:	e1bffe17 	ldw	r6,-8(fp)
   a0204:	e17fff17 	ldw	r5,-4(fp)
   a0208:	1809883a 	mov	r4,r3
   a020c:	103ee83a 	callr	r2
   a0210:	00000206 	br	a021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   a0214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   a0218:	0005883a 	mov	r2,zero
}
   a021c:	e037883a 	mov	sp,fp
   a0220:	dfc00117 	ldw	ra,4(sp)
   a0224:	df000017 	ldw	fp,0(sp)
   a0228:	dec00204 	addi	sp,sp,8
   a022c:	f800283a 	ret

Disassembly of section .text:

000a0230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   a0230:	06c00334 	movhi	sp,12
    ori sp, sp, %lo(__alt_stack_pointer)
   a0234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   a0238:	068002f4 	movhi	gp,11
    ori gp, gp, %lo(_gp)
   a023c:	d6ac9414 	ori	gp,gp,45648
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   a0240:	008002f4 	movhi	r2,11
    ori r2, r2, %lo(__bss_start)
   a0244:	1093ab14 	ori	r2,r2,20140

    movhi r3, %hi(__bss_end)
   a0248:	00c002f4 	movhi	r3,11
    ori r3, r3, %lo(__bss_end)
   a024c:	18d40514 	ori	r3,r3,20500

    beq r2, r3, 1f
   a0250:	10c00326 	beq	r2,r3,a0260 <_start+0x30>

0:
    stw zero, (r2)
   a0254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   a0258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   a025c:	10fffd36 	bltu	r2,r3,a0254 <__alt_data_end+0xfffe0254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   a0260:	00ae5300 	call	ae530 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   a0264:	00ae6cc0 	call	ae6cc <alt_main>

000a0268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   a0268:	003fff06 	br	a0268 <__alt_data_end+0xfffe0268>

000a026c <main>:

typedef char INT8;
typedef unsigned char UINT8;

int main(void)
{
   a026c:	deffb504 	addi	sp,sp,-300
   a0270:	dfc04a15 	stw	ra,296(sp)
   a0274:	df004915 	stw	fp,292(sp)
   a0278:	dc004815 	stw	r16,288(sp)
   a027c:	df004904 	addi	fp,sp,292
	char file_system[80] = "/mnt/host/files/";
   a0280:	009d1bb4 	movhi	r2,29806
   a0284:	109b4bc4 	addi	r2,r2,27951
   a0288:	e0bfb915 	stw	r2,-284(fp)
   a028c:	009cdbf4 	movhi	r2,29551
   a0290:	109a0bc4 	addi	r2,r2,26671
   a0294:	e0bfba15 	stw	r2,-280(fp)
   a0298:	009a59b4 	movhi	r2,26982
   a029c:	108bdd04 	addi	r2,r2,12148
   a02a0:	e0bfbb15 	stw	r2,-276(fp)
   a02a4:	008bdcf4 	movhi	r2,12147
   a02a8:	10995b04 	addi	r2,r2,25964
   a02ac:	e0bfbc15 	stw	r2,-272(fp)
   a02b0:	e03fbd15 	stw	zero,-268(fp)
   a02b4:	e0bfbe04 	addi	r2,fp,-264
   a02b8:	00c00f04 	movi	r3,60
   a02bc:	180d883a 	mov	r6,r3
   a02c0:	000b883a 	mov	r5,zero
   a02c4:	1009883a 	mov	r4,r2
   a02c8:	00a24300 	call	a2430 <memset>
	UINT8 out;
	INT8 filename[50];

	while (1)
	{
		out = 0;
   a02cc:	e03fb705 	stb	zero,-292(fp)

		filename[out] = (char)RECV1();
   a02d0:	e43fb703 	ldbu	r16,-292(fp)
   a02d4:	00a04f40 	call	a04f4 <RECV1>
   a02d8:	1007883a 	mov	r3,r2
   a02dc:	e0bfcd04 	addi	r2,fp,-204
   a02e0:	1405883a 	add	r2,r2,r16
   a02e4:	10c00005 	stb	r3,0(r2)

		while (filename[out] != '\0' && filename[out] != '\n')
   a02e8:	00000906 	br	a0310 <main+0xa4>
		{
			out++;
   a02ec:	e0bfb703 	ldbu	r2,-292(fp)
   a02f0:	10800044 	addi	r2,r2,1
   a02f4:	e0bfb705 	stb	r2,-292(fp)
			filename[out] = (char)RECV1();
   a02f8:	e43fb703 	ldbu	r16,-292(fp)
   a02fc:	00a04f40 	call	a04f4 <RECV1>
   a0300:	1007883a 	mov	r3,r2
   a0304:	e0bfcd04 	addi	r2,fp,-204
   a0308:	1405883a 	add	r2,r2,r16
   a030c:	10c00005 	stb	r3,0(r2)
	{
		out = 0;

		filename[out] = (char)RECV1();

		while (filename[out] != '\0' && filename[out] != '\n')
   a0310:	e0bfb703 	ldbu	r2,-292(fp)
   a0314:	e0ffcd04 	addi	r3,fp,-204
   a0318:	1885883a 	add	r2,r3,r2
   a031c:	10800003 	ldbu	r2,0(r2)
   a0320:	10803fcc 	andi	r2,r2,255
   a0324:	1080201c 	xori	r2,r2,128
   a0328:	10bfe004 	addi	r2,r2,-128
   a032c:	10000926 	beq	r2,zero,a0354 <main+0xe8>
   a0330:	e0bfb703 	ldbu	r2,-292(fp)
   a0334:	e0ffcd04 	addi	r3,fp,-204
   a0338:	1885883a 	add	r2,r3,r2
   a033c:	10800003 	ldbu	r2,0(r2)
   a0340:	10803fcc 	andi	r2,r2,255
   a0344:	1080201c 	xori	r2,r2,128
   a0348:	10bfe004 	addi	r2,r2,-128
   a034c:	10800298 	cmpnei	r2,r2,10
   a0350:	103fe61e 	bne	r2,zero,a02ec <__alt_data_end+0xfffe02ec>
		{
			out++;
			filename[out] = (char)RECV1();
		}

		printf("\nFilename: %s\n", filename);
   a0354:	e0bfcd04 	addi	r2,fp,-204
   a0358:	100b883a 	mov	r5,r2
   a035c:	010002f4 	movhi	r4,11
   a0360:	2104db04 	addi	r4,r4,4972
   a0364:	00a25e80 	call	a25e8 <printf>

		filename[out++] = '.';
   a0368:	e0bfb703 	ldbu	r2,-292(fp)
   a036c:	10c00044 	addi	r3,r2,1
   a0370:	e0ffb705 	stb	r3,-292(fp)
   a0374:	10803fcc 	andi	r2,r2,255
   a0378:	e0ffcd04 	addi	r3,fp,-204
   a037c:	1885883a 	add	r2,r3,r2
   a0380:	00c00b84 	movi	r3,46
   a0384:	10c00005 	stb	r3,0(r2)
		filename[out++] = 'j';
   a0388:	e0bfb703 	ldbu	r2,-292(fp)
   a038c:	10c00044 	addi	r3,r2,1
   a0390:	e0ffb705 	stb	r3,-292(fp)
   a0394:	10803fcc 	andi	r2,r2,255
   a0398:	e0ffcd04 	addi	r3,fp,-204
   a039c:	1885883a 	add	r2,r3,r2
   a03a0:	00c01a84 	movi	r3,106
   a03a4:	10c00005 	stb	r3,0(r2)
		filename[out++] = 'p';
   a03a8:	e0bfb703 	ldbu	r2,-292(fp)
   a03ac:	10c00044 	addi	r3,r2,1
   a03b0:	e0ffb705 	stb	r3,-292(fp)
   a03b4:	10803fcc 	andi	r2,r2,255
   a03b8:	e0ffcd04 	addi	r3,fp,-204
   a03bc:	1885883a 	add	r2,r3,r2
   a03c0:	00c01c04 	movi	r3,112
   a03c4:	10c00005 	stb	r3,0(r2)
		filename[out++] = 'g';
   a03c8:	e0bfb703 	ldbu	r2,-292(fp)
   a03cc:	10c00044 	addi	r3,r2,1
   a03d0:	e0ffb705 	stb	r3,-292(fp)
   a03d4:	10803fcc 	andi	r2,r2,255
   a03d8:	e0ffcd04 	addi	r3,fp,-204
   a03dc:	1885883a 	add	r2,r3,r2
   a03e0:	00c019c4 	movi	r3,103
   a03e4:	10c00005 	stb	r3,0(r2)
		filename[out] = '\0';
   a03e8:	e0bfb703 	ldbu	r2,-292(fp)
   a03ec:	e0ffcd04 	addi	r3,fp,-204
   a03f0:	1885883a 	add	r2,r3,r2
   a03f4:	10000005 	stb	zero,0(r2)

		fprintf(stdout, "\nOutput file: %s\n", filename);
   a03f8:	d0a00117 	ldw	r2,-32764(gp)
   a03fc:	10800217 	ldw	r2,8(r2)
   a0400:	e0ffcd04 	addi	r3,fp,-204
   a0404:	180d883a 	mov	r6,r3
   a0408:	014002f4 	movhi	r5,11
   a040c:	2944df04 	addi	r5,r5,4988
   a0410:	1009883a 	mov	r4,r2
   a0414:	00a0f0c0 	call	a0f0c <fprintf>

		char input_file_full[150];
		strcpy(input_file_full, file_system);
   a0418:	e0ffb904 	addi	r3,fp,-284
   a041c:	e0bfd984 	addi	r2,fp,-154
   a0420:	180b883a 	mov	r5,r3
   a0424:	1009883a 	mov	r4,r2
   a0428:	00a2c640 	call	a2c64 <strcpy>
		strcat(input_file_full, filename);
   a042c:	e0ffcd04 	addi	r3,fp,-204
   a0430:	e0bfd984 	addi	r2,fp,-154
   a0434:	180b883a 	mov	r5,r3
   a0438:	1009883a 	mov	r4,r2
   a043c:	00a2be00 	call	a2be0 <strcat>

		fptr = fopen(input_file_full, "wb");
   a0440:	e0bfd984 	addi	r2,fp,-154
   a0444:	014002f4 	movhi	r5,11
   a0448:	2944e404 	addi	r5,r5,5008
   a044c:	1009883a 	mov	r4,r2
   a0450:	00a0ecc0 	call	a0ecc <fopen>
   a0454:	e0bfb815 	stw	r2,-288(fp)

		if (fptr == NULL)
   a0458:	e0bfb817 	ldw	r2,-288(fp)
   a045c:	1000041e 	bne	r2,zero,a0470 <main+0x204>
		{
			printf("Save File Open Error!\n");
   a0460:	010002f4 	movhi	r4,11
   a0464:	2104e504 	addi	r4,r4,5012
   a0468:	00a284c0 	call	a284c <puts>
			break;
   a046c:	00001a06 	br	a04d8 <main+0x26c>
		}

		while (1)
		{

			out = (UINT8)RECV2();
   a0470:	00a05300 	call	a0530 <RECV2>
   a0474:	e0bfb705 	stb	r2,-292(fp)

			fputc(out, fptr);
   a0478:	e0bfb703 	ldbu	r2,-292(fp)
   a047c:	e17fb817 	ldw	r5,-288(fp)
   a0480:	1009883a 	mov	r4,r2
   a0484:	00a0f740 	call	a0f74 <fputc>
			if (out == 0xFF)
   a0488:	e0bfb703 	ldbu	r2,-292(fp)
   a048c:	10803fd8 	cmpnei	r2,r2,255
   a0490:	103ff71e 	bne	r2,zero,a0470 <__alt_data_end+0xfffe0470>
			{
				out = (UINT8)RECV2();
   a0494:	00a05300 	call	a0530 <RECV2>
   a0498:	e0bfb705 	stb	r2,-292(fp)
				fputc(out, fptr);
   a049c:	e0bfb703 	ldbu	r2,-292(fp)
   a04a0:	e17fb817 	ldw	r5,-288(fp)
   a04a4:	1009883a 	mov	r4,r2
   a04a8:	00a0f740 	call	a0f74 <fputc>

				if (out == 0xD9)
   a04ac:	e0bfb703 	ldbu	r2,-292(fp)
   a04b0:	10803658 	cmpnei	r2,r2,217
   a04b4:	10000126 	beq	r2,zero,a04bc <main+0x250>
					break;
			}
		}
   a04b8:	003fed06 	br	a0470 <__alt_data_end+0xfffe0470>
			{
				out = (UINT8)RECV2();
				fputc(out, fptr);

				if (out == 0xD9)
					break;
   a04bc:	0001883a 	nop
			}
		}

		fclose(fptr);
   a04c0:	e13fb817 	ldw	r4,-288(fp)
   a04c4:	00a076c0 	call	a076c <fclose>
		printf("\n Done !\n");
   a04c8:	010002f4 	movhi	r4,11
   a04cc:	2104eb04 	addi	r4,r4,5036
   a04d0:	00a284c0 	call	a284c <puts>
		break;
   a04d4:	0001883a 	nop
	}

	return 0;
   a04d8:	0005883a 	mov	r2,zero
}
   a04dc:	e6ffff04 	addi	sp,fp,-4
   a04e0:	dfc00217 	ldw	ra,8(sp)
   a04e4:	df000117 	ldw	fp,4(sp)
   a04e8:	dc000017 	ldw	r16,0(sp)
   a04ec:	dec00304 	addi	sp,sp,12
   a04f0:	f800283a 	ret

000a04f4 <RECV1>:
#include "../lib/queue.h"
#include "../lib/q_mem_obj_def.h"


int RECV1()
{
   a04f4:	defffe04 	addi	sp,sp,-8
   a04f8:	dfc00115 	stw	ra,4(sp)
   a04fc:	df000015 	stw	fp,0(sp)
   a0500:	d839883a 	mov	fp,sp
    // dequeue from queue and convert to int
    // char *c = dequeue(q6r);
    // printf("  RECV1: %c rep as %d\n", c[0],(int)c[0]);
    // return (int)c[0];
    return dequeueINT32(q6);
   a0504:	008002f4 	movhi	r2,11
   a0508:	1085dc04 	addi	r2,r2,6000
   a050c:	11000017 	ldw	r4,0(r2)
   a0510:	11400117 	ldw	r5,4(r2)
   a0514:	11800217 	ldw	r6,8(r2)
   a0518:	00a05f80 	call	a05f8 <dequeueINT32>
}
   a051c:	e037883a 	mov	sp,fp
   a0520:	dfc00117 	ldw	ra,4(sp)
   a0524:	df000017 	ldw	fp,0(sp)
   a0528:	dec00204 	addi	sp,sp,8
   a052c:	f800283a 	ret

000a0530 <RECV2>:

int RECV2()
{
   a0530:	defffe04 	addi	sp,sp,-8
   a0534:	dfc00115 	stw	ra,4(sp)
   a0538:	df000015 	stw	fp,0(sp)
   a053c:	d839883a 	mov	fp,sp
    // dequeue from queue and convert to int
    // return atoi(dequeue(qi1e));
    return dequeueINT32(q1e);
   a0540:	008002f4 	movhi	r2,11
   a0544:	1085ca04 	addi	r2,r2,5928
   a0548:	11000017 	ldw	r4,0(r2)
   a054c:	11400117 	ldw	r5,4(r2)
   a0550:	11800217 	ldw	r6,8(r2)
   a0554:	00a05f80 	call	a05f8 <dequeueINT32>
   a0558:	e037883a 	mov	sp,fp
   a055c:	dfc00117 	ldw	ra,4(sp)
   a0560:	df000017 	ldw	fp,0(sp)
   a0564:	dec00204 	addi	sp,sp,8
   a0568:	f800283a 	ret

000a056c <enqueueINT32>:

int INIT_USAGE_ENQ = 0;
int INIT_USAGE_DEQ = 0;

int enqueueINT32(Queue queue, int data)
{
   a056c:	defffa04 	addi	sp,sp,-24
   a0570:	dfc00515 	stw	ra,20(sp)
   a0574:	df000415 	stw	fp,16(sp)
   a0578:	df000404 	addi	fp,sp,16
   a057c:	e13ffc15 	stw	r4,-16(fp)
   a0580:	e17ffd15 	stw	r5,-12(fp)
   a0584:	e1bffe15 	stw	r6,-8(fp)
   a0588:	e1ffff15 	stw	r7,-4(fp)

    // Wait if the fifo is full
	while (altera_avalon_fifo_read_status(queue.ctrl_base,1<<0) != 0)
   a058c:	0001883a 	nop
   a0590:	e0bffe17 	ldw	r2,-8(fp)
   a0594:	01400044 	movi	r5,1
   a0598:	1009883a 	mov	r4,r2
   a059c:	00aef400 	call	aef40 <altera_avalon_fifo_read_status>
   a05a0:	103ffb1e 	bne	r2,zero,a0590 <__alt_data_end+0xfffe0590>
	{}

    if (INIT_USAGE_ENQ == 0){
   a05a4:	d0a71717 	ldw	r2,-25508(gp)
   a05a8:	1000051e 	bne	r2,zero,a05c0 <enqueueINT32+0x54>
        INIT_USAGE_ENQ = 1;
   a05ac:	00800044 	movi	r2,1
   a05b0:	d0a71715 	stw	r2,-25508(gp)
        printf("First time using enqueueINT32\n");
   a05b4:	010002f4 	movhi	r4,11
   a05b8:	2104ee04 	addi	r4,r4,5048
   a05bc:	00a284c0 	call	a284c <puts>
    }

	// Write the data to FIFO
	return altera_avalon_fifo_write_fifo(queue.mem_base_in,queue.ctrl_base,(int)data);
   a05c0:	e0bffc17 	ldw	r2,-16(fp)
   a05c4:	1007883a 	mov	r3,r2
   a05c8:	e0bffe17 	ldw	r2,-8(fp)
   a05cc:	1009883a 	mov	r4,r2
   a05d0:	e0bfff17 	ldw	r2,-4(fp)
   a05d4:	100d883a 	mov	r6,r2
   a05d8:	200b883a 	mov	r5,r4
   a05dc:	1809883a 	mov	r4,r3
   a05e0:	00af1e80 	call	af1e8 <altera_avalon_fifo_write_fifo>
}
   a05e4:	e037883a 	mov	sp,fp
   a05e8:	dfc00117 	ldw	ra,4(sp)
   a05ec:	df000017 	ldw	fp,0(sp)
   a05f0:	dec00204 	addi	sp,sp,8
   a05f4:	f800283a 	ret

000a05f8 <dequeueINT32>:


int dequeueINT32(Queue queue)
{
   a05f8:	defffa04 	addi	sp,sp,-24
   a05fc:	dfc00515 	stw	ra,20(sp)
   a0600:	df000415 	stw	fp,16(sp)
   a0604:	df000404 	addi	fp,sp,16
   a0608:	e13ffd15 	stw	r4,-12(fp)
   a060c:	e17ffe15 	stw	r5,-8(fp)
   a0610:	e1bfff15 	stw	r6,-4(fp)

	// Wait if the fifo is empty
	while (altera_avalon_fifo_read_status(queue.ctrl_base,1<<1) != 0)
   a0614:	0001883a 	nop
   a0618:	e0bfff17 	ldw	r2,-4(fp)
   a061c:	01400084 	movi	r5,2
   a0620:	1009883a 	mov	r4,r2
   a0624:	00aef400 	call	aef40 <altera_avalon_fifo_read_status>
   a0628:	103ffb1e 	bne	r2,zero,a0618 <__alt_data_end+0xfffe0618>
	{}

    if (INIT_USAGE_DEQ == 0){
   a062c:	d0a71817 	ldw	r2,-25504(gp)
   a0630:	1000051e 	bne	r2,zero,a0648 <dequeueINT32+0x50>
        INIT_USAGE_DEQ = 1;
   a0634:	00800044 	movi	r2,1
   a0638:	d0a71815 	stw	r2,-25504(gp)
        printf("First time using dequeueINT32\n");
   a063c:	010002f4 	movhi	r4,11
   a0640:	2104f604 	addi	r4,r4,5080
   a0644:	00a284c0 	call	a284c <puts>
    }

	// Read the data
	int data = altera_avalon_fifo_read_fifo(queue.mem_base_out,queue.ctrl_base);
   a0648:	e0bffe17 	ldw	r2,-8(fp)
   a064c:	1007883a 	mov	r3,r2
   a0650:	e0bfff17 	ldw	r2,-4(fp)
   a0654:	100b883a 	mov	r5,r2
   a0658:	1809883a 	mov	r4,r3
   a065c:	00af2ac0 	call	af2ac <altera_avalon_fifo_read_fifo>
   a0660:	e0bffc15 	stw	r2,-16(fp)

	return data;
   a0664:	e0bffc17 	ldw	r2,-16(fp)
}
   a0668:	e037883a 	mov	sp,fp
   a066c:	dfc00117 	ldw	ra,4(sp)
   a0670:	df000017 	ldw	fp,0(sp)
   a0674:	dec00204 	addi	sp,sp,8
   a0678:	f800283a 	ret

000a067c <_fclose_r>:
   a067c:	28003926 	beq	r5,zero,a0764 <_fclose_r+0xe8>
   a0680:	defffc04 	addi	sp,sp,-16
   a0684:	dc400115 	stw	r17,4(sp)
   a0688:	dc000015 	stw	r16,0(sp)
   a068c:	dfc00315 	stw	ra,12(sp)
   a0690:	dc800215 	stw	r18,8(sp)
   a0694:	2023883a 	mov	r17,r4
   a0698:	2821883a 	mov	r16,r5
   a069c:	20000226 	beq	r4,zero,a06a8 <_fclose_r+0x2c>
   a06a0:	20800e17 	ldw	r2,56(r4)
   a06a4:	10002726 	beq	r2,zero,a0744 <_fclose_r+0xc8>
   a06a8:	8080030f 	ldh	r2,12(r16)
   a06ac:	1000071e 	bne	r2,zero,a06cc <_fclose_r+0x50>
   a06b0:	0005883a 	mov	r2,zero
   a06b4:	dfc00317 	ldw	ra,12(sp)
   a06b8:	dc800217 	ldw	r18,8(sp)
   a06bc:	dc400117 	ldw	r17,4(sp)
   a06c0:	dc000017 	ldw	r16,0(sp)
   a06c4:	dec00404 	addi	sp,sp,16
   a06c8:	f800283a 	ret
   a06cc:	800b883a 	mov	r5,r16
   a06d0:	8809883a 	mov	r4,r17
   a06d4:	00a07800 	call	a0780 <__sflush_r>
   a06d8:	1025883a 	mov	r18,r2
   a06dc:	80800b17 	ldw	r2,44(r16)
   a06e0:	10000426 	beq	r2,zero,a06f4 <_fclose_r+0x78>
   a06e4:	81400717 	ldw	r5,28(r16)
   a06e8:	8809883a 	mov	r4,r17
   a06ec:	103ee83a 	callr	r2
   a06f0:	10001616 	blt	r2,zero,a074c <_fclose_r+0xd0>
   a06f4:	8080030b 	ldhu	r2,12(r16)
   a06f8:	1080200c 	andi	r2,r2,128
   a06fc:	1000151e 	bne	r2,zero,a0754 <_fclose_r+0xd8>
   a0700:	81400c17 	ldw	r5,48(r16)
   a0704:	28000526 	beq	r5,zero,a071c <_fclose_r+0xa0>
   a0708:	80801004 	addi	r2,r16,64
   a070c:	28800226 	beq	r5,r2,a0718 <_fclose_r+0x9c>
   a0710:	8809883a 	mov	r4,r17
   a0714:	00a10f40 	call	a10f4 <_free_r>
   a0718:	80000c15 	stw	zero,48(r16)
   a071c:	81401117 	ldw	r5,68(r16)
   a0720:	28000326 	beq	r5,zero,a0730 <_fclose_r+0xb4>
   a0724:	8809883a 	mov	r4,r17
   a0728:	00a10f40 	call	a10f4 <_free_r>
   a072c:	80001115 	stw	zero,68(r16)
   a0730:	00a0d980 	call	a0d98 <__sfp_lock_acquire>
   a0734:	8000030d 	sth	zero,12(r16)
   a0738:	00a0d9c0 	call	a0d9c <__sfp_lock_release>
   a073c:	9005883a 	mov	r2,r18
   a0740:	003fdc06 	br	a06b4 <__alt_data_end+0xfffe06b4>
   a0744:	00a0d880 	call	a0d88 <__sinit>
   a0748:	003fd706 	br	a06a8 <__alt_data_end+0xfffe06a8>
   a074c:	04bfffc4 	movi	r18,-1
   a0750:	003fe806 	br	a06f4 <__alt_data_end+0xfffe06f4>
   a0754:	81400417 	ldw	r5,16(r16)
   a0758:	8809883a 	mov	r4,r17
   a075c:	00a10f40 	call	a10f4 <_free_r>
   a0760:	003fe706 	br	a0700 <__alt_data_end+0xfffe0700>
   a0764:	0005883a 	mov	r2,zero
   a0768:	f800283a 	ret

000a076c <fclose>:
   a076c:	008002f4 	movhi	r2,11
   a0770:	108c9504 	addi	r2,r2,12884
   a0774:	200b883a 	mov	r5,r4
   a0778:	11000017 	ldw	r4,0(r2)
   a077c:	00a067c1 	jmpi	a067c <_fclose_r>

000a0780 <__sflush_r>:
   a0780:	2880030b 	ldhu	r2,12(r5)
   a0784:	defffb04 	addi	sp,sp,-20
   a0788:	dcc00315 	stw	r19,12(sp)
   a078c:	dc400115 	stw	r17,4(sp)
   a0790:	dfc00415 	stw	ra,16(sp)
   a0794:	dc800215 	stw	r18,8(sp)
   a0798:	dc000015 	stw	r16,0(sp)
   a079c:	10c0020c 	andi	r3,r2,8
   a07a0:	2823883a 	mov	r17,r5
   a07a4:	2027883a 	mov	r19,r4
   a07a8:	1800311e 	bne	r3,zero,a0870 <__sflush_r+0xf0>
   a07ac:	28c00117 	ldw	r3,4(r5)
   a07b0:	10820014 	ori	r2,r2,2048
   a07b4:	2880030d 	sth	r2,12(r5)
   a07b8:	00c04b0e 	bge	zero,r3,a08e8 <__sflush_r+0x168>
   a07bc:	8a000a17 	ldw	r8,40(r17)
   a07c0:	40002326 	beq	r8,zero,a0850 <__sflush_r+0xd0>
   a07c4:	9c000017 	ldw	r16,0(r19)
   a07c8:	10c4000c 	andi	r3,r2,4096
   a07cc:	98000015 	stw	zero,0(r19)
   a07d0:	18004826 	beq	r3,zero,a08f4 <__sflush_r+0x174>
   a07d4:	89801417 	ldw	r6,80(r17)
   a07d8:	10c0010c 	andi	r3,r2,4
   a07dc:	18000626 	beq	r3,zero,a07f8 <__sflush_r+0x78>
   a07e0:	88c00117 	ldw	r3,4(r17)
   a07e4:	88800c17 	ldw	r2,48(r17)
   a07e8:	30cdc83a 	sub	r6,r6,r3
   a07ec:	10000226 	beq	r2,zero,a07f8 <__sflush_r+0x78>
   a07f0:	88800f17 	ldw	r2,60(r17)
   a07f4:	308dc83a 	sub	r6,r6,r2
   a07f8:	89400717 	ldw	r5,28(r17)
   a07fc:	000f883a 	mov	r7,zero
   a0800:	9809883a 	mov	r4,r19
   a0804:	403ee83a 	callr	r8
   a0808:	00ffffc4 	movi	r3,-1
   a080c:	10c04426 	beq	r2,r3,a0920 <__sflush_r+0x1a0>
   a0810:	88c0030b 	ldhu	r3,12(r17)
   a0814:	89000417 	ldw	r4,16(r17)
   a0818:	88000115 	stw	zero,4(r17)
   a081c:	197dffcc 	andi	r5,r3,63487
   a0820:	8940030d 	sth	r5,12(r17)
   a0824:	89000015 	stw	r4,0(r17)
   a0828:	18c4000c 	andi	r3,r3,4096
   a082c:	18002c1e 	bne	r3,zero,a08e0 <__sflush_r+0x160>
   a0830:	89400c17 	ldw	r5,48(r17)
   a0834:	9c000015 	stw	r16,0(r19)
   a0838:	28000526 	beq	r5,zero,a0850 <__sflush_r+0xd0>
   a083c:	88801004 	addi	r2,r17,64
   a0840:	28800226 	beq	r5,r2,a084c <__sflush_r+0xcc>
   a0844:	9809883a 	mov	r4,r19
   a0848:	00a10f40 	call	a10f4 <_free_r>
   a084c:	88000c15 	stw	zero,48(r17)
   a0850:	0005883a 	mov	r2,zero
   a0854:	dfc00417 	ldw	ra,16(sp)
   a0858:	dcc00317 	ldw	r19,12(sp)
   a085c:	dc800217 	ldw	r18,8(sp)
   a0860:	dc400117 	ldw	r17,4(sp)
   a0864:	dc000017 	ldw	r16,0(sp)
   a0868:	dec00504 	addi	sp,sp,20
   a086c:	f800283a 	ret
   a0870:	2c800417 	ldw	r18,16(r5)
   a0874:	903ff626 	beq	r18,zero,a0850 <__alt_data_end+0xfffe0850>
   a0878:	2c000017 	ldw	r16,0(r5)
   a087c:	108000cc 	andi	r2,r2,3
   a0880:	2c800015 	stw	r18,0(r5)
   a0884:	84a1c83a 	sub	r16,r16,r18
   a0888:	1000131e 	bne	r2,zero,a08d8 <__sflush_r+0x158>
   a088c:	28800517 	ldw	r2,20(r5)
   a0890:	88800215 	stw	r2,8(r17)
   a0894:	04000316 	blt	zero,r16,a08a4 <__sflush_r+0x124>
   a0898:	003fed06 	br	a0850 <__alt_data_end+0xfffe0850>
   a089c:	90a5883a 	add	r18,r18,r2
   a08a0:	043feb0e 	bge	zero,r16,a0850 <__alt_data_end+0xfffe0850>
   a08a4:	88800917 	ldw	r2,36(r17)
   a08a8:	89400717 	ldw	r5,28(r17)
   a08ac:	800f883a 	mov	r7,r16
   a08b0:	900d883a 	mov	r6,r18
   a08b4:	9809883a 	mov	r4,r19
   a08b8:	103ee83a 	callr	r2
   a08bc:	80a1c83a 	sub	r16,r16,r2
   a08c0:	00bff616 	blt	zero,r2,a089c <__alt_data_end+0xfffe089c>
   a08c4:	88c0030b 	ldhu	r3,12(r17)
   a08c8:	00bfffc4 	movi	r2,-1
   a08cc:	18c01014 	ori	r3,r3,64
   a08d0:	88c0030d 	sth	r3,12(r17)
   a08d4:	003fdf06 	br	a0854 <__alt_data_end+0xfffe0854>
   a08d8:	0005883a 	mov	r2,zero
   a08dc:	003fec06 	br	a0890 <__alt_data_end+0xfffe0890>
   a08e0:	88801415 	stw	r2,80(r17)
   a08e4:	003fd206 	br	a0830 <__alt_data_end+0xfffe0830>
   a08e8:	28c00f17 	ldw	r3,60(r5)
   a08ec:	00ffb316 	blt	zero,r3,a07bc <__alt_data_end+0xfffe07bc>
   a08f0:	003fd706 	br	a0850 <__alt_data_end+0xfffe0850>
   a08f4:	89400717 	ldw	r5,28(r17)
   a08f8:	000d883a 	mov	r6,zero
   a08fc:	01c00044 	movi	r7,1
   a0900:	9809883a 	mov	r4,r19
   a0904:	403ee83a 	callr	r8
   a0908:	100d883a 	mov	r6,r2
   a090c:	00bfffc4 	movi	r2,-1
   a0910:	30801426 	beq	r6,r2,a0964 <__sflush_r+0x1e4>
   a0914:	8880030b 	ldhu	r2,12(r17)
   a0918:	8a000a17 	ldw	r8,40(r17)
   a091c:	003fae06 	br	a07d8 <__alt_data_end+0xfffe07d8>
   a0920:	98c00017 	ldw	r3,0(r19)
   a0924:	183fba26 	beq	r3,zero,a0810 <__alt_data_end+0xfffe0810>
   a0928:	01000744 	movi	r4,29
   a092c:	19000626 	beq	r3,r4,a0948 <__sflush_r+0x1c8>
   a0930:	01000584 	movi	r4,22
   a0934:	19000426 	beq	r3,r4,a0948 <__sflush_r+0x1c8>
   a0938:	88c0030b 	ldhu	r3,12(r17)
   a093c:	18c01014 	ori	r3,r3,64
   a0940:	88c0030d 	sth	r3,12(r17)
   a0944:	003fc306 	br	a0854 <__alt_data_end+0xfffe0854>
   a0948:	8880030b 	ldhu	r2,12(r17)
   a094c:	88c00417 	ldw	r3,16(r17)
   a0950:	88000115 	stw	zero,4(r17)
   a0954:	10bdffcc 	andi	r2,r2,63487
   a0958:	8880030d 	sth	r2,12(r17)
   a095c:	88c00015 	stw	r3,0(r17)
   a0960:	003fb306 	br	a0830 <__alt_data_end+0xfffe0830>
   a0964:	98800017 	ldw	r2,0(r19)
   a0968:	103fea26 	beq	r2,zero,a0914 <__alt_data_end+0xfffe0914>
   a096c:	00c00744 	movi	r3,29
   a0970:	10c00226 	beq	r2,r3,a097c <__sflush_r+0x1fc>
   a0974:	00c00584 	movi	r3,22
   a0978:	10c0031e 	bne	r2,r3,a0988 <__sflush_r+0x208>
   a097c:	9c000015 	stw	r16,0(r19)
   a0980:	0005883a 	mov	r2,zero
   a0984:	003fb306 	br	a0854 <__alt_data_end+0xfffe0854>
   a0988:	88c0030b 	ldhu	r3,12(r17)
   a098c:	3005883a 	mov	r2,r6
   a0990:	18c01014 	ori	r3,r3,64
   a0994:	88c0030d 	sth	r3,12(r17)
   a0998:	003fae06 	br	a0854 <__alt_data_end+0xfffe0854>

000a099c <_fflush_r>:
   a099c:	defffd04 	addi	sp,sp,-12
   a09a0:	dc000115 	stw	r16,4(sp)
   a09a4:	dfc00215 	stw	ra,8(sp)
   a09a8:	2021883a 	mov	r16,r4
   a09ac:	20000226 	beq	r4,zero,a09b8 <_fflush_r+0x1c>
   a09b0:	20800e17 	ldw	r2,56(r4)
   a09b4:	10000c26 	beq	r2,zero,a09e8 <_fflush_r+0x4c>
   a09b8:	2880030f 	ldh	r2,12(r5)
   a09bc:	1000051e 	bne	r2,zero,a09d4 <_fflush_r+0x38>
   a09c0:	0005883a 	mov	r2,zero
   a09c4:	dfc00217 	ldw	ra,8(sp)
   a09c8:	dc000117 	ldw	r16,4(sp)
   a09cc:	dec00304 	addi	sp,sp,12
   a09d0:	f800283a 	ret
   a09d4:	8009883a 	mov	r4,r16
   a09d8:	dfc00217 	ldw	ra,8(sp)
   a09dc:	dc000117 	ldw	r16,4(sp)
   a09e0:	dec00304 	addi	sp,sp,12
   a09e4:	00a07801 	jmpi	a0780 <__sflush_r>
   a09e8:	d9400015 	stw	r5,0(sp)
   a09ec:	00a0d880 	call	a0d88 <__sinit>
   a09f0:	d9400017 	ldw	r5,0(sp)
   a09f4:	003ff006 	br	a09b8 <__alt_data_end+0xfffe09b8>

000a09f8 <fflush>:
   a09f8:	20000526 	beq	r4,zero,a0a10 <fflush+0x18>
   a09fc:	008002f4 	movhi	r2,11
   a0a00:	108c9504 	addi	r2,r2,12884
   a0a04:	200b883a 	mov	r5,r4
   a0a08:	11000017 	ldw	r4,0(r2)
   a0a0c:	00a099c1 	jmpi	a099c <_fflush_r>
   a0a10:	008002f4 	movhi	r2,11
   a0a14:	108c9404 	addi	r2,r2,12880
   a0a18:	11000017 	ldw	r4,0(r2)
   a0a1c:	014002b4 	movhi	r5,10
   a0a20:	29426704 	addi	r5,r5,2460
   a0a24:	00a19a41 	jmpi	a19a4 <_fwalk_reent>

000a0a28 <__fp_unlock>:
   a0a28:	0005883a 	mov	r2,zero
   a0a2c:	f800283a 	ret

000a0a30 <_cleanup_r>:
   a0a30:	014002b4 	movhi	r5,10
   a0a34:	29419f04 	addi	r5,r5,1660
   a0a38:	00a19a41 	jmpi	a19a4 <_fwalk_reent>

000a0a3c <__sinit.part.1>:
   a0a3c:	defff704 	addi	sp,sp,-36
   a0a40:	00c002b4 	movhi	r3,10
   a0a44:	dfc00815 	stw	ra,32(sp)
   a0a48:	ddc00715 	stw	r23,28(sp)
   a0a4c:	dd800615 	stw	r22,24(sp)
   a0a50:	dd400515 	stw	r21,20(sp)
   a0a54:	dd000415 	stw	r20,16(sp)
   a0a58:	dcc00315 	stw	r19,12(sp)
   a0a5c:	dc800215 	stw	r18,8(sp)
   a0a60:	dc400115 	stw	r17,4(sp)
   a0a64:	dc000015 	stw	r16,0(sp)
   a0a68:	18c28c04 	addi	r3,r3,2608
   a0a6c:	24000117 	ldw	r16,4(r4)
   a0a70:	20c00f15 	stw	r3,60(r4)
   a0a74:	2080bb04 	addi	r2,r4,748
   a0a78:	00c000c4 	movi	r3,3
   a0a7c:	20c0b915 	stw	r3,740(r4)
   a0a80:	2080ba15 	stw	r2,744(r4)
   a0a84:	2000b815 	stw	zero,736(r4)
   a0a88:	05c00204 	movi	r23,8
   a0a8c:	00800104 	movi	r2,4
   a0a90:	2025883a 	mov	r18,r4
   a0a94:	b80d883a 	mov	r6,r23
   a0a98:	81001704 	addi	r4,r16,92
   a0a9c:	000b883a 	mov	r5,zero
   a0aa0:	80000015 	stw	zero,0(r16)
   a0aa4:	80000115 	stw	zero,4(r16)
   a0aa8:	80000215 	stw	zero,8(r16)
   a0aac:	8080030d 	sth	r2,12(r16)
   a0ab0:	80001915 	stw	zero,100(r16)
   a0ab4:	8000038d 	sth	zero,14(r16)
   a0ab8:	80000415 	stw	zero,16(r16)
   a0abc:	80000515 	stw	zero,20(r16)
   a0ac0:	80000615 	stw	zero,24(r16)
   a0ac4:	00a24300 	call	a2430 <memset>
   a0ac8:	058002b4 	movhi	r22,10
   a0acc:	94400217 	ldw	r17,8(r18)
   a0ad0:	054002b4 	movhi	r21,10
   a0ad4:	050002b4 	movhi	r20,10
   a0ad8:	04c002b4 	movhi	r19,10
   a0adc:	b58aa904 	addi	r22,r22,10916
   a0ae0:	ad4ac004 	addi	r21,r21,11008
   a0ae4:	a50adf04 	addi	r20,r20,11132
   a0ae8:	9ccaf604 	addi	r19,r19,11224
   a0aec:	85800815 	stw	r22,32(r16)
   a0af0:	85400915 	stw	r21,36(r16)
   a0af4:	85000a15 	stw	r20,40(r16)
   a0af8:	84c00b15 	stw	r19,44(r16)
   a0afc:	84000715 	stw	r16,28(r16)
   a0b00:	00800284 	movi	r2,10
   a0b04:	8880030d 	sth	r2,12(r17)
   a0b08:	00800044 	movi	r2,1
   a0b0c:	b80d883a 	mov	r6,r23
   a0b10:	89001704 	addi	r4,r17,92
   a0b14:	000b883a 	mov	r5,zero
   a0b18:	88000015 	stw	zero,0(r17)
   a0b1c:	88000115 	stw	zero,4(r17)
   a0b20:	88000215 	stw	zero,8(r17)
   a0b24:	88001915 	stw	zero,100(r17)
   a0b28:	8880038d 	sth	r2,14(r17)
   a0b2c:	88000415 	stw	zero,16(r17)
   a0b30:	88000515 	stw	zero,20(r17)
   a0b34:	88000615 	stw	zero,24(r17)
   a0b38:	00a24300 	call	a2430 <memset>
   a0b3c:	94000317 	ldw	r16,12(r18)
   a0b40:	00800484 	movi	r2,18
   a0b44:	8c400715 	stw	r17,28(r17)
   a0b48:	8d800815 	stw	r22,32(r17)
   a0b4c:	8d400915 	stw	r21,36(r17)
   a0b50:	8d000a15 	stw	r20,40(r17)
   a0b54:	8cc00b15 	stw	r19,44(r17)
   a0b58:	8080030d 	sth	r2,12(r16)
   a0b5c:	00800084 	movi	r2,2
   a0b60:	80000015 	stw	zero,0(r16)
   a0b64:	80000115 	stw	zero,4(r16)
   a0b68:	80000215 	stw	zero,8(r16)
   a0b6c:	80001915 	stw	zero,100(r16)
   a0b70:	8080038d 	sth	r2,14(r16)
   a0b74:	80000415 	stw	zero,16(r16)
   a0b78:	80000515 	stw	zero,20(r16)
   a0b7c:	80000615 	stw	zero,24(r16)
   a0b80:	b80d883a 	mov	r6,r23
   a0b84:	000b883a 	mov	r5,zero
   a0b88:	81001704 	addi	r4,r16,92
   a0b8c:	00a24300 	call	a2430 <memset>
   a0b90:	00800044 	movi	r2,1
   a0b94:	84000715 	stw	r16,28(r16)
   a0b98:	85800815 	stw	r22,32(r16)
   a0b9c:	85400915 	stw	r21,36(r16)
   a0ba0:	85000a15 	stw	r20,40(r16)
   a0ba4:	84c00b15 	stw	r19,44(r16)
   a0ba8:	90800e15 	stw	r2,56(r18)
   a0bac:	dfc00817 	ldw	ra,32(sp)
   a0bb0:	ddc00717 	ldw	r23,28(sp)
   a0bb4:	dd800617 	ldw	r22,24(sp)
   a0bb8:	dd400517 	ldw	r21,20(sp)
   a0bbc:	dd000417 	ldw	r20,16(sp)
   a0bc0:	dcc00317 	ldw	r19,12(sp)
   a0bc4:	dc800217 	ldw	r18,8(sp)
   a0bc8:	dc400117 	ldw	r17,4(sp)
   a0bcc:	dc000017 	ldw	r16,0(sp)
   a0bd0:	dec00904 	addi	sp,sp,36
   a0bd4:	f800283a 	ret

000a0bd8 <__fp_lock>:
   a0bd8:	0005883a 	mov	r2,zero
   a0bdc:	f800283a 	ret

000a0be0 <__sfmoreglue>:
   a0be0:	defffc04 	addi	sp,sp,-16
   a0be4:	dc800215 	stw	r18,8(sp)
   a0be8:	2825883a 	mov	r18,r5
   a0bec:	dc000015 	stw	r16,0(sp)
   a0bf0:	01401a04 	movi	r5,104
   a0bf4:	2021883a 	mov	r16,r4
   a0bf8:	913fffc4 	addi	r4,r18,-1
   a0bfc:	dfc00315 	stw	ra,12(sp)
   a0c00:	dc400115 	stw	r17,4(sp)
   a0c04:	00ab8e00 	call	ab8e0 <__mulsi3>
   a0c08:	8009883a 	mov	r4,r16
   a0c0c:	11401d04 	addi	r5,r2,116
   a0c10:	1023883a 	mov	r17,r2
   a0c14:	00a1c240 	call	a1c24 <_malloc_r>
   a0c18:	1021883a 	mov	r16,r2
   a0c1c:	10000726 	beq	r2,zero,a0c3c <__sfmoreglue+0x5c>
   a0c20:	11000304 	addi	r4,r2,12
   a0c24:	10000015 	stw	zero,0(r2)
   a0c28:	14800115 	stw	r18,4(r2)
   a0c2c:	11000215 	stw	r4,8(r2)
   a0c30:	89801a04 	addi	r6,r17,104
   a0c34:	000b883a 	mov	r5,zero
   a0c38:	00a24300 	call	a2430 <memset>
   a0c3c:	8005883a 	mov	r2,r16
   a0c40:	dfc00317 	ldw	ra,12(sp)
   a0c44:	dc800217 	ldw	r18,8(sp)
   a0c48:	dc400117 	ldw	r17,4(sp)
   a0c4c:	dc000017 	ldw	r16,0(sp)
   a0c50:	dec00404 	addi	sp,sp,16
   a0c54:	f800283a 	ret

000a0c58 <__sfp>:
   a0c58:	defffb04 	addi	sp,sp,-20
   a0c5c:	dc000015 	stw	r16,0(sp)
   a0c60:	040002f4 	movhi	r16,11
   a0c64:	840c9404 	addi	r16,r16,12880
   a0c68:	dcc00315 	stw	r19,12(sp)
   a0c6c:	2027883a 	mov	r19,r4
   a0c70:	81000017 	ldw	r4,0(r16)
   a0c74:	dfc00415 	stw	ra,16(sp)
   a0c78:	dc800215 	stw	r18,8(sp)
   a0c7c:	20800e17 	ldw	r2,56(r4)
   a0c80:	dc400115 	stw	r17,4(sp)
   a0c84:	1000021e 	bne	r2,zero,a0c90 <__sfp+0x38>
   a0c88:	00a0a3c0 	call	a0a3c <__sinit.part.1>
   a0c8c:	81000017 	ldw	r4,0(r16)
   a0c90:	2480b804 	addi	r18,r4,736
   a0c94:	047fffc4 	movi	r17,-1
   a0c98:	91000117 	ldw	r4,4(r18)
   a0c9c:	94000217 	ldw	r16,8(r18)
   a0ca0:	213fffc4 	addi	r4,r4,-1
   a0ca4:	20000a16 	blt	r4,zero,a0cd0 <__sfp+0x78>
   a0ca8:	8080030f 	ldh	r2,12(r16)
   a0cac:	10000c26 	beq	r2,zero,a0ce0 <__sfp+0x88>
   a0cb0:	80c01d04 	addi	r3,r16,116
   a0cb4:	00000206 	br	a0cc0 <__sfp+0x68>
   a0cb8:	18bfe60f 	ldh	r2,-104(r3)
   a0cbc:	10000826 	beq	r2,zero,a0ce0 <__sfp+0x88>
   a0cc0:	213fffc4 	addi	r4,r4,-1
   a0cc4:	1c3ffd04 	addi	r16,r3,-12
   a0cc8:	18c01a04 	addi	r3,r3,104
   a0ccc:	247ffa1e 	bne	r4,r17,a0cb8 <__alt_data_end+0xfffe0cb8>
   a0cd0:	90800017 	ldw	r2,0(r18)
   a0cd4:	10001d26 	beq	r2,zero,a0d4c <__sfp+0xf4>
   a0cd8:	1025883a 	mov	r18,r2
   a0cdc:	003fee06 	br	a0c98 <__alt_data_end+0xfffe0c98>
   a0ce0:	00bfffc4 	movi	r2,-1
   a0ce4:	8080038d 	sth	r2,14(r16)
   a0ce8:	00800044 	movi	r2,1
   a0cec:	8080030d 	sth	r2,12(r16)
   a0cf0:	80001915 	stw	zero,100(r16)
   a0cf4:	80000015 	stw	zero,0(r16)
   a0cf8:	80000215 	stw	zero,8(r16)
   a0cfc:	80000115 	stw	zero,4(r16)
   a0d00:	80000415 	stw	zero,16(r16)
   a0d04:	80000515 	stw	zero,20(r16)
   a0d08:	80000615 	stw	zero,24(r16)
   a0d0c:	01800204 	movi	r6,8
   a0d10:	000b883a 	mov	r5,zero
   a0d14:	81001704 	addi	r4,r16,92
   a0d18:	00a24300 	call	a2430 <memset>
   a0d1c:	8005883a 	mov	r2,r16
   a0d20:	80000c15 	stw	zero,48(r16)
   a0d24:	80000d15 	stw	zero,52(r16)
   a0d28:	80001115 	stw	zero,68(r16)
   a0d2c:	80001215 	stw	zero,72(r16)
   a0d30:	dfc00417 	ldw	ra,16(sp)
   a0d34:	dcc00317 	ldw	r19,12(sp)
   a0d38:	dc800217 	ldw	r18,8(sp)
   a0d3c:	dc400117 	ldw	r17,4(sp)
   a0d40:	dc000017 	ldw	r16,0(sp)
   a0d44:	dec00504 	addi	sp,sp,20
   a0d48:	f800283a 	ret
   a0d4c:	01400104 	movi	r5,4
   a0d50:	9809883a 	mov	r4,r19
   a0d54:	00a0be00 	call	a0be0 <__sfmoreglue>
   a0d58:	90800015 	stw	r2,0(r18)
   a0d5c:	103fde1e 	bne	r2,zero,a0cd8 <__alt_data_end+0xfffe0cd8>
   a0d60:	00800304 	movi	r2,12
   a0d64:	98800015 	stw	r2,0(r19)
   a0d68:	0005883a 	mov	r2,zero
   a0d6c:	003ff006 	br	a0d30 <__alt_data_end+0xfffe0d30>

000a0d70 <_cleanup>:
   a0d70:	008002f4 	movhi	r2,11
   a0d74:	108c9404 	addi	r2,r2,12880
   a0d78:	11000017 	ldw	r4,0(r2)
   a0d7c:	014002b4 	movhi	r5,10
   a0d80:	29419f04 	addi	r5,r5,1660
   a0d84:	00a19a41 	jmpi	a19a4 <_fwalk_reent>

000a0d88 <__sinit>:
   a0d88:	20800e17 	ldw	r2,56(r4)
   a0d8c:	10000126 	beq	r2,zero,a0d94 <__sinit+0xc>
   a0d90:	f800283a 	ret
   a0d94:	00a0a3c1 	jmpi	a0a3c <__sinit.part.1>

000a0d98 <__sfp_lock_acquire>:
   a0d98:	f800283a 	ret

000a0d9c <__sfp_lock_release>:
   a0d9c:	f800283a 	ret

000a0da0 <__sinit_lock_acquire>:
   a0da0:	f800283a 	ret

000a0da4 <__sinit_lock_release>:
   a0da4:	f800283a 	ret

000a0da8 <__fp_lock_all>:
   a0da8:	008002f4 	movhi	r2,11
   a0dac:	108c9504 	addi	r2,r2,12884
   a0db0:	11000017 	ldw	r4,0(r2)
   a0db4:	014002b4 	movhi	r5,10
   a0db8:	2942f604 	addi	r5,r5,3032
   a0dbc:	00a18e01 	jmpi	a18e0 <_fwalk>

000a0dc0 <__fp_unlock_all>:
   a0dc0:	008002f4 	movhi	r2,11
   a0dc4:	108c9504 	addi	r2,r2,12884
   a0dc8:	11000017 	ldw	r4,0(r2)
   a0dcc:	014002b4 	movhi	r5,10
   a0dd0:	29428a04 	addi	r5,r5,2600
   a0dd4:	00a18e01 	jmpi	a18e0 <_fwalk>

000a0dd8 <_fopen_r>:
   a0dd8:	defffa04 	addi	sp,sp,-24
   a0ddc:	3005883a 	mov	r2,r6
   a0de0:	dcc00415 	stw	r19,16(sp)
   a0de4:	d80d883a 	mov	r6,sp
   a0de8:	2827883a 	mov	r19,r5
   a0dec:	100b883a 	mov	r5,r2
   a0df0:	dc800315 	stw	r18,12(sp)
   a0df4:	dfc00515 	stw	ra,20(sp)
   a0df8:	dc400215 	stw	r17,8(sp)
   a0dfc:	dc000115 	stw	r16,4(sp)
   a0e00:	2025883a 	mov	r18,r4
   a0e04:	00a6d500 	call	a6d50 <__sflags>
   a0e08:	10002726 	beq	r2,zero,a0ea8 <_fopen_r+0xd0>
   a0e0c:	9009883a 	mov	r4,r18
   a0e10:	1023883a 	mov	r17,r2
   a0e14:	00a0c580 	call	a0c58 <__sfp>
   a0e18:	1021883a 	mov	r16,r2
   a0e1c:	10002226 	beq	r2,zero,a0ea8 <_fopen_r+0xd0>
   a0e20:	d9800017 	ldw	r6,0(sp)
   a0e24:	01c06d84 	movi	r7,438
   a0e28:	980b883a 	mov	r5,r19
   a0e2c:	9009883a 	mov	r4,r18
   a0e30:	00a25580 	call	a2558 <_open_r>
   a0e34:	10001916 	blt	r2,zero,a0e9c <_fopen_r+0xc4>
   a0e38:	8080038d 	sth	r2,14(r16)
   a0e3c:	008002b4 	movhi	r2,10
   a0e40:	108aa904 	addi	r2,r2,10916
   a0e44:	80800815 	stw	r2,32(r16)
   a0e48:	008002b4 	movhi	r2,10
   a0e4c:	108ac004 	addi	r2,r2,11008
   a0e50:	80800915 	stw	r2,36(r16)
   a0e54:	008002b4 	movhi	r2,10
   a0e58:	108adf04 	addi	r2,r2,11132
   a0e5c:	80800a15 	stw	r2,40(r16)
   a0e60:	008002b4 	movhi	r2,10
   a0e64:	108af604 	addi	r2,r2,11224
   a0e68:	8440030d 	sth	r17,12(r16)
   a0e6c:	84000715 	stw	r16,28(r16)
   a0e70:	80800b15 	stw	r2,44(r16)
   a0e74:	8c40400c 	andi	r17,r17,256
   a0e78:	88000d1e 	bne	r17,zero,a0eb0 <_fopen_r+0xd8>
   a0e7c:	8005883a 	mov	r2,r16
   a0e80:	dfc00517 	ldw	ra,20(sp)
   a0e84:	dcc00417 	ldw	r19,16(sp)
   a0e88:	dc800317 	ldw	r18,12(sp)
   a0e8c:	dc400217 	ldw	r17,8(sp)
   a0e90:	dc000117 	ldw	r16,4(sp)
   a0e94:	dec00604 	addi	sp,sp,24
   a0e98:	f800283a 	ret
   a0e9c:	00a0d980 	call	a0d98 <__sfp_lock_acquire>
   a0ea0:	8000030d 	sth	zero,12(r16)
   a0ea4:	00a0d9c0 	call	a0d9c <__sfp_lock_release>
   a0ea8:	0005883a 	mov	r2,zero
   a0eac:	003ff406 	br	a0e80 <__alt_data_end+0xfffe0e80>
   a0eb0:	01c00084 	movi	r7,2
   a0eb4:	000d883a 	mov	r6,zero
   a0eb8:	800b883a 	mov	r5,r16
   a0ebc:	9009883a 	mov	r4,r18
   a0ec0:	00a14040 	call	a1404 <_fseek_r>
   a0ec4:	8005883a 	mov	r2,r16
   a0ec8:	003fed06 	br	a0e80 <__alt_data_end+0xfffe0e80>

000a0ecc <fopen>:
   a0ecc:	008002f4 	movhi	r2,11
   a0ed0:	108c9504 	addi	r2,r2,12884
   a0ed4:	280d883a 	mov	r6,r5
   a0ed8:	200b883a 	mov	r5,r4
   a0edc:	11000017 	ldw	r4,0(r2)
   a0ee0:	00a0dd81 	jmpi	a0dd8 <_fopen_r>

000a0ee4 <_fprintf_r>:
   a0ee4:	defffe04 	addi	sp,sp,-8
   a0ee8:	2809883a 	mov	r4,r5
   a0eec:	300b883a 	mov	r5,r6
   a0ef0:	dfc00015 	stw	ra,0(sp)
   a0ef4:	d9c00115 	stw	r7,4(sp)
   a0ef8:	d9800104 	addi	r6,sp,4
   a0efc:	00a50680 	call	a5068 <__vfprintf_internal>
   a0f00:	dfc00017 	ldw	ra,0(sp)
   a0f04:	dec00204 	addi	sp,sp,8
   a0f08:	f800283a 	ret

000a0f0c <fprintf>:
   a0f0c:	defffd04 	addi	sp,sp,-12
   a0f10:	dfc00015 	stw	ra,0(sp)
   a0f14:	d9800115 	stw	r6,4(sp)
   a0f18:	d9c00215 	stw	r7,8(sp)
   a0f1c:	d9800104 	addi	r6,sp,4
   a0f20:	00a50680 	call	a5068 <__vfprintf_internal>
   a0f24:	dfc00017 	ldw	ra,0(sp)
   a0f28:	dec00304 	addi	sp,sp,12
   a0f2c:	f800283a 	ret

000a0f30 <_fputc_r>:
   a0f30:	defffc04 	addi	sp,sp,-16
   a0f34:	dc000215 	stw	r16,8(sp)
   a0f38:	dfc00315 	stw	ra,12(sp)
   a0f3c:	2021883a 	mov	r16,r4
   a0f40:	20000726 	beq	r4,zero,a0f60 <_fputc_r+0x30>
   a0f44:	20800e17 	ldw	r2,56(r4)
   a0f48:	1000051e 	bne	r2,zero,a0f60 <_fputc_r+0x30>
   a0f4c:	d9400015 	stw	r5,0(sp)
   a0f50:	d9800115 	stw	r6,4(sp)
   a0f54:	00a0d880 	call	a0d88 <__sinit>
   a0f58:	d9800117 	ldw	r6,4(sp)
   a0f5c:	d9400017 	ldw	r5,0(sp)
   a0f60:	8009883a 	mov	r4,r16
   a0f64:	dfc00317 	ldw	ra,12(sp)
   a0f68:	dc000217 	ldw	r16,8(sp)
   a0f6c:	dec00404 	addi	sp,sp,16
   a0f70:	00a26241 	jmpi	a2624 <_putc_r>

000a0f74 <fputc>:
   a0f74:	008002f4 	movhi	r2,11
   a0f78:	defffc04 	addi	sp,sp,-16
   a0f7c:	108c9504 	addi	r2,r2,12884
   a0f80:	dc000115 	stw	r16,4(sp)
   a0f84:	14000017 	ldw	r16,0(r2)
   a0f88:	dc400215 	stw	r17,8(sp)
   a0f8c:	dfc00315 	stw	ra,12(sp)
   a0f90:	2023883a 	mov	r17,r4
   a0f94:	80000626 	beq	r16,zero,a0fb0 <fputc+0x3c>
   a0f98:	80800e17 	ldw	r2,56(r16)
   a0f9c:	1000041e 	bne	r2,zero,a0fb0 <fputc+0x3c>
   a0fa0:	8009883a 	mov	r4,r16
   a0fa4:	d9400015 	stw	r5,0(sp)
   a0fa8:	00a0d880 	call	a0d88 <__sinit>
   a0fac:	d9400017 	ldw	r5,0(sp)
   a0fb0:	280d883a 	mov	r6,r5
   a0fb4:	8009883a 	mov	r4,r16
   a0fb8:	880b883a 	mov	r5,r17
   a0fbc:	dfc00317 	ldw	ra,12(sp)
   a0fc0:	dc400217 	ldw	r17,8(sp)
   a0fc4:	dc000117 	ldw	r16,4(sp)
   a0fc8:	dec00404 	addi	sp,sp,16
   a0fcc:	00a26241 	jmpi	a2624 <_putc_r>

000a0fd0 <_malloc_trim_r>:
   a0fd0:	defffb04 	addi	sp,sp,-20
   a0fd4:	dcc00315 	stw	r19,12(sp)
   a0fd8:	04c002f4 	movhi	r19,11
   a0fdc:	dc800215 	stw	r18,8(sp)
   a0fe0:	dc400115 	stw	r17,4(sp)
   a0fe4:	dc000015 	stw	r16,0(sp)
   a0fe8:	dfc00415 	stw	ra,16(sp)
   a0fec:	2821883a 	mov	r16,r5
   a0ff0:	9cc6e804 	addi	r19,r19,7072
   a0ff4:	2025883a 	mov	r18,r4
   a0ff8:	00ae7480 	call	ae748 <__malloc_lock>
   a0ffc:	98800217 	ldw	r2,8(r19)
   a1000:	14400117 	ldw	r17,4(r2)
   a1004:	00bfff04 	movi	r2,-4
   a1008:	88a2703a 	and	r17,r17,r2
   a100c:	8c21c83a 	sub	r16,r17,r16
   a1010:	8403fbc4 	addi	r16,r16,4079
   a1014:	8020d33a 	srli	r16,r16,12
   a1018:	0083ffc4 	movi	r2,4095
   a101c:	843fffc4 	addi	r16,r16,-1
   a1020:	8020933a 	slli	r16,r16,12
   a1024:	1400060e 	bge	r2,r16,a1040 <_malloc_trim_r+0x70>
   a1028:	000b883a 	mov	r5,zero
   a102c:	9009883a 	mov	r4,r18
   a1030:	00a2a500 	call	a2a50 <_sbrk_r>
   a1034:	98c00217 	ldw	r3,8(r19)
   a1038:	1c47883a 	add	r3,r3,r17
   a103c:	10c00a26 	beq	r2,r3,a1068 <_malloc_trim_r+0x98>
   a1040:	9009883a 	mov	r4,r18
   a1044:	00ae76c0 	call	ae76c <__malloc_unlock>
   a1048:	0005883a 	mov	r2,zero
   a104c:	dfc00417 	ldw	ra,16(sp)
   a1050:	dcc00317 	ldw	r19,12(sp)
   a1054:	dc800217 	ldw	r18,8(sp)
   a1058:	dc400117 	ldw	r17,4(sp)
   a105c:	dc000017 	ldw	r16,0(sp)
   a1060:	dec00504 	addi	sp,sp,20
   a1064:	f800283a 	ret
   a1068:	040bc83a 	sub	r5,zero,r16
   a106c:	9009883a 	mov	r4,r18
   a1070:	00a2a500 	call	a2a50 <_sbrk_r>
   a1074:	00ffffc4 	movi	r3,-1
   a1078:	10c00d26 	beq	r2,r3,a10b0 <_malloc_trim_r+0xe0>
   a107c:	00c002f4 	movhi	r3,11
   a1080:	18d3bb04 	addi	r3,r3,20204
   a1084:	18800017 	ldw	r2,0(r3)
   a1088:	99000217 	ldw	r4,8(r19)
   a108c:	8c23c83a 	sub	r17,r17,r16
   a1090:	8c400054 	ori	r17,r17,1
   a1094:	1421c83a 	sub	r16,r2,r16
   a1098:	24400115 	stw	r17,4(r4)
   a109c:	9009883a 	mov	r4,r18
   a10a0:	1c000015 	stw	r16,0(r3)
   a10a4:	00ae76c0 	call	ae76c <__malloc_unlock>
   a10a8:	00800044 	movi	r2,1
   a10ac:	003fe706 	br	a104c <__alt_data_end+0xfffe104c>
   a10b0:	000b883a 	mov	r5,zero
   a10b4:	9009883a 	mov	r4,r18
   a10b8:	00a2a500 	call	a2a50 <_sbrk_r>
   a10bc:	99000217 	ldw	r4,8(r19)
   a10c0:	014003c4 	movi	r5,15
   a10c4:	1107c83a 	sub	r3,r2,r4
   a10c8:	28ffdd0e 	bge	r5,r3,a1040 <__alt_data_end+0xfffe1040>
   a10cc:	014002f4 	movhi	r5,11
   a10d0:	294c9604 	addi	r5,r5,12888
   a10d4:	29400017 	ldw	r5,0(r5)
   a10d8:	18c00054 	ori	r3,r3,1
   a10dc:	20c00115 	stw	r3,4(r4)
   a10e0:	00c002f4 	movhi	r3,11
   a10e4:	1145c83a 	sub	r2,r2,r5
   a10e8:	18d3bb04 	addi	r3,r3,20204
   a10ec:	18800015 	stw	r2,0(r3)
   a10f0:	003fd306 	br	a1040 <__alt_data_end+0xfffe1040>

000a10f4 <_free_r>:
   a10f4:	28004126 	beq	r5,zero,a11fc <_free_r+0x108>
   a10f8:	defffd04 	addi	sp,sp,-12
   a10fc:	dc400115 	stw	r17,4(sp)
   a1100:	dc000015 	stw	r16,0(sp)
   a1104:	2023883a 	mov	r17,r4
   a1108:	2821883a 	mov	r16,r5
   a110c:	dfc00215 	stw	ra,8(sp)
   a1110:	00ae7480 	call	ae748 <__malloc_lock>
   a1114:	81ffff17 	ldw	r7,-4(r16)
   a1118:	00bfff84 	movi	r2,-2
   a111c:	010002f4 	movhi	r4,11
   a1120:	81bffe04 	addi	r6,r16,-8
   a1124:	3884703a 	and	r2,r7,r2
   a1128:	2106e804 	addi	r4,r4,7072
   a112c:	308b883a 	add	r5,r6,r2
   a1130:	2a400117 	ldw	r9,4(r5)
   a1134:	22000217 	ldw	r8,8(r4)
   a1138:	00ffff04 	movi	r3,-4
   a113c:	48c6703a 	and	r3,r9,r3
   a1140:	2a005726 	beq	r5,r8,a12a0 <_free_r+0x1ac>
   a1144:	28c00115 	stw	r3,4(r5)
   a1148:	39c0004c 	andi	r7,r7,1
   a114c:	3800091e 	bne	r7,zero,a1174 <_free_r+0x80>
   a1150:	823ffe17 	ldw	r8,-8(r16)
   a1154:	22400204 	addi	r9,r4,8
   a1158:	320dc83a 	sub	r6,r6,r8
   a115c:	31c00217 	ldw	r7,8(r6)
   a1160:	1205883a 	add	r2,r2,r8
   a1164:	3a406526 	beq	r7,r9,a12fc <_free_r+0x208>
   a1168:	32000317 	ldw	r8,12(r6)
   a116c:	3a000315 	stw	r8,12(r7)
   a1170:	41c00215 	stw	r7,8(r8)
   a1174:	28cf883a 	add	r7,r5,r3
   a1178:	39c00117 	ldw	r7,4(r7)
   a117c:	39c0004c 	andi	r7,r7,1
   a1180:	38003a26 	beq	r7,zero,a126c <_free_r+0x178>
   a1184:	10c00054 	ori	r3,r2,1
   a1188:	30c00115 	stw	r3,4(r6)
   a118c:	3087883a 	add	r3,r6,r2
   a1190:	18800015 	stw	r2,0(r3)
   a1194:	00c07fc4 	movi	r3,511
   a1198:	18801936 	bltu	r3,r2,a1200 <_free_r+0x10c>
   a119c:	1004d0fa 	srli	r2,r2,3
   a11a0:	01c00044 	movi	r7,1
   a11a4:	21400117 	ldw	r5,4(r4)
   a11a8:	10c00044 	addi	r3,r2,1
   a11ac:	18c7883a 	add	r3,r3,r3
   a11b0:	1005d0ba 	srai	r2,r2,2
   a11b4:	18c7883a 	add	r3,r3,r3
   a11b8:	18c7883a 	add	r3,r3,r3
   a11bc:	1907883a 	add	r3,r3,r4
   a11c0:	3884983a 	sll	r2,r7,r2
   a11c4:	19c00017 	ldw	r7,0(r3)
   a11c8:	1a3ffe04 	addi	r8,r3,-8
   a11cc:	1144b03a 	or	r2,r2,r5
   a11d0:	32000315 	stw	r8,12(r6)
   a11d4:	31c00215 	stw	r7,8(r6)
   a11d8:	20800115 	stw	r2,4(r4)
   a11dc:	19800015 	stw	r6,0(r3)
   a11e0:	39800315 	stw	r6,12(r7)
   a11e4:	8809883a 	mov	r4,r17
   a11e8:	dfc00217 	ldw	ra,8(sp)
   a11ec:	dc400117 	ldw	r17,4(sp)
   a11f0:	dc000017 	ldw	r16,0(sp)
   a11f4:	dec00304 	addi	sp,sp,12
   a11f8:	00ae76c1 	jmpi	ae76c <__malloc_unlock>
   a11fc:	f800283a 	ret
   a1200:	100ad27a 	srli	r5,r2,9
   a1204:	00c00104 	movi	r3,4
   a1208:	19404a36 	bltu	r3,r5,a1334 <_free_r+0x240>
   a120c:	100ad1ba 	srli	r5,r2,6
   a1210:	28c00e44 	addi	r3,r5,57
   a1214:	18c7883a 	add	r3,r3,r3
   a1218:	29400e04 	addi	r5,r5,56
   a121c:	18c7883a 	add	r3,r3,r3
   a1220:	18c7883a 	add	r3,r3,r3
   a1224:	1909883a 	add	r4,r3,r4
   a1228:	20c00017 	ldw	r3,0(r4)
   a122c:	01c002f4 	movhi	r7,11
   a1230:	213ffe04 	addi	r4,r4,-8
   a1234:	39c6e804 	addi	r7,r7,7072
   a1238:	20c04426 	beq	r4,r3,a134c <_free_r+0x258>
   a123c:	01ffff04 	movi	r7,-4
   a1240:	19400117 	ldw	r5,4(r3)
   a1244:	29ca703a 	and	r5,r5,r7
   a1248:	1140022e 	bgeu	r2,r5,a1254 <_free_r+0x160>
   a124c:	18c00217 	ldw	r3,8(r3)
   a1250:	20fffb1e 	bne	r4,r3,a1240 <__alt_data_end+0xfffe1240>
   a1254:	19000317 	ldw	r4,12(r3)
   a1258:	31000315 	stw	r4,12(r6)
   a125c:	30c00215 	stw	r3,8(r6)
   a1260:	21800215 	stw	r6,8(r4)
   a1264:	19800315 	stw	r6,12(r3)
   a1268:	003fde06 	br	a11e4 <__alt_data_end+0xfffe11e4>
   a126c:	29c00217 	ldw	r7,8(r5)
   a1270:	10c5883a 	add	r2,r2,r3
   a1274:	00c002f4 	movhi	r3,11
   a1278:	18c6ea04 	addi	r3,r3,7080
   a127c:	38c03b26 	beq	r7,r3,a136c <_free_r+0x278>
   a1280:	2a000317 	ldw	r8,12(r5)
   a1284:	11400054 	ori	r5,r2,1
   a1288:	3087883a 	add	r3,r6,r2
   a128c:	3a000315 	stw	r8,12(r7)
   a1290:	41c00215 	stw	r7,8(r8)
   a1294:	31400115 	stw	r5,4(r6)
   a1298:	18800015 	stw	r2,0(r3)
   a129c:	003fbd06 	br	a1194 <__alt_data_end+0xfffe1194>
   a12a0:	39c0004c 	andi	r7,r7,1
   a12a4:	10c5883a 	add	r2,r2,r3
   a12a8:	3800071e 	bne	r7,zero,a12c8 <_free_r+0x1d4>
   a12ac:	81fffe17 	ldw	r7,-8(r16)
   a12b0:	31cdc83a 	sub	r6,r6,r7
   a12b4:	30c00317 	ldw	r3,12(r6)
   a12b8:	31400217 	ldw	r5,8(r6)
   a12bc:	11c5883a 	add	r2,r2,r7
   a12c0:	28c00315 	stw	r3,12(r5)
   a12c4:	19400215 	stw	r5,8(r3)
   a12c8:	10c00054 	ori	r3,r2,1
   a12cc:	30c00115 	stw	r3,4(r6)
   a12d0:	00c002f4 	movhi	r3,11
   a12d4:	18cc9704 	addi	r3,r3,12892
   a12d8:	18c00017 	ldw	r3,0(r3)
   a12dc:	21800215 	stw	r6,8(r4)
   a12e0:	10ffc036 	bltu	r2,r3,a11e4 <__alt_data_end+0xfffe11e4>
   a12e4:	008002f4 	movhi	r2,11
   a12e8:	1093b004 	addi	r2,r2,20160
   a12ec:	11400017 	ldw	r5,0(r2)
   a12f0:	8809883a 	mov	r4,r17
   a12f4:	00a0fd00 	call	a0fd0 <_malloc_trim_r>
   a12f8:	003fba06 	br	a11e4 <__alt_data_end+0xfffe11e4>
   a12fc:	28c9883a 	add	r4,r5,r3
   a1300:	21000117 	ldw	r4,4(r4)
   a1304:	2100004c 	andi	r4,r4,1
   a1308:	2000391e 	bne	r4,zero,a13f0 <_free_r+0x2fc>
   a130c:	29c00217 	ldw	r7,8(r5)
   a1310:	29000317 	ldw	r4,12(r5)
   a1314:	1885883a 	add	r2,r3,r2
   a1318:	10c00054 	ori	r3,r2,1
   a131c:	39000315 	stw	r4,12(r7)
   a1320:	21c00215 	stw	r7,8(r4)
   a1324:	30c00115 	stw	r3,4(r6)
   a1328:	308d883a 	add	r6,r6,r2
   a132c:	30800015 	stw	r2,0(r6)
   a1330:	003fac06 	br	a11e4 <__alt_data_end+0xfffe11e4>
   a1334:	00c00504 	movi	r3,20
   a1338:	19401536 	bltu	r3,r5,a1390 <_free_r+0x29c>
   a133c:	28c01704 	addi	r3,r5,92
   a1340:	18c7883a 	add	r3,r3,r3
   a1344:	294016c4 	addi	r5,r5,91
   a1348:	003fb406 	br	a121c <__alt_data_end+0xfffe121c>
   a134c:	280bd0ba 	srai	r5,r5,2
   a1350:	00c00044 	movi	r3,1
   a1354:	38800117 	ldw	r2,4(r7)
   a1358:	194a983a 	sll	r5,r3,r5
   a135c:	2007883a 	mov	r3,r4
   a1360:	2884b03a 	or	r2,r5,r2
   a1364:	38800115 	stw	r2,4(r7)
   a1368:	003fbb06 	br	a1258 <__alt_data_end+0xfffe1258>
   a136c:	21800515 	stw	r6,20(r4)
   a1370:	21800415 	stw	r6,16(r4)
   a1374:	10c00054 	ori	r3,r2,1
   a1378:	31c00315 	stw	r7,12(r6)
   a137c:	31c00215 	stw	r7,8(r6)
   a1380:	30c00115 	stw	r3,4(r6)
   a1384:	308d883a 	add	r6,r6,r2
   a1388:	30800015 	stw	r2,0(r6)
   a138c:	003f9506 	br	a11e4 <__alt_data_end+0xfffe11e4>
   a1390:	00c01504 	movi	r3,84
   a1394:	19400536 	bltu	r3,r5,a13ac <_free_r+0x2b8>
   a1398:	100ad33a 	srli	r5,r2,12
   a139c:	28c01bc4 	addi	r3,r5,111
   a13a0:	18c7883a 	add	r3,r3,r3
   a13a4:	29401b84 	addi	r5,r5,110
   a13a8:	003f9c06 	br	a121c <__alt_data_end+0xfffe121c>
   a13ac:	00c05504 	movi	r3,340
   a13b0:	19400536 	bltu	r3,r5,a13c8 <_free_r+0x2d4>
   a13b4:	100ad3fa 	srli	r5,r2,15
   a13b8:	28c01e04 	addi	r3,r5,120
   a13bc:	18c7883a 	add	r3,r3,r3
   a13c0:	29401dc4 	addi	r5,r5,119
   a13c4:	003f9506 	br	a121c <__alt_data_end+0xfffe121c>
   a13c8:	00c15504 	movi	r3,1364
   a13cc:	19400536 	bltu	r3,r5,a13e4 <_free_r+0x2f0>
   a13d0:	100ad4ba 	srli	r5,r2,18
   a13d4:	28c01f44 	addi	r3,r5,125
   a13d8:	18c7883a 	add	r3,r3,r3
   a13dc:	29401f04 	addi	r5,r5,124
   a13e0:	003f8e06 	br	a121c <__alt_data_end+0xfffe121c>
   a13e4:	00c03f84 	movi	r3,254
   a13e8:	01401f84 	movi	r5,126
   a13ec:	003f8b06 	br	a121c <__alt_data_end+0xfffe121c>
   a13f0:	10c00054 	ori	r3,r2,1
   a13f4:	30c00115 	stw	r3,4(r6)
   a13f8:	308d883a 	add	r6,r6,r2
   a13fc:	30800015 	stw	r2,0(r6)
   a1400:	003f7806 	br	a11e4 <__alt_data_end+0xfffe11e4>

000a1404 <_fseek_r>:
   a1404:	00a14241 	jmpi	a1424 <_fseeko_r>

000a1408 <fseek>:
   a1408:	008002f4 	movhi	r2,11
   a140c:	108c9504 	addi	r2,r2,12884
   a1410:	300f883a 	mov	r7,r6
   a1414:	280d883a 	mov	r6,r5
   a1418:	200b883a 	mov	r5,r4
   a141c:	11000017 	ldw	r4,0(r2)
   a1420:	00a14241 	jmpi	a1424 <_fseeko_r>

000a1424 <_fseeko_r>:
   a1424:	deffe804 	addi	sp,sp,-96
   a1428:	dd401415 	stw	r21,80(sp)
   a142c:	dc801115 	stw	r18,68(sp)
   a1430:	dc401015 	stw	r17,64(sp)
   a1434:	dc000f15 	stw	r16,60(sp)
   a1438:	dfc01715 	stw	ra,92(sp)
   a143c:	ddc01615 	stw	r23,88(sp)
   a1440:	dd801515 	stw	r22,84(sp)
   a1444:	dd001315 	stw	r20,76(sp)
   a1448:	dcc01215 	stw	r19,72(sp)
   a144c:	2023883a 	mov	r17,r4
   a1450:	2821883a 	mov	r16,r5
   a1454:	302b883a 	mov	r21,r6
   a1458:	3825883a 	mov	r18,r7
   a145c:	20000226 	beq	r4,zero,a1468 <_fseeko_r+0x44>
   a1460:	20800e17 	ldw	r2,56(r4)
   a1464:	10005a26 	beq	r2,zero,a15d0 <_fseeko_r+0x1ac>
   a1468:	8080030b 	ldhu	r2,12(r16)
   a146c:	00c04204 	movi	r3,264
   a1470:	1080420c 	andi	r2,r2,264
   a1474:	10c05b26 	beq	r2,r3,a15e4 <_fseeko_r+0x1c0>
   a1478:	85000a17 	ldw	r20,40(r16)
   a147c:	a000f626 	beq	r20,zero,a1858 <_fseeko_r+0x434>
   a1480:	00800044 	movi	r2,1
   a1484:	90803e26 	beq	r18,r2,a1580 <_fseeko_r+0x15c>
   a1488:	00800084 	movi	r2,2
   a148c:	90801026 	beq	r18,r2,a14d0 <_fseeko_r+0xac>
   a1490:	90000f26 	beq	r18,zero,a14d0 <_fseeko_r+0xac>
   a1494:	00800584 	movi	r2,22
   a1498:	88800015 	stw	r2,0(r17)
   a149c:	04ffffc4 	movi	r19,-1
   a14a0:	9805883a 	mov	r2,r19
   a14a4:	dfc01717 	ldw	ra,92(sp)
   a14a8:	ddc01617 	ldw	r23,88(sp)
   a14ac:	dd801517 	ldw	r22,84(sp)
   a14b0:	dd401417 	ldw	r21,80(sp)
   a14b4:	dd001317 	ldw	r20,76(sp)
   a14b8:	dcc01217 	ldw	r19,72(sp)
   a14bc:	dc801117 	ldw	r18,68(sp)
   a14c0:	dc401017 	ldw	r17,64(sp)
   a14c4:	dc000f17 	ldw	r16,60(sp)
   a14c8:	dec01804 	addi	sp,sp,96
   a14cc:	f800283a 	ret
   a14d0:	80800417 	ldw	r2,16(r16)
   a14d4:	002f883a 	mov	r23,zero
   a14d8:	0027883a 	mov	r19,zero
   a14dc:	1000cb26 	beq	r2,zero,a180c <_fseeko_r+0x3e8>
   a14e0:	8080030b 	ldhu	r2,12(r16)
   a14e4:	10c2068c 	andi	r3,r2,2074
   a14e8:	1800071e 	bne	r3,zero,a1508 <_fseeko_r+0xe4>
   a14ec:	10c1000c 	andi	r3,r2,1024
   a14f0:	1800451e 	bne	r3,zero,a1608 <_fseeko_r+0x1e4>
   a14f4:	00c002b4 	movhi	r3,10
   a14f8:	18cadf04 	addi	r3,r3,11132
   a14fc:	a0c0b726 	beq	r20,r3,a17dc <_fseeko_r+0x3b8>
   a1500:	10820014 	ori	r2,r2,2048
   a1504:	8080030d 	sth	r2,12(r16)
   a1508:	800b883a 	mov	r5,r16
   a150c:	8809883a 	mov	r4,r17
   a1510:	00a099c0 	call	a099c <_fflush_r>
   a1514:	1027883a 	mov	r19,r2
   a1518:	103fe01e 	bne	r2,zero,a149c <__alt_data_end+0xfffe149c>
   a151c:	81400717 	ldw	r5,28(r16)
   a1520:	900f883a 	mov	r7,r18
   a1524:	a80d883a 	mov	r6,r21
   a1528:	8809883a 	mov	r4,r17
   a152c:	a03ee83a 	callr	r20
   a1530:	00ffffc4 	movi	r3,-1
   a1534:	10ffd926 	beq	r2,r3,a149c <__alt_data_end+0xfffe149c>
   a1538:	81400c17 	ldw	r5,48(r16)
   a153c:	28000526 	beq	r5,zero,a1554 <_fseeko_r+0x130>
   a1540:	80801004 	addi	r2,r16,64
   a1544:	28800226 	beq	r5,r2,a1550 <_fseeko_r+0x12c>
   a1548:	8809883a 	mov	r4,r17
   a154c:	00a10f40 	call	a10f4 <_free_r>
   a1550:	80000c15 	stw	zero,48(r16)
   a1554:	8080030b 	ldhu	r2,12(r16)
   a1558:	80c00417 	ldw	r3,16(r16)
   a155c:	80000115 	stw	zero,4(r16)
   a1560:	10bdf7cc 	andi	r2,r2,63455
   a1564:	80c00015 	stw	r3,0(r16)
   a1568:	8080030d 	sth	r2,12(r16)
   a156c:	01800204 	movi	r6,8
   a1570:	000b883a 	mov	r5,zero
   a1574:	81001704 	addi	r4,r16,92
   a1578:	00a24300 	call	a2430 <memset>
   a157c:	003fc806 	br	a14a0 <__alt_data_end+0xfffe14a0>
   a1580:	800b883a 	mov	r5,r16
   a1584:	8809883a 	mov	r4,r17
   a1588:	00a099c0 	call	a099c <_fflush_r>
   a158c:	8080030b 	ldhu	r2,12(r16)
   a1590:	10c4000c 	andi	r3,r2,4096
   a1594:	18008726 	beq	r3,zero,a17b4 <_fseeko_r+0x390>
   a1598:	84c01417 	ldw	r19,80(r16)
   a159c:	10c0010c 	andi	r3,r2,4
   a15a0:	1800431e 	bne	r3,zero,a16b0 <_fseeko_r+0x28c>
   a15a4:	1080020c 	andi	r2,r2,8
   a15a8:	10008026 	beq	r2,zero,a17ac <_fseeko_r+0x388>
   a15ac:	80c00017 	ldw	r3,0(r16)
   a15b0:	80800417 	ldw	r2,16(r16)
   a15b4:	18000226 	beq	r3,zero,a15c0 <_fseeko_r+0x19c>
   a15b8:	1887c83a 	sub	r3,r3,r2
   a15bc:	98e7883a 	add	r19,r19,r3
   a15c0:	aceb883a 	add	r21,r21,r19
   a15c4:	05c00044 	movi	r23,1
   a15c8:	0025883a 	mov	r18,zero
   a15cc:	003fc306 	br	a14dc <__alt_data_end+0xfffe14dc>
   a15d0:	00a0d880 	call	a0d88 <__sinit>
   a15d4:	8080030b 	ldhu	r2,12(r16)
   a15d8:	00c04204 	movi	r3,264
   a15dc:	1080420c 	andi	r2,r2,264
   a15e0:	10ffa51e 	bne	r2,r3,a1478 <__alt_data_end+0xfffe1478>
   a15e4:	800b883a 	mov	r5,r16
   a15e8:	8809883a 	mov	r4,r17
   a15ec:	00a099c0 	call	a099c <_fflush_r>
   a15f0:	003fa106 	br	a1478 <__alt_data_end+0xfffe1478>
   a15f4:	8080030b 	ldhu	r2,12(r16)
   a15f8:	00c10004 	movi	r3,1024
   a15fc:	80c01315 	stw	r3,76(r16)
   a1600:	10c4b03a 	or	r2,r2,r3
   a1604:	8080030d 	sth	r2,12(r16)
   a1608:	9000311e 	bne	r18,zero,a16d0 <_fseeko_r+0x2ac>
   a160c:	a82d883a 	mov	r22,r21
   a1610:	b800371e 	bne	r23,zero,a16f0 <_fseeko_r+0x2cc>
   a1614:	8080030b 	ldhu	r2,12(r16)
   a1618:	1084000c 	andi	r2,r2,4096
   a161c:	10007f26 	beq	r2,zero,a181c <_fseeko_r+0x3f8>
   a1620:	80801417 	ldw	r2,80(r16)
   a1624:	81800117 	ldw	r6,4(r16)
   a1628:	81400c17 	ldw	r5,48(r16)
   a162c:	11a7c83a 	sub	r19,r2,r6
   a1630:	28008226 	beq	r5,zero,a183c <_fseeko_r+0x418>
   a1634:	81c00f17 	ldw	r7,60(r16)
   a1638:	99e7c83a 	sub	r19,r19,r7
   a163c:	81000e17 	ldw	r4,56(r16)
   a1640:	80800417 	ldw	r2,16(r16)
   a1644:	99a7883a 	add	r19,r19,r6
   a1648:	2087c83a 	sub	r3,r4,r2
   a164c:	98e7c83a 	sub	r19,r19,r3
   a1650:	38c7883a 	add	r3,r7,r3
   a1654:	b4c02b16 	blt	r22,r19,a1704 <_fseeko_r+0x2e0>
   a1658:	98c9883a 	add	r4,r19,r3
   a165c:	b100292e 	bgeu	r22,r4,a1704 <_fseeko_r+0x2e0>
   a1660:	b4e7c83a 	sub	r19,r22,r19
   a1664:	14c5883a 	add	r2,r2,r19
   a1668:	1ce7c83a 	sub	r19,r3,r19
   a166c:	80800015 	stw	r2,0(r16)
   a1670:	84c00115 	stw	r19,4(r16)
   a1674:	28000526 	beq	r5,zero,a168c <_fseeko_r+0x268>
   a1678:	80801004 	addi	r2,r16,64
   a167c:	28800226 	beq	r5,r2,a1688 <_fseeko_r+0x264>
   a1680:	8809883a 	mov	r4,r17
   a1684:	00a10f40 	call	a10f4 <_free_r>
   a1688:	80000c15 	stw	zero,48(r16)
   a168c:	8080030b 	ldhu	r2,12(r16)
   a1690:	01800204 	movi	r6,8
   a1694:	000b883a 	mov	r5,zero
   a1698:	10bff7cc 	andi	r2,r2,65503
   a169c:	8080030d 	sth	r2,12(r16)
   a16a0:	81001704 	addi	r4,r16,92
   a16a4:	00a24300 	call	a2430 <memset>
   a16a8:	0027883a 	mov	r19,zero
   a16ac:	003f7c06 	br	a14a0 <__alt_data_end+0xfffe14a0>
   a16b0:	80c00117 	ldw	r3,4(r16)
   a16b4:	80800c17 	ldw	r2,48(r16)
   a16b8:	98e7c83a 	sub	r19,r19,r3
   a16bc:	10003b26 	beq	r2,zero,a17ac <_fseeko_r+0x388>
   a16c0:	80c00f17 	ldw	r3,60(r16)
   a16c4:	80800417 	ldw	r2,16(r16)
   a16c8:	98e7c83a 	sub	r19,r19,r3
   a16cc:	003fbc06 	br	a15c0 <__alt_data_end+0xfffe15c0>
   a16d0:	8140038f 	ldh	r5,14(r16)
   a16d4:	d80d883a 	mov	r6,sp
   a16d8:	8809883a 	mov	r4,r17
   a16dc:	00a18840 	call	a1884 <_fstat_r>
   a16e0:	103f891e 	bne	r2,zero,a1508 <__alt_data_end+0xfffe1508>
   a16e4:	dd800417 	ldw	r22,16(sp)
   a16e8:	adad883a 	add	r22,r21,r22
   a16ec:	b83fc926 	beq	r23,zero,a1614 <__alt_data_end+0xfffe1614>
   a16f0:	81400c17 	ldw	r5,48(r16)
   a16f4:	81800117 	ldw	r6,4(r16)
   a16f8:	28005026 	beq	r5,zero,a183c <_fseeko_r+0x418>
   a16fc:	81c00f17 	ldw	r7,60(r16)
   a1700:	003fce06 	br	a163c <__alt_data_end+0xfffe163c>
   a1704:	84c01317 	ldw	r19,76(r16)
   a1708:	81400717 	ldw	r5,28(r16)
   a170c:	000f883a 	mov	r7,zero
   a1710:	04e7c83a 	sub	r19,zero,r19
   a1714:	9da6703a 	and	r19,r19,r22
   a1718:	980d883a 	mov	r6,r19
   a171c:	8809883a 	mov	r4,r17
   a1720:	a03ee83a 	callr	r20
   a1724:	00ffffc4 	movi	r3,-1
   a1728:	10ff7726 	beq	r2,r3,a1508 <__alt_data_end+0xfffe1508>
   a172c:	80800417 	ldw	r2,16(r16)
   a1730:	81400c17 	ldw	r5,48(r16)
   a1734:	80000115 	stw	zero,4(r16)
   a1738:	80800015 	stw	r2,0(r16)
   a173c:	28000526 	beq	r5,zero,a1754 <_fseeko_r+0x330>
   a1740:	80801004 	addi	r2,r16,64
   a1744:	28800226 	beq	r5,r2,a1750 <_fseeko_r+0x32c>
   a1748:	8809883a 	mov	r4,r17
   a174c:	00a10f40 	call	a10f4 <_free_r>
   a1750:	80000c15 	stw	zero,48(r16)
   a1754:	8080030b 	ldhu	r2,12(r16)
   a1758:	b4e7c83a 	sub	r19,r22,r19
   a175c:	10bff7cc 	andi	r2,r2,65503
   a1760:	8080030d 	sth	r2,12(r16)
   a1764:	98000b26 	beq	r19,zero,a1794 <_fseeko_r+0x370>
   a1768:	800b883a 	mov	r5,r16
   a176c:	8809883a 	mov	r4,r17
   a1770:	00a287c0 	call	a287c <__srefill_r>
   a1774:	103f641e 	bne	r2,zero,a1508 <__alt_data_end+0xfffe1508>
   a1778:	80800117 	ldw	r2,4(r16)
   a177c:	14ff6236 	bltu	r2,r19,a1508 <__alt_data_end+0xfffe1508>
   a1780:	80c00017 	ldw	r3,0(r16)
   a1784:	14c5c83a 	sub	r2,r2,r19
   a1788:	80800115 	stw	r2,4(r16)
   a178c:	1ce7883a 	add	r19,r3,r19
   a1790:	84c00015 	stw	r19,0(r16)
   a1794:	01800204 	movi	r6,8
   a1798:	000b883a 	mov	r5,zero
   a179c:	81001704 	addi	r4,r16,92
   a17a0:	00a24300 	call	a2430 <memset>
   a17a4:	0027883a 	mov	r19,zero
   a17a8:	003f3d06 	br	a14a0 <__alt_data_end+0xfffe14a0>
   a17ac:	80800417 	ldw	r2,16(r16)
   a17b0:	003f8306 	br	a15c0 <__alt_data_end+0xfffe15c0>
   a17b4:	81400717 	ldw	r5,28(r16)
   a17b8:	900f883a 	mov	r7,r18
   a17bc:	000d883a 	mov	r6,zero
   a17c0:	8809883a 	mov	r4,r17
   a17c4:	a03ee83a 	callr	r20
   a17c8:	1027883a 	mov	r19,r2
   a17cc:	00bfffc4 	movi	r2,-1
   a17d0:	98bf3226 	beq	r19,r2,a149c <__alt_data_end+0xfffe149c>
   a17d4:	8080030b 	ldhu	r2,12(r16)
   a17d8:	003f7006 	br	a159c <__alt_data_end+0xfffe159c>
   a17dc:	8140038f 	ldh	r5,14(r16)
   a17e0:	283f4716 	blt	r5,zero,a1500 <__alt_data_end+0xfffe1500>
   a17e4:	d80d883a 	mov	r6,sp
   a17e8:	8809883a 	mov	r4,r17
   a17ec:	00a18840 	call	a1884 <_fstat_r>
   a17f0:	1000041e 	bne	r2,zero,a1804 <_fseeko_r+0x3e0>
   a17f4:	d8800117 	ldw	r2,4(sp)
   a17f8:	00e00014 	movui	r3,32768
   a17fc:	10bc000c 	andi	r2,r2,61440
   a1800:	10ff7c26 	beq	r2,r3,a15f4 <__alt_data_end+0xfffe15f4>
   a1804:	8080030b 	ldhu	r2,12(r16)
   a1808:	003f3d06 	br	a1500 <__alt_data_end+0xfffe1500>
   a180c:	800b883a 	mov	r5,r16
   a1810:	8809883a 	mov	r4,r17
   a1814:	00a1a680 	call	a1a68 <__smakebuf_r>
   a1818:	003f3106 	br	a14e0 <__alt_data_end+0xfffe14e0>
   a181c:	81400717 	ldw	r5,28(r16)
   a1820:	01c00044 	movi	r7,1
   a1824:	000d883a 	mov	r6,zero
   a1828:	8809883a 	mov	r4,r17
   a182c:	a03ee83a 	callr	r20
   a1830:	00ffffc4 	movi	r3,-1
   a1834:	10ff7b1e 	bne	r2,r3,a1624 <__alt_data_end+0xfffe1624>
   a1838:	003f3306 	br	a1508 <__alt_data_end+0xfffe1508>
   a183c:	80c00017 	ldw	r3,0(r16)
   a1840:	80800417 	ldw	r2,16(r16)
   a1844:	000b883a 	mov	r5,zero
   a1848:	1887c83a 	sub	r3,r3,r2
   a184c:	98e7c83a 	sub	r19,r19,r3
   a1850:	30c7883a 	add	r3,r6,r3
   a1854:	003f7f06 	br	a1654 <__alt_data_end+0xfffe1654>
   a1858:	00800744 	movi	r2,29
   a185c:	88800015 	stw	r2,0(r17)
   a1860:	04ffffc4 	movi	r19,-1
   a1864:	003f0e06 	br	a14a0 <__alt_data_end+0xfffe14a0>

000a1868 <fseeko>:
   a1868:	008002f4 	movhi	r2,11
   a186c:	108c9504 	addi	r2,r2,12884
   a1870:	300f883a 	mov	r7,r6
   a1874:	280d883a 	mov	r6,r5
   a1878:	200b883a 	mov	r5,r4
   a187c:	11000017 	ldw	r4,0(r2)
   a1880:	00a14241 	jmpi	a1424 <_fseeko_r>

000a1884 <_fstat_r>:
   a1884:	defffd04 	addi	sp,sp,-12
   a1888:	2805883a 	mov	r2,r5
   a188c:	dc000015 	stw	r16,0(sp)
   a1890:	040002f4 	movhi	r16,11
   a1894:	dc400115 	stw	r17,4(sp)
   a1898:	8413ad04 	addi	r16,r16,20148
   a189c:	2023883a 	mov	r17,r4
   a18a0:	300b883a 	mov	r5,r6
   a18a4:	1009883a 	mov	r4,r2
   a18a8:	dfc00215 	stw	ra,8(sp)
   a18ac:	80000015 	stw	zero,0(r16)
   a18b0:	00ae3280 	call	ae328 <fstat>
   a18b4:	00ffffc4 	movi	r3,-1
   a18b8:	10c00526 	beq	r2,r3,a18d0 <_fstat_r+0x4c>
   a18bc:	dfc00217 	ldw	ra,8(sp)
   a18c0:	dc400117 	ldw	r17,4(sp)
   a18c4:	dc000017 	ldw	r16,0(sp)
   a18c8:	dec00304 	addi	sp,sp,12
   a18cc:	f800283a 	ret
   a18d0:	80c00017 	ldw	r3,0(r16)
   a18d4:	183ff926 	beq	r3,zero,a18bc <__alt_data_end+0xfffe18bc>
   a18d8:	88c00015 	stw	r3,0(r17)
   a18dc:	003ff706 	br	a18bc <__alt_data_end+0xfffe18bc>

000a18e0 <_fwalk>:
   a18e0:	defff704 	addi	sp,sp,-36
   a18e4:	dd000415 	stw	r20,16(sp)
   a18e8:	dfc00815 	stw	ra,32(sp)
   a18ec:	ddc00715 	stw	r23,28(sp)
   a18f0:	dd800615 	stw	r22,24(sp)
   a18f4:	dd400515 	stw	r21,20(sp)
   a18f8:	dcc00315 	stw	r19,12(sp)
   a18fc:	dc800215 	stw	r18,8(sp)
   a1900:	dc400115 	stw	r17,4(sp)
   a1904:	dc000015 	stw	r16,0(sp)
   a1908:	2500b804 	addi	r20,r4,736
   a190c:	a0002326 	beq	r20,zero,a199c <_fwalk+0xbc>
   a1910:	282b883a 	mov	r21,r5
   a1914:	002f883a 	mov	r23,zero
   a1918:	05800044 	movi	r22,1
   a191c:	04ffffc4 	movi	r19,-1
   a1920:	a4400117 	ldw	r17,4(r20)
   a1924:	a4800217 	ldw	r18,8(r20)
   a1928:	8c7fffc4 	addi	r17,r17,-1
   a192c:	88000d16 	blt	r17,zero,a1964 <_fwalk+0x84>
   a1930:	94000304 	addi	r16,r18,12
   a1934:	94800384 	addi	r18,r18,14
   a1938:	8080000b 	ldhu	r2,0(r16)
   a193c:	8c7fffc4 	addi	r17,r17,-1
   a1940:	813ffd04 	addi	r4,r16,-12
   a1944:	b080042e 	bgeu	r22,r2,a1958 <_fwalk+0x78>
   a1948:	9080000f 	ldh	r2,0(r18)
   a194c:	14c00226 	beq	r2,r19,a1958 <_fwalk+0x78>
   a1950:	a83ee83a 	callr	r21
   a1954:	b8aeb03a 	or	r23,r23,r2
   a1958:	84001a04 	addi	r16,r16,104
   a195c:	94801a04 	addi	r18,r18,104
   a1960:	8cfff51e 	bne	r17,r19,a1938 <__alt_data_end+0xfffe1938>
   a1964:	a5000017 	ldw	r20,0(r20)
   a1968:	a03fed1e 	bne	r20,zero,a1920 <__alt_data_end+0xfffe1920>
   a196c:	b805883a 	mov	r2,r23
   a1970:	dfc00817 	ldw	ra,32(sp)
   a1974:	ddc00717 	ldw	r23,28(sp)
   a1978:	dd800617 	ldw	r22,24(sp)
   a197c:	dd400517 	ldw	r21,20(sp)
   a1980:	dd000417 	ldw	r20,16(sp)
   a1984:	dcc00317 	ldw	r19,12(sp)
   a1988:	dc800217 	ldw	r18,8(sp)
   a198c:	dc400117 	ldw	r17,4(sp)
   a1990:	dc000017 	ldw	r16,0(sp)
   a1994:	dec00904 	addi	sp,sp,36
   a1998:	f800283a 	ret
   a199c:	002f883a 	mov	r23,zero
   a19a0:	003ff206 	br	a196c <__alt_data_end+0xfffe196c>

000a19a4 <_fwalk_reent>:
   a19a4:	defff704 	addi	sp,sp,-36
   a19a8:	dd000415 	stw	r20,16(sp)
   a19ac:	dfc00815 	stw	ra,32(sp)
   a19b0:	ddc00715 	stw	r23,28(sp)
   a19b4:	dd800615 	stw	r22,24(sp)
   a19b8:	dd400515 	stw	r21,20(sp)
   a19bc:	dcc00315 	stw	r19,12(sp)
   a19c0:	dc800215 	stw	r18,8(sp)
   a19c4:	dc400115 	stw	r17,4(sp)
   a19c8:	dc000015 	stw	r16,0(sp)
   a19cc:	2500b804 	addi	r20,r4,736
   a19d0:	a0002326 	beq	r20,zero,a1a60 <_fwalk_reent+0xbc>
   a19d4:	282b883a 	mov	r21,r5
   a19d8:	2027883a 	mov	r19,r4
   a19dc:	002f883a 	mov	r23,zero
   a19e0:	05800044 	movi	r22,1
   a19e4:	04bfffc4 	movi	r18,-1
   a19e8:	a4400117 	ldw	r17,4(r20)
   a19ec:	a4000217 	ldw	r16,8(r20)
   a19f0:	8c7fffc4 	addi	r17,r17,-1
   a19f4:	88000c16 	blt	r17,zero,a1a28 <_fwalk_reent+0x84>
   a19f8:	84000304 	addi	r16,r16,12
   a19fc:	8080000b 	ldhu	r2,0(r16)
   a1a00:	8c7fffc4 	addi	r17,r17,-1
   a1a04:	817ffd04 	addi	r5,r16,-12
   a1a08:	b080052e 	bgeu	r22,r2,a1a20 <_fwalk_reent+0x7c>
   a1a0c:	8080008f 	ldh	r2,2(r16)
   a1a10:	9809883a 	mov	r4,r19
   a1a14:	14800226 	beq	r2,r18,a1a20 <_fwalk_reent+0x7c>
   a1a18:	a83ee83a 	callr	r21
   a1a1c:	b8aeb03a 	or	r23,r23,r2
   a1a20:	84001a04 	addi	r16,r16,104
   a1a24:	8cbff51e 	bne	r17,r18,a19fc <__alt_data_end+0xfffe19fc>
   a1a28:	a5000017 	ldw	r20,0(r20)
   a1a2c:	a03fee1e 	bne	r20,zero,a19e8 <__alt_data_end+0xfffe19e8>
   a1a30:	b805883a 	mov	r2,r23
   a1a34:	dfc00817 	ldw	ra,32(sp)
   a1a38:	ddc00717 	ldw	r23,28(sp)
   a1a3c:	dd800617 	ldw	r22,24(sp)
   a1a40:	dd400517 	ldw	r21,20(sp)
   a1a44:	dd000417 	ldw	r20,16(sp)
   a1a48:	dcc00317 	ldw	r19,12(sp)
   a1a4c:	dc800217 	ldw	r18,8(sp)
   a1a50:	dc400117 	ldw	r17,4(sp)
   a1a54:	dc000017 	ldw	r16,0(sp)
   a1a58:	dec00904 	addi	sp,sp,36
   a1a5c:	f800283a 	ret
   a1a60:	002f883a 	mov	r23,zero
   a1a64:	003ff206 	br	a1a30 <__alt_data_end+0xfffe1a30>

000a1a68 <__smakebuf_r>:
   a1a68:	2880030b 	ldhu	r2,12(r5)
   a1a6c:	10c0008c 	andi	r3,r2,2
   a1a70:	1800411e 	bne	r3,zero,a1b78 <__smakebuf_r+0x110>
   a1a74:	deffec04 	addi	sp,sp,-80
   a1a78:	dc000f15 	stw	r16,60(sp)
   a1a7c:	2821883a 	mov	r16,r5
   a1a80:	2940038f 	ldh	r5,14(r5)
   a1a84:	dc401015 	stw	r17,64(sp)
   a1a88:	dfc01315 	stw	ra,76(sp)
   a1a8c:	dcc01215 	stw	r19,72(sp)
   a1a90:	dc801115 	stw	r18,68(sp)
   a1a94:	2023883a 	mov	r17,r4
   a1a98:	28001c16 	blt	r5,zero,a1b0c <__smakebuf_r+0xa4>
   a1a9c:	d80d883a 	mov	r6,sp
   a1aa0:	00a18840 	call	a1884 <_fstat_r>
   a1aa4:	10001816 	blt	r2,zero,a1b08 <__smakebuf_r+0xa0>
   a1aa8:	d8800117 	ldw	r2,4(sp)
   a1aac:	00e00014 	movui	r3,32768
   a1ab0:	10bc000c 	andi	r2,r2,61440
   a1ab4:	14c80020 	cmpeqi	r19,r2,8192
   a1ab8:	10c03726 	beq	r2,r3,a1b98 <__smakebuf_r+0x130>
   a1abc:	80c0030b 	ldhu	r3,12(r16)
   a1ac0:	18c20014 	ori	r3,r3,2048
   a1ac4:	80c0030d 	sth	r3,12(r16)
   a1ac8:	00c80004 	movi	r3,8192
   a1acc:	10c0521e 	bne	r2,r3,a1c18 <__smakebuf_r+0x1b0>
   a1ad0:	8140038f 	ldh	r5,14(r16)
   a1ad4:	8809883a 	mov	r4,r17
   a1ad8:	00a72c40 	call	a72c4 <_isatty_r>
   a1adc:	10004c26 	beq	r2,zero,a1c10 <__smakebuf_r+0x1a8>
   a1ae0:	8080030b 	ldhu	r2,12(r16)
   a1ae4:	80c010c4 	addi	r3,r16,67
   a1ae8:	80c00015 	stw	r3,0(r16)
   a1aec:	10800054 	ori	r2,r2,1
   a1af0:	8080030d 	sth	r2,12(r16)
   a1af4:	00800044 	movi	r2,1
   a1af8:	80c00415 	stw	r3,16(r16)
   a1afc:	80800515 	stw	r2,20(r16)
   a1b00:	04810004 	movi	r18,1024
   a1b04:	00000706 	br	a1b24 <__smakebuf_r+0xbc>
   a1b08:	8080030b 	ldhu	r2,12(r16)
   a1b0c:	10c0200c 	andi	r3,r2,128
   a1b10:	18001f1e 	bne	r3,zero,a1b90 <__smakebuf_r+0x128>
   a1b14:	04810004 	movi	r18,1024
   a1b18:	10820014 	ori	r2,r2,2048
   a1b1c:	8080030d 	sth	r2,12(r16)
   a1b20:	0027883a 	mov	r19,zero
   a1b24:	900b883a 	mov	r5,r18
   a1b28:	8809883a 	mov	r4,r17
   a1b2c:	00a1c240 	call	a1c24 <_malloc_r>
   a1b30:	10002c26 	beq	r2,zero,a1be4 <__smakebuf_r+0x17c>
   a1b34:	80c0030b 	ldhu	r3,12(r16)
   a1b38:	010002b4 	movhi	r4,10
   a1b3c:	21028c04 	addi	r4,r4,2608
   a1b40:	89000f15 	stw	r4,60(r17)
   a1b44:	18c02014 	ori	r3,r3,128
   a1b48:	80c0030d 	sth	r3,12(r16)
   a1b4c:	80800015 	stw	r2,0(r16)
   a1b50:	80800415 	stw	r2,16(r16)
   a1b54:	84800515 	stw	r18,20(r16)
   a1b58:	98001a1e 	bne	r19,zero,a1bc4 <__smakebuf_r+0x15c>
   a1b5c:	dfc01317 	ldw	ra,76(sp)
   a1b60:	dcc01217 	ldw	r19,72(sp)
   a1b64:	dc801117 	ldw	r18,68(sp)
   a1b68:	dc401017 	ldw	r17,64(sp)
   a1b6c:	dc000f17 	ldw	r16,60(sp)
   a1b70:	dec01404 	addi	sp,sp,80
   a1b74:	f800283a 	ret
   a1b78:	288010c4 	addi	r2,r5,67
   a1b7c:	28800015 	stw	r2,0(r5)
   a1b80:	28800415 	stw	r2,16(r5)
   a1b84:	00800044 	movi	r2,1
   a1b88:	28800515 	stw	r2,20(r5)
   a1b8c:	f800283a 	ret
   a1b90:	04801004 	movi	r18,64
   a1b94:	003fe006 	br	a1b18 <__alt_data_end+0xfffe1b18>
   a1b98:	81000a17 	ldw	r4,40(r16)
   a1b9c:	00c002b4 	movhi	r3,10
   a1ba0:	18cadf04 	addi	r3,r3,11132
   a1ba4:	20ffc51e 	bne	r4,r3,a1abc <__alt_data_end+0xfffe1abc>
   a1ba8:	8080030b 	ldhu	r2,12(r16)
   a1bac:	04810004 	movi	r18,1024
   a1bb0:	84801315 	stw	r18,76(r16)
   a1bb4:	1484b03a 	or	r2,r2,r18
   a1bb8:	8080030d 	sth	r2,12(r16)
   a1bbc:	0027883a 	mov	r19,zero
   a1bc0:	003fd806 	br	a1b24 <__alt_data_end+0xfffe1b24>
   a1bc4:	8140038f 	ldh	r5,14(r16)
   a1bc8:	8809883a 	mov	r4,r17
   a1bcc:	00a72c40 	call	a72c4 <_isatty_r>
   a1bd0:	103fe226 	beq	r2,zero,a1b5c <__alt_data_end+0xfffe1b5c>
   a1bd4:	8080030b 	ldhu	r2,12(r16)
   a1bd8:	10800054 	ori	r2,r2,1
   a1bdc:	8080030d 	sth	r2,12(r16)
   a1be0:	003fde06 	br	a1b5c <__alt_data_end+0xfffe1b5c>
   a1be4:	8080030b 	ldhu	r2,12(r16)
   a1be8:	10c0800c 	andi	r3,r2,512
   a1bec:	183fdb1e 	bne	r3,zero,a1b5c <__alt_data_end+0xfffe1b5c>
   a1bf0:	10800094 	ori	r2,r2,2
   a1bf4:	80c010c4 	addi	r3,r16,67
   a1bf8:	8080030d 	sth	r2,12(r16)
   a1bfc:	00800044 	movi	r2,1
   a1c00:	80c00015 	stw	r3,0(r16)
   a1c04:	80c00415 	stw	r3,16(r16)
   a1c08:	80800515 	stw	r2,20(r16)
   a1c0c:	003fd306 	br	a1b5c <__alt_data_end+0xfffe1b5c>
   a1c10:	04810004 	movi	r18,1024
   a1c14:	003fc306 	br	a1b24 <__alt_data_end+0xfffe1b24>
   a1c18:	0027883a 	mov	r19,zero
   a1c1c:	04810004 	movi	r18,1024
   a1c20:	003fc006 	br	a1b24 <__alt_data_end+0xfffe1b24>

000a1c24 <_malloc_r>:
   a1c24:	defff504 	addi	sp,sp,-44
   a1c28:	dc800315 	stw	r18,12(sp)
   a1c2c:	dfc00a15 	stw	ra,40(sp)
   a1c30:	df000915 	stw	fp,36(sp)
   a1c34:	ddc00815 	stw	r23,32(sp)
   a1c38:	dd800715 	stw	r22,28(sp)
   a1c3c:	dd400615 	stw	r21,24(sp)
   a1c40:	dd000515 	stw	r20,20(sp)
   a1c44:	dcc00415 	stw	r19,16(sp)
   a1c48:	dc400215 	stw	r17,8(sp)
   a1c4c:	dc000115 	stw	r16,4(sp)
   a1c50:	288002c4 	addi	r2,r5,11
   a1c54:	00c00584 	movi	r3,22
   a1c58:	2025883a 	mov	r18,r4
   a1c5c:	18807f2e 	bgeu	r3,r2,a1e5c <_malloc_r+0x238>
   a1c60:	047ffe04 	movi	r17,-8
   a1c64:	1462703a 	and	r17,r2,r17
   a1c68:	8800a316 	blt	r17,zero,a1ef8 <_malloc_r+0x2d4>
   a1c6c:	8940a236 	bltu	r17,r5,a1ef8 <_malloc_r+0x2d4>
   a1c70:	00ae7480 	call	ae748 <__malloc_lock>
   a1c74:	00807dc4 	movi	r2,503
   a1c78:	1441e92e 	bgeu	r2,r17,a2420 <_malloc_r+0x7fc>
   a1c7c:	8804d27a 	srli	r2,r17,9
   a1c80:	1000a126 	beq	r2,zero,a1f08 <_malloc_r+0x2e4>
   a1c84:	00c00104 	movi	r3,4
   a1c88:	18811e36 	bltu	r3,r2,a2104 <_malloc_r+0x4e0>
   a1c8c:	8804d1ba 	srli	r2,r17,6
   a1c90:	12000e44 	addi	r8,r2,57
   a1c94:	11c00e04 	addi	r7,r2,56
   a1c98:	4209883a 	add	r4,r8,r8
   a1c9c:	04c002f4 	movhi	r19,11
   a1ca0:	2109883a 	add	r4,r4,r4
   a1ca4:	9cc6e804 	addi	r19,r19,7072
   a1ca8:	2109883a 	add	r4,r4,r4
   a1cac:	9909883a 	add	r4,r19,r4
   a1cb0:	24000117 	ldw	r16,4(r4)
   a1cb4:	213ffe04 	addi	r4,r4,-8
   a1cb8:	24009726 	beq	r4,r16,a1f18 <_malloc_r+0x2f4>
   a1cbc:	80800117 	ldw	r2,4(r16)
   a1cc0:	01bfff04 	movi	r6,-4
   a1cc4:	014003c4 	movi	r5,15
   a1cc8:	1184703a 	and	r2,r2,r6
   a1ccc:	1447c83a 	sub	r3,r2,r17
   a1cd0:	28c00716 	blt	r5,r3,a1cf0 <_malloc_r+0xcc>
   a1cd4:	1800920e 	bge	r3,zero,a1f20 <_malloc_r+0x2fc>
   a1cd8:	84000317 	ldw	r16,12(r16)
   a1cdc:	24008e26 	beq	r4,r16,a1f18 <_malloc_r+0x2f4>
   a1ce0:	80800117 	ldw	r2,4(r16)
   a1ce4:	1184703a 	and	r2,r2,r6
   a1ce8:	1447c83a 	sub	r3,r2,r17
   a1cec:	28fff90e 	bge	r5,r3,a1cd4 <__alt_data_end+0xfffe1cd4>
   a1cf0:	3809883a 	mov	r4,r7
   a1cf4:	018002f4 	movhi	r6,11
   a1cf8:	9c000417 	ldw	r16,16(r19)
   a1cfc:	3186e804 	addi	r6,r6,7072
   a1d00:	32000204 	addi	r8,r6,8
   a1d04:	82013426 	beq	r16,r8,a21d8 <_malloc_r+0x5b4>
   a1d08:	80c00117 	ldw	r3,4(r16)
   a1d0c:	00bfff04 	movi	r2,-4
   a1d10:	188e703a 	and	r7,r3,r2
   a1d14:	3c45c83a 	sub	r2,r7,r17
   a1d18:	00c003c4 	movi	r3,15
   a1d1c:	18811f16 	blt	r3,r2,a219c <_malloc_r+0x578>
   a1d20:	32000515 	stw	r8,20(r6)
   a1d24:	32000415 	stw	r8,16(r6)
   a1d28:	10007f0e 	bge	r2,zero,a1f28 <_malloc_r+0x304>
   a1d2c:	00807fc4 	movi	r2,511
   a1d30:	11c0fd36 	bltu	r2,r7,a2128 <_malloc_r+0x504>
   a1d34:	3806d0fa 	srli	r3,r7,3
   a1d38:	01c00044 	movi	r7,1
   a1d3c:	30800117 	ldw	r2,4(r6)
   a1d40:	19400044 	addi	r5,r3,1
   a1d44:	294b883a 	add	r5,r5,r5
   a1d48:	1807d0ba 	srai	r3,r3,2
   a1d4c:	294b883a 	add	r5,r5,r5
   a1d50:	294b883a 	add	r5,r5,r5
   a1d54:	298b883a 	add	r5,r5,r6
   a1d58:	38c6983a 	sll	r3,r7,r3
   a1d5c:	29c00017 	ldw	r7,0(r5)
   a1d60:	2a7ffe04 	addi	r9,r5,-8
   a1d64:	1886b03a 	or	r3,r3,r2
   a1d68:	82400315 	stw	r9,12(r16)
   a1d6c:	81c00215 	stw	r7,8(r16)
   a1d70:	30c00115 	stw	r3,4(r6)
   a1d74:	2c000015 	stw	r16,0(r5)
   a1d78:	3c000315 	stw	r16,12(r7)
   a1d7c:	2005d0ba 	srai	r2,r4,2
   a1d80:	01400044 	movi	r5,1
   a1d84:	288a983a 	sll	r5,r5,r2
   a1d88:	19406f36 	bltu	r3,r5,a1f48 <_malloc_r+0x324>
   a1d8c:	28c4703a 	and	r2,r5,r3
   a1d90:	10000a1e 	bne	r2,zero,a1dbc <_malloc_r+0x198>
   a1d94:	00bfff04 	movi	r2,-4
   a1d98:	294b883a 	add	r5,r5,r5
   a1d9c:	2088703a 	and	r4,r4,r2
   a1da0:	28c4703a 	and	r2,r5,r3
   a1da4:	21000104 	addi	r4,r4,4
   a1da8:	1000041e 	bne	r2,zero,a1dbc <_malloc_r+0x198>
   a1dac:	294b883a 	add	r5,r5,r5
   a1db0:	28c4703a 	and	r2,r5,r3
   a1db4:	21000104 	addi	r4,r4,4
   a1db8:	103ffc26 	beq	r2,zero,a1dac <__alt_data_end+0xfffe1dac>
   a1dbc:	02bfff04 	movi	r10,-4
   a1dc0:	024003c4 	movi	r9,15
   a1dc4:	21800044 	addi	r6,r4,1
   a1dc8:	318d883a 	add	r6,r6,r6
   a1dcc:	318d883a 	add	r6,r6,r6
   a1dd0:	318d883a 	add	r6,r6,r6
   a1dd4:	998d883a 	add	r6,r19,r6
   a1dd8:	333ffe04 	addi	r12,r6,-8
   a1ddc:	2017883a 	mov	r11,r4
   a1de0:	31800104 	addi	r6,r6,4
   a1de4:	34000017 	ldw	r16,0(r6)
   a1de8:	31fffd04 	addi	r7,r6,-12
   a1dec:	81c0041e 	bne	r16,r7,a1e00 <_malloc_r+0x1dc>
   a1df0:	0000fb06 	br	a21e0 <_malloc_r+0x5bc>
   a1df4:	1801030e 	bge	r3,zero,a2204 <_malloc_r+0x5e0>
   a1df8:	84000317 	ldw	r16,12(r16)
   a1dfc:	81c0f826 	beq	r16,r7,a21e0 <_malloc_r+0x5bc>
   a1e00:	80800117 	ldw	r2,4(r16)
   a1e04:	1284703a 	and	r2,r2,r10
   a1e08:	1447c83a 	sub	r3,r2,r17
   a1e0c:	48fff90e 	bge	r9,r3,a1df4 <__alt_data_end+0xfffe1df4>
   a1e10:	80800317 	ldw	r2,12(r16)
   a1e14:	81000217 	ldw	r4,8(r16)
   a1e18:	89400054 	ori	r5,r17,1
   a1e1c:	81400115 	stw	r5,4(r16)
   a1e20:	20800315 	stw	r2,12(r4)
   a1e24:	11000215 	stw	r4,8(r2)
   a1e28:	8463883a 	add	r17,r16,r17
   a1e2c:	9c400515 	stw	r17,20(r19)
   a1e30:	9c400415 	stw	r17,16(r19)
   a1e34:	18800054 	ori	r2,r3,1
   a1e38:	88800115 	stw	r2,4(r17)
   a1e3c:	8a000315 	stw	r8,12(r17)
   a1e40:	8a000215 	stw	r8,8(r17)
   a1e44:	88e3883a 	add	r17,r17,r3
   a1e48:	88c00015 	stw	r3,0(r17)
   a1e4c:	9009883a 	mov	r4,r18
   a1e50:	00ae76c0 	call	ae76c <__malloc_unlock>
   a1e54:	80800204 	addi	r2,r16,8
   a1e58:	00001b06 	br	a1ec8 <_malloc_r+0x2a4>
   a1e5c:	04400404 	movi	r17,16
   a1e60:	89402536 	bltu	r17,r5,a1ef8 <_malloc_r+0x2d4>
   a1e64:	00ae7480 	call	ae748 <__malloc_lock>
   a1e68:	00800184 	movi	r2,6
   a1e6c:	01000084 	movi	r4,2
   a1e70:	04c002f4 	movhi	r19,11
   a1e74:	1085883a 	add	r2,r2,r2
   a1e78:	9cc6e804 	addi	r19,r19,7072
   a1e7c:	1085883a 	add	r2,r2,r2
   a1e80:	9885883a 	add	r2,r19,r2
   a1e84:	14000117 	ldw	r16,4(r2)
   a1e88:	10fffe04 	addi	r3,r2,-8
   a1e8c:	80c0d926 	beq	r16,r3,a21f4 <_malloc_r+0x5d0>
   a1e90:	80c00117 	ldw	r3,4(r16)
   a1e94:	81000317 	ldw	r4,12(r16)
   a1e98:	00bfff04 	movi	r2,-4
   a1e9c:	1884703a 	and	r2,r3,r2
   a1ea0:	81400217 	ldw	r5,8(r16)
   a1ea4:	8085883a 	add	r2,r16,r2
   a1ea8:	10c00117 	ldw	r3,4(r2)
   a1eac:	29000315 	stw	r4,12(r5)
   a1eb0:	21400215 	stw	r5,8(r4)
   a1eb4:	18c00054 	ori	r3,r3,1
   a1eb8:	10c00115 	stw	r3,4(r2)
   a1ebc:	9009883a 	mov	r4,r18
   a1ec0:	00ae76c0 	call	ae76c <__malloc_unlock>
   a1ec4:	80800204 	addi	r2,r16,8
   a1ec8:	dfc00a17 	ldw	ra,40(sp)
   a1ecc:	df000917 	ldw	fp,36(sp)
   a1ed0:	ddc00817 	ldw	r23,32(sp)
   a1ed4:	dd800717 	ldw	r22,28(sp)
   a1ed8:	dd400617 	ldw	r21,24(sp)
   a1edc:	dd000517 	ldw	r20,20(sp)
   a1ee0:	dcc00417 	ldw	r19,16(sp)
   a1ee4:	dc800317 	ldw	r18,12(sp)
   a1ee8:	dc400217 	ldw	r17,8(sp)
   a1eec:	dc000117 	ldw	r16,4(sp)
   a1ef0:	dec00b04 	addi	sp,sp,44
   a1ef4:	f800283a 	ret
   a1ef8:	00800304 	movi	r2,12
   a1efc:	90800015 	stw	r2,0(r18)
   a1f00:	0005883a 	mov	r2,zero
   a1f04:	003ff006 	br	a1ec8 <__alt_data_end+0xfffe1ec8>
   a1f08:	01002004 	movi	r4,128
   a1f0c:	02001004 	movi	r8,64
   a1f10:	01c00fc4 	movi	r7,63
   a1f14:	003f6106 	br	a1c9c <__alt_data_end+0xfffe1c9c>
   a1f18:	4009883a 	mov	r4,r8
   a1f1c:	003f7506 	br	a1cf4 <__alt_data_end+0xfffe1cf4>
   a1f20:	81000317 	ldw	r4,12(r16)
   a1f24:	003fde06 	br	a1ea0 <__alt_data_end+0xfffe1ea0>
   a1f28:	81c5883a 	add	r2,r16,r7
   a1f2c:	11400117 	ldw	r5,4(r2)
   a1f30:	9009883a 	mov	r4,r18
   a1f34:	29400054 	ori	r5,r5,1
   a1f38:	11400115 	stw	r5,4(r2)
   a1f3c:	00ae76c0 	call	ae76c <__malloc_unlock>
   a1f40:	80800204 	addi	r2,r16,8
   a1f44:	003fe006 	br	a1ec8 <__alt_data_end+0xfffe1ec8>
   a1f48:	9c000217 	ldw	r16,8(r19)
   a1f4c:	00bfff04 	movi	r2,-4
   a1f50:	85800117 	ldw	r22,4(r16)
   a1f54:	b0ac703a 	and	r22,r22,r2
   a1f58:	b4400336 	bltu	r22,r17,a1f68 <_malloc_r+0x344>
   a1f5c:	b445c83a 	sub	r2,r22,r17
   a1f60:	00c003c4 	movi	r3,15
   a1f64:	18805d16 	blt	r3,r2,a20dc <_malloc_r+0x4b8>
   a1f68:	05c002f4 	movhi	r23,11
   a1f6c:	008002f4 	movhi	r2,11
   a1f70:	1093b004 	addi	r2,r2,20160
   a1f74:	bdcc9604 	addi	r23,r23,12888
   a1f78:	15400017 	ldw	r21,0(r2)
   a1f7c:	b8c00017 	ldw	r3,0(r23)
   a1f80:	00bfffc4 	movi	r2,-1
   a1f84:	858d883a 	add	r6,r16,r22
   a1f88:	8d6b883a 	add	r21,r17,r21
   a1f8c:	1880ea26 	beq	r3,r2,a2338 <_malloc_r+0x714>
   a1f90:	ad4403c4 	addi	r21,r21,4111
   a1f94:	00bc0004 	movi	r2,-4096
   a1f98:	a8aa703a 	and	r21,r21,r2
   a1f9c:	a80b883a 	mov	r5,r21
   a1fa0:	9009883a 	mov	r4,r18
   a1fa4:	d9800015 	stw	r6,0(sp)
   a1fa8:	00a2a500 	call	a2a50 <_sbrk_r>
   a1fac:	1029883a 	mov	r20,r2
   a1fb0:	00bfffc4 	movi	r2,-1
   a1fb4:	d9800017 	ldw	r6,0(sp)
   a1fb8:	a080e826 	beq	r20,r2,a235c <_malloc_r+0x738>
   a1fbc:	a180a636 	bltu	r20,r6,a2258 <_malloc_r+0x634>
   a1fc0:	070002f4 	movhi	fp,11
   a1fc4:	e713bb04 	addi	fp,fp,20204
   a1fc8:	e0800017 	ldw	r2,0(fp)
   a1fcc:	a887883a 	add	r3,r21,r2
   a1fd0:	e0c00015 	stw	r3,0(fp)
   a1fd4:	3500e626 	beq	r6,r20,a2370 <_malloc_r+0x74c>
   a1fd8:	b9000017 	ldw	r4,0(r23)
   a1fdc:	00bfffc4 	movi	r2,-1
   a1fe0:	2080ee26 	beq	r4,r2,a239c <_malloc_r+0x778>
   a1fe4:	a185c83a 	sub	r2,r20,r6
   a1fe8:	10c5883a 	add	r2,r2,r3
   a1fec:	e0800015 	stw	r2,0(fp)
   a1ff0:	a0c001cc 	andi	r3,r20,7
   a1ff4:	1800bc26 	beq	r3,zero,a22e8 <_malloc_r+0x6c4>
   a1ff8:	a0e9c83a 	sub	r20,r20,r3
   a1ffc:	00840204 	movi	r2,4104
   a2000:	a5000204 	addi	r20,r20,8
   a2004:	10c7c83a 	sub	r3,r2,r3
   a2008:	a545883a 	add	r2,r20,r21
   a200c:	1083ffcc 	andi	r2,r2,4095
   a2010:	18abc83a 	sub	r21,r3,r2
   a2014:	a80b883a 	mov	r5,r21
   a2018:	9009883a 	mov	r4,r18
   a201c:	00a2a500 	call	a2a50 <_sbrk_r>
   a2020:	00ffffc4 	movi	r3,-1
   a2024:	10c0e126 	beq	r2,r3,a23ac <_malloc_r+0x788>
   a2028:	1505c83a 	sub	r2,r2,r20
   a202c:	1545883a 	add	r2,r2,r21
   a2030:	10800054 	ori	r2,r2,1
   a2034:	e0c00017 	ldw	r3,0(fp)
   a2038:	9d000215 	stw	r20,8(r19)
   a203c:	a0800115 	stw	r2,4(r20)
   a2040:	a8c7883a 	add	r3,r21,r3
   a2044:	e0c00015 	stw	r3,0(fp)
   a2048:	84c00e26 	beq	r16,r19,a2084 <_malloc_r+0x460>
   a204c:	018003c4 	movi	r6,15
   a2050:	3580a72e 	bgeu	r6,r22,a22f0 <_malloc_r+0x6cc>
   a2054:	81400117 	ldw	r5,4(r16)
   a2058:	013ffe04 	movi	r4,-8
   a205c:	b0bffd04 	addi	r2,r22,-12
   a2060:	1104703a 	and	r2,r2,r4
   a2064:	2900004c 	andi	r4,r5,1
   a2068:	2088b03a 	or	r4,r4,r2
   a206c:	81000115 	stw	r4,4(r16)
   a2070:	01400144 	movi	r5,5
   a2074:	8089883a 	add	r4,r16,r2
   a2078:	21400115 	stw	r5,4(r4)
   a207c:	21400215 	stw	r5,8(r4)
   a2080:	3080cd36 	bltu	r6,r2,a23b8 <_malloc_r+0x794>
   a2084:	008002f4 	movhi	r2,11
   a2088:	1093af04 	addi	r2,r2,20156
   a208c:	11000017 	ldw	r4,0(r2)
   a2090:	20c0012e 	bgeu	r4,r3,a2098 <_malloc_r+0x474>
   a2094:	10c00015 	stw	r3,0(r2)
   a2098:	008002f4 	movhi	r2,11
   a209c:	1093ae04 	addi	r2,r2,20152
   a20a0:	11000017 	ldw	r4,0(r2)
   a20a4:	9c000217 	ldw	r16,8(r19)
   a20a8:	20c0012e 	bgeu	r4,r3,a20b0 <_malloc_r+0x48c>
   a20ac:	10c00015 	stw	r3,0(r2)
   a20b0:	80c00117 	ldw	r3,4(r16)
   a20b4:	00bfff04 	movi	r2,-4
   a20b8:	1886703a 	and	r3,r3,r2
   a20bc:	1c45c83a 	sub	r2,r3,r17
   a20c0:	1c400236 	bltu	r3,r17,a20cc <_malloc_r+0x4a8>
   a20c4:	00c003c4 	movi	r3,15
   a20c8:	18800416 	blt	r3,r2,a20dc <_malloc_r+0x4b8>
   a20cc:	9009883a 	mov	r4,r18
   a20d0:	00ae76c0 	call	ae76c <__malloc_unlock>
   a20d4:	0005883a 	mov	r2,zero
   a20d8:	003f7b06 	br	a1ec8 <__alt_data_end+0xfffe1ec8>
   a20dc:	88c00054 	ori	r3,r17,1
   a20e0:	80c00115 	stw	r3,4(r16)
   a20e4:	8463883a 	add	r17,r16,r17
   a20e8:	10800054 	ori	r2,r2,1
   a20ec:	9c400215 	stw	r17,8(r19)
   a20f0:	88800115 	stw	r2,4(r17)
   a20f4:	9009883a 	mov	r4,r18
   a20f8:	00ae76c0 	call	ae76c <__malloc_unlock>
   a20fc:	80800204 	addi	r2,r16,8
   a2100:	003f7106 	br	a1ec8 <__alt_data_end+0xfffe1ec8>
   a2104:	00c00504 	movi	r3,20
   a2108:	18804a2e 	bgeu	r3,r2,a2234 <_malloc_r+0x610>
   a210c:	00c01504 	movi	r3,84
   a2110:	18806e36 	bltu	r3,r2,a22cc <_malloc_r+0x6a8>
   a2114:	8804d33a 	srli	r2,r17,12
   a2118:	12001bc4 	addi	r8,r2,111
   a211c:	11c01b84 	addi	r7,r2,110
   a2120:	4209883a 	add	r4,r8,r8
   a2124:	003edd06 	br	a1c9c <__alt_data_end+0xfffe1c9c>
   a2128:	3804d27a 	srli	r2,r7,9
   a212c:	00c00104 	movi	r3,4
   a2130:	1880442e 	bgeu	r3,r2,a2244 <_malloc_r+0x620>
   a2134:	00c00504 	movi	r3,20
   a2138:	18808136 	bltu	r3,r2,a2340 <_malloc_r+0x71c>
   a213c:	11401704 	addi	r5,r2,92
   a2140:	10c016c4 	addi	r3,r2,91
   a2144:	294b883a 	add	r5,r5,r5
   a2148:	294b883a 	add	r5,r5,r5
   a214c:	294b883a 	add	r5,r5,r5
   a2150:	994b883a 	add	r5,r19,r5
   a2154:	28800017 	ldw	r2,0(r5)
   a2158:	018002f4 	movhi	r6,11
   a215c:	297ffe04 	addi	r5,r5,-8
   a2160:	3186e804 	addi	r6,r6,7072
   a2164:	28806526 	beq	r5,r2,a22fc <_malloc_r+0x6d8>
   a2168:	01bfff04 	movi	r6,-4
   a216c:	10c00117 	ldw	r3,4(r2)
   a2170:	1986703a 	and	r3,r3,r6
   a2174:	38c0022e 	bgeu	r7,r3,a2180 <_malloc_r+0x55c>
   a2178:	10800217 	ldw	r2,8(r2)
   a217c:	28bffb1e 	bne	r5,r2,a216c <__alt_data_end+0xfffe216c>
   a2180:	11400317 	ldw	r5,12(r2)
   a2184:	98c00117 	ldw	r3,4(r19)
   a2188:	81400315 	stw	r5,12(r16)
   a218c:	80800215 	stw	r2,8(r16)
   a2190:	2c000215 	stw	r16,8(r5)
   a2194:	14000315 	stw	r16,12(r2)
   a2198:	003ef806 	br	a1d7c <__alt_data_end+0xfffe1d7c>
   a219c:	88c00054 	ori	r3,r17,1
   a21a0:	80c00115 	stw	r3,4(r16)
   a21a4:	8463883a 	add	r17,r16,r17
   a21a8:	34400515 	stw	r17,20(r6)
   a21ac:	34400415 	stw	r17,16(r6)
   a21b0:	10c00054 	ori	r3,r2,1
   a21b4:	8a000315 	stw	r8,12(r17)
   a21b8:	8a000215 	stw	r8,8(r17)
   a21bc:	88c00115 	stw	r3,4(r17)
   a21c0:	88a3883a 	add	r17,r17,r2
   a21c4:	88800015 	stw	r2,0(r17)
   a21c8:	9009883a 	mov	r4,r18
   a21cc:	00ae76c0 	call	ae76c <__malloc_unlock>
   a21d0:	80800204 	addi	r2,r16,8
   a21d4:	003f3c06 	br	a1ec8 <__alt_data_end+0xfffe1ec8>
   a21d8:	30c00117 	ldw	r3,4(r6)
   a21dc:	003ee706 	br	a1d7c <__alt_data_end+0xfffe1d7c>
   a21e0:	5ac00044 	addi	r11,r11,1
   a21e4:	588000cc 	andi	r2,r11,3
   a21e8:	31800204 	addi	r6,r6,8
   a21ec:	103efd1e 	bne	r2,zero,a1de4 <__alt_data_end+0xfffe1de4>
   a21f0:	00002406 	br	a2284 <_malloc_r+0x660>
   a21f4:	14000317 	ldw	r16,12(r2)
   a21f8:	143f251e 	bne	r2,r16,a1e90 <__alt_data_end+0xfffe1e90>
   a21fc:	21000084 	addi	r4,r4,2
   a2200:	003ebc06 	br	a1cf4 <__alt_data_end+0xfffe1cf4>
   a2204:	8085883a 	add	r2,r16,r2
   a2208:	10c00117 	ldw	r3,4(r2)
   a220c:	81000317 	ldw	r4,12(r16)
   a2210:	81400217 	ldw	r5,8(r16)
   a2214:	18c00054 	ori	r3,r3,1
   a2218:	10c00115 	stw	r3,4(r2)
   a221c:	29000315 	stw	r4,12(r5)
   a2220:	21400215 	stw	r5,8(r4)
   a2224:	9009883a 	mov	r4,r18
   a2228:	00ae76c0 	call	ae76c <__malloc_unlock>
   a222c:	80800204 	addi	r2,r16,8
   a2230:	003f2506 	br	a1ec8 <__alt_data_end+0xfffe1ec8>
   a2234:	12001704 	addi	r8,r2,92
   a2238:	11c016c4 	addi	r7,r2,91
   a223c:	4209883a 	add	r4,r8,r8
   a2240:	003e9606 	br	a1c9c <__alt_data_end+0xfffe1c9c>
   a2244:	3804d1ba 	srli	r2,r7,6
   a2248:	11400e44 	addi	r5,r2,57
   a224c:	10c00e04 	addi	r3,r2,56
   a2250:	294b883a 	add	r5,r5,r5
   a2254:	003fbc06 	br	a2148 <__alt_data_end+0xfffe2148>
   a2258:	84ff5926 	beq	r16,r19,a1fc0 <__alt_data_end+0xfffe1fc0>
   a225c:	008002f4 	movhi	r2,11
   a2260:	1086e804 	addi	r2,r2,7072
   a2264:	14000217 	ldw	r16,8(r2)
   a2268:	00bfff04 	movi	r2,-4
   a226c:	80c00117 	ldw	r3,4(r16)
   a2270:	1886703a 	and	r3,r3,r2
   a2274:	003f9106 	br	a20bc <__alt_data_end+0xfffe20bc>
   a2278:	60800217 	ldw	r2,8(r12)
   a227c:	213fffc4 	addi	r4,r4,-1
   a2280:	1300651e 	bne	r2,r12,a2418 <_malloc_r+0x7f4>
   a2284:	208000cc 	andi	r2,r4,3
   a2288:	633ffe04 	addi	r12,r12,-8
   a228c:	103ffa1e 	bne	r2,zero,a2278 <__alt_data_end+0xfffe2278>
   a2290:	98800117 	ldw	r2,4(r19)
   a2294:	0146303a 	nor	r3,zero,r5
   a2298:	1884703a 	and	r2,r3,r2
   a229c:	98800115 	stw	r2,4(r19)
   a22a0:	294b883a 	add	r5,r5,r5
   a22a4:	117f2836 	bltu	r2,r5,a1f48 <__alt_data_end+0xfffe1f48>
   a22a8:	283f2726 	beq	r5,zero,a1f48 <__alt_data_end+0xfffe1f48>
   a22ac:	2886703a 	and	r3,r5,r2
   a22b0:	5809883a 	mov	r4,r11
   a22b4:	183ec31e 	bne	r3,zero,a1dc4 <__alt_data_end+0xfffe1dc4>
   a22b8:	294b883a 	add	r5,r5,r5
   a22bc:	2886703a 	and	r3,r5,r2
   a22c0:	21000104 	addi	r4,r4,4
   a22c4:	183ffc26 	beq	r3,zero,a22b8 <__alt_data_end+0xfffe22b8>
   a22c8:	003ebe06 	br	a1dc4 <__alt_data_end+0xfffe1dc4>
   a22cc:	00c05504 	movi	r3,340
   a22d0:	18801236 	bltu	r3,r2,a231c <_malloc_r+0x6f8>
   a22d4:	8804d3fa 	srli	r2,r17,15
   a22d8:	12001e04 	addi	r8,r2,120
   a22dc:	11c01dc4 	addi	r7,r2,119
   a22e0:	4209883a 	add	r4,r8,r8
   a22e4:	003e6d06 	br	a1c9c <__alt_data_end+0xfffe1c9c>
   a22e8:	00c40004 	movi	r3,4096
   a22ec:	003f4606 	br	a2008 <__alt_data_end+0xfffe2008>
   a22f0:	00800044 	movi	r2,1
   a22f4:	a0800115 	stw	r2,4(r20)
   a22f8:	003f7406 	br	a20cc <__alt_data_end+0xfffe20cc>
   a22fc:	1805d0ba 	srai	r2,r3,2
   a2300:	01c00044 	movi	r7,1
   a2304:	30c00117 	ldw	r3,4(r6)
   a2308:	388e983a 	sll	r7,r7,r2
   a230c:	2805883a 	mov	r2,r5
   a2310:	38c6b03a 	or	r3,r7,r3
   a2314:	30c00115 	stw	r3,4(r6)
   a2318:	003f9b06 	br	a2188 <__alt_data_end+0xfffe2188>
   a231c:	00c15504 	movi	r3,1364
   a2320:	18801a36 	bltu	r3,r2,a238c <_malloc_r+0x768>
   a2324:	8804d4ba 	srli	r2,r17,18
   a2328:	12001f44 	addi	r8,r2,125
   a232c:	11c01f04 	addi	r7,r2,124
   a2330:	4209883a 	add	r4,r8,r8
   a2334:	003e5906 	br	a1c9c <__alt_data_end+0xfffe1c9c>
   a2338:	ad400404 	addi	r21,r21,16
   a233c:	003f1706 	br	a1f9c <__alt_data_end+0xfffe1f9c>
   a2340:	00c01504 	movi	r3,84
   a2344:	18802336 	bltu	r3,r2,a23d4 <_malloc_r+0x7b0>
   a2348:	3804d33a 	srli	r2,r7,12
   a234c:	11401bc4 	addi	r5,r2,111
   a2350:	10c01b84 	addi	r3,r2,110
   a2354:	294b883a 	add	r5,r5,r5
   a2358:	003f7b06 	br	a2148 <__alt_data_end+0xfffe2148>
   a235c:	9c000217 	ldw	r16,8(r19)
   a2360:	00bfff04 	movi	r2,-4
   a2364:	80c00117 	ldw	r3,4(r16)
   a2368:	1886703a 	and	r3,r3,r2
   a236c:	003f5306 	br	a20bc <__alt_data_end+0xfffe20bc>
   a2370:	3083ffcc 	andi	r2,r6,4095
   a2374:	103f181e 	bne	r2,zero,a1fd8 <__alt_data_end+0xfffe1fd8>
   a2378:	99000217 	ldw	r4,8(r19)
   a237c:	b545883a 	add	r2,r22,r21
   a2380:	10800054 	ori	r2,r2,1
   a2384:	20800115 	stw	r2,4(r4)
   a2388:	003f3e06 	br	a2084 <__alt_data_end+0xfffe2084>
   a238c:	01003f84 	movi	r4,254
   a2390:	02001fc4 	movi	r8,127
   a2394:	01c01f84 	movi	r7,126
   a2398:	003e4006 	br	a1c9c <__alt_data_end+0xfffe1c9c>
   a239c:	008002f4 	movhi	r2,11
   a23a0:	108c9604 	addi	r2,r2,12888
   a23a4:	15000015 	stw	r20,0(r2)
   a23a8:	003f1106 	br	a1ff0 <__alt_data_end+0xfffe1ff0>
   a23ac:	00800044 	movi	r2,1
   a23b0:	002b883a 	mov	r21,zero
   a23b4:	003f1f06 	br	a2034 <__alt_data_end+0xfffe2034>
   a23b8:	81400204 	addi	r5,r16,8
   a23bc:	9009883a 	mov	r4,r18
   a23c0:	00a10f40 	call	a10f4 <_free_r>
   a23c4:	008002f4 	movhi	r2,11
   a23c8:	1093bb04 	addi	r2,r2,20204
   a23cc:	10c00017 	ldw	r3,0(r2)
   a23d0:	003f2c06 	br	a2084 <__alt_data_end+0xfffe2084>
   a23d4:	00c05504 	movi	r3,340
   a23d8:	18800536 	bltu	r3,r2,a23f0 <_malloc_r+0x7cc>
   a23dc:	3804d3fa 	srli	r2,r7,15
   a23e0:	11401e04 	addi	r5,r2,120
   a23e4:	10c01dc4 	addi	r3,r2,119
   a23e8:	294b883a 	add	r5,r5,r5
   a23ec:	003f5606 	br	a2148 <__alt_data_end+0xfffe2148>
   a23f0:	00c15504 	movi	r3,1364
   a23f4:	18800536 	bltu	r3,r2,a240c <_malloc_r+0x7e8>
   a23f8:	3804d4ba 	srli	r2,r7,18
   a23fc:	11401f44 	addi	r5,r2,125
   a2400:	10c01f04 	addi	r3,r2,124
   a2404:	294b883a 	add	r5,r5,r5
   a2408:	003f4f06 	br	a2148 <__alt_data_end+0xfffe2148>
   a240c:	01403f84 	movi	r5,254
   a2410:	00c01f84 	movi	r3,126
   a2414:	003f4c06 	br	a2148 <__alt_data_end+0xfffe2148>
   a2418:	98800117 	ldw	r2,4(r19)
   a241c:	003fa006 	br	a22a0 <__alt_data_end+0xfffe22a0>
   a2420:	8808d0fa 	srli	r4,r17,3
   a2424:	20800044 	addi	r2,r4,1
   a2428:	1085883a 	add	r2,r2,r2
   a242c:	003e9006 	br	a1e70 <__alt_data_end+0xfffe1e70>

000a2430 <memset>:
   a2430:	20c000cc 	andi	r3,r4,3
   a2434:	2005883a 	mov	r2,r4
   a2438:	18004426 	beq	r3,zero,a254c <memset+0x11c>
   a243c:	31ffffc4 	addi	r7,r6,-1
   a2440:	30004026 	beq	r6,zero,a2544 <memset+0x114>
   a2444:	2813883a 	mov	r9,r5
   a2448:	200d883a 	mov	r6,r4
   a244c:	2007883a 	mov	r3,r4
   a2450:	00000406 	br	a2464 <memset+0x34>
   a2454:	3a3fffc4 	addi	r8,r7,-1
   a2458:	31800044 	addi	r6,r6,1
   a245c:	38003926 	beq	r7,zero,a2544 <memset+0x114>
   a2460:	400f883a 	mov	r7,r8
   a2464:	18c00044 	addi	r3,r3,1
   a2468:	32400005 	stb	r9,0(r6)
   a246c:	1a0000cc 	andi	r8,r3,3
   a2470:	403ff81e 	bne	r8,zero,a2454 <__alt_data_end+0xfffe2454>
   a2474:	010000c4 	movi	r4,3
   a2478:	21c02d2e 	bgeu	r4,r7,a2530 <memset+0x100>
   a247c:	29003fcc 	andi	r4,r5,255
   a2480:	200c923a 	slli	r6,r4,8
   a2484:	3108b03a 	or	r4,r6,r4
   a2488:	200c943a 	slli	r6,r4,16
   a248c:	218cb03a 	or	r6,r4,r6
   a2490:	010003c4 	movi	r4,15
   a2494:	21c0182e 	bgeu	r4,r7,a24f8 <memset+0xc8>
   a2498:	3b3ffc04 	addi	r12,r7,-16
   a249c:	6018d13a 	srli	r12,r12,4
   a24a0:	1a000104 	addi	r8,r3,4
   a24a4:	1ac00204 	addi	r11,r3,8
   a24a8:	6008913a 	slli	r4,r12,4
   a24ac:	1a800304 	addi	r10,r3,12
   a24b0:	1813883a 	mov	r9,r3
   a24b4:	21000504 	addi	r4,r4,20
   a24b8:	1909883a 	add	r4,r3,r4
   a24bc:	49800015 	stw	r6,0(r9)
   a24c0:	41800015 	stw	r6,0(r8)
   a24c4:	59800015 	stw	r6,0(r11)
   a24c8:	51800015 	stw	r6,0(r10)
   a24cc:	42000404 	addi	r8,r8,16
   a24d0:	4a400404 	addi	r9,r9,16
   a24d4:	5ac00404 	addi	r11,r11,16
   a24d8:	52800404 	addi	r10,r10,16
   a24dc:	413ff71e 	bne	r8,r4,a24bc <__alt_data_end+0xfffe24bc>
   a24e0:	63000044 	addi	r12,r12,1
   a24e4:	6018913a 	slli	r12,r12,4
   a24e8:	39c003cc 	andi	r7,r7,15
   a24ec:	010000c4 	movi	r4,3
   a24f0:	1b07883a 	add	r3,r3,r12
   a24f4:	21c00e2e 	bgeu	r4,r7,a2530 <memset+0x100>
   a24f8:	1813883a 	mov	r9,r3
   a24fc:	3811883a 	mov	r8,r7
   a2500:	010000c4 	movi	r4,3
   a2504:	49800015 	stw	r6,0(r9)
   a2508:	423fff04 	addi	r8,r8,-4
   a250c:	4a400104 	addi	r9,r9,4
   a2510:	223ffc36 	bltu	r4,r8,a2504 <__alt_data_end+0xfffe2504>
   a2514:	393fff04 	addi	r4,r7,-4
   a2518:	2008d0ba 	srli	r4,r4,2
   a251c:	39c000cc 	andi	r7,r7,3
   a2520:	21000044 	addi	r4,r4,1
   a2524:	2109883a 	add	r4,r4,r4
   a2528:	2109883a 	add	r4,r4,r4
   a252c:	1907883a 	add	r3,r3,r4
   a2530:	38000526 	beq	r7,zero,a2548 <memset+0x118>
   a2534:	19cf883a 	add	r7,r3,r7
   a2538:	19400005 	stb	r5,0(r3)
   a253c:	18c00044 	addi	r3,r3,1
   a2540:	38fffd1e 	bne	r7,r3,a2538 <__alt_data_end+0xfffe2538>
   a2544:	f800283a 	ret
   a2548:	f800283a 	ret
   a254c:	2007883a 	mov	r3,r4
   a2550:	300f883a 	mov	r7,r6
   a2554:	003fc706 	br	a2474 <__alt_data_end+0xfffe2474>

000a2558 <_open_r>:
   a2558:	defffd04 	addi	sp,sp,-12
   a255c:	2805883a 	mov	r2,r5
   a2560:	dc000015 	stw	r16,0(sp)
   a2564:	040002f4 	movhi	r16,11
   a2568:	dc400115 	stw	r17,4(sp)
   a256c:	300b883a 	mov	r5,r6
   a2570:	8413ad04 	addi	r16,r16,20148
   a2574:	2023883a 	mov	r17,r4
   a2578:	380d883a 	mov	r6,r7
   a257c:	1009883a 	mov	r4,r2
   a2580:	dfc00215 	stw	ra,8(sp)
   a2584:	80000015 	stw	zero,0(r16)
   a2588:	00ae8b80 	call	ae8b8 <open>
   a258c:	00ffffc4 	movi	r3,-1
   a2590:	10c00526 	beq	r2,r3,a25a8 <_open_r+0x50>
   a2594:	dfc00217 	ldw	ra,8(sp)
   a2598:	dc400117 	ldw	r17,4(sp)
   a259c:	dc000017 	ldw	r16,0(sp)
   a25a0:	dec00304 	addi	sp,sp,12
   a25a4:	f800283a 	ret
   a25a8:	80c00017 	ldw	r3,0(r16)
   a25ac:	183ff926 	beq	r3,zero,a2594 <__alt_data_end+0xfffe2594>
   a25b0:	88c00015 	stw	r3,0(r17)
   a25b4:	003ff706 	br	a2594 <__alt_data_end+0xfffe2594>

000a25b8 <_printf_r>:
   a25b8:	defffd04 	addi	sp,sp,-12
   a25bc:	2805883a 	mov	r2,r5
   a25c0:	dfc00015 	stw	ra,0(sp)
   a25c4:	d9800115 	stw	r6,4(sp)
   a25c8:	d9c00215 	stw	r7,8(sp)
   a25cc:	21400217 	ldw	r5,8(r4)
   a25d0:	d9c00104 	addi	r7,sp,4
   a25d4:	100d883a 	mov	r6,r2
   a25d8:	00a2d8c0 	call	a2d8c <___vfprintf_internal_r>
   a25dc:	dfc00017 	ldw	ra,0(sp)
   a25e0:	dec00304 	addi	sp,sp,12
   a25e4:	f800283a 	ret

000a25e8 <printf>:
   a25e8:	defffc04 	addi	sp,sp,-16
   a25ec:	dfc00015 	stw	ra,0(sp)
   a25f0:	d9400115 	stw	r5,4(sp)
   a25f4:	d9800215 	stw	r6,8(sp)
   a25f8:	d9c00315 	stw	r7,12(sp)
   a25fc:	008002f4 	movhi	r2,11
   a2600:	108c9504 	addi	r2,r2,12884
   a2604:	10800017 	ldw	r2,0(r2)
   a2608:	200b883a 	mov	r5,r4
   a260c:	d9800104 	addi	r6,sp,4
   a2610:	11000217 	ldw	r4,8(r2)
   a2614:	00a50680 	call	a5068 <__vfprintf_internal>
   a2618:	dfc00017 	ldw	ra,0(sp)
   a261c:	dec00404 	addi	sp,sp,16
   a2620:	f800283a 	ret

000a2624 <_putc_r>:
   a2624:	defffc04 	addi	sp,sp,-16
   a2628:	dc000215 	stw	r16,8(sp)
   a262c:	dfc00315 	stw	ra,12(sp)
   a2630:	2021883a 	mov	r16,r4
   a2634:	20000226 	beq	r4,zero,a2640 <_putc_r+0x1c>
   a2638:	20800e17 	ldw	r2,56(r4)
   a263c:	10001b26 	beq	r2,zero,a26ac <_putc_r+0x88>
   a2640:	30800217 	ldw	r2,8(r6)
   a2644:	10bfffc4 	addi	r2,r2,-1
   a2648:	30800215 	stw	r2,8(r6)
   a264c:	10000a16 	blt	r2,zero,a2678 <_putc_r+0x54>
   a2650:	30800017 	ldw	r2,0(r6)
   a2654:	11400005 	stb	r5,0(r2)
   a2658:	30800017 	ldw	r2,0(r6)
   a265c:	10c00044 	addi	r3,r2,1
   a2660:	30c00015 	stw	r3,0(r6)
   a2664:	10800003 	ldbu	r2,0(r2)
   a2668:	dfc00317 	ldw	ra,12(sp)
   a266c:	dc000217 	ldw	r16,8(sp)
   a2670:	dec00404 	addi	sp,sp,16
   a2674:	f800283a 	ret
   a2678:	30c00617 	ldw	r3,24(r6)
   a267c:	10c00616 	blt	r2,r3,a2698 <_putc_r+0x74>
   a2680:	30800017 	ldw	r2,0(r6)
   a2684:	00c00284 	movi	r3,10
   a2688:	11400005 	stb	r5,0(r2)
   a268c:	30800017 	ldw	r2,0(r6)
   a2690:	11400003 	ldbu	r5,0(r2)
   a2694:	28fff11e 	bne	r5,r3,a265c <__alt_data_end+0xfffe265c>
   a2698:	8009883a 	mov	r4,r16
   a269c:	dfc00317 	ldw	ra,12(sp)
   a26a0:	dc000217 	ldw	r16,8(sp)
   a26a4:	dec00404 	addi	sp,sp,16
   a26a8:	00a51401 	jmpi	a5140 <__swbuf_r>
   a26ac:	d9400015 	stw	r5,0(sp)
   a26b0:	d9800115 	stw	r6,4(sp)
   a26b4:	00a0d880 	call	a0d88 <__sinit>
   a26b8:	d9800117 	ldw	r6,4(sp)
   a26bc:	d9400017 	ldw	r5,0(sp)
   a26c0:	003fdf06 	br	a2640 <__alt_data_end+0xfffe2640>

000a26c4 <putc>:
   a26c4:	008002f4 	movhi	r2,11
   a26c8:	defffc04 	addi	sp,sp,-16
   a26cc:	108c9504 	addi	r2,r2,12884
   a26d0:	dc000115 	stw	r16,4(sp)
   a26d4:	14000017 	ldw	r16,0(r2)
   a26d8:	dc400215 	stw	r17,8(sp)
   a26dc:	dfc00315 	stw	ra,12(sp)
   a26e0:	2023883a 	mov	r17,r4
   a26e4:	80000226 	beq	r16,zero,a26f0 <putc+0x2c>
   a26e8:	80800e17 	ldw	r2,56(r16)
   a26ec:	10001a26 	beq	r2,zero,a2758 <putc+0x94>
   a26f0:	28800217 	ldw	r2,8(r5)
   a26f4:	10bfffc4 	addi	r2,r2,-1
   a26f8:	28800215 	stw	r2,8(r5)
   a26fc:	10000b16 	blt	r2,zero,a272c <putc+0x68>
   a2700:	28800017 	ldw	r2,0(r5)
   a2704:	14400005 	stb	r17,0(r2)
   a2708:	28800017 	ldw	r2,0(r5)
   a270c:	10c00044 	addi	r3,r2,1
   a2710:	28c00015 	stw	r3,0(r5)
   a2714:	10800003 	ldbu	r2,0(r2)
   a2718:	dfc00317 	ldw	ra,12(sp)
   a271c:	dc400217 	ldw	r17,8(sp)
   a2720:	dc000117 	ldw	r16,4(sp)
   a2724:	dec00404 	addi	sp,sp,16
   a2728:	f800283a 	ret
   a272c:	28c00617 	ldw	r3,24(r5)
   a2730:	10c00e16 	blt	r2,r3,a276c <putc+0xa8>
   a2734:	28800017 	ldw	r2,0(r5)
   a2738:	01000284 	movi	r4,10
   a273c:	14400005 	stb	r17,0(r2)
   a2740:	28800017 	ldw	r2,0(r5)
   a2744:	10c00003 	ldbu	r3,0(r2)
   a2748:	193ff01e 	bne	r3,r4,a270c <__alt_data_end+0xfffe270c>
   a274c:	280d883a 	mov	r6,r5
   a2750:	180b883a 	mov	r5,r3
   a2754:	00000706 	br	a2774 <putc+0xb0>
   a2758:	8009883a 	mov	r4,r16
   a275c:	d9400015 	stw	r5,0(sp)
   a2760:	00a0d880 	call	a0d88 <__sinit>
   a2764:	d9400017 	ldw	r5,0(sp)
   a2768:	003fe106 	br	a26f0 <__alt_data_end+0xfffe26f0>
   a276c:	280d883a 	mov	r6,r5
   a2770:	880b883a 	mov	r5,r17
   a2774:	8009883a 	mov	r4,r16
   a2778:	dfc00317 	ldw	ra,12(sp)
   a277c:	dc400217 	ldw	r17,8(sp)
   a2780:	dc000117 	ldw	r16,4(sp)
   a2784:	dec00404 	addi	sp,sp,16
   a2788:	00a51401 	jmpi	a5140 <__swbuf_r>

000a278c <_puts_r>:
   a278c:	defff604 	addi	sp,sp,-40
   a2790:	dc000715 	stw	r16,28(sp)
   a2794:	2021883a 	mov	r16,r4
   a2798:	2809883a 	mov	r4,r5
   a279c:	dc400815 	stw	r17,32(sp)
   a27a0:	dfc00915 	stw	ra,36(sp)
   a27a4:	2823883a 	mov	r17,r5
   a27a8:	00a2cf40 	call	a2cf4 <strlen>
   a27ac:	10c00044 	addi	r3,r2,1
   a27b0:	d8800115 	stw	r2,4(sp)
   a27b4:	008002f4 	movhi	r2,11
   a27b8:	1084ff04 	addi	r2,r2,5116
   a27bc:	d8800215 	stw	r2,8(sp)
   a27c0:	00800044 	movi	r2,1
   a27c4:	d8800315 	stw	r2,12(sp)
   a27c8:	00800084 	movi	r2,2
   a27cc:	dc400015 	stw	r17,0(sp)
   a27d0:	d8c00615 	stw	r3,24(sp)
   a27d4:	dec00415 	stw	sp,16(sp)
   a27d8:	d8800515 	stw	r2,20(sp)
   a27dc:	80000226 	beq	r16,zero,a27e8 <_puts_r+0x5c>
   a27e0:	80800e17 	ldw	r2,56(r16)
   a27e4:	10001426 	beq	r2,zero,a2838 <_puts_r+0xac>
   a27e8:	81400217 	ldw	r5,8(r16)
   a27ec:	2880030b 	ldhu	r2,12(r5)
   a27f0:	10c8000c 	andi	r3,r2,8192
   a27f4:	1800061e 	bne	r3,zero,a2810 <_puts_r+0x84>
   a27f8:	29001917 	ldw	r4,100(r5)
   a27fc:	00f7ffc4 	movi	r3,-8193
   a2800:	10880014 	ori	r2,r2,8192
   a2804:	20c6703a 	and	r3,r4,r3
   a2808:	2880030d 	sth	r2,12(r5)
   a280c:	28c01915 	stw	r3,100(r5)
   a2810:	d9800404 	addi	r6,sp,16
   a2814:	8009883a 	mov	r4,r16
   a2818:	00a6dfc0 	call	a6dfc <__sfvwrite_r>
   a281c:	1000091e 	bne	r2,zero,a2844 <_puts_r+0xb8>
   a2820:	00800284 	movi	r2,10
   a2824:	dfc00917 	ldw	ra,36(sp)
   a2828:	dc400817 	ldw	r17,32(sp)
   a282c:	dc000717 	ldw	r16,28(sp)
   a2830:	dec00a04 	addi	sp,sp,40
   a2834:	f800283a 	ret
   a2838:	8009883a 	mov	r4,r16
   a283c:	00a0d880 	call	a0d88 <__sinit>
   a2840:	003fe906 	br	a27e8 <__alt_data_end+0xfffe27e8>
   a2844:	00bfffc4 	movi	r2,-1
   a2848:	003ff606 	br	a2824 <__alt_data_end+0xfffe2824>

000a284c <puts>:
   a284c:	008002f4 	movhi	r2,11
   a2850:	108c9504 	addi	r2,r2,12884
   a2854:	200b883a 	mov	r5,r4
   a2858:	11000017 	ldw	r4,0(r2)
   a285c:	00a278c1 	jmpi	a278c <_puts_r>

000a2860 <lflush>:
   a2860:	2080030b 	ldhu	r2,12(r4)
   a2864:	00c00244 	movi	r3,9
   a2868:	1080024c 	andi	r2,r2,9
   a286c:	10c00226 	beq	r2,r3,a2878 <lflush+0x18>
   a2870:	0005883a 	mov	r2,zero
   a2874:	f800283a 	ret
   a2878:	00a09f81 	jmpi	a09f8 <fflush>

000a287c <__srefill_r>:
   a287c:	defffc04 	addi	sp,sp,-16
   a2880:	dc400115 	stw	r17,4(sp)
   a2884:	dc000015 	stw	r16,0(sp)
   a2888:	dfc00315 	stw	ra,12(sp)
   a288c:	dc800215 	stw	r18,8(sp)
   a2890:	2023883a 	mov	r17,r4
   a2894:	2821883a 	mov	r16,r5
   a2898:	20000226 	beq	r4,zero,a28a4 <__srefill_r+0x28>
   a289c:	20800e17 	ldw	r2,56(r4)
   a28a0:	10003c26 	beq	r2,zero,a2994 <__srefill_r+0x118>
   a28a4:	80c0030b 	ldhu	r3,12(r16)
   a28a8:	1908000c 	andi	r4,r3,8192
   a28ac:	1805883a 	mov	r2,r3
   a28b0:	2000071e 	bne	r4,zero,a28d0 <__srefill_r+0x54>
   a28b4:	81001917 	ldw	r4,100(r16)
   a28b8:	18880014 	ori	r2,r3,8192
   a28bc:	00f7ffc4 	movi	r3,-8193
   a28c0:	20c8703a 	and	r4,r4,r3
   a28c4:	8080030d 	sth	r2,12(r16)
   a28c8:	1007883a 	mov	r3,r2
   a28cc:	81001915 	stw	r4,100(r16)
   a28d0:	80000115 	stw	zero,4(r16)
   a28d4:	1100080c 	andi	r4,r2,32
   a28d8:	2000571e 	bne	r4,zero,a2a38 <__srefill_r+0x1bc>
   a28dc:	1100010c 	andi	r4,r2,4
   a28e0:	20001f26 	beq	r4,zero,a2960 <__srefill_r+0xe4>
   a28e4:	81400c17 	ldw	r5,48(r16)
   a28e8:	28000826 	beq	r5,zero,a290c <__srefill_r+0x90>
   a28ec:	80801004 	addi	r2,r16,64
   a28f0:	28800226 	beq	r5,r2,a28fc <__srefill_r+0x80>
   a28f4:	8809883a 	mov	r4,r17
   a28f8:	00a10f40 	call	a10f4 <_free_r>
   a28fc:	80800f17 	ldw	r2,60(r16)
   a2900:	80000c15 	stw	zero,48(r16)
   a2904:	80800115 	stw	r2,4(r16)
   a2908:	1000391e 	bne	r2,zero,a29f0 <__srefill_r+0x174>
   a290c:	80800417 	ldw	r2,16(r16)
   a2910:	10004b26 	beq	r2,zero,a2a40 <__srefill_r+0x1c4>
   a2914:	8480030b 	ldhu	r18,12(r16)
   a2918:	908000cc 	andi	r2,r18,3
   a291c:	10001f1e 	bne	r2,zero,a299c <__srefill_r+0x120>
   a2920:	81800417 	ldw	r6,16(r16)
   a2924:	80800817 	ldw	r2,32(r16)
   a2928:	81c00517 	ldw	r7,20(r16)
   a292c:	81400717 	ldw	r5,28(r16)
   a2930:	81800015 	stw	r6,0(r16)
   a2934:	8809883a 	mov	r4,r17
   a2938:	103ee83a 	callr	r2
   a293c:	80800115 	stw	r2,4(r16)
   a2940:	00800e0e 	bge	zero,r2,a297c <__srefill_r+0x100>
   a2944:	0005883a 	mov	r2,zero
   a2948:	dfc00317 	ldw	ra,12(sp)
   a294c:	dc800217 	ldw	r18,8(sp)
   a2950:	dc400117 	ldw	r17,4(sp)
   a2954:	dc000017 	ldw	r16,0(sp)
   a2958:	dec00404 	addi	sp,sp,16
   a295c:	f800283a 	ret
   a2960:	1100040c 	andi	r4,r2,16
   a2964:	20003026 	beq	r4,zero,a2a28 <__srefill_r+0x1ac>
   a2968:	1080020c 	andi	r2,r2,8
   a296c:	1000241e 	bne	r2,zero,a2a00 <__srefill_r+0x184>
   a2970:	18c00114 	ori	r3,r3,4
   a2974:	80c0030d 	sth	r3,12(r16)
   a2978:	003fe406 	br	a290c <__alt_data_end+0xfffe290c>
   a297c:	80c0030b 	ldhu	r3,12(r16)
   a2980:	1000161e 	bne	r2,zero,a29dc <__srefill_r+0x160>
   a2984:	18c00814 	ori	r3,r3,32
   a2988:	00bfffc4 	movi	r2,-1
   a298c:	80c0030d 	sth	r3,12(r16)
   a2990:	003fed06 	br	a2948 <__alt_data_end+0xfffe2948>
   a2994:	00a0d880 	call	a0d88 <__sinit>
   a2998:	003fc206 	br	a28a4 <__alt_data_end+0xfffe28a4>
   a299c:	008002f4 	movhi	r2,11
   a29a0:	108c9404 	addi	r2,r2,12880
   a29a4:	11000017 	ldw	r4,0(r2)
   a29a8:	014002b4 	movhi	r5,10
   a29ac:	00800044 	movi	r2,1
   a29b0:	294a1804 	addi	r5,r5,10336
   a29b4:	8080030d 	sth	r2,12(r16)
   a29b8:	00a18e00 	call	a18e0 <_fwalk>
   a29bc:	00800244 	movi	r2,9
   a29c0:	8480030d 	sth	r18,12(r16)
   a29c4:	9480024c 	andi	r18,r18,9
   a29c8:	90bfd51e 	bne	r18,r2,a2920 <__alt_data_end+0xfffe2920>
   a29cc:	800b883a 	mov	r5,r16
   a29d0:	8809883a 	mov	r4,r17
   a29d4:	00a07800 	call	a0780 <__sflush_r>
   a29d8:	003fd106 	br	a2920 <__alt_data_end+0xfffe2920>
   a29dc:	18c01014 	ori	r3,r3,64
   a29e0:	80000115 	stw	zero,4(r16)
   a29e4:	00bfffc4 	movi	r2,-1
   a29e8:	80c0030d 	sth	r3,12(r16)
   a29ec:	003fd606 	br	a2948 <__alt_data_end+0xfffe2948>
   a29f0:	80c00e17 	ldw	r3,56(r16)
   a29f4:	0005883a 	mov	r2,zero
   a29f8:	80c00015 	stw	r3,0(r16)
   a29fc:	003fd206 	br	a2948 <__alt_data_end+0xfffe2948>
   a2a00:	800b883a 	mov	r5,r16
   a2a04:	8809883a 	mov	r4,r17
   a2a08:	00a099c0 	call	a099c <_fflush_r>
   a2a0c:	10000a1e 	bne	r2,zero,a2a38 <__srefill_r+0x1bc>
   a2a10:	8080030b 	ldhu	r2,12(r16)
   a2a14:	00fffdc4 	movi	r3,-9
   a2a18:	80000215 	stw	zero,8(r16)
   a2a1c:	1886703a 	and	r3,r3,r2
   a2a20:	80000615 	stw	zero,24(r16)
   a2a24:	003fd206 	br	a2970 <__alt_data_end+0xfffe2970>
   a2a28:	00800244 	movi	r2,9
   a2a2c:	88800015 	stw	r2,0(r17)
   a2a30:	18c01014 	ori	r3,r3,64
   a2a34:	80c0030d 	sth	r3,12(r16)
   a2a38:	00bfffc4 	movi	r2,-1
   a2a3c:	003fc206 	br	a2948 <__alt_data_end+0xfffe2948>
   a2a40:	800b883a 	mov	r5,r16
   a2a44:	8809883a 	mov	r4,r17
   a2a48:	00a1a680 	call	a1a68 <__smakebuf_r>
   a2a4c:	003fb106 	br	a2914 <__alt_data_end+0xfffe2914>

000a2a50 <_sbrk_r>:
   a2a50:	defffd04 	addi	sp,sp,-12
   a2a54:	dc000015 	stw	r16,0(sp)
   a2a58:	040002f4 	movhi	r16,11
   a2a5c:	dc400115 	stw	r17,4(sp)
   a2a60:	8413ad04 	addi	r16,r16,20148
   a2a64:	2023883a 	mov	r17,r4
   a2a68:	2809883a 	mov	r4,r5
   a2a6c:	dfc00215 	stw	ra,8(sp)
   a2a70:	80000015 	stw	zero,0(r16)
   a2a74:	00aebd80 	call	aebd8 <sbrk>
   a2a78:	00ffffc4 	movi	r3,-1
   a2a7c:	10c00526 	beq	r2,r3,a2a94 <_sbrk_r+0x44>
   a2a80:	dfc00217 	ldw	ra,8(sp)
   a2a84:	dc400117 	ldw	r17,4(sp)
   a2a88:	dc000017 	ldw	r16,0(sp)
   a2a8c:	dec00304 	addi	sp,sp,12
   a2a90:	f800283a 	ret
   a2a94:	80c00017 	ldw	r3,0(r16)
   a2a98:	183ff926 	beq	r3,zero,a2a80 <__alt_data_end+0xfffe2a80>
   a2a9c:	88c00015 	stw	r3,0(r17)
   a2aa0:	003ff706 	br	a2a80 <__alt_data_end+0xfffe2a80>

000a2aa4 <__sread>:
   a2aa4:	defffe04 	addi	sp,sp,-8
   a2aa8:	dc000015 	stw	r16,0(sp)
   a2aac:	2821883a 	mov	r16,r5
   a2ab0:	2940038f 	ldh	r5,14(r5)
   a2ab4:	dfc00115 	stw	ra,4(sp)
   a2ab8:	00a88940 	call	a8894 <_read_r>
   a2abc:	10000716 	blt	r2,zero,a2adc <__sread+0x38>
   a2ac0:	80c01417 	ldw	r3,80(r16)
   a2ac4:	1887883a 	add	r3,r3,r2
   a2ac8:	80c01415 	stw	r3,80(r16)
   a2acc:	dfc00117 	ldw	ra,4(sp)
   a2ad0:	dc000017 	ldw	r16,0(sp)
   a2ad4:	dec00204 	addi	sp,sp,8
   a2ad8:	f800283a 	ret
   a2adc:	80c0030b 	ldhu	r3,12(r16)
   a2ae0:	18fbffcc 	andi	r3,r3,61439
   a2ae4:	80c0030d 	sth	r3,12(r16)
   a2ae8:	dfc00117 	ldw	ra,4(sp)
   a2aec:	dc000017 	ldw	r16,0(sp)
   a2af0:	dec00204 	addi	sp,sp,8
   a2af4:	f800283a 	ret

000a2af8 <__seofread>:
   a2af8:	0005883a 	mov	r2,zero
   a2afc:	f800283a 	ret

000a2b00 <__swrite>:
   a2b00:	2880030b 	ldhu	r2,12(r5)
   a2b04:	defffb04 	addi	sp,sp,-20
   a2b08:	dcc00315 	stw	r19,12(sp)
   a2b0c:	dc800215 	stw	r18,8(sp)
   a2b10:	dc400115 	stw	r17,4(sp)
   a2b14:	dc000015 	stw	r16,0(sp)
   a2b18:	dfc00415 	stw	ra,16(sp)
   a2b1c:	10c0400c 	andi	r3,r2,256
   a2b20:	2821883a 	mov	r16,r5
   a2b24:	2023883a 	mov	r17,r4
   a2b28:	3025883a 	mov	r18,r6
   a2b2c:	3827883a 	mov	r19,r7
   a2b30:	18000526 	beq	r3,zero,a2b48 <__swrite+0x48>
   a2b34:	2940038f 	ldh	r5,14(r5)
   a2b38:	01c00084 	movi	r7,2
   a2b3c:	000d883a 	mov	r6,zero
   a2b40:	00a73f40 	call	a73f4 <_lseek_r>
   a2b44:	8080030b 	ldhu	r2,12(r16)
   a2b48:	8140038f 	ldh	r5,14(r16)
   a2b4c:	10bbffcc 	andi	r2,r2,61439
   a2b50:	980f883a 	mov	r7,r19
   a2b54:	900d883a 	mov	r6,r18
   a2b58:	8809883a 	mov	r4,r17
   a2b5c:	8080030d 	sth	r2,12(r16)
   a2b60:	dfc00417 	ldw	ra,16(sp)
   a2b64:	dcc00317 	ldw	r19,12(sp)
   a2b68:	dc800217 	ldw	r18,8(sp)
   a2b6c:	dc400117 	ldw	r17,4(sp)
   a2b70:	dc000017 	ldw	r16,0(sp)
   a2b74:	dec00504 	addi	sp,sp,20
   a2b78:	00a52981 	jmpi	a5298 <_write_r>

000a2b7c <__sseek>:
   a2b7c:	defffe04 	addi	sp,sp,-8
   a2b80:	dc000015 	stw	r16,0(sp)
   a2b84:	2821883a 	mov	r16,r5
   a2b88:	2940038f 	ldh	r5,14(r5)
   a2b8c:	dfc00115 	stw	ra,4(sp)
   a2b90:	00a73f40 	call	a73f4 <_lseek_r>
   a2b94:	00ffffc4 	movi	r3,-1
   a2b98:	10c00826 	beq	r2,r3,a2bbc <__sseek+0x40>
   a2b9c:	80c0030b 	ldhu	r3,12(r16)
   a2ba0:	80801415 	stw	r2,80(r16)
   a2ba4:	18c40014 	ori	r3,r3,4096
   a2ba8:	80c0030d 	sth	r3,12(r16)
   a2bac:	dfc00117 	ldw	ra,4(sp)
   a2bb0:	dc000017 	ldw	r16,0(sp)
   a2bb4:	dec00204 	addi	sp,sp,8
   a2bb8:	f800283a 	ret
   a2bbc:	80c0030b 	ldhu	r3,12(r16)
   a2bc0:	18fbffcc 	andi	r3,r3,61439
   a2bc4:	80c0030d 	sth	r3,12(r16)
   a2bc8:	dfc00117 	ldw	ra,4(sp)
   a2bcc:	dc000017 	ldw	r16,0(sp)
   a2bd0:	dec00204 	addi	sp,sp,8
   a2bd4:	f800283a 	ret

000a2bd8 <__sclose>:
   a2bd8:	2940038f 	ldh	r5,14(r5)
   a2bdc:	00a544c1 	jmpi	a544c <_close_r>

000a2be0 <strcat>:
   a2be0:	defffe04 	addi	sp,sp,-8
   a2be4:	dc000015 	stw	r16,0(sp)
   a2be8:	dfc00115 	stw	ra,4(sp)
   a2bec:	208000cc 	andi	r2,r4,3
   a2bf0:	2021883a 	mov	r16,r4
   a2bf4:	1000131e 	bne	r2,zero,a2c44 <strcat+0x64>
   a2bf8:	20800017 	ldw	r2,0(r4)
   a2bfc:	01ffbff4 	movhi	r7,65279
   a2c00:	39ffbfc4 	addi	r7,r7,-257
   a2c04:	0086303a 	nor	r3,zero,r2
   a2c08:	01a02074 	movhi	r6,32897
   a2c0c:	11c5883a 	add	r2,r2,r7
   a2c10:	31a02004 	addi	r6,r6,-32640
   a2c14:	10c4703a 	and	r2,r2,r3
   a2c18:	1184703a 	and	r2,r2,r6
   a2c1c:	1000091e 	bne	r2,zero,a2c44 <strcat+0x64>
   a2c20:	21000104 	addi	r4,r4,4
   a2c24:	20800017 	ldw	r2,0(r4)
   a2c28:	11c7883a 	add	r3,r2,r7
   a2c2c:	0084303a 	nor	r2,zero,r2
   a2c30:	1884703a 	and	r2,r3,r2
   a2c34:	1184703a 	and	r2,r2,r6
   a2c38:	103ff926 	beq	r2,zero,a2c20 <__alt_data_end+0xfffe2c20>
   a2c3c:	00000106 	br	a2c44 <strcat+0x64>
   a2c40:	21000044 	addi	r4,r4,1
   a2c44:	20800007 	ldb	r2,0(r4)
   a2c48:	103ffd1e 	bne	r2,zero,a2c40 <__alt_data_end+0xfffe2c40>
   a2c4c:	00a2c640 	call	a2c64 <strcpy>
   a2c50:	8005883a 	mov	r2,r16
   a2c54:	dfc00117 	ldw	ra,4(sp)
   a2c58:	dc000017 	ldw	r16,0(sp)
   a2c5c:	dec00204 	addi	sp,sp,8
   a2c60:	f800283a 	ret

000a2c64 <strcpy>:
   a2c64:	2906b03a 	or	r3,r5,r4
   a2c68:	18c000cc 	andi	r3,r3,3
   a2c6c:	2005883a 	mov	r2,r4
   a2c70:	1800161e 	bne	r3,zero,a2ccc <strcpy+0x68>
   a2c74:	29c00017 	ldw	r7,0(r5)
   a2c78:	02ffbff4 	movhi	r11,65279
   a2c7c:	5affbfc4 	addi	r11,r11,-257
   a2c80:	02a02074 	movhi	r10,32897
   a2c84:	01c6303a 	nor	r3,zero,r7
   a2c88:	3ac9883a 	add	r4,r7,r11
   a2c8c:	52a02004 	addi	r10,r10,-32640
   a2c90:	20c6703a 	and	r3,r4,r3
   a2c94:	1a86703a 	and	r3,r3,r10
   a2c98:	18000c1e 	bne	r3,zero,a2ccc <strcpy+0x68>
   a2c9c:	1011883a 	mov	r8,r2
   a2ca0:	41c00015 	stw	r7,0(r8)
   a2ca4:	29400104 	addi	r5,r5,4
   a2ca8:	29c00017 	ldw	r7,0(r5)
   a2cac:	41800104 	addi	r6,r8,4
   a2cb0:	3011883a 	mov	r8,r6
   a2cb4:	3ad3883a 	add	r9,r7,r11
   a2cb8:	01c6303a 	nor	r3,zero,r7
   a2cbc:	48c6703a 	and	r3,r9,r3
   a2cc0:	1a86703a 	and	r3,r3,r10
   a2cc4:	183ff626 	beq	r3,zero,a2ca0 <__alt_data_end+0xfffe2ca0>
   a2cc8:	00000106 	br	a2cd0 <strcpy+0x6c>
   a2ccc:	100d883a 	mov	r6,r2
   a2cd0:	28c00003 	ldbu	r3,0(r5)
   a2cd4:	31800044 	addi	r6,r6,1
   a2cd8:	29400044 	addi	r5,r5,1
   a2cdc:	30ffffc5 	stb	r3,-1(r6)
   a2ce0:	18c03fcc 	andi	r3,r3,255
   a2ce4:	18c0201c 	xori	r3,r3,128
   a2ce8:	18ffe004 	addi	r3,r3,-128
   a2cec:	183ff81e 	bne	r3,zero,a2cd0 <__alt_data_end+0xfffe2cd0>
   a2cf0:	f800283a 	ret

000a2cf4 <strlen>:
   a2cf4:	208000cc 	andi	r2,r4,3
   a2cf8:	10002026 	beq	r2,zero,a2d7c <strlen+0x88>
   a2cfc:	20800007 	ldb	r2,0(r4)
   a2d00:	10002026 	beq	r2,zero,a2d84 <strlen+0x90>
   a2d04:	2005883a 	mov	r2,r4
   a2d08:	00000206 	br	a2d14 <strlen+0x20>
   a2d0c:	10c00007 	ldb	r3,0(r2)
   a2d10:	18001826 	beq	r3,zero,a2d74 <strlen+0x80>
   a2d14:	10800044 	addi	r2,r2,1
   a2d18:	10c000cc 	andi	r3,r2,3
   a2d1c:	183ffb1e 	bne	r3,zero,a2d0c <__alt_data_end+0xfffe2d0c>
   a2d20:	10c00017 	ldw	r3,0(r2)
   a2d24:	01ffbff4 	movhi	r7,65279
   a2d28:	39ffbfc4 	addi	r7,r7,-257
   a2d2c:	00ca303a 	nor	r5,zero,r3
   a2d30:	01a02074 	movhi	r6,32897
   a2d34:	19c7883a 	add	r3,r3,r7
   a2d38:	31a02004 	addi	r6,r6,-32640
   a2d3c:	1946703a 	and	r3,r3,r5
   a2d40:	1986703a 	and	r3,r3,r6
   a2d44:	1800091e 	bne	r3,zero,a2d6c <strlen+0x78>
   a2d48:	10800104 	addi	r2,r2,4
   a2d4c:	10c00017 	ldw	r3,0(r2)
   a2d50:	19cb883a 	add	r5,r3,r7
   a2d54:	00c6303a 	nor	r3,zero,r3
   a2d58:	28c6703a 	and	r3,r5,r3
   a2d5c:	1986703a 	and	r3,r3,r6
   a2d60:	183ff926 	beq	r3,zero,a2d48 <__alt_data_end+0xfffe2d48>
   a2d64:	00000106 	br	a2d6c <strlen+0x78>
   a2d68:	10800044 	addi	r2,r2,1
   a2d6c:	10c00007 	ldb	r3,0(r2)
   a2d70:	183ffd1e 	bne	r3,zero,a2d68 <__alt_data_end+0xfffe2d68>
   a2d74:	1105c83a 	sub	r2,r2,r4
   a2d78:	f800283a 	ret
   a2d7c:	2005883a 	mov	r2,r4
   a2d80:	003fe706 	br	a2d20 <__alt_data_end+0xfffe2d20>
   a2d84:	0005883a 	mov	r2,zero
   a2d88:	f800283a 	ret

000a2d8c <___vfprintf_internal_r>:
   a2d8c:	deffb804 	addi	sp,sp,-288
   a2d90:	dfc04715 	stw	ra,284(sp)
   a2d94:	ddc04515 	stw	r23,276(sp)
   a2d98:	dd404315 	stw	r21,268(sp)
   a2d9c:	d9002d15 	stw	r4,180(sp)
   a2da0:	282f883a 	mov	r23,r5
   a2da4:	302b883a 	mov	r21,r6
   a2da8:	d9c02e15 	stw	r7,184(sp)
   a2dac:	df004615 	stw	fp,280(sp)
   a2db0:	dd804415 	stw	r22,272(sp)
   a2db4:	dd004215 	stw	r20,264(sp)
   a2db8:	dcc04115 	stw	r19,260(sp)
   a2dbc:	dc804015 	stw	r18,256(sp)
   a2dc0:	dc403f15 	stw	r17,252(sp)
   a2dc4:	dc003e15 	stw	r16,248(sp)
   a2dc8:	00a73c40 	call	a73c4 <_localeconv_r>
   a2dcc:	10800017 	ldw	r2,0(r2)
   a2dd0:	1009883a 	mov	r4,r2
   a2dd4:	d8803415 	stw	r2,208(sp)
   a2dd8:	00a2cf40 	call	a2cf4 <strlen>
   a2ddc:	d8803715 	stw	r2,220(sp)
   a2de0:	d8802d17 	ldw	r2,180(sp)
   a2de4:	10000226 	beq	r2,zero,a2df0 <___vfprintf_internal_r+0x64>
   a2de8:	10800e17 	ldw	r2,56(r2)
   a2dec:	1000fb26 	beq	r2,zero,a31dc <___vfprintf_internal_r+0x450>
   a2df0:	b880030b 	ldhu	r2,12(r23)
   a2df4:	10c8000c 	andi	r3,r2,8192
   a2df8:	1800061e 	bne	r3,zero,a2e14 <___vfprintf_internal_r+0x88>
   a2dfc:	b9001917 	ldw	r4,100(r23)
   a2e00:	00f7ffc4 	movi	r3,-8193
   a2e04:	10880014 	ori	r2,r2,8192
   a2e08:	20c6703a 	and	r3,r4,r3
   a2e0c:	b880030d 	sth	r2,12(r23)
   a2e10:	b8c01915 	stw	r3,100(r23)
   a2e14:	10c0020c 	andi	r3,r2,8
   a2e18:	1800c326 	beq	r3,zero,a3128 <___vfprintf_internal_r+0x39c>
   a2e1c:	b8c00417 	ldw	r3,16(r23)
   a2e20:	1800c126 	beq	r3,zero,a3128 <___vfprintf_internal_r+0x39c>
   a2e24:	1080068c 	andi	r2,r2,26
   a2e28:	00c00284 	movi	r3,10
   a2e2c:	10c0c626 	beq	r2,r3,a3148 <___vfprintf_internal_r+0x3bc>
   a2e30:	d8c00404 	addi	r3,sp,16
   a2e34:	050002f4 	movhi	r20,11
   a2e38:	d9001e04 	addi	r4,sp,120
   a2e3c:	a5051084 	addi	r20,r20,5186
   a2e40:	d8c01e15 	stw	r3,120(sp)
   a2e44:	d8002015 	stw	zero,128(sp)
   a2e48:	d8001f15 	stw	zero,124(sp)
   a2e4c:	d8003315 	stw	zero,204(sp)
   a2e50:	d8003615 	stw	zero,216(sp)
   a2e54:	d8003815 	stw	zero,224(sp)
   a2e58:	1811883a 	mov	r8,r3
   a2e5c:	d8003915 	stw	zero,228(sp)
   a2e60:	d8003a15 	stw	zero,232(sp)
   a2e64:	d8002f15 	stw	zero,188(sp)
   a2e68:	d9002815 	stw	r4,160(sp)
   a2e6c:	a8800007 	ldb	r2,0(r21)
   a2e70:	10028b26 	beq	r2,zero,a38a0 <___vfprintf_internal_r+0xb14>
   a2e74:	00c00944 	movi	r3,37
   a2e78:	a823883a 	mov	r17,r21
   a2e7c:	10c0021e 	bne	r2,r3,a2e88 <___vfprintf_internal_r+0xfc>
   a2e80:	00001406 	br	a2ed4 <___vfprintf_internal_r+0x148>
   a2e84:	10c00326 	beq	r2,r3,a2e94 <___vfprintf_internal_r+0x108>
   a2e88:	8c400044 	addi	r17,r17,1
   a2e8c:	88800007 	ldb	r2,0(r17)
   a2e90:	103ffc1e 	bne	r2,zero,a2e84 <__alt_data_end+0xfffe2e84>
   a2e94:	8d61c83a 	sub	r16,r17,r21
   a2e98:	80000e26 	beq	r16,zero,a2ed4 <___vfprintf_internal_r+0x148>
   a2e9c:	d8c02017 	ldw	r3,128(sp)
   a2ea0:	d8801f17 	ldw	r2,124(sp)
   a2ea4:	45400015 	stw	r21,0(r8)
   a2ea8:	1c07883a 	add	r3,r3,r16
   a2eac:	10800044 	addi	r2,r2,1
   a2eb0:	d8c02015 	stw	r3,128(sp)
   a2eb4:	44000115 	stw	r16,4(r8)
   a2eb8:	d8801f15 	stw	r2,124(sp)
   a2ebc:	00c001c4 	movi	r3,7
   a2ec0:	1880a916 	blt	r3,r2,a3168 <___vfprintf_internal_r+0x3dc>
   a2ec4:	42000204 	addi	r8,r8,8
   a2ec8:	d9402f17 	ldw	r5,188(sp)
   a2ecc:	2c0b883a 	add	r5,r5,r16
   a2ed0:	d9402f15 	stw	r5,188(sp)
   a2ed4:	88800007 	ldb	r2,0(r17)
   a2ed8:	1000aa26 	beq	r2,zero,a3184 <___vfprintf_internal_r+0x3f8>
   a2edc:	8d400044 	addi	r21,r17,1
   a2ee0:	8c400047 	ldb	r17,1(r17)
   a2ee4:	0021883a 	mov	r16,zero
   a2ee8:	00bfffc4 	movi	r2,-1
   a2eec:	0025883a 	mov	r18,zero
   a2ef0:	dc002905 	stb	r16,164(sp)
   a2ef4:	d8002785 	stb	zero,158(sp)
   a2ef8:	d8002b05 	stb	zero,172(sp)
   a2efc:	d8802a15 	stw	r2,168(sp)
   a2f00:	d8003115 	stw	zero,196(sp)
   a2f04:	04c01604 	movi	r19,88
   a2f08:	05800244 	movi	r22,9
   a2f0c:	9021883a 	mov	r16,r18
   a2f10:	4039883a 	mov	fp,r8
   a2f14:	ad400044 	addi	r21,r21,1
   a2f18:	88bff804 	addi	r2,r17,-32
   a2f1c:	98833236 	bltu	r19,r2,a3be8 <___vfprintf_internal_r+0xe5c>
   a2f20:	100490ba 	slli	r2,r2,2
   a2f24:	00c002b4 	movhi	r3,10
   a2f28:	18cbce04 	addi	r3,r3,12088
   a2f2c:	10c5883a 	add	r2,r2,r3
   a2f30:	10800017 	ldw	r2,0(r2)
   a2f34:	1000683a 	jmp	r2
   a2f38:	000a3ae0 	cmpeqi	zero,zero,10475
   a2f3c:	000a3be8 	cmpgeui	zero,zero,10479
   a2f40:	000a3be8 	cmpgeui	zero,zero,10479
   a2f44:	000a3b00 	call	a3b0 <__alt_mem_sdram_controller+0xa3b0>
   a2f48:	000a3be8 	cmpgeui	zero,zero,10479
   a2f4c:	000a3be8 	cmpgeui	zero,zero,10479
   a2f50:	000a3be8 	cmpgeui	zero,zero,10479
   a2f54:	000a3be8 	cmpgeui	zero,zero,10479
   a2f58:	000a3be8 	cmpgeui	zero,zero,10479
   a2f5c:	000a3be8 	cmpgeui	zero,zero,10479
   a2f60:	000a31e8 	cmpgeui	zero,zero,10439
   a2f64:	000a39f0 	cmpltui	zero,zero,10471
   a2f68:	000a3be8 	cmpgeui	zero,zero,10479
   a2f6c:	000a30ac 	andhi	zero,zero,10434
   a2f70:	000a320c 	andi	zero,zero,10440
   a2f74:	000a3be8 	cmpgeui	zero,zero,10479
   a2f78:	000a325c 	xori	zero,zero,10441
   a2f7c:	000a3268 	cmpgeui	zero,zero,10441
   a2f80:	000a3268 	cmpgeui	zero,zero,10441
   a2f84:	000a3268 	cmpgeui	zero,zero,10441
   a2f88:	000a3268 	cmpgeui	zero,zero,10441
   a2f8c:	000a3268 	cmpgeui	zero,zero,10441
   a2f90:	000a3268 	cmpgeui	zero,zero,10441
   a2f94:	000a3268 	cmpgeui	zero,zero,10441
   a2f98:	000a3268 	cmpgeui	zero,zero,10441
   a2f9c:	000a3268 	cmpgeui	zero,zero,10441
   a2fa0:	000a3be8 	cmpgeui	zero,zero,10479
   a2fa4:	000a3be8 	cmpgeui	zero,zero,10479
   a2fa8:	000a3be8 	cmpgeui	zero,zero,10479
   a2fac:	000a3be8 	cmpgeui	zero,zero,10479
   a2fb0:	000a3be8 	cmpgeui	zero,zero,10479
   a2fb4:	000a3be8 	cmpgeui	zero,zero,10479
   a2fb8:	000a3be8 	cmpgeui	zero,zero,10479
   a2fbc:	000a3be8 	cmpgeui	zero,zero,10479
   a2fc0:	000a3be8 	cmpgeui	zero,zero,10479
   a2fc4:	000a3be8 	cmpgeui	zero,zero,10479
   a2fc8:	000a32a4 	muli	zero,zero,10442
   a2fcc:	000a336c 	andhi	zero,zero,10445
   a2fd0:	000a3be8 	cmpgeui	zero,zero,10479
   a2fd4:	000a336c 	andhi	zero,zero,10445
   a2fd8:	000a3be8 	cmpgeui	zero,zero,10479
   a2fdc:	000a3be8 	cmpgeui	zero,zero,10479
   a2fe0:	000a3be8 	cmpgeui	zero,zero,10479
   a2fe4:	000a3be8 	cmpgeui	zero,zero,10479
   a2fe8:	000a3418 	cmpnei	zero,zero,10448
   a2fec:	000a3be8 	cmpgeui	zero,zero,10479
   a2ff0:	000a3be8 	cmpgeui	zero,zero,10479
   a2ff4:	000a3424 	muli	zero,zero,10448
   a2ff8:	000a3be8 	cmpgeui	zero,zero,10479
   a2ffc:	000a3be8 	cmpgeui	zero,zero,10479
   a3000:	000a3be8 	cmpgeui	zero,zero,10479
   a3004:	000a3be8 	cmpgeui	zero,zero,10479
   a3008:	000a3be8 	cmpgeui	zero,zero,10479
   a300c:	000a38a8 	cmpgeui	zero,zero,10466
   a3010:	000a3be8 	cmpgeui	zero,zero,10479
   a3014:	000a3be8 	cmpgeui	zero,zero,10479
   a3018:	000a3914 	movui	zero,10468
   a301c:	000a3be8 	cmpgeui	zero,zero,10479
   a3020:	000a3be8 	cmpgeui	zero,zero,10479
   a3024:	000a3be8 	cmpgeui	zero,zero,10479
   a3028:	000a3be8 	cmpgeui	zero,zero,10479
   a302c:	000a3be8 	cmpgeui	zero,zero,10479
   a3030:	000a3be8 	cmpgeui	zero,zero,10479
   a3034:	000a3be8 	cmpgeui	zero,zero,10479
   a3038:	000a3be8 	cmpgeui	zero,zero,10479
   a303c:	000a3be8 	cmpgeui	zero,zero,10479
   a3040:	000a3be8 	cmpgeui	zero,zero,10479
   a3044:	000a3b8c 	andi	zero,zero,10478
   a3048:	000a3b0c 	andi	zero,zero,10476
   a304c:	000a336c 	andhi	zero,zero,10445
   a3050:	000a336c 	andhi	zero,zero,10445
   a3054:	000a336c 	andhi	zero,zero,10445
   a3058:	000a3b2c 	andhi	zero,zero,10476
   a305c:	000a3b0c 	andi	zero,zero,10476
   a3060:	000a3be8 	cmpgeui	zero,zero,10479
   a3064:	000a3be8 	cmpgeui	zero,zero,10479
   a3068:	000a3b38 	rdprs	zero,zero,10476
   a306c:	000a3be8 	cmpgeui	zero,zero,10479
   a3070:	000a3b4c 	andi	zero,zero,10477
   a3074:	000a39d0 	cmplti	zero,zero,10471
   a3078:	000a30b8 	rdprs	zero,zero,10434
   a307c:	000a3a08 	cmpgei	zero,zero,10472
   a3080:	000a3be8 	cmpgeui	zero,zero,10479
   a3084:	000a3a14 	movui	zero,10472
   a3088:	000a3be8 	cmpgeui	zero,zero,10479
   a308c:	000a3a78 	rdprs	zero,zero,10473
   a3090:	000a3be8 	cmpgeui	zero,zero,10479
   a3094:	000a3be8 	cmpgeui	zero,zero,10479
   a3098:	000a3a98 	cmpnei	zero,zero,10474
   a309c:	d8c03117 	ldw	r3,196(sp)
   a30a0:	d8802e15 	stw	r2,184(sp)
   a30a4:	00c7c83a 	sub	r3,zero,r3
   a30a8:	d8c03115 	stw	r3,196(sp)
   a30ac:	84000114 	ori	r16,r16,4
   a30b0:	ac400007 	ldb	r17,0(r21)
   a30b4:	003f9706 	br	a2f14 <__alt_data_end+0xfffe2f14>
   a30b8:	00800c04 	movi	r2,48
   a30bc:	d8802705 	stb	r2,156(sp)
   a30c0:	00801e04 	movi	r2,120
   a30c4:	d8802745 	stb	r2,157(sp)
   a30c8:	d9002a17 	ldw	r4,168(sp)
   a30cc:	d8802e17 	ldw	r2,184(sp)
   a30d0:	d8002785 	stb	zero,158(sp)
   a30d4:	e011883a 	mov	r8,fp
   a30d8:	10c00104 	addi	r3,r2,4
   a30dc:	14c00017 	ldw	r19,0(r2)
   a30e0:	002d883a 	mov	r22,zero
   a30e4:	80800094 	ori	r2,r16,2
   a30e8:	2002ca16 	blt	r4,zero,a3c14 <___vfprintf_internal_r+0xe88>
   a30ec:	00bfdfc4 	movi	r2,-129
   a30f0:	80a4703a 	and	r18,r16,r2
   a30f4:	d8c02e15 	stw	r3,184(sp)
   a30f8:	94800094 	ori	r18,r18,2
   a30fc:	9802b41e 	bne	r19,zero,a3bd0 <___vfprintf_internal_r+0xe44>
   a3100:	014002f4 	movhi	r5,11
   a3104:	29450904 	addi	r5,r5,5156
   a3108:	d9403915 	stw	r5,228(sp)
   a310c:	04401e04 	movi	r17,120
   a3110:	d8802a17 	ldw	r2,168(sp)
   a3114:	0039883a 	mov	fp,zero
   a3118:	1001fa26 	beq	r2,zero,a3904 <___vfprintf_internal_r+0xb78>
   a311c:	0027883a 	mov	r19,zero
   a3120:	002d883a 	mov	r22,zero
   a3124:	00021906 	br	a398c <___vfprintf_internal_r+0xc00>
   a3128:	d9002d17 	ldw	r4,180(sp)
   a312c:	b80b883a 	mov	r5,r23
   a3130:	00a52f80 	call	a52f8 <__swsetup_r>
   a3134:	1005dc1e 	bne	r2,zero,a48a8 <___vfprintf_internal_r+0x1b1c>
   a3138:	b880030b 	ldhu	r2,12(r23)
   a313c:	00c00284 	movi	r3,10
   a3140:	1080068c 	andi	r2,r2,26
   a3144:	10ff3a1e 	bne	r2,r3,a2e30 <__alt_data_end+0xfffe2e30>
   a3148:	b880038f 	ldh	r2,14(r23)
   a314c:	103f3816 	blt	r2,zero,a2e30 <__alt_data_end+0xfffe2e30>
   a3150:	d9c02e17 	ldw	r7,184(sp)
   a3154:	d9002d17 	ldw	r4,180(sp)
   a3158:	a80d883a 	mov	r6,r21
   a315c:	b80b883a 	mov	r5,r23
   a3160:	00a50840 	call	a5084 <__sbprintf>
   a3164:	00001106 	br	a31ac <___vfprintf_internal_r+0x420>
   a3168:	d9002d17 	ldw	r4,180(sp)
   a316c:	d9801e04 	addi	r6,sp,120
   a3170:	b80b883a 	mov	r5,r23
   a3174:	00a90a40 	call	a90a4 <__sprint_r>
   a3178:	1000081e 	bne	r2,zero,a319c <___vfprintf_internal_r+0x410>
   a317c:	da000404 	addi	r8,sp,16
   a3180:	003f5106 	br	a2ec8 <__alt_data_end+0xfffe2ec8>
   a3184:	d8802017 	ldw	r2,128(sp)
   a3188:	10000426 	beq	r2,zero,a319c <___vfprintf_internal_r+0x410>
   a318c:	d9002d17 	ldw	r4,180(sp)
   a3190:	d9801e04 	addi	r6,sp,120
   a3194:	b80b883a 	mov	r5,r23
   a3198:	00a90a40 	call	a90a4 <__sprint_r>
   a319c:	b880030b 	ldhu	r2,12(r23)
   a31a0:	1080100c 	andi	r2,r2,64
   a31a4:	1005c01e 	bne	r2,zero,a48a8 <___vfprintf_internal_r+0x1b1c>
   a31a8:	d8802f17 	ldw	r2,188(sp)
   a31ac:	dfc04717 	ldw	ra,284(sp)
   a31b0:	df004617 	ldw	fp,280(sp)
   a31b4:	ddc04517 	ldw	r23,276(sp)
   a31b8:	dd804417 	ldw	r22,272(sp)
   a31bc:	dd404317 	ldw	r21,268(sp)
   a31c0:	dd004217 	ldw	r20,264(sp)
   a31c4:	dcc04117 	ldw	r19,260(sp)
   a31c8:	dc804017 	ldw	r18,256(sp)
   a31cc:	dc403f17 	ldw	r17,252(sp)
   a31d0:	dc003e17 	ldw	r16,248(sp)
   a31d4:	dec04804 	addi	sp,sp,288
   a31d8:	f800283a 	ret
   a31dc:	d9002d17 	ldw	r4,180(sp)
   a31e0:	00a0d880 	call	a0d88 <__sinit>
   a31e4:	003f0206 	br	a2df0 <__alt_data_end+0xfffe2df0>
   a31e8:	d9002e17 	ldw	r4,184(sp)
   a31ec:	d9402e17 	ldw	r5,184(sp)
   a31f0:	21000017 	ldw	r4,0(r4)
   a31f4:	28800104 	addi	r2,r5,4
   a31f8:	d9003115 	stw	r4,196(sp)
   a31fc:	203fa716 	blt	r4,zero,a309c <__alt_data_end+0xfffe309c>
   a3200:	d8802e15 	stw	r2,184(sp)
   a3204:	ac400007 	ldb	r17,0(r21)
   a3208:	003f4206 	br	a2f14 <__alt_data_end+0xfffe2f14>
   a320c:	ac400007 	ldb	r17,0(r21)
   a3210:	01000a84 	movi	r4,42
   a3214:	a8c00044 	addi	r3,r21,1
   a3218:	89075826 	beq	r17,r4,a4f7c <___vfprintf_internal_r+0x21f0>
   a321c:	8cbff404 	addi	r18,r17,-48
   a3220:	b486ae36 	bltu	r22,r18,a4cdc <___vfprintf_internal_r+0x1f50>
   a3224:	0009883a 	mov	r4,zero
   a3228:	1823883a 	mov	r17,r3
   a322c:	01400284 	movi	r5,10
   a3230:	00ab8e00 	call	ab8e0 <__mulsi3>
   a3234:	88c00007 	ldb	r3,0(r17)
   a3238:	1489883a 	add	r4,r2,r18
   a323c:	8d400044 	addi	r21,r17,1
   a3240:	1cbff404 	addi	r18,r3,-48
   a3244:	a823883a 	mov	r17,r21
   a3248:	b4bff82e 	bgeu	r22,r18,a322c <__alt_data_end+0xfffe322c>
   a324c:	1823883a 	mov	r17,r3
   a3250:	2005f616 	blt	r4,zero,a4a2c <___vfprintf_internal_r+0x1ca0>
   a3254:	d9002a15 	stw	r4,168(sp)
   a3258:	003f2f06 	br	a2f18 <__alt_data_end+0xfffe2f18>
   a325c:	84002014 	ori	r16,r16,128
   a3260:	ac400007 	ldb	r17,0(r21)
   a3264:	003f2b06 	br	a2f14 <__alt_data_end+0xfffe2f14>
   a3268:	8cbff404 	addi	r18,r17,-48
   a326c:	d8003115 	stw	zero,196(sp)
   a3270:	0009883a 	mov	r4,zero
   a3274:	a823883a 	mov	r17,r21
   a3278:	01400284 	movi	r5,10
   a327c:	00ab8e00 	call	ab8e0 <__mulsi3>
   a3280:	88c00007 	ldb	r3,0(r17)
   a3284:	9089883a 	add	r4,r18,r2
   a3288:	ad400044 	addi	r21,r21,1
   a328c:	1cbff404 	addi	r18,r3,-48
   a3290:	a823883a 	mov	r17,r21
   a3294:	b4bff82e 	bgeu	r22,r18,a3278 <__alt_data_end+0xfffe3278>
   a3298:	1823883a 	mov	r17,r3
   a329c:	d9003115 	stw	r4,196(sp)
   a32a0:	003f1d06 	br	a2f18 <__alt_data_end+0xfffe2f18>
   a32a4:	8025883a 	mov	r18,r16
   a32a8:	dc002903 	ldbu	r16,164(sp)
   a32ac:	e011883a 	mov	r8,fp
   a32b0:	84003fcc 	andi	r16,r16,255
   a32b4:	8007531e 	bne	r16,zero,a5004 <___vfprintf_internal_r+0x2278>
   a32b8:	94800414 	ori	r18,r18,16
   a32bc:	9080080c 	andi	r2,r18,32
   a32c0:	1003a326 	beq	r2,zero,a4150 <___vfprintf_internal_r+0x13c4>
   a32c4:	d9002e17 	ldw	r4,184(sp)
   a32c8:	20800117 	ldw	r2,4(r4)
   a32cc:	24c00017 	ldw	r19,0(r4)
   a32d0:	21000204 	addi	r4,r4,8
   a32d4:	d9002e15 	stw	r4,184(sp)
   a32d8:	102d883a 	mov	r22,r2
   a32dc:	10047316 	blt	r2,zero,a44ac <___vfprintf_internal_r+0x1720>
   a32e0:	d9002a17 	ldw	r4,168(sp)
   a32e4:	df002783 	ldbu	fp,158(sp)
   a32e8:	2003e416 	blt	r4,zero,a427c <___vfprintf_internal_r+0x14f0>
   a32ec:	00ffdfc4 	movi	r3,-129
   a32f0:	9d84b03a 	or	r2,r19,r22
   a32f4:	90e4703a 	and	r18,r18,r3
   a32f8:	10018026 	beq	r2,zero,a38fc <___vfprintf_internal_r+0xb70>
   a32fc:	b003ab26 	beq	r22,zero,a41ac <___vfprintf_internal_r+0x1420>
   a3300:	dc402915 	stw	r17,164(sp)
   a3304:	dc001e04 	addi	r16,sp,120
   a3308:	b023883a 	mov	r17,r22
   a330c:	402d883a 	mov	r22,r8
   a3310:	9809883a 	mov	r4,r19
   a3314:	880b883a 	mov	r5,r17
   a3318:	01800284 	movi	r6,10
   a331c:	000f883a 	mov	r7,zero
   a3320:	00ab1680 	call	ab168 <__umoddi3>
   a3324:	10800c04 	addi	r2,r2,48
   a3328:	843fffc4 	addi	r16,r16,-1
   a332c:	9809883a 	mov	r4,r19
   a3330:	880b883a 	mov	r5,r17
   a3334:	80800005 	stb	r2,0(r16)
   a3338:	01800284 	movi	r6,10
   a333c:	000f883a 	mov	r7,zero
   a3340:	00aab6c0 	call	aab6c <__udivdi3>
   a3344:	1027883a 	mov	r19,r2
   a3348:	10c4b03a 	or	r2,r2,r3
   a334c:	1823883a 	mov	r17,r3
   a3350:	103fef1e 	bne	r2,zero,a3310 <__alt_data_end+0xfffe3310>
   a3354:	d8c02817 	ldw	r3,160(sp)
   a3358:	dc402917 	ldw	r17,164(sp)
   a335c:	b011883a 	mov	r8,r22
   a3360:	1c07c83a 	sub	r3,r3,r16
   a3364:	d8c02b15 	stw	r3,172(sp)
   a3368:	00005f06 	br	a34e8 <___vfprintf_internal_r+0x75c>
   a336c:	8025883a 	mov	r18,r16
   a3370:	dc002903 	ldbu	r16,164(sp)
   a3374:	e011883a 	mov	r8,fp
   a3378:	84003fcc 	andi	r16,r16,255
   a337c:	80071e1e 	bne	r16,zero,a4ff8 <___vfprintf_internal_r+0x226c>
   a3380:	9080020c 	andi	r2,r18,8
   a3384:	1004af26 	beq	r2,zero,a4644 <___vfprintf_internal_r+0x18b8>
   a3388:	d9002e17 	ldw	r4,184(sp)
   a338c:	d9402e17 	ldw	r5,184(sp)
   a3390:	d8802e17 	ldw	r2,184(sp)
   a3394:	21000017 	ldw	r4,0(r4)
   a3398:	29400117 	ldw	r5,4(r5)
   a339c:	10800204 	addi	r2,r2,8
   a33a0:	d9003615 	stw	r4,216(sp)
   a33a4:	d9403815 	stw	r5,224(sp)
   a33a8:	d8802e15 	stw	r2,184(sp)
   a33ac:	d9003617 	ldw	r4,216(sp)
   a33b0:	d9403817 	ldw	r5,224(sp)
   a33b4:	da003d15 	stw	r8,244(sp)
   a33b8:	04000044 	movi	r16,1
   a33bc:	00a8e580 	call	a8e58 <__fpclassifyd>
   a33c0:	da003d17 	ldw	r8,244(sp)
   a33c4:	1404441e 	bne	r2,r16,a44d8 <___vfprintf_internal_r+0x174c>
   a33c8:	d9003617 	ldw	r4,216(sp)
   a33cc:	d9403817 	ldw	r5,224(sp)
   a33d0:	000d883a 	mov	r6,zero
   a33d4:	000f883a 	mov	r7,zero
   a33d8:	00acce80 	call	acce8 <__ledf2>
   a33dc:	da003d17 	ldw	r8,244(sp)
   a33e0:	1005e316 	blt	r2,zero,a4b70 <___vfprintf_internal_r+0x1de4>
   a33e4:	df002783 	ldbu	fp,158(sp)
   a33e8:	008011c4 	movi	r2,71
   a33ec:	1445580e 	bge	r2,r17,a4950 <___vfprintf_internal_r+0x1bc4>
   a33f0:	040002f4 	movhi	r16,11
   a33f4:	84050104 	addi	r16,r16,5124
   a33f8:	00c000c4 	movi	r3,3
   a33fc:	00bfdfc4 	movi	r2,-129
   a3400:	d8c02915 	stw	r3,164(sp)
   a3404:	90a4703a 	and	r18,r18,r2
   a3408:	d8c02b15 	stw	r3,172(sp)
   a340c:	d8002a15 	stw	zero,168(sp)
   a3410:	d8003215 	stw	zero,200(sp)
   a3414:	00003a06 	br	a3500 <___vfprintf_internal_r+0x774>
   a3418:	84000214 	ori	r16,r16,8
   a341c:	ac400007 	ldb	r17,0(r21)
   a3420:	003ebc06 	br	a2f14 <__alt_data_end+0xfffe2f14>
   a3424:	8025883a 	mov	r18,r16
   a3428:	dc002903 	ldbu	r16,164(sp)
   a342c:	e011883a 	mov	r8,fp
   a3430:	84003fcc 	andi	r16,r16,255
   a3434:	8007001e 	bne	r16,zero,a5038 <___vfprintf_internal_r+0x22ac>
   a3438:	94800414 	ori	r18,r18,16
   a343c:	9080080c 	andi	r2,r18,32
   a3440:	1002fa26 	beq	r2,zero,a402c <___vfprintf_internal_r+0x12a0>
   a3444:	d9002e17 	ldw	r4,184(sp)
   a3448:	d9402a17 	ldw	r5,168(sp)
   a344c:	d8002785 	stb	zero,158(sp)
   a3450:	20800204 	addi	r2,r4,8
   a3454:	24c00017 	ldw	r19,0(r4)
   a3458:	25800117 	ldw	r22,4(r4)
   a345c:	2804b116 	blt	r5,zero,a4724 <___vfprintf_internal_r+0x1998>
   a3460:	013fdfc4 	movi	r4,-129
   a3464:	9d86b03a 	or	r3,r19,r22
   a3468:	d8802e15 	stw	r2,184(sp)
   a346c:	9124703a 	and	r18,r18,r4
   a3470:	1802fb1e 	bne	r3,zero,a4060 <___vfprintf_internal_r+0x12d4>
   a3474:	d8c02a17 	ldw	r3,168(sp)
   a3478:	0039883a 	mov	fp,zero
   a347c:	1805e526 	beq	r3,zero,a4c14 <___vfprintf_internal_r+0x1e88>
   a3480:	0027883a 	mov	r19,zero
   a3484:	002d883a 	mov	r22,zero
   a3488:	dc001e04 	addi	r16,sp,120
   a348c:	9806d0fa 	srli	r3,r19,3
   a3490:	b008977a 	slli	r4,r22,29
   a3494:	b02cd0fa 	srli	r22,r22,3
   a3498:	9cc001cc 	andi	r19,r19,7
   a349c:	98800c04 	addi	r2,r19,48
   a34a0:	843fffc4 	addi	r16,r16,-1
   a34a4:	20e6b03a 	or	r19,r4,r3
   a34a8:	80800005 	stb	r2,0(r16)
   a34ac:	9d86b03a 	or	r3,r19,r22
   a34b0:	183ff61e 	bne	r3,zero,a348c <__alt_data_end+0xfffe348c>
   a34b4:	90c0004c 	andi	r3,r18,1
   a34b8:	18014126 	beq	r3,zero,a39c0 <___vfprintf_internal_r+0xc34>
   a34bc:	10803fcc 	andi	r2,r2,255
   a34c0:	1080201c 	xori	r2,r2,128
   a34c4:	10bfe004 	addi	r2,r2,-128
   a34c8:	00c00c04 	movi	r3,48
   a34cc:	10c13c26 	beq	r2,r3,a39c0 <___vfprintf_internal_r+0xc34>
   a34d0:	80ffffc5 	stb	r3,-1(r16)
   a34d4:	d8c02817 	ldw	r3,160(sp)
   a34d8:	80bfffc4 	addi	r2,r16,-1
   a34dc:	1021883a 	mov	r16,r2
   a34e0:	1887c83a 	sub	r3,r3,r2
   a34e4:	d8c02b15 	stw	r3,172(sp)
   a34e8:	d8802b17 	ldw	r2,172(sp)
   a34ec:	d9002a17 	ldw	r4,168(sp)
   a34f0:	1100010e 	bge	r2,r4,a34f8 <___vfprintf_internal_r+0x76c>
   a34f4:	2005883a 	mov	r2,r4
   a34f8:	d8802915 	stw	r2,164(sp)
   a34fc:	d8003215 	stw	zero,200(sp)
   a3500:	e7003fcc 	andi	fp,fp,255
   a3504:	e700201c 	xori	fp,fp,128
   a3508:	e73fe004 	addi	fp,fp,-128
   a350c:	e0000326 	beq	fp,zero,a351c <___vfprintf_internal_r+0x790>
   a3510:	d8c02917 	ldw	r3,164(sp)
   a3514:	18c00044 	addi	r3,r3,1
   a3518:	d8c02915 	stw	r3,164(sp)
   a351c:	90c0008c 	andi	r3,r18,2
   a3520:	d8c02c15 	stw	r3,176(sp)
   a3524:	18000326 	beq	r3,zero,a3534 <___vfprintf_internal_r+0x7a8>
   a3528:	d8c02917 	ldw	r3,164(sp)
   a352c:	18c00084 	addi	r3,r3,2
   a3530:	d8c02915 	stw	r3,164(sp)
   a3534:	90c0210c 	andi	r3,r18,132
   a3538:	d8c03015 	stw	r3,192(sp)
   a353c:	1801c51e 	bne	r3,zero,a3c54 <___vfprintf_internal_r+0xec8>
   a3540:	d9003117 	ldw	r4,196(sp)
   a3544:	d8c02917 	ldw	r3,164(sp)
   a3548:	20e7c83a 	sub	r19,r4,r3
   a354c:	04c1c10e 	bge	zero,r19,a3c54 <___vfprintf_internal_r+0xec8>
   a3550:	02400404 	movi	r9,16
   a3554:	d8c02017 	ldw	r3,128(sp)
   a3558:	d8801f17 	ldw	r2,124(sp)
   a355c:	4cc52f0e 	bge	r9,r19,a4a1c <___vfprintf_internal_r+0x1c90>
   a3560:	014002f4 	movhi	r5,11
   a3564:	29451484 	addi	r5,r5,5202
   a3568:	dc403b15 	stw	r17,236(sp)
   a356c:	d9403515 	stw	r5,212(sp)
   a3570:	9823883a 	mov	r17,r19
   a3574:	482d883a 	mov	r22,r9
   a3578:	9027883a 	mov	r19,r18
   a357c:	070001c4 	movi	fp,7
   a3580:	8025883a 	mov	r18,r16
   a3584:	dc002d17 	ldw	r16,180(sp)
   a3588:	00000306 	br	a3598 <___vfprintf_internal_r+0x80c>
   a358c:	8c7ffc04 	addi	r17,r17,-16
   a3590:	42000204 	addi	r8,r8,8
   a3594:	b440130e 	bge	r22,r17,a35e4 <___vfprintf_internal_r+0x858>
   a3598:	010002f4 	movhi	r4,11
   a359c:	18c00404 	addi	r3,r3,16
   a35a0:	10800044 	addi	r2,r2,1
   a35a4:	21051484 	addi	r4,r4,5202
   a35a8:	41000015 	stw	r4,0(r8)
   a35ac:	45800115 	stw	r22,4(r8)
   a35b0:	d8c02015 	stw	r3,128(sp)
   a35b4:	d8801f15 	stw	r2,124(sp)
   a35b8:	e0bff40e 	bge	fp,r2,a358c <__alt_data_end+0xfffe358c>
   a35bc:	d9801e04 	addi	r6,sp,120
   a35c0:	b80b883a 	mov	r5,r23
   a35c4:	8009883a 	mov	r4,r16
   a35c8:	00a90a40 	call	a90a4 <__sprint_r>
   a35cc:	103ef31e 	bne	r2,zero,a319c <__alt_data_end+0xfffe319c>
   a35d0:	8c7ffc04 	addi	r17,r17,-16
   a35d4:	d8c02017 	ldw	r3,128(sp)
   a35d8:	d8801f17 	ldw	r2,124(sp)
   a35dc:	da000404 	addi	r8,sp,16
   a35e0:	b47fed16 	blt	r22,r17,a3598 <__alt_data_end+0xfffe3598>
   a35e4:	9021883a 	mov	r16,r18
   a35e8:	9825883a 	mov	r18,r19
   a35ec:	8827883a 	mov	r19,r17
   a35f0:	dc403b17 	ldw	r17,236(sp)
   a35f4:	d9403517 	ldw	r5,212(sp)
   a35f8:	98c7883a 	add	r3,r19,r3
   a35fc:	10800044 	addi	r2,r2,1
   a3600:	41400015 	stw	r5,0(r8)
   a3604:	44c00115 	stw	r19,4(r8)
   a3608:	d8c02015 	stw	r3,128(sp)
   a360c:	d8801f15 	stw	r2,124(sp)
   a3610:	010001c4 	movi	r4,7
   a3614:	2082c516 	blt	r4,r2,a412c <___vfprintf_internal_r+0x13a0>
   a3618:	df002787 	ldb	fp,158(sp)
   a361c:	42000204 	addi	r8,r8,8
   a3620:	e0000c26 	beq	fp,zero,a3654 <___vfprintf_internal_r+0x8c8>
   a3624:	d8801f17 	ldw	r2,124(sp)
   a3628:	d9002784 	addi	r4,sp,158
   a362c:	18c00044 	addi	r3,r3,1
   a3630:	10800044 	addi	r2,r2,1
   a3634:	41000015 	stw	r4,0(r8)
   a3638:	01000044 	movi	r4,1
   a363c:	41000115 	stw	r4,4(r8)
   a3640:	d8c02015 	stw	r3,128(sp)
   a3644:	d8801f15 	stw	r2,124(sp)
   a3648:	010001c4 	movi	r4,7
   a364c:	20825e16 	blt	r4,r2,a3fc8 <___vfprintf_internal_r+0x123c>
   a3650:	42000204 	addi	r8,r8,8
   a3654:	d8802c17 	ldw	r2,176(sp)
   a3658:	10000c26 	beq	r2,zero,a368c <___vfprintf_internal_r+0x900>
   a365c:	d8801f17 	ldw	r2,124(sp)
   a3660:	d9002704 	addi	r4,sp,156
   a3664:	18c00084 	addi	r3,r3,2
   a3668:	10800044 	addi	r2,r2,1
   a366c:	41000015 	stw	r4,0(r8)
   a3670:	01000084 	movi	r4,2
   a3674:	41000115 	stw	r4,4(r8)
   a3678:	d8c02015 	stw	r3,128(sp)
   a367c:	d8801f15 	stw	r2,124(sp)
   a3680:	010001c4 	movi	r4,7
   a3684:	20825816 	blt	r4,r2,a3fe8 <___vfprintf_internal_r+0x125c>
   a3688:	42000204 	addi	r8,r8,8
   a368c:	d9003017 	ldw	r4,192(sp)
   a3690:	00802004 	movi	r2,128
   a3694:	2081bb26 	beq	r4,r2,a3d84 <___vfprintf_internal_r+0xff8>
   a3698:	d9402a17 	ldw	r5,168(sp)
   a369c:	d8802b17 	ldw	r2,172(sp)
   a36a0:	28adc83a 	sub	r22,r5,r2
   a36a4:	0580310e 	bge	zero,r22,a376c <___vfprintf_internal_r+0x9e0>
   a36a8:	07000404 	movi	fp,16
   a36ac:	d8801f17 	ldw	r2,124(sp)
   a36b0:	e584360e 	bge	fp,r22,a478c <___vfprintf_internal_r+0x1a00>
   a36b4:	014002f4 	movhi	r5,11
   a36b8:	29451084 	addi	r5,r5,5186
   a36bc:	dc402a15 	stw	r17,168(sp)
   a36c0:	d9402c15 	stw	r5,176(sp)
   a36c4:	b023883a 	mov	r17,r22
   a36c8:	04c001c4 	movi	r19,7
   a36cc:	a82d883a 	mov	r22,r21
   a36d0:	902b883a 	mov	r21,r18
   a36d4:	8025883a 	mov	r18,r16
   a36d8:	dc002d17 	ldw	r16,180(sp)
   a36dc:	00000306 	br	a36ec <___vfprintf_internal_r+0x960>
   a36e0:	8c7ffc04 	addi	r17,r17,-16
   a36e4:	42000204 	addi	r8,r8,8
   a36e8:	e440110e 	bge	fp,r17,a3730 <___vfprintf_internal_r+0x9a4>
   a36ec:	18c00404 	addi	r3,r3,16
   a36f0:	10800044 	addi	r2,r2,1
   a36f4:	45000015 	stw	r20,0(r8)
   a36f8:	47000115 	stw	fp,4(r8)
   a36fc:	d8c02015 	stw	r3,128(sp)
   a3700:	d8801f15 	stw	r2,124(sp)
   a3704:	98bff60e 	bge	r19,r2,a36e0 <__alt_data_end+0xfffe36e0>
   a3708:	d9801e04 	addi	r6,sp,120
   a370c:	b80b883a 	mov	r5,r23
   a3710:	8009883a 	mov	r4,r16
   a3714:	00a90a40 	call	a90a4 <__sprint_r>
   a3718:	103ea01e 	bne	r2,zero,a319c <__alt_data_end+0xfffe319c>
   a371c:	8c7ffc04 	addi	r17,r17,-16
   a3720:	d8c02017 	ldw	r3,128(sp)
   a3724:	d8801f17 	ldw	r2,124(sp)
   a3728:	da000404 	addi	r8,sp,16
   a372c:	e47fef16 	blt	fp,r17,a36ec <__alt_data_end+0xfffe36ec>
   a3730:	9021883a 	mov	r16,r18
   a3734:	a825883a 	mov	r18,r21
   a3738:	b02b883a 	mov	r21,r22
   a373c:	882d883a 	mov	r22,r17
   a3740:	dc402a17 	ldw	r17,168(sp)
   a3744:	d9002c17 	ldw	r4,176(sp)
   a3748:	1d87883a 	add	r3,r3,r22
   a374c:	10800044 	addi	r2,r2,1
   a3750:	41000015 	stw	r4,0(r8)
   a3754:	45800115 	stw	r22,4(r8)
   a3758:	d8c02015 	stw	r3,128(sp)
   a375c:	d8801f15 	stw	r2,124(sp)
   a3760:	010001c4 	movi	r4,7
   a3764:	20821016 	blt	r4,r2,a3fa8 <___vfprintf_internal_r+0x121c>
   a3768:	42000204 	addi	r8,r8,8
   a376c:	9080400c 	andi	r2,r18,256
   a3770:	10013a1e 	bne	r2,zero,a3c5c <___vfprintf_internal_r+0xed0>
   a3774:	d9402b17 	ldw	r5,172(sp)
   a3778:	d8801f17 	ldw	r2,124(sp)
   a377c:	44000015 	stw	r16,0(r8)
   a3780:	1947883a 	add	r3,r3,r5
   a3784:	10800044 	addi	r2,r2,1
   a3788:	41400115 	stw	r5,4(r8)
   a378c:	d8c02015 	stw	r3,128(sp)
   a3790:	d8801f15 	stw	r2,124(sp)
   a3794:	010001c4 	movi	r4,7
   a3798:	2081f516 	blt	r4,r2,a3f70 <___vfprintf_internal_r+0x11e4>
   a379c:	42000204 	addi	r8,r8,8
   a37a0:	9480010c 	andi	r18,r18,4
   a37a4:	90003226 	beq	r18,zero,a3870 <___vfprintf_internal_r+0xae4>
   a37a8:	d9403117 	ldw	r5,196(sp)
   a37ac:	d8802917 	ldw	r2,164(sp)
   a37b0:	28a1c83a 	sub	r16,r5,r2
   a37b4:	04002e0e 	bge	zero,r16,a3870 <___vfprintf_internal_r+0xae4>
   a37b8:	04400404 	movi	r17,16
   a37bc:	d8801f17 	ldw	r2,124(sp)
   a37c0:	8c04c40e 	bge	r17,r16,a4ad4 <___vfprintf_internal_r+0x1d48>
   a37c4:	014002f4 	movhi	r5,11
   a37c8:	29451484 	addi	r5,r5,5202
   a37cc:	d9403515 	stw	r5,212(sp)
   a37d0:	048001c4 	movi	r18,7
   a37d4:	dcc02d17 	ldw	r19,180(sp)
   a37d8:	00000306 	br	a37e8 <___vfprintf_internal_r+0xa5c>
   a37dc:	843ffc04 	addi	r16,r16,-16
   a37e0:	42000204 	addi	r8,r8,8
   a37e4:	8c00130e 	bge	r17,r16,a3834 <___vfprintf_internal_r+0xaa8>
   a37e8:	010002f4 	movhi	r4,11
   a37ec:	18c00404 	addi	r3,r3,16
   a37f0:	10800044 	addi	r2,r2,1
   a37f4:	21051484 	addi	r4,r4,5202
   a37f8:	41000015 	stw	r4,0(r8)
   a37fc:	44400115 	stw	r17,4(r8)
   a3800:	d8c02015 	stw	r3,128(sp)
   a3804:	d8801f15 	stw	r2,124(sp)
   a3808:	90bff40e 	bge	r18,r2,a37dc <__alt_data_end+0xfffe37dc>
   a380c:	d9801e04 	addi	r6,sp,120
   a3810:	b80b883a 	mov	r5,r23
   a3814:	9809883a 	mov	r4,r19
   a3818:	00a90a40 	call	a90a4 <__sprint_r>
   a381c:	103e5f1e 	bne	r2,zero,a319c <__alt_data_end+0xfffe319c>
   a3820:	843ffc04 	addi	r16,r16,-16
   a3824:	d8c02017 	ldw	r3,128(sp)
   a3828:	d8801f17 	ldw	r2,124(sp)
   a382c:	da000404 	addi	r8,sp,16
   a3830:	8c3fed16 	blt	r17,r16,a37e8 <__alt_data_end+0xfffe37e8>
   a3834:	d9403517 	ldw	r5,212(sp)
   a3838:	1c07883a 	add	r3,r3,r16
   a383c:	10800044 	addi	r2,r2,1
   a3840:	41400015 	stw	r5,0(r8)
   a3844:	44000115 	stw	r16,4(r8)
   a3848:	d8c02015 	stw	r3,128(sp)
   a384c:	d8801f15 	stw	r2,124(sp)
   a3850:	010001c4 	movi	r4,7
   a3854:	2080060e 	bge	r4,r2,a3870 <___vfprintf_internal_r+0xae4>
   a3858:	d9002d17 	ldw	r4,180(sp)
   a385c:	d9801e04 	addi	r6,sp,120
   a3860:	b80b883a 	mov	r5,r23
   a3864:	00a90a40 	call	a90a4 <__sprint_r>
   a3868:	103e4c1e 	bne	r2,zero,a319c <__alt_data_end+0xfffe319c>
   a386c:	d8c02017 	ldw	r3,128(sp)
   a3870:	d8803117 	ldw	r2,196(sp)
   a3874:	d9002917 	ldw	r4,164(sp)
   a3878:	1100010e 	bge	r2,r4,a3880 <___vfprintf_internal_r+0xaf4>
   a387c:	2005883a 	mov	r2,r4
   a3880:	d9402f17 	ldw	r5,188(sp)
   a3884:	288b883a 	add	r5,r5,r2
   a3888:	d9402f15 	stw	r5,188(sp)
   a388c:	1801c01e 	bne	r3,zero,a3f90 <___vfprintf_internal_r+0x1204>
   a3890:	a8800007 	ldb	r2,0(r21)
   a3894:	d8001f15 	stw	zero,124(sp)
   a3898:	da000404 	addi	r8,sp,16
   a389c:	103d751e 	bne	r2,zero,a2e74 <__alt_data_end+0xfffe2e74>
   a38a0:	a823883a 	mov	r17,r21
   a38a4:	003d8b06 	br	a2ed4 <__alt_data_end+0xfffe2ed4>
   a38a8:	8025883a 	mov	r18,r16
   a38ac:	dc002903 	ldbu	r16,164(sp)
   a38b0:	e011883a 	mov	r8,fp
   a38b4:	84003fcc 	andi	r16,r16,255
   a38b8:	8005e51e 	bne	r16,zero,a5050 <___vfprintf_internal_r+0x22c4>
   a38bc:	94800414 	ori	r18,r18,16
   a38c0:	9080080c 	andi	r2,r18,32
   a38c4:	10022b26 	beq	r2,zero,a4174 <___vfprintf_internal_r+0x13e8>
   a38c8:	d9002e17 	ldw	r4,184(sp)
   a38cc:	d9402a17 	ldw	r5,168(sp)
   a38d0:	d8002785 	stb	zero,158(sp)
   a38d4:	20c00204 	addi	r3,r4,8
   a38d8:	24c00017 	ldw	r19,0(r4)
   a38dc:	25800117 	ldw	r22,4(r4)
   a38e0:	28042e16 	blt	r5,zero,a499c <___vfprintf_internal_r+0x1c10>
   a38e4:	013fdfc4 	movi	r4,-129
   a38e8:	9d84b03a 	or	r2,r19,r22
   a38ec:	d8c02e15 	stw	r3,184(sp)
   a38f0:	9124703a 	and	r18,r18,r4
   a38f4:	0039883a 	mov	fp,zero
   a38f8:	103e801e 	bne	r2,zero,a32fc <__alt_data_end+0xfffe32fc>
   a38fc:	d9002a17 	ldw	r4,168(sp)
   a3900:	2002e01e 	bne	r4,zero,a4484 <___vfprintf_internal_r+0x16f8>
   a3904:	d8002a15 	stw	zero,168(sp)
   a3908:	d8002b15 	stw	zero,172(sp)
   a390c:	dc001e04 	addi	r16,sp,120
   a3910:	003ef506 	br	a34e8 <__alt_data_end+0xfffe34e8>
   a3914:	8025883a 	mov	r18,r16
   a3918:	dc002903 	ldbu	r16,164(sp)
   a391c:	e011883a 	mov	r8,fp
   a3920:	84003fcc 	andi	r16,r16,255
   a3924:	8005ba1e 	bne	r16,zero,a5010 <___vfprintf_internal_r+0x2284>
   a3928:	010002f4 	movhi	r4,11
   a392c:	21050404 	addi	r4,r4,5136
   a3930:	d9003915 	stw	r4,228(sp)
   a3934:	9080080c 	andi	r2,r18,32
   a3938:	10006126 	beq	r2,zero,a3ac0 <___vfprintf_internal_r+0xd34>
   a393c:	d9402e17 	ldw	r5,184(sp)
   a3940:	2cc00017 	ldw	r19,0(r5)
   a3944:	2d800117 	ldw	r22,4(r5)
   a3948:	29400204 	addi	r5,r5,8
   a394c:	d9402e15 	stw	r5,184(sp)
   a3950:	9080004c 	andi	r2,r18,1
   a3954:	1001ac26 	beq	r2,zero,a4008 <___vfprintf_internal_r+0x127c>
   a3958:	9d84b03a 	or	r2,r19,r22
   a395c:	10038526 	beq	r2,zero,a4774 <___vfprintf_internal_r+0x19e8>
   a3960:	d8c02a17 	ldw	r3,168(sp)
   a3964:	00800c04 	movi	r2,48
   a3968:	d8802705 	stb	r2,156(sp)
   a396c:	dc402745 	stb	r17,157(sp)
   a3970:	d8002785 	stb	zero,158(sp)
   a3974:	90800094 	ori	r2,r18,2
   a3978:	18047916 	blt	r3,zero,a4b60 <___vfprintf_internal_r+0x1dd4>
   a397c:	00bfdfc4 	movi	r2,-129
   a3980:	90a4703a 	and	r18,r18,r2
   a3984:	94800094 	ori	r18,r18,2
   a3988:	0039883a 	mov	fp,zero
   a398c:	d9003917 	ldw	r4,228(sp)
   a3990:	dc001e04 	addi	r16,sp,120
   a3994:	988003cc 	andi	r2,r19,15
   a3998:	b006973a 	slli	r3,r22,28
   a399c:	2085883a 	add	r2,r4,r2
   a39a0:	9826d13a 	srli	r19,r19,4
   a39a4:	10800003 	ldbu	r2,0(r2)
   a39a8:	b02cd13a 	srli	r22,r22,4
   a39ac:	843fffc4 	addi	r16,r16,-1
   a39b0:	1ce6b03a 	or	r19,r3,r19
   a39b4:	80800005 	stb	r2,0(r16)
   a39b8:	9d84b03a 	or	r2,r19,r22
   a39bc:	103ff51e 	bne	r2,zero,a3994 <__alt_data_end+0xfffe3994>
   a39c0:	d8c02817 	ldw	r3,160(sp)
   a39c4:	1c07c83a 	sub	r3,r3,r16
   a39c8:	d8c02b15 	stw	r3,172(sp)
   a39cc:	003ec606 	br	a34e8 <__alt_data_end+0xfffe34e8>
   a39d0:	8025883a 	mov	r18,r16
   a39d4:	dc002903 	ldbu	r16,164(sp)
   a39d8:	e011883a 	mov	r8,fp
   a39dc:	84003fcc 	andi	r16,r16,255
   a39e0:	803e9626 	beq	r16,zero,a343c <__alt_data_end+0xfffe343c>
   a39e4:	d8c02b03 	ldbu	r3,172(sp)
   a39e8:	d8c02785 	stb	r3,158(sp)
   a39ec:	003e9306 	br	a343c <__alt_data_end+0xfffe343c>
   a39f0:	00c00044 	movi	r3,1
   a39f4:	d8c02905 	stb	r3,164(sp)
   a39f8:	00c00ac4 	movi	r3,43
   a39fc:	d8c02b05 	stb	r3,172(sp)
   a3a00:	ac400007 	ldb	r17,0(r21)
   a3a04:	003d4306 	br	a2f14 <__alt_data_end+0xfffe2f14>
   a3a08:	84000814 	ori	r16,r16,32
   a3a0c:	ac400007 	ldb	r17,0(r21)
   a3a10:	003d4006 	br	a2f14 <__alt_data_end+0xfffe2f14>
   a3a14:	d8802e17 	ldw	r2,184(sp)
   a3a18:	8025883a 	mov	r18,r16
   a3a1c:	d8002785 	stb	zero,158(sp)
   a3a20:	14000017 	ldw	r16,0(r2)
   a3a24:	e011883a 	mov	r8,fp
   a3a28:	14c00104 	addi	r19,r2,4
   a3a2c:	80042d26 	beq	r16,zero,a4ae4 <___vfprintf_internal_r+0x1d58>
   a3a30:	d8c02a17 	ldw	r3,168(sp)
   a3a34:	1803e416 	blt	r3,zero,a49c8 <___vfprintf_internal_r+0x1c3c>
   a3a38:	180d883a 	mov	r6,r3
   a3a3c:	000b883a 	mov	r5,zero
   a3a40:	8009883a 	mov	r4,r16
   a3a44:	df003d15 	stw	fp,244(sp)
   a3a48:	00a74540 	call	a7454 <memchr>
   a3a4c:	da003d17 	ldw	r8,244(sp)
   a3a50:	10046826 	beq	r2,zero,a4bf4 <___vfprintf_internal_r+0x1e68>
   a3a54:	1405c83a 	sub	r2,r2,r16
   a3a58:	d8802b15 	stw	r2,172(sp)
   a3a5c:	1003e016 	blt	r2,zero,a49e0 <___vfprintf_internal_r+0x1c54>
   a3a60:	df002783 	ldbu	fp,158(sp)
   a3a64:	d8802915 	stw	r2,164(sp)
   a3a68:	dcc02e15 	stw	r19,184(sp)
   a3a6c:	d8002a15 	stw	zero,168(sp)
   a3a70:	d8003215 	stw	zero,200(sp)
   a3a74:	003ea206 	br	a3500 <__alt_data_end+0xfffe3500>
   a3a78:	8025883a 	mov	r18,r16
   a3a7c:	dc002903 	ldbu	r16,164(sp)
   a3a80:	e011883a 	mov	r8,fp
   a3a84:	84003fcc 	andi	r16,r16,255
   a3a88:	803f8d26 	beq	r16,zero,a38c0 <__alt_data_end+0xfffe38c0>
   a3a8c:	d8c02b03 	ldbu	r3,172(sp)
   a3a90:	d8c02785 	stb	r3,158(sp)
   a3a94:	003f8a06 	br	a38c0 <__alt_data_end+0xfffe38c0>
   a3a98:	8025883a 	mov	r18,r16
   a3a9c:	dc002903 	ldbu	r16,164(sp)
   a3aa0:	e011883a 	mov	r8,fp
   a3aa4:	84003fcc 	andi	r16,r16,255
   a3aa8:	8005661e 	bne	r16,zero,a5044 <___vfprintf_internal_r+0x22b8>
   a3aac:	010002f4 	movhi	r4,11
   a3ab0:	21050904 	addi	r4,r4,5156
   a3ab4:	d9003915 	stw	r4,228(sp)
   a3ab8:	9080080c 	andi	r2,r18,32
   a3abc:	103f9f1e 	bne	r2,zero,a393c <__alt_data_end+0xfffe393c>
   a3ac0:	9080040c 	andi	r2,r18,16
   a3ac4:	1002eb26 	beq	r2,zero,a4674 <___vfprintf_internal_r+0x18e8>
   a3ac8:	d8802e17 	ldw	r2,184(sp)
   a3acc:	002d883a 	mov	r22,zero
   a3ad0:	14c00017 	ldw	r19,0(r2)
   a3ad4:	10800104 	addi	r2,r2,4
   a3ad8:	d8802e15 	stw	r2,184(sp)
   a3adc:	003f9c06 	br	a3950 <__alt_data_end+0xfffe3950>
   a3ae0:	d8802b07 	ldb	r2,172(sp)
   a3ae4:	1002e11e 	bne	r2,zero,a466c <___vfprintf_internal_r+0x18e0>
   a3ae8:	00c00044 	movi	r3,1
   a3aec:	d8c02905 	stb	r3,164(sp)
   a3af0:	00c00804 	movi	r3,32
   a3af4:	d8c02b05 	stb	r3,172(sp)
   a3af8:	ac400007 	ldb	r17,0(r21)
   a3afc:	003d0506 	br	a2f14 <__alt_data_end+0xfffe2f14>
   a3b00:	84000054 	ori	r16,r16,1
   a3b04:	ac400007 	ldb	r17,0(r21)
   a3b08:	003d0206 	br	a2f14 <__alt_data_end+0xfffe2f14>
   a3b0c:	8025883a 	mov	r18,r16
   a3b10:	dc002903 	ldbu	r16,164(sp)
   a3b14:	e011883a 	mov	r8,fp
   a3b18:	84003fcc 	andi	r16,r16,255
   a3b1c:	803de726 	beq	r16,zero,a32bc <__alt_data_end+0xfffe32bc>
   a3b20:	d8c02b03 	ldbu	r3,172(sp)
   a3b24:	d8c02785 	stb	r3,158(sp)
   a3b28:	003de406 	br	a32bc <__alt_data_end+0xfffe32bc>
   a3b2c:	84001014 	ori	r16,r16,64
   a3b30:	ac400007 	ldb	r17,0(r21)
   a3b34:	003cf706 	br	a2f14 <__alt_data_end+0xfffe2f14>
   a3b38:	ac400007 	ldb	r17,0(r21)
   a3b3c:	00801b04 	movi	r2,108
   a3b40:	88838f26 	beq	r17,r2,a4980 <___vfprintf_internal_r+0x1bf4>
   a3b44:	84000414 	ori	r16,r16,16
   a3b48:	003cf206 	br	a2f14 <__alt_data_end+0xfffe2f14>
   a3b4c:	8025883a 	mov	r18,r16
   a3b50:	dc002903 	ldbu	r16,164(sp)
   a3b54:	e011883a 	mov	r8,fp
   a3b58:	84003fcc 	andi	r16,r16,255
   a3b5c:	80053f1e 	bne	r16,zero,a505c <___vfprintf_internal_r+0x22d0>
   a3b60:	9080080c 	andi	r2,r18,32
   a3b64:	1002d226 	beq	r2,zero,a46b0 <___vfprintf_internal_r+0x1924>
   a3b68:	d9002e17 	ldw	r4,184(sp)
   a3b6c:	d9402f17 	ldw	r5,188(sp)
   a3b70:	20800017 	ldw	r2,0(r4)
   a3b74:	2807d7fa 	srai	r3,r5,31
   a3b78:	21000104 	addi	r4,r4,4
   a3b7c:	d9002e15 	stw	r4,184(sp)
   a3b80:	11400015 	stw	r5,0(r2)
   a3b84:	10c00115 	stw	r3,4(r2)
   a3b88:	003cb806 	br	a2e6c <__alt_data_end+0xfffe2e6c>
   a3b8c:	d8c02e17 	ldw	r3,184(sp)
   a3b90:	d9002e17 	ldw	r4,184(sp)
   a3b94:	8025883a 	mov	r18,r16
   a3b98:	18800017 	ldw	r2,0(r3)
   a3b9c:	21000104 	addi	r4,r4,4
   a3ba0:	00c00044 	movi	r3,1
   a3ba4:	e011883a 	mov	r8,fp
   a3ba8:	d8c02915 	stw	r3,164(sp)
   a3bac:	d8002785 	stb	zero,158(sp)
   a3bb0:	d8801405 	stb	r2,80(sp)
   a3bb4:	d9002e15 	stw	r4,184(sp)
   a3bb8:	d8c02b15 	stw	r3,172(sp)
   a3bbc:	d8002a15 	stw	zero,168(sp)
   a3bc0:	d8003215 	stw	zero,200(sp)
   a3bc4:	dc001404 	addi	r16,sp,80
   a3bc8:	0039883a 	mov	fp,zero
   a3bcc:	003e5306 	br	a351c <__alt_data_end+0xfffe351c>
   a3bd0:	010002f4 	movhi	r4,11
   a3bd4:	21050904 	addi	r4,r4,5156
   a3bd8:	0039883a 	mov	fp,zero
   a3bdc:	d9003915 	stw	r4,228(sp)
   a3be0:	04401e04 	movi	r17,120
   a3be4:	003f6906 	br	a398c <__alt_data_end+0xfffe398c>
   a3be8:	8025883a 	mov	r18,r16
   a3bec:	dc002903 	ldbu	r16,164(sp)
   a3bf0:	e011883a 	mov	r8,fp
   a3bf4:	84003fcc 	andi	r16,r16,255
   a3bf8:	8005081e 	bne	r16,zero,a501c <___vfprintf_internal_r+0x2290>
   a3bfc:	883d6126 	beq	r17,zero,a3184 <__alt_data_end+0xfffe3184>
   a3c00:	00c00044 	movi	r3,1
   a3c04:	d8c02915 	stw	r3,164(sp)
   a3c08:	dc401405 	stb	r17,80(sp)
   a3c0c:	d8002785 	stb	zero,158(sp)
   a3c10:	003fe906 	br	a3bb8 <__alt_data_end+0xfffe3bb8>
   a3c14:	014002f4 	movhi	r5,11
   a3c18:	29450904 	addi	r5,r5,5156
   a3c1c:	d9403915 	stw	r5,228(sp)
   a3c20:	d8c02e15 	stw	r3,184(sp)
   a3c24:	1025883a 	mov	r18,r2
   a3c28:	04401e04 	movi	r17,120
   a3c2c:	9d84b03a 	or	r2,r19,r22
   a3c30:	1000fc1e 	bne	r2,zero,a4024 <___vfprintf_internal_r+0x1298>
   a3c34:	0039883a 	mov	fp,zero
   a3c38:	00800084 	movi	r2,2
   a3c3c:	10803fcc 	andi	r2,r2,255
   a3c40:	00c00044 	movi	r3,1
   a3c44:	10c20f26 	beq	r2,r3,a4484 <___vfprintf_internal_r+0x16f8>
   a3c48:	00c00084 	movi	r3,2
   a3c4c:	10fd3326 	beq	r2,r3,a311c <__alt_data_end+0xfffe311c>
   a3c50:	003e0b06 	br	a3480 <__alt_data_end+0xfffe3480>
   a3c54:	d8c02017 	ldw	r3,128(sp)
   a3c58:	003e7106 	br	a3620 <__alt_data_end+0xfffe3620>
   a3c5c:	00801944 	movi	r2,101
   a3c60:	14407e0e 	bge	r2,r17,a3e5c <___vfprintf_internal_r+0x10d0>
   a3c64:	d9003617 	ldw	r4,216(sp)
   a3c68:	d9403817 	ldw	r5,224(sp)
   a3c6c:	000d883a 	mov	r6,zero
   a3c70:	000f883a 	mov	r7,zero
   a3c74:	d8c03c15 	stw	r3,240(sp)
   a3c78:	da003d15 	stw	r8,244(sp)
   a3c7c:	00acb840 	call	acb84 <__eqdf2>
   a3c80:	d8c03c17 	ldw	r3,240(sp)
   a3c84:	da003d17 	ldw	r8,244(sp)
   a3c88:	1000f71e 	bne	r2,zero,a4068 <___vfprintf_internal_r+0x12dc>
   a3c8c:	d8801f17 	ldw	r2,124(sp)
   a3c90:	010002f4 	movhi	r4,11
   a3c94:	21051004 	addi	r4,r4,5184
   a3c98:	18c00044 	addi	r3,r3,1
   a3c9c:	10800044 	addi	r2,r2,1
   a3ca0:	41000015 	stw	r4,0(r8)
   a3ca4:	01000044 	movi	r4,1
   a3ca8:	41000115 	stw	r4,4(r8)
   a3cac:	d8c02015 	stw	r3,128(sp)
   a3cb0:	d8801f15 	stw	r2,124(sp)
   a3cb4:	010001c4 	movi	r4,7
   a3cb8:	2082b816 	blt	r4,r2,a479c <___vfprintf_internal_r+0x1a10>
   a3cbc:	42000204 	addi	r8,r8,8
   a3cc0:	d8802617 	ldw	r2,152(sp)
   a3cc4:	d9403317 	ldw	r5,204(sp)
   a3cc8:	11400216 	blt	r2,r5,a3cd4 <___vfprintf_internal_r+0xf48>
   a3ccc:	9080004c 	andi	r2,r18,1
   a3cd0:	103eb326 	beq	r2,zero,a37a0 <__alt_data_end+0xfffe37a0>
   a3cd4:	d8803717 	ldw	r2,220(sp)
   a3cd8:	d9003417 	ldw	r4,208(sp)
   a3cdc:	d9403717 	ldw	r5,220(sp)
   a3ce0:	1887883a 	add	r3,r3,r2
   a3ce4:	d8801f17 	ldw	r2,124(sp)
   a3ce8:	41000015 	stw	r4,0(r8)
   a3cec:	41400115 	stw	r5,4(r8)
   a3cf0:	10800044 	addi	r2,r2,1
   a3cf4:	d8c02015 	stw	r3,128(sp)
   a3cf8:	d8801f15 	stw	r2,124(sp)
   a3cfc:	010001c4 	movi	r4,7
   a3d00:	20832916 	blt	r4,r2,a49a8 <___vfprintf_internal_r+0x1c1c>
   a3d04:	42000204 	addi	r8,r8,8
   a3d08:	d8803317 	ldw	r2,204(sp)
   a3d0c:	143fffc4 	addi	r16,r2,-1
   a3d10:	043ea30e 	bge	zero,r16,a37a0 <__alt_data_end+0xfffe37a0>
   a3d14:	04400404 	movi	r17,16
   a3d18:	d8801f17 	ldw	r2,124(sp)
   a3d1c:	8c00880e 	bge	r17,r16,a3f40 <___vfprintf_internal_r+0x11b4>
   a3d20:	014002f4 	movhi	r5,11
   a3d24:	29451084 	addi	r5,r5,5186
   a3d28:	d9402c15 	stw	r5,176(sp)
   a3d2c:	058001c4 	movi	r22,7
   a3d30:	dcc02d17 	ldw	r19,180(sp)
   a3d34:	00000306 	br	a3d44 <___vfprintf_internal_r+0xfb8>
   a3d38:	42000204 	addi	r8,r8,8
   a3d3c:	843ffc04 	addi	r16,r16,-16
   a3d40:	8c00820e 	bge	r17,r16,a3f4c <___vfprintf_internal_r+0x11c0>
   a3d44:	18c00404 	addi	r3,r3,16
   a3d48:	10800044 	addi	r2,r2,1
   a3d4c:	45000015 	stw	r20,0(r8)
   a3d50:	44400115 	stw	r17,4(r8)
   a3d54:	d8c02015 	stw	r3,128(sp)
   a3d58:	d8801f15 	stw	r2,124(sp)
   a3d5c:	b0bff60e 	bge	r22,r2,a3d38 <__alt_data_end+0xfffe3d38>
   a3d60:	d9801e04 	addi	r6,sp,120
   a3d64:	b80b883a 	mov	r5,r23
   a3d68:	9809883a 	mov	r4,r19
   a3d6c:	00a90a40 	call	a90a4 <__sprint_r>
   a3d70:	103d0a1e 	bne	r2,zero,a319c <__alt_data_end+0xfffe319c>
   a3d74:	d8c02017 	ldw	r3,128(sp)
   a3d78:	d8801f17 	ldw	r2,124(sp)
   a3d7c:	da000404 	addi	r8,sp,16
   a3d80:	003fee06 	br	a3d3c <__alt_data_end+0xfffe3d3c>
   a3d84:	d9403117 	ldw	r5,196(sp)
   a3d88:	d8802917 	ldw	r2,164(sp)
   a3d8c:	28adc83a 	sub	r22,r5,r2
   a3d90:	05be410e 	bge	zero,r22,a3698 <__alt_data_end+0xfffe3698>
   a3d94:	07000404 	movi	fp,16
   a3d98:	d8801f17 	ldw	r2,124(sp)
   a3d9c:	e5838f0e 	bge	fp,r22,a4bdc <___vfprintf_internal_r+0x1e50>
   a3da0:	014002f4 	movhi	r5,11
   a3da4:	29451084 	addi	r5,r5,5186
   a3da8:	dc403015 	stw	r17,192(sp)
   a3dac:	d9402c15 	stw	r5,176(sp)
   a3db0:	b023883a 	mov	r17,r22
   a3db4:	04c001c4 	movi	r19,7
   a3db8:	a82d883a 	mov	r22,r21
   a3dbc:	902b883a 	mov	r21,r18
   a3dc0:	8025883a 	mov	r18,r16
   a3dc4:	dc002d17 	ldw	r16,180(sp)
   a3dc8:	00000306 	br	a3dd8 <___vfprintf_internal_r+0x104c>
   a3dcc:	8c7ffc04 	addi	r17,r17,-16
   a3dd0:	42000204 	addi	r8,r8,8
   a3dd4:	e440110e 	bge	fp,r17,a3e1c <___vfprintf_internal_r+0x1090>
   a3dd8:	18c00404 	addi	r3,r3,16
   a3ddc:	10800044 	addi	r2,r2,1
   a3de0:	45000015 	stw	r20,0(r8)
   a3de4:	47000115 	stw	fp,4(r8)
   a3de8:	d8c02015 	stw	r3,128(sp)
   a3dec:	d8801f15 	stw	r2,124(sp)
   a3df0:	98bff60e 	bge	r19,r2,a3dcc <__alt_data_end+0xfffe3dcc>
   a3df4:	d9801e04 	addi	r6,sp,120
   a3df8:	b80b883a 	mov	r5,r23
   a3dfc:	8009883a 	mov	r4,r16
   a3e00:	00a90a40 	call	a90a4 <__sprint_r>
   a3e04:	103ce51e 	bne	r2,zero,a319c <__alt_data_end+0xfffe319c>
   a3e08:	8c7ffc04 	addi	r17,r17,-16
   a3e0c:	d8c02017 	ldw	r3,128(sp)
   a3e10:	d8801f17 	ldw	r2,124(sp)
   a3e14:	da000404 	addi	r8,sp,16
   a3e18:	e47fef16 	blt	fp,r17,a3dd8 <__alt_data_end+0xfffe3dd8>
   a3e1c:	9021883a 	mov	r16,r18
   a3e20:	a825883a 	mov	r18,r21
   a3e24:	b02b883a 	mov	r21,r22
   a3e28:	882d883a 	mov	r22,r17
   a3e2c:	dc403017 	ldw	r17,192(sp)
   a3e30:	d9002c17 	ldw	r4,176(sp)
   a3e34:	1d87883a 	add	r3,r3,r22
   a3e38:	10800044 	addi	r2,r2,1
   a3e3c:	41000015 	stw	r4,0(r8)
   a3e40:	45800115 	stw	r22,4(r8)
   a3e44:	d8c02015 	stw	r3,128(sp)
   a3e48:	d8801f15 	stw	r2,124(sp)
   a3e4c:	010001c4 	movi	r4,7
   a3e50:	20818e16 	blt	r4,r2,a448c <___vfprintf_internal_r+0x1700>
   a3e54:	42000204 	addi	r8,r8,8
   a3e58:	003e0f06 	br	a3698 <__alt_data_end+0xfffe3698>
   a3e5c:	d9403317 	ldw	r5,204(sp)
   a3e60:	00800044 	movi	r2,1
   a3e64:	18c00044 	addi	r3,r3,1
   a3e68:	1141530e 	bge	r2,r5,a43b8 <___vfprintf_internal_r+0x162c>
   a3e6c:	dc401f17 	ldw	r17,124(sp)
   a3e70:	00800044 	movi	r2,1
   a3e74:	40800115 	stw	r2,4(r8)
   a3e78:	8c400044 	addi	r17,r17,1
   a3e7c:	44000015 	stw	r16,0(r8)
   a3e80:	d8c02015 	stw	r3,128(sp)
   a3e84:	dc401f15 	stw	r17,124(sp)
   a3e88:	008001c4 	movi	r2,7
   a3e8c:	14416b16 	blt	r2,r17,a443c <___vfprintf_internal_r+0x16b0>
   a3e90:	42000204 	addi	r8,r8,8
   a3e94:	d8803717 	ldw	r2,220(sp)
   a3e98:	d9003417 	ldw	r4,208(sp)
   a3e9c:	8c400044 	addi	r17,r17,1
   a3ea0:	10c7883a 	add	r3,r2,r3
   a3ea4:	40800115 	stw	r2,4(r8)
   a3ea8:	41000015 	stw	r4,0(r8)
   a3eac:	d8c02015 	stw	r3,128(sp)
   a3eb0:	dc401f15 	stw	r17,124(sp)
   a3eb4:	008001c4 	movi	r2,7
   a3eb8:	14416916 	blt	r2,r17,a4460 <___vfprintf_internal_r+0x16d4>
   a3ebc:	45800204 	addi	r22,r8,8
   a3ec0:	d9003617 	ldw	r4,216(sp)
   a3ec4:	d9403817 	ldw	r5,224(sp)
   a3ec8:	000d883a 	mov	r6,zero
   a3ecc:	000f883a 	mov	r7,zero
   a3ed0:	d8c03c15 	stw	r3,240(sp)
   a3ed4:	00acb840 	call	acb84 <__eqdf2>
   a3ed8:	d8c03c17 	ldw	r3,240(sp)
   a3edc:	1000bc26 	beq	r2,zero,a41d0 <___vfprintf_internal_r+0x1444>
   a3ee0:	d9403317 	ldw	r5,204(sp)
   a3ee4:	84000044 	addi	r16,r16,1
   a3ee8:	8c400044 	addi	r17,r17,1
   a3eec:	28bfffc4 	addi	r2,r5,-1
   a3ef0:	1887883a 	add	r3,r3,r2
   a3ef4:	b0800115 	stw	r2,4(r22)
   a3ef8:	b4000015 	stw	r16,0(r22)
   a3efc:	d8c02015 	stw	r3,128(sp)
   a3f00:	dc401f15 	stw	r17,124(sp)
   a3f04:	008001c4 	movi	r2,7
   a3f08:	14414316 	blt	r2,r17,a4418 <___vfprintf_internal_r+0x168c>
   a3f0c:	b5800204 	addi	r22,r22,8
   a3f10:	d9003a17 	ldw	r4,232(sp)
   a3f14:	df0022c4 	addi	fp,sp,139
   a3f18:	8c400044 	addi	r17,r17,1
   a3f1c:	20c7883a 	add	r3,r4,r3
   a3f20:	b7000015 	stw	fp,0(r22)
   a3f24:	b1000115 	stw	r4,4(r22)
   a3f28:	d8c02015 	stw	r3,128(sp)
   a3f2c:	dc401f15 	stw	r17,124(sp)
   a3f30:	008001c4 	movi	r2,7
   a3f34:	14400e16 	blt	r2,r17,a3f70 <___vfprintf_internal_r+0x11e4>
   a3f38:	b2000204 	addi	r8,r22,8
   a3f3c:	003e1806 	br	a37a0 <__alt_data_end+0xfffe37a0>
   a3f40:	010002f4 	movhi	r4,11
   a3f44:	21051084 	addi	r4,r4,5186
   a3f48:	d9002c15 	stw	r4,176(sp)
   a3f4c:	d9002c17 	ldw	r4,176(sp)
   a3f50:	1c07883a 	add	r3,r3,r16
   a3f54:	44000115 	stw	r16,4(r8)
   a3f58:	41000015 	stw	r4,0(r8)
   a3f5c:	10800044 	addi	r2,r2,1
   a3f60:	d8c02015 	stw	r3,128(sp)
   a3f64:	d8801f15 	stw	r2,124(sp)
   a3f68:	010001c4 	movi	r4,7
   a3f6c:	20be0b0e 	bge	r4,r2,a379c <__alt_data_end+0xfffe379c>
   a3f70:	d9002d17 	ldw	r4,180(sp)
   a3f74:	d9801e04 	addi	r6,sp,120
   a3f78:	b80b883a 	mov	r5,r23
   a3f7c:	00a90a40 	call	a90a4 <__sprint_r>
   a3f80:	103c861e 	bne	r2,zero,a319c <__alt_data_end+0xfffe319c>
   a3f84:	d8c02017 	ldw	r3,128(sp)
   a3f88:	da000404 	addi	r8,sp,16
   a3f8c:	003e0406 	br	a37a0 <__alt_data_end+0xfffe37a0>
   a3f90:	d9002d17 	ldw	r4,180(sp)
   a3f94:	d9801e04 	addi	r6,sp,120
   a3f98:	b80b883a 	mov	r5,r23
   a3f9c:	00a90a40 	call	a90a4 <__sprint_r>
   a3fa0:	103e3b26 	beq	r2,zero,a3890 <__alt_data_end+0xfffe3890>
   a3fa4:	003c7d06 	br	a319c <__alt_data_end+0xfffe319c>
   a3fa8:	d9002d17 	ldw	r4,180(sp)
   a3fac:	d9801e04 	addi	r6,sp,120
   a3fb0:	b80b883a 	mov	r5,r23
   a3fb4:	00a90a40 	call	a90a4 <__sprint_r>
   a3fb8:	103c781e 	bne	r2,zero,a319c <__alt_data_end+0xfffe319c>
   a3fbc:	d8c02017 	ldw	r3,128(sp)
   a3fc0:	da000404 	addi	r8,sp,16
   a3fc4:	003de906 	br	a376c <__alt_data_end+0xfffe376c>
   a3fc8:	d9002d17 	ldw	r4,180(sp)
   a3fcc:	d9801e04 	addi	r6,sp,120
   a3fd0:	b80b883a 	mov	r5,r23
   a3fd4:	00a90a40 	call	a90a4 <__sprint_r>
   a3fd8:	103c701e 	bne	r2,zero,a319c <__alt_data_end+0xfffe319c>
   a3fdc:	d8c02017 	ldw	r3,128(sp)
   a3fe0:	da000404 	addi	r8,sp,16
   a3fe4:	003d9b06 	br	a3654 <__alt_data_end+0xfffe3654>
   a3fe8:	d9002d17 	ldw	r4,180(sp)
   a3fec:	d9801e04 	addi	r6,sp,120
   a3ff0:	b80b883a 	mov	r5,r23
   a3ff4:	00a90a40 	call	a90a4 <__sprint_r>
   a3ff8:	103c681e 	bne	r2,zero,a319c <__alt_data_end+0xfffe319c>
   a3ffc:	d8c02017 	ldw	r3,128(sp)
   a4000:	da000404 	addi	r8,sp,16
   a4004:	003da106 	br	a368c <__alt_data_end+0xfffe368c>
   a4008:	d9402a17 	ldw	r5,168(sp)
   a400c:	d8002785 	stb	zero,158(sp)
   a4010:	283f0616 	blt	r5,zero,a3c2c <__alt_data_end+0xfffe3c2c>
   a4014:	00ffdfc4 	movi	r3,-129
   a4018:	9d84b03a 	or	r2,r19,r22
   a401c:	90e4703a 	and	r18,r18,r3
   a4020:	103c3b26 	beq	r2,zero,a3110 <__alt_data_end+0xfffe3110>
   a4024:	0039883a 	mov	fp,zero
   a4028:	003e5806 	br	a398c <__alt_data_end+0xfffe398c>
   a402c:	9080040c 	andi	r2,r18,16
   a4030:	1001b326 	beq	r2,zero,a4700 <___vfprintf_internal_r+0x1974>
   a4034:	d8c02e17 	ldw	r3,184(sp)
   a4038:	d9002a17 	ldw	r4,168(sp)
   a403c:	d8002785 	stb	zero,158(sp)
   a4040:	18800104 	addi	r2,r3,4
   a4044:	1cc00017 	ldw	r19,0(r3)
   a4048:	002d883a 	mov	r22,zero
   a404c:	2001b516 	blt	r4,zero,a4724 <___vfprintf_internal_r+0x1998>
   a4050:	00ffdfc4 	movi	r3,-129
   a4054:	d8802e15 	stw	r2,184(sp)
   a4058:	90e4703a 	and	r18,r18,r3
   a405c:	983d0526 	beq	r19,zero,a3474 <__alt_data_end+0xfffe3474>
   a4060:	0039883a 	mov	fp,zero
   a4064:	003d0806 	br	a3488 <__alt_data_end+0xfffe3488>
   a4068:	dc402617 	ldw	r17,152(sp)
   a406c:	0441d30e 	bge	zero,r17,a47bc <___vfprintf_internal_r+0x1a30>
   a4070:	dc403217 	ldw	r17,200(sp)
   a4074:	d8803317 	ldw	r2,204(sp)
   a4078:	1440010e 	bge	r2,r17,a4080 <___vfprintf_internal_r+0x12f4>
   a407c:	1023883a 	mov	r17,r2
   a4080:	04400a0e 	bge	zero,r17,a40ac <___vfprintf_internal_r+0x1320>
   a4084:	d8801f17 	ldw	r2,124(sp)
   a4088:	1c47883a 	add	r3,r3,r17
   a408c:	44000015 	stw	r16,0(r8)
   a4090:	10800044 	addi	r2,r2,1
   a4094:	44400115 	stw	r17,4(r8)
   a4098:	d8c02015 	stw	r3,128(sp)
   a409c:	d8801f15 	stw	r2,124(sp)
   a40a0:	010001c4 	movi	r4,7
   a40a4:	20826516 	blt	r4,r2,a4a3c <___vfprintf_internal_r+0x1cb0>
   a40a8:	42000204 	addi	r8,r8,8
   a40ac:	88026116 	blt	r17,zero,a4a34 <___vfprintf_internal_r+0x1ca8>
   a40b0:	d9003217 	ldw	r4,200(sp)
   a40b4:	2463c83a 	sub	r17,r4,r17
   a40b8:	04407b0e 	bge	zero,r17,a42a8 <___vfprintf_internal_r+0x151c>
   a40bc:	05800404 	movi	r22,16
   a40c0:	d8801f17 	ldw	r2,124(sp)
   a40c4:	b4419d0e 	bge	r22,r17,a473c <___vfprintf_internal_r+0x19b0>
   a40c8:	010002f4 	movhi	r4,11
   a40cc:	21051084 	addi	r4,r4,5186
   a40d0:	d9002c15 	stw	r4,176(sp)
   a40d4:	070001c4 	movi	fp,7
   a40d8:	dcc02d17 	ldw	r19,180(sp)
   a40dc:	00000306 	br	a40ec <___vfprintf_internal_r+0x1360>
   a40e0:	42000204 	addi	r8,r8,8
   a40e4:	8c7ffc04 	addi	r17,r17,-16
   a40e8:	b441970e 	bge	r22,r17,a4748 <___vfprintf_internal_r+0x19bc>
   a40ec:	18c00404 	addi	r3,r3,16
   a40f0:	10800044 	addi	r2,r2,1
   a40f4:	45000015 	stw	r20,0(r8)
   a40f8:	45800115 	stw	r22,4(r8)
   a40fc:	d8c02015 	stw	r3,128(sp)
   a4100:	d8801f15 	stw	r2,124(sp)
   a4104:	e0bff60e 	bge	fp,r2,a40e0 <__alt_data_end+0xfffe40e0>
   a4108:	d9801e04 	addi	r6,sp,120
   a410c:	b80b883a 	mov	r5,r23
   a4110:	9809883a 	mov	r4,r19
   a4114:	00a90a40 	call	a90a4 <__sprint_r>
   a4118:	103c201e 	bne	r2,zero,a319c <__alt_data_end+0xfffe319c>
   a411c:	d8c02017 	ldw	r3,128(sp)
   a4120:	d8801f17 	ldw	r2,124(sp)
   a4124:	da000404 	addi	r8,sp,16
   a4128:	003fee06 	br	a40e4 <__alt_data_end+0xfffe40e4>
   a412c:	d9002d17 	ldw	r4,180(sp)
   a4130:	d9801e04 	addi	r6,sp,120
   a4134:	b80b883a 	mov	r5,r23
   a4138:	00a90a40 	call	a90a4 <__sprint_r>
   a413c:	103c171e 	bne	r2,zero,a319c <__alt_data_end+0xfffe319c>
   a4140:	d8c02017 	ldw	r3,128(sp)
   a4144:	df002787 	ldb	fp,158(sp)
   a4148:	da000404 	addi	r8,sp,16
   a414c:	003d3406 	br	a3620 <__alt_data_end+0xfffe3620>
   a4150:	9080040c 	andi	r2,r18,16
   a4154:	10016126 	beq	r2,zero,a46dc <___vfprintf_internal_r+0x1950>
   a4158:	d9402e17 	ldw	r5,184(sp)
   a415c:	2cc00017 	ldw	r19,0(r5)
   a4160:	29400104 	addi	r5,r5,4
   a4164:	d9402e15 	stw	r5,184(sp)
   a4168:	982dd7fa 	srai	r22,r19,31
   a416c:	b005883a 	mov	r2,r22
   a4170:	003c5a06 	br	a32dc <__alt_data_end+0xfffe32dc>
   a4174:	9080040c 	andi	r2,r18,16
   a4178:	10003526 	beq	r2,zero,a4250 <___vfprintf_internal_r+0x14c4>
   a417c:	d8c02e17 	ldw	r3,184(sp)
   a4180:	d9002a17 	ldw	r4,168(sp)
   a4184:	d8002785 	stb	zero,158(sp)
   a4188:	18800104 	addi	r2,r3,4
   a418c:	1cc00017 	ldw	r19,0(r3)
   a4190:	002d883a 	mov	r22,zero
   a4194:	20003716 	blt	r4,zero,a4274 <___vfprintf_internal_r+0x14e8>
   a4198:	00ffdfc4 	movi	r3,-129
   a419c:	d8802e15 	stw	r2,184(sp)
   a41a0:	90e4703a 	and	r18,r18,r3
   a41a4:	0039883a 	mov	fp,zero
   a41a8:	983dd426 	beq	r19,zero,a38fc <__alt_data_end+0xfffe38fc>
   a41ac:	00800244 	movi	r2,9
   a41b0:	14fc5336 	bltu	r2,r19,a3300 <__alt_data_end+0xfffe3300>
   a41b4:	d8c02817 	ldw	r3,160(sp)
   a41b8:	dc001dc4 	addi	r16,sp,119
   a41bc:	9cc00c04 	addi	r19,r19,48
   a41c0:	1c07c83a 	sub	r3,r3,r16
   a41c4:	dcc01dc5 	stb	r19,119(sp)
   a41c8:	d8c02b15 	stw	r3,172(sp)
   a41cc:	003cc606 	br	a34e8 <__alt_data_end+0xfffe34e8>
   a41d0:	d8803317 	ldw	r2,204(sp)
   a41d4:	143fffc4 	addi	r16,r2,-1
   a41d8:	043f4d0e 	bge	zero,r16,a3f10 <__alt_data_end+0xfffe3f10>
   a41dc:	07000404 	movi	fp,16
   a41e0:	e400810e 	bge	fp,r16,a43e8 <___vfprintf_internal_r+0x165c>
   a41e4:	014002f4 	movhi	r5,11
   a41e8:	29451084 	addi	r5,r5,5186
   a41ec:	d9402c15 	stw	r5,176(sp)
   a41f0:	01c001c4 	movi	r7,7
   a41f4:	dcc02d17 	ldw	r19,180(sp)
   a41f8:	00000306 	br	a4208 <___vfprintf_internal_r+0x147c>
   a41fc:	b5800204 	addi	r22,r22,8
   a4200:	843ffc04 	addi	r16,r16,-16
   a4204:	e4007b0e 	bge	fp,r16,a43f4 <___vfprintf_internal_r+0x1668>
   a4208:	18c00404 	addi	r3,r3,16
   a420c:	8c400044 	addi	r17,r17,1
   a4210:	b5000015 	stw	r20,0(r22)
   a4214:	b7000115 	stw	fp,4(r22)
   a4218:	d8c02015 	stw	r3,128(sp)
   a421c:	dc401f15 	stw	r17,124(sp)
   a4220:	3c7ff60e 	bge	r7,r17,a41fc <__alt_data_end+0xfffe41fc>
   a4224:	d9801e04 	addi	r6,sp,120
   a4228:	b80b883a 	mov	r5,r23
   a422c:	9809883a 	mov	r4,r19
   a4230:	d9c03c15 	stw	r7,240(sp)
   a4234:	00a90a40 	call	a90a4 <__sprint_r>
   a4238:	d9c03c17 	ldw	r7,240(sp)
   a423c:	103bd71e 	bne	r2,zero,a319c <__alt_data_end+0xfffe319c>
   a4240:	d8c02017 	ldw	r3,128(sp)
   a4244:	dc401f17 	ldw	r17,124(sp)
   a4248:	dd800404 	addi	r22,sp,16
   a424c:	003fec06 	br	a4200 <__alt_data_end+0xfffe4200>
   a4250:	9080100c 	andi	r2,r18,64
   a4254:	d8002785 	stb	zero,158(sp)
   a4258:	10010e26 	beq	r2,zero,a4694 <___vfprintf_internal_r+0x1908>
   a425c:	d9402e17 	ldw	r5,184(sp)
   a4260:	d8c02a17 	ldw	r3,168(sp)
   a4264:	002d883a 	mov	r22,zero
   a4268:	28800104 	addi	r2,r5,4
   a426c:	2cc0000b 	ldhu	r19,0(r5)
   a4270:	183fc90e 	bge	r3,zero,a4198 <__alt_data_end+0xfffe4198>
   a4274:	d8802e15 	stw	r2,184(sp)
   a4278:	0039883a 	mov	fp,zero
   a427c:	9d84b03a 	or	r2,r19,r22
   a4280:	103c1e1e 	bne	r2,zero,a32fc <__alt_data_end+0xfffe32fc>
   a4284:	00800044 	movi	r2,1
   a4288:	003e6c06 	br	a3c3c <__alt_data_end+0xfffe3c3c>
   a428c:	d9002d17 	ldw	r4,180(sp)
   a4290:	d9801e04 	addi	r6,sp,120
   a4294:	b80b883a 	mov	r5,r23
   a4298:	00a90a40 	call	a90a4 <__sprint_r>
   a429c:	103bbf1e 	bne	r2,zero,a319c <__alt_data_end+0xfffe319c>
   a42a0:	d8c02017 	ldw	r3,128(sp)
   a42a4:	da000404 	addi	r8,sp,16
   a42a8:	d9003217 	ldw	r4,200(sp)
   a42ac:	d8802617 	ldw	r2,152(sp)
   a42b0:	d9403317 	ldw	r5,204(sp)
   a42b4:	8123883a 	add	r17,r16,r4
   a42b8:	11400216 	blt	r2,r5,a42c4 <___vfprintf_internal_r+0x1538>
   a42bc:	9100004c 	andi	r4,r18,1
   a42c0:	20000d26 	beq	r4,zero,a42f8 <___vfprintf_internal_r+0x156c>
   a42c4:	d9003717 	ldw	r4,220(sp)
   a42c8:	d9403417 	ldw	r5,208(sp)
   a42cc:	1907883a 	add	r3,r3,r4
   a42d0:	d9001f17 	ldw	r4,124(sp)
   a42d4:	41400015 	stw	r5,0(r8)
   a42d8:	d9403717 	ldw	r5,220(sp)
   a42dc:	21000044 	addi	r4,r4,1
   a42e0:	d8c02015 	stw	r3,128(sp)
   a42e4:	41400115 	stw	r5,4(r8)
   a42e8:	d9001f15 	stw	r4,124(sp)
   a42ec:	014001c4 	movi	r5,7
   a42f0:	2901e816 	blt	r5,r4,a4a94 <___vfprintf_internal_r+0x1d08>
   a42f4:	42000204 	addi	r8,r8,8
   a42f8:	d9003317 	ldw	r4,204(sp)
   a42fc:	8121883a 	add	r16,r16,r4
   a4300:	2085c83a 	sub	r2,r4,r2
   a4304:	8461c83a 	sub	r16,r16,r17
   a4308:	1400010e 	bge	r2,r16,a4310 <___vfprintf_internal_r+0x1584>
   a430c:	1021883a 	mov	r16,r2
   a4310:	04000a0e 	bge	zero,r16,a433c <___vfprintf_internal_r+0x15b0>
   a4314:	d9001f17 	ldw	r4,124(sp)
   a4318:	1c07883a 	add	r3,r3,r16
   a431c:	44400015 	stw	r17,0(r8)
   a4320:	21000044 	addi	r4,r4,1
   a4324:	44000115 	stw	r16,4(r8)
   a4328:	d8c02015 	stw	r3,128(sp)
   a432c:	d9001f15 	stw	r4,124(sp)
   a4330:	014001c4 	movi	r5,7
   a4334:	2901fb16 	blt	r5,r4,a4b24 <___vfprintf_internal_r+0x1d98>
   a4338:	42000204 	addi	r8,r8,8
   a433c:	8001f716 	blt	r16,zero,a4b1c <___vfprintf_internal_r+0x1d90>
   a4340:	1421c83a 	sub	r16,r2,r16
   a4344:	043d160e 	bge	zero,r16,a37a0 <__alt_data_end+0xfffe37a0>
   a4348:	04400404 	movi	r17,16
   a434c:	d8801f17 	ldw	r2,124(sp)
   a4350:	8c3efb0e 	bge	r17,r16,a3f40 <__alt_data_end+0xfffe3f40>
   a4354:	014002f4 	movhi	r5,11
   a4358:	29451084 	addi	r5,r5,5186
   a435c:	d9402c15 	stw	r5,176(sp)
   a4360:	058001c4 	movi	r22,7
   a4364:	dcc02d17 	ldw	r19,180(sp)
   a4368:	00000306 	br	a4378 <___vfprintf_internal_r+0x15ec>
   a436c:	42000204 	addi	r8,r8,8
   a4370:	843ffc04 	addi	r16,r16,-16
   a4374:	8c3ef50e 	bge	r17,r16,a3f4c <__alt_data_end+0xfffe3f4c>
   a4378:	18c00404 	addi	r3,r3,16
   a437c:	10800044 	addi	r2,r2,1
   a4380:	45000015 	stw	r20,0(r8)
   a4384:	44400115 	stw	r17,4(r8)
   a4388:	d8c02015 	stw	r3,128(sp)
   a438c:	d8801f15 	stw	r2,124(sp)
   a4390:	b0bff60e 	bge	r22,r2,a436c <__alt_data_end+0xfffe436c>
   a4394:	d9801e04 	addi	r6,sp,120
   a4398:	b80b883a 	mov	r5,r23
   a439c:	9809883a 	mov	r4,r19
   a43a0:	00a90a40 	call	a90a4 <__sprint_r>
   a43a4:	103b7d1e 	bne	r2,zero,a319c <__alt_data_end+0xfffe319c>
   a43a8:	d8c02017 	ldw	r3,128(sp)
   a43ac:	d8801f17 	ldw	r2,124(sp)
   a43b0:	da000404 	addi	r8,sp,16
   a43b4:	003fee06 	br	a4370 <__alt_data_end+0xfffe4370>
   a43b8:	9088703a 	and	r4,r18,r2
   a43bc:	203eab1e 	bne	r4,zero,a3e6c <__alt_data_end+0xfffe3e6c>
   a43c0:	dc401f17 	ldw	r17,124(sp)
   a43c4:	40800115 	stw	r2,4(r8)
   a43c8:	44000015 	stw	r16,0(r8)
   a43cc:	8c400044 	addi	r17,r17,1
   a43d0:	d8c02015 	stw	r3,128(sp)
   a43d4:	dc401f15 	stw	r17,124(sp)
   a43d8:	008001c4 	movi	r2,7
   a43dc:	14400e16 	blt	r2,r17,a4418 <___vfprintf_internal_r+0x168c>
   a43e0:	45800204 	addi	r22,r8,8
   a43e4:	003eca06 	br	a3f10 <__alt_data_end+0xfffe3f10>
   a43e8:	010002f4 	movhi	r4,11
   a43ec:	21051084 	addi	r4,r4,5186
   a43f0:	d9002c15 	stw	r4,176(sp)
   a43f4:	d8802c17 	ldw	r2,176(sp)
   a43f8:	1c07883a 	add	r3,r3,r16
   a43fc:	8c400044 	addi	r17,r17,1
   a4400:	b0800015 	stw	r2,0(r22)
   a4404:	b4000115 	stw	r16,4(r22)
   a4408:	d8c02015 	stw	r3,128(sp)
   a440c:	dc401f15 	stw	r17,124(sp)
   a4410:	008001c4 	movi	r2,7
   a4414:	147ebd0e 	bge	r2,r17,a3f0c <__alt_data_end+0xfffe3f0c>
   a4418:	d9002d17 	ldw	r4,180(sp)
   a441c:	d9801e04 	addi	r6,sp,120
   a4420:	b80b883a 	mov	r5,r23
   a4424:	00a90a40 	call	a90a4 <__sprint_r>
   a4428:	103b5c1e 	bne	r2,zero,a319c <__alt_data_end+0xfffe319c>
   a442c:	d8c02017 	ldw	r3,128(sp)
   a4430:	dc401f17 	ldw	r17,124(sp)
   a4434:	dd800404 	addi	r22,sp,16
   a4438:	003eb506 	br	a3f10 <__alt_data_end+0xfffe3f10>
   a443c:	d9002d17 	ldw	r4,180(sp)
   a4440:	d9801e04 	addi	r6,sp,120
   a4444:	b80b883a 	mov	r5,r23
   a4448:	00a90a40 	call	a90a4 <__sprint_r>
   a444c:	103b531e 	bne	r2,zero,a319c <__alt_data_end+0xfffe319c>
   a4450:	d8c02017 	ldw	r3,128(sp)
   a4454:	dc401f17 	ldw	r17,124(sp)
   a4458:	da000404 	addi	r8,sp,16
   a445c:	003e8d06 	br	a3e94 <__alt_data_end+0xfffe3e94>
   a4460:	d9002d17 	ldw	r4,180(sp)
   a4464:	d9801e04 	addi	r6,sp,120
   a4468:	b80b883a 	mov	r5,r23
   a446c:	00a90a40 	call	a90a4 <__sprint_r>
   a4470:	103b4a1e 	bne	r2,zero,a319c <__alt_data_end+0xfffe319c>
   a4474:	d8c02017 	ldw	r3,128(sp)
   a4478:	dc401f17 	ldw	r17,124(sp)
   a447c:	dd800404 	addi	r22,sp,16
   a4480:	003e8f06 	br	a3ec0 <__alt_data_end+0xfffe3ec0>
   a4484:	0027883a 	mov	r19,zero
   a4488:	003f4a06 	br	a41b4 <__alt_data_end+0xfffe41b4>
   a448c:	d9002d17 	ldw	r4,180(sp)
   a4490:	d9801e04 	addi	r6,sp,120
   a4494:	b80b883a 	mov	r5,r23
   a4498:	00a90a40 	call	a90a4 <__sprint_r>
   a449c:	103b3f1e 	bne	r2,zero,a319c <__alt_data_end+0xfffe319c>
   a44a0:	d8c02017 	ldw	r3,128(sp)
   a44a4:	da000404 	addi	r8,sp,16
   a44a8:	003c7b06 	br	a3698 <__alt_data_end+0xfffe3698>
   a44ac:	d9402a17 	ldw	r5,168(sp)
   a44b0:	04e7c83a 	sub	r19,zero,r19
   a44b4:	07000b44 	movi	fp,45
   a44b8:	9804c03a 	cmpne	r2,r19,zero
   a44bc:	05adc83a 	sub	r22,zero,r22
   a44c0:	df002785 	stb	fp,158(sp)
   a44c4:	b0adc83a 	sub	r22,r22,r2
   a44c8:	28017b16 	blt	r5,zero,a4ab8 <___vfprintf_internal_r+0x1d2c>
   a44cc:	00bfdfc4 	movi	r2,-129
   a44d0:	90a4703a 	and	r18,r18,r2
   a44d4:	003b8906 	br	a32fc <__alt_data_end+0xfffe32fc>
   a44d8:	d9003617 	ldw	r4,216(sp)
   a44dc:	d9403817 	ldw	r5,224(sp)
   a44e0:	da003d15 	stw	r8,244(sp)
   a44e4:	00a8e580 	call	a8e58 <__fpclassifyd>
   a44e8:	da003d17 	ldw	r8,244(sp)
   a44ec:	1000f026 	beq	r2,zero,a48b0 <___vfprintf_internal_r+0x1b24>
   a44f0:	d9002a17 	ldw	r4,168(sp)
   a44f4:	05bff7c4 	movi	r22,-33
   a44f8:	00bfffc4 	movi	r2,-1
   a44fc:	8dac703a 	and	r22,r17,r22
   a4500:	20820026 	beq	r4,r2,a4d04 <___vfprintf_internal_r+0x1f78>
   a4504:	008011c4 	movi	r2,71
   a4508:	b081f726 	beq	r22,r2,a4ce8 <___vfprintf_internal_r+0x1f5c>
   a450c:	d9003817 	ldw	r4,224(sp)
   a4510:	90c04014 	ori	r3,r18,256
   a4514:	d8c02c15 	stw	r3,176(sp)
   a4518:	20021516 	blt	r4,zero,a4d70 <___vfprintf_internal_r+0x1fe4>
   a451c:	dcc03817 	ldw	r19,224(sp)
   a4520:	d8002905 	stb	zero,164(sp)
   a4524:	00801984 	movi	r2,102
   a4528:	8881f926 	beq	r17,r2,a4d10 <___vfprintf_internal_r+0x1f84>
   a452c:	00801184 	movi	r2,70
   a4530:	88821c26 	beq	r17,r2,a4da4 <___vfprintf_internal_r+0x2018>
   a4534:	00801144 	movi	r2,69
   a4538:	b081ef26 	beq	r22,r2,a4cf8 <___vfprintf_internal_r+0x1f6c>
   a453c:	d8c02a17 	ldw	r3,168(sp)
   a4540:	d8802104 	addi	r2,sp,132
   a4544:	d8800315 	stw	r2,12(sp)
   a4548:	d9403617 	ldw	r5,216(sp)
   a454c:	d8802504 	addi	r2,sp,148
   a4550:	d9002d17 	ldw	r4,180(sp)
   a4554:	d8800215 	stw	r2,8(sp)
   a4558:	d8802604 	addi	r2,sp,152
   a455c:	d8c00015 	stw	r3,0(sp)
   a4560:	d8800115 	stw	r2,4(sp)
   a4564:	01c00084 	movi	r7,2
   a4568:	980d883a 	mov	r6,r19
   a456c:	d8c03c15 	stw	r3,240(sp)
   a4570:	da003d15 	stw	r8,244(sp)
   a4574:	00a56c80 	call	a56c8 <_dtoa_r>
   a4578:	1021883a 	mov	r16,r2
   a457c:	008019c4 	movi	r2,103
   a4580:	d8c03c17 	ldw	r3,240(sp)
   a4584:	da003d17 	ldw	r8,244(sp)
   a4588:	88817126 	beq	r17,r2,a4b50 <___vfprintf_internal_r+0x1dc4>
   a458c:	008011c4 	movi	r2,71
   a4590:	88829126 	beq	r17,r2,a4fd8 <___vfprintf_internal_r+0x224c>
   a4594:	80f9883a 	add	fp,r16,r3
   a4598:	d9003617 	ldw	r4,216(sp)
   a459c:	000d883a 	mov	r6,zero
   a45a0:	000f883a 	mov	r7,zero
   a45a4:	980b883a 	mov	r5,r19
   a45a8:	da003d15 	stw	r8,244(sp)
   a45ac:	00acb840 	call	acb84 <__eqdf2>
   a45b0:	da003d17 	ldw	r8,244(sp)
   a45b4:	10018d26 	beq	r2,zero,a4bec <___vfprintf_internal_r+0x1e60>
   a45b8:	d8802117 	ldw	r2,132(sp)
   a45bc:	1700062e 	bgeu	r2,fp,a45d8 <___vfprintf_internal_r+0x184c>
   a45c0:	01000c04 	movi	r4,48
   a45c4:	10c00044 	addi	r3,r2,1
   a45c8:	d8c02115 	stw	r3,132(sp)
   a45cc:	11000005 	stb	r4,0(r2)
   a45d0:	d8802117 	ldw	r2,132(sp)
   a45d4:	173ffb36 	bltu	r2,fp,a45c4 <__alt_data_end+0xfffe45c4>
   a45d8:	1405c83a 	sub	r2,r2,r16
   a45dc:	d8803315 	stw	r2,204(sp)
   a45e0:	008011c4 	movi	r2,71
   a45e4:	b0817626 	beq	r22,r2,a4bc0 <___vfprintf_internal_r+0x1e34>
   a45e8:	00801944 	movi	r2,101
   a45ec:	1442800e 	bge	r2,r17,a4ff0 <___vfprintf_internal_r+0x2264>
   a45f0:	d8c02617 	ldw	r3,152(sp)
   a45f4:	00801984 	movi	r2,102
   a45f8:	d8c03215 	stw	r3,200(sp)
   a45fc:	8881fe26 	beq	r17,r2,a4df8 <___vfprintf_internal_r+0x206c>
   a4600:	d8c03217 	ldw	r3,200(sp)
   a4604:	d9003317 	ldw	r4,204(sp)
   a4608:	1901dd16 	blt	r3,r4,a4d80 <___vfprintf_internal_r+0x1ff4>
   a460c:	9480004c 	andi	r18,r18,1
   a4610:	90022b1e 	bne	r18,zero,a4ec0 <___vfprintf_internal_r+0x2134>
   a4614:	1805883a 	mov	r2,r3
   a4618:	18028316 	blt	r3,zero,a5028 <___vfprintf_internal_r+0x229c>
   a461c:	d8c03217 	ldw	r3,200(sp)
   a4620:	044019c4 	movi	r17,103
   a4624:	d8c02b15 	stw	r3,172(sp)
   a4628:	df002907 	ldb	fp,164(sp)
   a462c:	e001531e 	bne	fp,zero,a4b7c <___vfprintf_internal_r+0x1df0>
   a4630:	df002783 	ldbu	fp,158(sp)
   a4634:	d8802915 	stw	r2,164(sp)
   a4638:	dc802c17 	ldw	r18,176(sp)
   a463c:	d8002a15 	stw	zero,168(sp)
   a4640:	003baf06 	br	a3500 <__alt_data_end+0xfffe3500>
   a4644:	d8c02e17 	ldw	r3,184(sp)
   a4648:	d9002e17 	ldw	r4,184(sp)
   a464c:	d9402e17 	ldw	r5,184(sp)
   a4650:	18c00017 	ldw	r3,0(r3)
   a4654:	21000117 	ldw	r4,4(r4)
   a4658:	29400204 	addi	r5,r5,8
   a465c:	d8c03615 	stw	r3,216(sp)
   a4660:	d9003815 	stw	r4,224(sp)
   a4664:	d9402e15 	stw	r5,184(sp)
   a4668:	003b5006 	br	a33ac <__alt_data_end+0xfffe33ac>
   a466c:	ac400007 	ldb	r17,0(r21)
   a4670:	003a2806 	br	a2f14 <__alt_data_end+0xfffe2f14>
   a4674:	9080100c 	andi	r2,r18,64
   a4678:	1000a826 	beq	r2,zero,a491c <___vfprintf_internal_r+0x1b90>
   a467c:	d8c02e17 	ldw	r3,184(sp)
   a4680:	002d883a 	mov	r22,zero
   a4684:	1cc0000b 	ldhu	r19,0(r3)
   a4688:	18c00104 	addi	r3,r3,4
   a468c:	d8c02e15 	stw	r3,184(sp)
   a4690:	003caf06 	br	a3950 <__alt_data_end+0xfffe3950>
   a4694:	d9002e17 	ldw	r4,184(sp)
   a4698:	d9402a17 	ldw	r5,168(sp)
   a469c:	002d883a 	mov	r22,zero
   a46a0:	20800104 	addi	r2,r4,4
   a46a4:	24c00017 	ldw	r19,0(r4)
   a46a8:	283ebb0e 	bge	r5,zero,a4198 <__alt_data_end+0xfffe4198>
   a46ac:	003ef106 	br	a4274 <__alt_data_end+0xfffe4274>
   a46b0:	9080040c 	andi	r2,r18,16
   a46b4:	1000921e 	bne	r2,zero,a4900 <___vfprintf_internal_r+0x1b74>
   a46b8:	9480100c 	andi	r18,r18,64
   a46bc:	90013926 	beq	r18,zero,a4ba4 <___vfprintf_internal_r+0x1e18>
   a46c0:	d9402e17 	ldw	r5,184(sp)
   a46c4:	d8c02f17 	ldw	r3,188(sp)
   a46c8:	28800017 	ldw	r2,0(r5)
   a46cc:	29400104 	addi	r5,r5,4
   a46d0:	d9402e15 	stw	r5,184(sp)
   a46d4:	10c0000d 	sth	r3,0(r2)
   a46d8:	0039e406 	br	a2e6c <__alt_data_end+0xfffe2e6c>
   a46dc:	9080100c 	andi	r2,r18,64
   a46e0:	10008026 	beq	r2,zero,a48e4 <___vfprintf_internal_r+0x1b58>
   a46e4:	d8802e17 	ldw	r2,184(sp)
   a46e8:	14c0000f 	ldh	r19,0(r2)
   a46ec:	10800104 	addi	r2,r2,4
   a46f0:	d8802e15 	stw	r2,184(sp)
   a46f4:	982dd7fa 	srai	r22,r19,31
   a46f8:	b005883a 	mov	r2,r22
   a46fc:	003af706 	br	a32dc <__alt_data_end+0xfffe32dc>
   a4700:	9080100c 	andi	r2,r18,64
   a4704:	d8002785 	stb	zero,158(sp)
   a4708:	10008a1e 	bne	r2,zero,a4934 <___vfprintf_internal_r+0x1ba8>
   a470c:	d9002e17 	ldw	r4,184(sp)
   a4710:	d9402a17 	ldw	r5,168(sp)
   a4714:	002d883a 	mov	r22,zero
   a4718:	20800104 	addi	r2,r4,4
   a471c:	24c00017 	ldw	r19,0(r4)
   a4720:	283e4b0e 	bge	r5,zero,a4050 <__alt_data_end+0xfffe4050>
   a4724:	9d86b03a 	or	r3,r19,r22
   a4728:	d8802e15 	stw	r2,184(sp)
   a472c:	183e4c1e 	bne	r3,zero,a4060 <__alt_data_end+0xfffe4060>
   a4730:	0039883a 	mov	fp,zero
   a4734:	0005883a 	mov	r2,zero
   a4738:	003d4006 	br	a3c3c <__alt_data_end+0xfffe3c3c>
   a473c:	014002f4 	movhi	r5,11
   a4740:	29451084 	addi	r5,r5,5186
   a4744:	d9402c15 	stw	r5,176(sp)
   a4748:	d9402c17 	ldw	r5,176(sp)
   a474c:	1c47883a 	add	r3,r3,r17
   a4750:	10800044 	addi	r2,r2,1
   a4754:	41400015 	stw	r5,0(r8)
   a4758:	44400115 	stw	r17,4(r8)
   a475c:	d8c02015 	stw	r3,128(sp)
   a4760:	d8801f15 	stw	r2,124(sp)
   a4764:	010001c4 	movi	r4,7
   a4768:	20bec816 	blt	r4,r2,a428c <__alt_data_end+0xfffe428c>
   a476c:	42000204 	addi	r8,r8,8
   a4770:	003ecd06 	br	a42a8 <__alt_data_end+0xfffe42a8>
   a4774:	d9002a17 	ldw	r4,168(sp)
   a4778:	d8002785 	stb	zero,158(sp)
   a477c:	203d2d16 	blt	r4,zero,a3c34 <__alt_data_end+0xfffe3c34>
   a4780:	00bfdfc4 	movi	r2,-129
   a4784:	90a4703a 	and	r18,r18,r2
   a4788:	003a6106 	br	a3110 <__alt_data_end+0xfffe3110>
   a478c:	010002f4 	movhi	r4,11
   a4790:	21051084 	addi	r4,r4,5186
   a4794:	d9002c15 	stw	r4,176(sp)
   a4798:	003bea06 	br	a3744 <__alt_data_end+0xfffe3744>
   a479c:	d9002d17 	ldw	r4,180(sp)
   a47a0:	d9801e04 	addi	r6,sp,120
   a47a4:	b80b883a 	mov	r5,r23
   a47a8:	00a90a40 	call	a90a4 <__sprint_r>
   a47ac:	103a7b1e 	bne	r2,zero,a319c <__alt_data_end+0xfffe319c>
   a47b0:	d8c02017 	ldw	r3,128(sp)
   a47b4:	da000404 	addi	r8,sp,16
   a47b8:	003d4106 	br	a3cc0 <__alt_data_end+0xfffe3cc0>
   a47bc:	d8801f17 	ldw	r2,124(sp)
   a47c0:	014002f4 	movhi	r5,11
   a47c4:	01000044 	movi	r4,1
   a47c8:	18c00044 	addi	r3,r3,1
   a47cc:	10800044 	addi	r2,r2,1
   a47d0:	29451004 	addi	r5,r5,5184
   a47d4:	41000115 	stw	r4,4(r8)
   a47d8:	41400015 	stw	r5,0(r8)
   a47dc:	d8c02015 	stw	r3,128(sp)
   a47e0:	d8801f15 	stw	r2,124(sp)
   a47e4:	010001c4 	movi	r4,7
   a47e8:	20805c16 	blt	r4,r2,a495c <___vfprintf_internal_r+0x1bd0>
   a47ec:	42000204 	addi	r8,r8,8
   a47f0:	8800041e 	bne	r17,zero,a4804 <___vfprintf_internal_r+0x1a78>
   a47f4:	d8803317 	ldw	r2,204(sp)
   a47f8:	1000021e 	bne	r2,zero,a4804 <___vfprintf_internal_r+0x1a78>
   a47fc:	9080004c 	andi	r2,r18,1
   a4800:	103be726 	beq	r2,zero,a37a0 <__alt_data_end+0xfffe37a0>
   a4804:	d9003717 	ldw	r4,220(sp)
   a4808:	d8801f17 	ldw	r2,124(sp)
   a480c:	d9403417 	ldw	r5,208(sp)
   a4810:	20c7883a 	add	r3,r4,r3
   a4814:	10800044 	addi	r2,r2,1
   a4818:	41000115 	stw	r4,4(r8)
   a481c:	41400015 	stw	r5,0(r8)
   a4820:	d8c02015 	stw	r3,128(sp)
   a4824:	d8801f15 	stw	r2,124(sp)
   a4828:	010001c4 	movi	r4,7
   a482c:	20812116 	blt	r4,r2,a4cb4 <___vfprintf_internal_r+0x1f28>
   a4830:	42000204 	addi	r8,r8,8
   a4834:	0463c83a 	sub	r17,zero,r17
   a4838:	0440730e 	bge	zero,r17,a4a08 <___vfprintf_internal_r+0x1c7c>
   a483c:	05800404 	movi	r22,16
   a4840:	b440860e 	bge	r22,r17,a4a5c <___vfprintf_internal_r+0x1cd0>
   a4844:	014002f4 	movhi	r5,11
   a4848:	29451084 	addi	r5,r5,5186
   a484c:	d9402c15 	stw	r5,176(sp)
   a4850:	070001c4 	movi	fp,7
   a4854:	dcc02d17 	ldw	r19,180(sp)
   a4858:	00000306 	br	a4868 <___vfprintf_internal_r+0x1adc>
   a485c:	42000204 	addi	r8,r8,8
   a4860:	8c7ffc04 	addi	r17,r17,-16
   a4864:	b440800e 	bge	r22,r17,a4a68 <___vfprintf_internal_r+0x1cdc>
   a4868:	18c00404 	addi	r3,r3,16
   a486c:	10800044 	addi	r2,r2,1
   a4870:	45000015 	stw	r20,0(r8)
   a4874:	45800115 	stw	r22,4(r8)
   a4878:	d8c02015 	stw	r3,128(sp)
   a487c:	d8801f15 	stw	r2,124(sp)
   a4880:	e0bff60e 	bge	fp,r2,a485c <__alt_data_end+0xfffe485c>
   a4884:	d9801e04 	addi	r6,sp,120
   a4888:	b80b883a 	mov	r5,r23
   a488c:	9809883a 	mov	r4,r19
   a4890:	00a90a40 	call	a90a4 <__sprint_r>
   a4894:	103a411e 	bne	r2,zero,a319c <__alt_data_end+0xfffe319c>
   a4898:	d8c02017 	ldw	r3,128(sp)
   a489c:	d8801f17 	ldw	r2,124(sp)
   a48a0:	da000404 	addi	r8,sp,16
   a48a4:	003fee06 	br	a4860 <__alt_data_end+0xfffe4860>
   a48a8:	00bfffc4 	movi	r2,-1
   a48ac:	003a3f06 	br	a31ac <__alt_data_end+0xfffe31ac>
   a48b0:	008011c4 	movi	r2,71
   a48b4:	1440b816 	blt	r2,r17,a4b98 <___vfprintf_internal_r+0x1e0c>
   a48b8:	040002f4 	movhi	r16,11
   a48bc:	84050204 	addi	r16,r16,5128
   a48c0:	00c000c4 	movi	r3,3
   a48c4:	00bfdfc4 	movi	r2,-129
   a48c8:	d8c02915 	stw	r3,164(sp)
   a48cc:	90a4703a 	and	r18,r18,r2
   a48d0:	df002783 	ldbu	fp,158(sp)
   a48d4:	d8c02b15 	stw	r3,172(sp)
   a48d8:	d8002a15 	stw	zero,168(sp)
   a48dc:	d8003215 	stw	zero,200(sp)
   a48e0:	003b0706 	br	a3500 <__alt_data_end+0xfffe3500>
   a48e4:	d8c02e17 	ldw	r3,184(sp)
   a48e8:	1cc00017 	ldw	r19,0(r3)
   a48ec:	18c00104 	addi	r3,r3,4
   a48f0:	d8c02e15 	stw	r3,184(sp)
   a48f4:	982dd7fa 	srai	r22,r19,31
   a48f8:	b005883a 	mov	r2,r22
   a48fc:	003a7706 	br	a32dc <__alt_data_end+0xfffe32dc>
   a4900:	d8c02e17 	ldw	r3,184(sp)
   a4904:	d9002f17 	ldw	r4,188(sp)
   a4908:	18800017 	ldw	r2,0(r3)
   a490c:	18c00104 	addi	r3,r3,4
   a4910:	d8c02e15 	stw	r3,184(sp)
   a4914:	11000015 	stw	r4,0(r2)
   a4918:	00395406 	br	a2e6c <__alt_data_end+0xfffe2e6c>
   a491c:	d9002e17 	ldw	r4,184(sp)
   a4920:	002d883a 	mov	r22,zero
   a4924:	24c00017 	ldw	r19,0(r4)
   a4928:	21000104 	addi	r4,r4,4
   a492c:	d9002e15 	stw	r4,184(sp)
   a4930:	003c0706 	br	a3950 <__alt_data_end+0xfffe3950>
   a4934:	d9402e17 	ldw	r5,184(sp)
   a4938:	d8c02a17 	ldw	r3,168(sp)
   a493c:	002d883a 	mov	r22,zero
   a4940:	28800104 	addi	r2,r5,4
   a4944:	2cc0000b 	ldhu	r19,0(r5)
   a4948:	183dc10e 	bge	r3,zero,a4050 <__alt_data_end+0xfffe4050>
   a494c:	003f7506 	br	a4724 <__alt_data_end+0xfffe4724>
   a4950:	040002f4 	movhi	r16,11
   a4954:	84050004 	addi	r16,r16,5120
   a4958:	003aa706 	br	a33f8 <__alt_data_end+0xfffe33f8>
   a495c:	d9002d17 	ldw	r4,180(sp)
   a4960:	d9801e04 	addi	r6,sp,120
   a4964:	b80b883a 	mov	r5,r23
   a4968:	00a90a40 	call	a90a4 <__sprint_r>
   a496c:	103a0b1e 	bne	r2,zero,a319c <__alt_data_end+0xfffe319c>
   a4970:	dc402617 	ldw	r17,152(sp)
   a4974:	d8c02017 	ldw	r3,128(sp)
   a4978:	da000404 	addi	r8,sp,16
   a497c:	003f9c06 	br	a47f0 <__alt_data_end+0xfffe47f0>
   a4980:	ac400043 	ldbu	r17,1(r21)
   a4984:	84000814 	ori	r16,r16,32
   a4988:	ad400044 	addi	r21,r21,1
   a498c:	8c403fcc 	andi	r17,r17,255
   a4990:	8c40201c 	xori	r17,r17,128
   a4994:	8c7fe004 	addi	r17,r17,-128
   a4998:	00395e06 	br	a2f14 <__alt_data_end+0xfffe2f14>
   a499c:	d8c02e15 	stw	r3,184(sp)
   a49a0:	0039883a 	mov	fp,zero
   a49a4:	003e3506 	br	a427c <__alt_data_end+0xfffe427c>
   a49a8:	d9002d17 	ldw	r4,180(sp)
   a49ac:	d9801e04 	addi	r6,sp,120
   a49b0:	b80b883a 	mov	r5,r23
   a49b4:	00a90a40 	call	a90a4 <__sprint_r>
   a49b8:	1039f81e 	bne	r2,zero,a319c <__alt_data_end+0xfffe319c>
   a49bc:	d8c02017 	ldw	r3,128(sp)
   a49c0:	da000404 	addi	r8,sp,16
   a49c4:	003cd006 	br	a3d08 <__alt_data_end+0xfffe3d08>
   a49c8:	8009883a 	mov	r4,r16
   a49cc:	df003d15 	stw	fp,244(sp)
   a49d0:	00a2cf40 	call	a2cf4 <strlen>
   a49d4:	d8802b15 	stw	r2,172(sp)
   a49d8:	da003d17 	ldw	r8,244(sp)
   a49dc:	103c200e 	bge	r2,zero,a3a60 <__alt_data_end+0xfffe3a60>
   a49e0:	0005883a 	mov	r2,zero
   a49e4:	003c1e06 	br	a3a60 <__alt_data_end+0xfffe3a60>
   a49e8:	d9002d17 	ldw	r4,180(sp)
   a49ec:	d9801e04 	addi	r6,sp,120
   a49f0:	b80b883a 	mov	r5,r23
   a49f4:	00a90a40 	call	a90a4 <__sprint_r>
   a49f8:	1039e81e 	bne	r2,zero,a319c <__alt_data_end+0xfffe319c>
   a49fc:	d8c02017 	ldw	r3,128(sp)
   a4a00:	d8801f17 	ldw	r2,124(sp)
   a4a04:	da000404 	addi	r8,sp,16
   a4a08:	d9403317 	ldw	r5,204(sp)
   a4a0c:	10800044 	addi	r2,r2,1
   a4a10:	44000015 	stw	r16,0(r8)
   a4a14:	28c7883a 	add	r3,r5,r3
   a4a18:	003b5b06 	br	a3788 <__alt_data_end+0xfffe3788>
   a4a1c:	010002f4 	movhi	r4,11
   a4a20:	21051484 	addi	r4,r4,5202
   a4a24:	d9003515 	stw	r4,212(sp)
   a4a28:	003af206 	br	a35f4 <__alt_data_end+0xfffe35f4>
   a4a2c:	013fffc4 	movi	r4,-1
   a4a30:	003a0806 	br	a3254 <__alt_data_end+0xfffe3254>
   a4a34:	0023883a 	mov	r17,zero
   a4a38:	003d9d06 	br	a40b0 <__alt_data_end+0xfffe40b0>
   a4a3c:	d9002d17 	ldw	r4,180(sp)
   a4a40:	d9801e04 	addi	r6,sp,120
   a4a44:	b80b883a 	mov	r5,r23
   a4a48:	00a90a40 	call	a90a4 <__sprint_r>
   a4a4c:	1039d31e 	bne	r2,zero,a319c <__alt_data_end+0xfffe319c>
   a4a50:	d8c02017 	ldw	r3,128(sp)
   a4a54:	da000404 	addi	r8,sp,16
   a4a58:	003d9406 	br	a40ac <__alt_data_end+0xfffe40ac>
   a4a5c:	010002f4 	movhi	r4,11
   a4a60:	21051084 	addi	r4,r4,5186
   a4a64:	d9002c15 	stw	r4,176(sp)
   a4a68:	d9002c17 	ldw	r4,176(sp)
   a4a6c:	1c47883a 	add	r3,r3,r17
   a4a70:	10800044 	addi	r2,r2,1
   a4a74:	41000015 	stw	r4,0(r8)
   a4a78:	44400115 	stw	r17,4(r8)
   a4a7c:	d8c02015 	stw	r3,128(sp)
   a4a80:	d8801f15 	stw	r2,124(sp)
   a4a84:	010001c4 	movi	r4,7
   a4a88:	20bfd716 	blt	r4,r2,a49e8 <__alt_data_end+0xfffe49e8>
   a4a8c:	42000204 	addi	r8,r8,8
   a4a90:	003fdd06 	br	a4a08 <__alt_data_end+0xfffe4a08>
   a4a94:	d9002d17 	ldw	r4,180(sp)
   a4a98:	d9801e04 	addi	r6,sp,120
   a4a9c:	b80b883a 	mov	r5,r23
   a4aa0:	00a90a40 	call	a90a4 <__sprint_r>
   a4aa4:	1039bd1e 	bne	r2,zero,a319c <__alt_data_end+0xfffe319c>
   a4aa8:	d8802617 	ldw	r2,152(sp)
   a4aac:	d8c02017 	ldw	r3,128(sp)
   a4ab0:	da000404 	addi	r8,sp,16
   a4ab4:	003e1006 	br	a42f8 <__alt_data_end+0xfffe42f8>
   a4ab8:	00800044 	movi	r2,1
   a4abc:	10803fcc 	andi	r2,r2,255
   a4ac0:	00c00044 	movi	r3,1
   a4ac4:	10fa0d26 	beq	r2,r3,a32fc <__alt_data_end+0xfffe32fc>
   a4ac8:	00c00084 	movi	r3,2
   a4acc:	10fbaf26 	beq	r2,r3,a398c <__alt_data_end+0xfffe398c>
   a4ad0:	003a6d06 	br	a3488 <__alt_data_end+0xfffe3488>
   a4ad4:	010002f4 	movhi	r4,11
   a4ad8:	21051484 	addi	r4,r4,5202
   a4adc:	d9003515 	stw	r4,212(sp)
   a4ae0:	003b5406 	br	a3834 <__alt_data_end+0xfffe3834>
   a4ae4:	d8802a17 	ldw	r2,168(sp)
   a4ae8:	00c00184 	movi	r3,6
   a4aec:	1880012e 	bgeu	r3,r2,a4af4 <___vfprintf_internal_r+0x1d68>
   a4af0:	1805883a 	mov	r2,r3
   a4af4:	d8802b15 	stw	r2,172(sp)
   a4af8:	1000ef16 	blt	r2,zero,a4eb8 <___vfprintf_internal_r+0x212c>
   a4afc:	040002f4 	movhi	r16,11
   a4b00:	d8802915 	stw	r2,164(sp)
   a4b04:	dcc02e15 	stw	r19,184(sp)
   a4b08:	d8002a15 	stw	zero,168(sp)
   a4b0c:	d8003215 	stw	zero,200(sp)
   a4b10:	84050e04 	addi	r16,r16,5176
   a4b14:	0039883a 	mov	fp,zero
   a4b18:	003a8006 	br	a351c <__alt_data_end+0xfffe351c>
   a4b1c:	0021883a 	mov	r16,zero
   a4b20:	003e0706 	br	a4340 <__alt_data_end+0xfffe4340>
   a4b24:	d9002d17 	ldw	r4,180(sp)
   a4b28:	d9801e04 	addi	r6,sp,120
   a4b2c:	b80b883a 	mov	r5,r23
   a4b30:	00a90a40 	call	a90a4 <__sprint_r>
   a4b34:	1039991e 	bne	r2,zero,a319c <__alt_data_end+0xfffe319c>
   a4b38:	d8802617 	ldw	r2,152(sp)
   a4b3c:	d9403317 	ldw	r5,204(sp)
   a4b40:	d8c02017 	ldw	r3,128(sp)
   a4b44:	da000404 	addi	r8,sp,16
   a4b48:	2885c83a 	sub	r2,r5,r2
   a4b4c:	003dfb06 	br	a433c <__alt_data_end+0xfffe433c>
   a4b50:	9080004c 	andi	r2,r18,1
   a4b54:	103e8f1e 	bne	r2,zero,a4594 <__alt_data_end+0xfffe4594>
   a4b58:	d8802117 	ldw	r2,132(sp)
   a4b5c:	003e9e06 	br	a45d8 <__alt_data_end+0xfffe45d8>
   a4b60:	1025883a 	mov	r18,r2
   a4b64:	0039883a 	mov	fp,zero
   a4b68:	00800084 	movi	r2,2
   a4b6c:	003fd306 	br	a4abc <__alt_data_end+0xfffe4abc>
   a4b70:	07000b44 	movi	fp,45
   a4b74:	df002785 	stb	fp,158(sp)
   a4b78:	003a1b06 	br	a33e8 <__alt_data_end+0xfffe33e8>
   a4b7c:	00c00b44 	movi	r3,45
   a4b80:	d8c02785 	stb	r3,158(sp)
   a4b84:	d8802915 	stw	r2,164(sp)
   a4b88:	dc802c17 	ldw	r18,176(sp)
   a4b8c:	d8002a15 	stw	zero,168(sp)
   a4b90:	07000b44 	movi	fp,45
   a4b94:	003a5e06 	br	a3510 <__alt_data_end+0xfffe3510>
   a4b98:	040002f4 	movhi	r16,11
   a4b9c:	84050304 	addi	r16,r16,5132
   a4ba0:	003f4706 	br	a48c0 <__alt_data_end+0xfffe48c0>
   a4ba4:	d9002e17 	ldw	r4,184(sp)
   a4ba8:	d9402f17 	ldw	r5,188(sp)
   a4bac:	20800017 	ldw	r2,0(r4)
   a4bb0:	21000104 	addi	r4,r4,4
   a4bb4:	d9002e15 	stw	r4,184(sp)
   a4bb8:	11400015 	stw	r5,0(r2)
   a4bbc:	0038ab06 	br	a2e6c <__alt_data_end+0xfffe2e6c>
   a4bc0:	dd802617 	ldw	r22,152(sp)
   a4bc4:	00bfff44 	movi	r2,-3
   a4bc8:	b0801c16 	blt	r22,r2,a4c3c <___vfprintf_internal_r+0x1eb0>
   a4bcc:	d9402a17 	ldw	r5,168(sp)
   a4bd0:	2d801a16 	blt	r5,r22,a4c3c <___vfprintf_internal_r+0x1eb0>
   a4bd4:	dd803215 	stw	r22,200(sp)
   a4bd8:	003e8906 	br	a4600 <__alt_data_end+0xfffe4600>
   a4bdc:	010002f4 	movhi	r4,11
   a4be0:	21051084 	addi	r4,r4,5186
   a4be4:	d9002c15 	stw	r4,176(sp)
   a4be8:	003c9106 	br	a3e30 <__alt_data_end+0xfffe3e30>
   a4bec:	e005883a 	mov	r2,fp
   a4bf0:	003e7906 	br	a45d8 <__alt_data_end+0xfffe45d8>
   a4bf4:	d9002a17 	ldw	r4,168(sp)
   a4bf8:	df002783 	ldbu	fp,158(sp)
   a4bfc:	dcc02e15 	stw	r19,184(sp)
   a4c00:	d9002915 	stw	r4,164(sp)
   a4c04:	d9002b15 	stw	r4,172(sp)
   a4c08:	d8002a15 	stw	zero,168(sp)
   a4c0c:	d8003215 	stw	zero,200(sp)
   a4c10:	003a3b06 	br	a3500 <__alt_data_end+0xfffe3500>
   a4c14:	9080004c 	andi	r2,r18,1
   a4c18:	0039883a 	mov	fp,zero
   a4c1c:	10000426 	beq	r2,zero,a4c30 <___vfprintf_internal_r+0x1ea4>
   a4c20:	00800c04 	movi	r2,48
   a4c24:	dc001dc4 	addi	r16,sp,119
   a4c28:	d8801dc5 	stb	r2,119(sp)
   a4c2c:	003b6406 	br	a39c0 <__alt_data_end+0xfffe39c0>
   a4c30:	d8002b15 	stw	zero,172(sp)
   a4c34:	dc001e04 	addi	r16,sp,120
   a4c38:	003a2b06 	br	a34e8 <__alt_data_end+0xfffe34e8>
   a4c3c:	8c7fff84 	addi	r17,r17,-2
   a4c40:	b5bfffc4 	addi	r22,r22,-1
   a4c44:	dd802615 	stw	r22,152(sp)
   a4c48:	dc4022c5 	stb	r17,139(sp)
   a4c4c:	b000bf16 	blt	r22,zero,a4f4c <___vfprintf_internal_r+0x21c0>
   a4c50:	00800ac4 	movi	r2,43
   a4c54:	d8802305 	stb	r2,140(sp)
   a4c58:	00800244 	movi	r2,9
   a4c5c:	15807016 	blt	r2,r22,a4e20 <___vfprintf_internal_r+0x2094>
   a4c60:	00800c04 	movi	r2,48
   a4c64:	b5800c04 	addi	r22,r22,48
   a4c68:	d8802345 	stb	r2,141(sp)
   a4c6c:	dd802385 	stb	r22,142(sp)
   a4c70:	d88023c4 	addi	r2,sp,143
   a4c74:	df0022c4 	addi	fp,sp,139
   a4c78:	d8c03317 	ldw	r3,204(sp)
   a4c7c:	1739c83a 	sub	fp,r2,fp
   a4c80:	d9003317 	ldw	r4,204(sp)
   a4c84:	e0c7883a 	add	r3,fp,r3
   a4c88:	df003a15 	stw	fp,232(sp)
   a4c8c:	d8c02b15 	stw	r3,172(sp)
   a4c90:	00800044 	movi	r2,1
   a4c94:	1100b30e 	bge	r2,r4,a4f64 <___vfprintf_internal_r+0x21d8>
   a4c98:	d8c02b17 	ldw	r3,172(sp)
   a4c9c:	18c00044 	addi	r3,r3,1
   a4ca0:	d8c02b15 	stw	r3,172(sp)
   a4ca4:	1805883a 	mov	r2,r3
   a4ca8:	1800ac16 	blt	r3,zero,a4f5c <___vfprintf_internal_r+0x21d0>
   a4cac:	d8003215 	stw	zero,200(sp)
   a4cb0:	003e5d06 	br	a4628 <__alt_data_end+0xfffe4628>
   a4cb4:	d9002d17 	ldw	r4,180(sp)
   a4cb8:	d9801e04 	addi	r6,sp,120
   a4cbc:	b80b883a 	mov	r5,r23
   a4cc0:	00a90a40 	call	a90a4 <__sprint_r>
   a4cc4:	1039351e 	bne	r2,zero,a319c <__alt_data_end+0xfffe319c>
   a4cc8:	dc402617 	ldw	r17,152(sp)
   a4ccc:	d8c02017 	ldw	r3,128(sp)
   a4cd0:	d8801f17 	ldw	r2,124(sp)
   a4cd4:	da000404 	addi	r8,sp,16
   a4cd8:	003ed606 	br	a4834 <__alt_data_end+0xfffe4834>
   a4cdc:	182b883a 	mov	r21,r3
   a4ce0:	d8002a15 	stw	zero,168(sp)
   a4ce4:	00388c06 	br	a2f18 <__alt_data_end+0xfffe2f18>
   a4ce8:	d8802a17 	ldw	r2,168(sp)
   a4cec:	103e071e 	bne	r2,zero,a450c <__alt_data_end+0xfffe450c>
   a4cf0:	dc002a15 	stw	r16,168(sp)
   a4cf4:	003e0506 	br	a450c <__alt_data_end+0xfffe450c>
   a4cf8:	d9002a17 	ldw	r4,168(sp)
   a4cfc:	20c00044 	addi	r3,r4,1
   a4d00:	003e0f06 	br	a4540 <__alt_data_end+0xfffe4540>
   a4d04:	01400184 	movi	r5,6
   a4d08:	d9402a15 	stw	r5,168(sp)
   a4d0c:	003dff06 	br	a450c <__alt_data_end+0xfffe450c>
   a4d10:	d8802104 	addi	r2,sp,132
   a4d14:	d8800315 	stw	r2,12(sp)
   a4d18:	d8802504 	addi	r2,sp,148
   a4d1c:	d8800215 	stw	r2,8(sp)
   a4d20:	d8802604 	addi	r2,sp,152
   a4d24:	d8800115 	stw	r2,4(sp)
   a4d28:	d8802a17 	ldw	r2,168(sp)
   a4d2c:	d9403617 	ldw	r5,216(sp)
   a4d30:	d9002d17 	ldw	r4,180(sp)
   a4d34:	d8800015 	stw	r2,0(sp)
   a4d38:	01c000c4 	movi	r7,3
   a4d3c:	980d883a 	mov	r6,r19
   a4d40:	da003d15 	stw	r8,244(sp)
   a4d44:	00a56c80 	call	a56c8 <_dtoa_r>
   a4d48:	d8c02a17 	ldw	r3,168(sp)
   a4d4c:	da003d17 	ldw	r8,244(sp)
   a4d50:	1021883a 	mov	r16,r2
   a4d54:	10f9883a 	add	fp,r2,r3
   a4d58:	81000007 	ldb	r4,0(r16)
   a4d5c:	00800c04 	movi	r2,48
   a4d60:	20805e26 	beq	r4,r2,a4edc <___vfprintf_internal_r+0x2150>
   a4d64:	d8c02617 	ldw	r3,152(sp)
   a4d68:	e0f9883a 	add	fp,fp,r3
   a4d6c:	003e0a06 	br	a4598 <__alt_data_end+0xfffe4598>
   a4d70:	00c00b44 	movi	r3,45
   a4d74:	24e0003c 	xorhi	r19,r4,32768
   a4d78:	d8c02905 	stb	r3,164(sp)
   a4d7c:	003de906 	br	a4524 <__alt_data_end+0xfffe4524>
   a4d80:	d8c03217 	ldw	r3,200(sp)
   a4d84:	00c07a0e 	bge	zero,r3,a4f70 <___vfprintf_internal_r+0x21e4>
   a4d88:	00800044 	movi	r2,1
   a4d8c:	d9003317 	ldw	r4,204(sp)
   a4d90:	1105883a 	add	r2,r2,r4
   a4d94:	d8802b15 	stw	r2,172(sp)
   a4d98:	10004e16 	blt	r2,zero,a4ed4 <___vfprintf_internal_r+0x2148>
   a4d9c:	044019c4 	movi	r17,103
   a4da0:	003e2106 	br	a4628 <__alt_data_end+0xfffe4628>
   a4da4:	d9002a17 	ldw	r4,168(sp)
   a4da8:	d8802104 	addi	r2,sp,132
   a4dac:	d8800315 	stw	r2,12(sp)
   a4db0:	d9000015 	stw	r4,0(sp)
   a4db4:	d8802504 	addi	r2,sp,148
   a4db8:	d9403617 	ldw	r5,216(sp)
   a4dbc:	d9002d17 	ldw	r4,180(sp)
   a4dc0:	d8800215 	stw	r2,8(sp)
   a4dc4:	d8802604 	addi	r2,sp,152
   a4dc8:	d8800115 	stw	r2,4(sp)
   a4dcc:	01c000c4 	movi	r7,3
   a4dd0:	980d883a 	mov	r6,r19
   a4dd4:	da003d15 	stw	r8,244(sp)
   a4dd8:	00a56c80 	call	a56c8 <_dtoa_r>
   a4ddc:	d8c02a17 	ldw	r3,168(sp)
   a4de0:	da003d17 	ldw	r8,244(sp)
   a4de4:	1021883a 	mov	r16,r2
   a4de8:	00801184 	movi	r2,70
   a4dec:	80f9883a 	add	fp,r16,r3
   a4df0:	88bfd926 	beq	r17,r2,a4d58 <__alt_data_end+0xfffe4d58>
   a4df4:	003de806 	br	a4598 <__alt_data_end+0xfffe4598>
   a4df8:	d9002a17 	ldw	r4,168(sp)
   a4dfc:	00c04d0e 	bge	zero,r3,a4f34 <___vfprintf_internal_r+0x21a8>
   a4e00:	2000441e 	bne	r4,zero,a4f14 <___vfprintf_internal_r+0x2188>
   a4e04:	9480004c 	andi	r18,r18,1
   a4e08:	9000421e 	bne	r18,zero,a4f14 <___vfprintf_internal_r+0x2188>
   a4e0c:	1805883a 	mov	r2,r3
   a4e10:	18006f16 	blt	r3,zero,a4fd0 <___vfprintf_internal_r+0x2244>
   a4e14:	d8c03217 	ldw	r3,200(sp)
   a4e18:	d8c02b15 	stw	r3,172(sp)
   a4e1c:	003e0206 	br	a4628 <__alt_data_end+0xfffe4628>
   a4e20:	df0022c4 	addi	fp,sp,139
   a4e24:	dc002a15 	stw	r16,168(sp)
   a4e28:	4027883a 	mov	r19,r8
   a4e2c:	e021883a 	mov	r16,fp
   a4e30:	b009883a 	mov	r4,r22
   a4e34:	01400284 	movi	r5,10
   a4e38:	00ab7b00 	call	ab7b0 <__modsi3>
   a4e3c:	10800c04 	addi	r2,r2,48
   a4e40:	843fffc4 	addi	r16,r16,-1
   a4e44:	b009883a 	mov	r4,r22
   a4e48:	01400284 	movi	r5,10
   a4e4c:	80800005 	stb	r2,0(r16)
   a4e50:	00ab72c0 	call	ab72c <__divsi3>
   a4e54:	102d883a 	mov	r22,r2
   a4e58:	00800244 	movi	r2,9
   a4e5c:	15bff416 	blt	r2,r22,a4e30 <__alt_data_end+0xfffe4e30>
   a4e60:	9811883a 	mov	r8,r19
   a4e64:	b0800c04 	addi	r2,r22,48
   a4e68:	8027883a 	mov	r19,r16
   a4e6c:	997fffc4 	addi	r5,r19,-1
   a4e70:	98bfffc5 	stb	r2,-1(r19)
   a4e74:	dc002a17 	ldw	r16,168(sp)
   a4e78:	2f006d2e 	bgeu	r5,fp,a5030 <___vfprintf_internal_r+0x22a4>
   a4e7c:	d9c02384 	addi	r7,sp,142
   a4e80:	3ccfc83a 	sub	r7,r7,r19
   a4e84:	d9002344 	addi	r4,sp,141
   a4e88:	e1cf883a 	add	r7,fp,r7
   a4e8c:	00000106 	br	a4e94 <___vfprintf_internal_r+0x2108>
   a4e90:	28800003 	ldbu	r2,0(r5)
   a4e94:	20800005 	stb	r2,0(r4)
   a4e98:	21000044 	addi	r4,r4,1
   a4e9c:	29400044 	addi	r5,r5,1
   a4ea0:	393ffb1e 	bne	r7,r4,a4e90 <__alt_data_end+0xfffe4e90>
   a4ea4:	d8802304 	addi	r2,sp,140
   a4ea8:	14c5c83a 	sub	r2,r2,r19
   a4eac:	d8c02344 	addi	r3,sp,141
   a4eb0:	1885883a 	add	r2,r3,r2
   a4eb4:	003f7006 	br	a4c78 <__alt_data_end+0xfffe4c78>
   a4eb8:	0005883a 	mov	r2,zero
   a4ebc:	003f0f06 	br	a4afc <__alt_data_end+0xfffe4afc>
   a4ec0:	d8c03217 	ldw	r3,200(sp)
   a4ec4:	18c00044 	addi	r3,r3,1
   a4ec8:	d8c02b15 	stw	r3,172(sp)
   a4ecc:	1805883a 	mov	r2,r3
   a4ed0:	183fb20e 	bge	r3,zero,a4d9c <__alt_data_end+0xfffe4d9c>
   a4ed4:	0005883a 	mov	r2,zero
   a4ed8:	003fb006 	br	a4d9c <__alt_data_end+0xfffe4d9c>
   a4edc:	d9003617 	ldw	r4,216(sp)
   a4ee0:	000d883a 	mov	r6,zero
   a4ee4:	000f883a 	mov	r7,zero
   a4ee8:	980b883a 	mov	r5,r19
   a4eec:	d8c03c15 	stw	r3,240(sp)
   a4ef0:	da003d15 	stw	r8,244(sp)
   a4ef4:	00acb840 	call	acb84 <__eqdf2>
   a4ef8:	d8c03c17 	ldw	r3,240(sp)
   a4efc:	da003d17 	ldw	r8,244(sp)
   a4f00:	103f9826 	beq	r2,zero,a4d64 <__alt_data_end+0xfffe4d64>
   a4f04:	00800044 	movi	r2,1
   a4f08:	10c7c83a 	sub	r3,r2,r3
   a4f0c:	d8c02615 	stw	r3,152(sp)
   a4f10:	003f9506 	br	a4d68 <__alt_data_end+0xfffe4d68>
   a4f14:	d9002a17 	ldw	r4,168(sp)
   a4f18:	d8c03217 	ldw	r3,200(sp)
   a4f1c:	20800044 	addi	r2,r4,1
   a4f20:	1885883a 	add	r2,r3,r2
   a4f24:	d8802b15 	stw	r2,172(sp)
   a4f28:	103dbf0e 	bge	r2,zero,a4628 <__alt_data_end+0xfffe4628>
   a4f2c:	0005883a 	mov	r2,zero
   a4f30:	003dbd06 	br	a4628 <__alt_data_end+0xfffe4628>
   a4f34:	2000201e 	bne	r4,zero,a4fb8 <___vfprintf_internal_r+0x222c>
   a4f38:	9480004c 	andi	r18,r18,1
   a4f3c:	90001e1e 	bne	r18,zero,a4fb8 <___vfprintf_internal_r+0x222c>
   a4f40:	00800044 	movi	r2,1
   a4f44:	d8802b15 	stw	r2,172(sp)
   a4f48:	003db706 	br	a4628 <__alt_data_end+0xfffe4628>
   a4f4c:	00800b44 	movi	r2,45
   a4f50:	05adc83a 	sub	r22,zero,r22
   a4f54:	d8802305 	stb	r2,140(sp)
   a4f58:	003f3f06 	br	a4c58 <__alt_data_end+0xfffe4c58>
   a4f5c:	0005883a 	mov	r2,zero
   a4f60:	003f5206 	br	a4cac <__alt_data_end+0xfffe4cac>
   a4f64:	90a4703a 	and	r18,r18,r2
   a4f68:	903f4e26 	beq	r18,zero,a4ca4 <__alt_data_end+0xfffe4ca4>
   a4f6c:	003f4a06 	br	a4c98 <__alt_data_end+0xfffe4c98>
   a4f70:	00800084 	movi	r2,2
   a4f74:	10c5c83a 	sub	r2,r2,r3
   a4f78:	003f8406 	br	a4d8c <__alt_data_end+0xfffe4d8c>
   a4f7c:	d9402e17 	ldw	r5,184(sp)
   a4f80:	d9002e17 	ldw	r4,184(sp)
   a4f84:	ac400043 	ldbu	r17,1(r21)
   a4f88:	29400017 	ldw	r5,0(r5)
   a4f8c:	20800104 	addi	r2,r4,4
   a4f90:	d8802e15 	stw	r2,184(sp)
   a4f94:	d9402a15 	stw	r5,168(sp)
   a4f98:	182b883a 	mov	r21,r3
   a4f9c:	283e7b0e 	bge	r5,zero,a498c <__alt_data_end+0xfffe498c>
   a4fa0:	8c403fcc 	andi	r17,r17,255
   a4fa4:	017fffc4 	movi	r5,-1
   a4fa8:	8c40201c 	xori	r17,r17,128
   a4fac:	d9402a15 	stw	r5,168(sp)
   a4fb0:	8c7fe004 	addi	r17,r17,-128
   a4fb4:	0037d706 	br	a2f14 <__alt_data_end+0xfffe2f14>
   a4fb8:	d8c02a17 	ldw	r3,168(sp)
   a4fbc:	18c00084 	addi	r3,r3,2
   a4fc0:	d8c02b15 	stw	r3,172(sp)
   a4fc4:	1805883a 	mov	r2,r3
   a4fc8:	183d970e 	bge	r3,zero,a4628 <__alt_data_end+0xfffe4628>
   a4fcc:	003fd706 	br	a4f2c <__alt_data_end+0xfffe4f2c>
   a4fd0:	0005883a 	mov	r2,zero
   a4fd4:	003f8f06 	br	a4e14 <__alt_data_end+0xfffe4e14>
   a4fd8:	9080004c 	andi	r2,r18,1
   a4fdc:	103f821e 	bne	r2,zero,a4de8 <__alt_data_end+0xfffe4de8>
   a4fe0:	d8802117 	ldw	r2,132(sp)
   a4fe4:	1405c83a 	sub	r2,r2,r16
   a4fe8:	d8803315 	stw	r2,204(sp)
   a4fec:	b47ef426 	beq	r22,r17,a4bc0 <__alt_data_end+0xfffe4bc0>
   a4ff0:	dd802617 	ldw	r22,152(sp)
   a4ff4:	003f1206 	br	a4c40 <__alt_data_end+0xfffe4c40>
   a4ff8:	d8c02b03 	ldbu	r3,172(sp)
   a4ffc:	d8c02785 	stb	r3,158(sp)
   a5000:	0038df06 	br	a3380 <__alt_data_end+0xfffe3380>
   a5004:	d8c02b03 	ldbu	r3,172(sp)
   a5008:	d8c02785 	stb	r3,158(sp)
   a500c:	0038aa06 	br	a32b8 <__alt_data_end+0xfffe32b8>
   a5010:	d8c02b03 	ldbu	r3,172(sp)
   a5014:	d8c02785 	stb	r3,158(sp)
   a5018:	003a4306 	br	a3928 <__alt_data_end+0xfffe3928>
   a501c:	d8c02b03 	ldbu	r3,172(sp)
   a5020:	d8c02785 	stb	r3,158(sp)
   a5024:	003af506 	br	a3bfc <__alt_data_end+0xfffe3bfc>
   a5028:	0005883a 	mov	r2,zero
   a502c:	003d7b06 	br	a461c <__alt_data_end+0xfffe461c>
   a5030:	d8802344 	addi	r2,sp,141
   a5034:	003f1006 	br	a4c78 <__alt_data_end+0xfffe4c78>
   a5038:	d8c02b03 	ldbu	r3,172(sp)
   a503c:	d8c02785 	stb	r3,158(sp)
   a5040:	0038fd06 	br	a3438 <__alt_data_end+0xfffe3438>
   a5044:	d8c02b03 	ldbu	r3,172(sp)
   a5048:	d8c02785 	stb	r3,158(sp)
   a504c:	003a9706 	br	a3aac <__alt_data_end+0xfffe3aac>
   a5050:	d8c02b03 	ldbu	r3,172(sp)
   a5054:	d8c02785 	stb	r3,158(sp)
   a5058:	003a1806 	br	a38bc <__alt_data_end+0xfffe38bc>
   a505c:	d8c02b03 	ldbu	r3,172(sp)
   a5060:	d8c02785 	stb	r3,158(sp)
   a5064:	003abe06 	br	a3b60 <__alt_data_end+0xfffe3b60>

000a5068 <__vfprintf_internal>:
   a5068:	008002f4 	movhi	r2,11
   a506c:	108c9504 	addi	r2,r2,12884
   a5070:	300f883a 	mov	r7,r6
   a5074:	280d883a 	mov	r6,r5
   a5078:	200b883a 	mov	r5,r4
   a507c:	11000017 	ldw	r4,0(r2)
   a5080:	00a2d8c1 	jmpi	a2d8c <___vfprintf_internal_r>

000a5084 <__sbprintf>:
   a5084:	2880030b 	ldhu	r2,12(r5)
   a5088:	2ac01917 	ldw	r11,100(r5)
   a508c:	2a80038b 	ldhu	r10,14(r5)
   a5090:	2a400717 	ldw	r9,28(r5)
   a5094:	2a000917 	ldw	r8,36(r5)
   a5098:	defee204 	addi	sp,sp,-1144
   a509c:	00c10004 	movi	r3,1024
   a50a0:	dc011a15 	stw	r16,1128(sp)
   a50a4:	10bfff4c 	andi	r2,r2,65533
   a50a8:	2821883a 	mov	r16,r5
   a50ac:	d8cb883a 	add	r5,sp,r3
   a50b0:	dc811c15 	stw	r18,1136(sp)
   a50b4:	dc411b15 	stw	r17,1132(sp)
   a50b8:	dfc11d15 	stw	ra,1140(sp)
   a50bc:	2025883a 	mov	r18,r4
   a50c0:	d881030d 	sth	r2,1036(sp)
   a50c4:	dac11915 	stw	r11,1124(sp)
   a50c8:	da81038d 	sth	r10,1038(sp)
   a50cc:	da410715 	stw	r9,1052(sp)
   a50d0:	da010915 	stw	r8,1060(sp)
   a50d4:	dec10015 	stw	sp,1024(sp)
   a50d8:	dec10415 	stw	sp,1040(sp)
   a50dc:	d8c10215 	stw	r3,1032(sp)
   a50e0:	d8c10515 	stw	r3,1044(sp)
   a50e4:	d8010615 	stw	zero,1048(sp)
   a50e8:	00a2d8c0 	call	a2d8c <___vfprintf_internal_r>
   a50ec:	1023883a 	mov	r17,r2
   a50f0:	10000416 	blt	r2,zero,a5104 <__sbprintf+0x80>
   a50f4:	d9410004 	addi	r5,sp,1024
   a50f8:	9009883a 	mov	r4,r18
   a50fc:	00a099c0 	call	a099c <_fflush_r>
   a5100:	10000d1e 	bne	r2,zero,a5138 <__sbprintf+0xb4>
   a5104:	d881030b 	ldhu	r2,1036(sp)
   a5108:	1080100c 	andi	r2,r2,64
   a510c:	10000326 	beq	r2,zero,a511c <__sbprintf+0x98>
   a5110:	8080030b 	ldhu	r2,12(r16)
   a5114:	10801014 	ori	r2,r2,64
   a5118:	8080030d 	sth	r2,12(r16)
   a511c:	8805883a 	mov	r2,r17
   a5120:	dfc11d17 	ldw	ra,1140(sp)
   a5124:	dc811c17 	ldw	r18,1136(sp)
   a5128:	dc411b17 	ldw	r17,1132(sp)
   a512c:	dc011a17 	ldw	r16,1128(sp)
   a5130:	dec11e04 	addi	sp,sp,1144
   a5134:	f800283a 	ret
   a5138:	047fffc4 	movi	r17,-1
   a513c:	003ff106 	br	a5104 <__alt_data_end+0xfffe5104>

000a5140 <__swbuf_r>:
   a5140:	defffb04 	addi	sp,sp,-20
   a5144:	dcc00315 	stw	r19,12(sp)
   a5148:	dc800215 	stw	r18,8(sp)
   a514c:	dc000015 	stw	r16,0(sp)
   a5150:	dfc00415 	stw	ra,16(sp)
   a5154:	dc400115 	stw	r17,4(sp)
   a5158:	2025883a 	mov	r18,r4
   a515c:	2827883a 	mov	r19,r5
   a5160:	3021883a 	mov	r16,r6
   a5164:	20000226 	beq	r4,zero,a5170 <__swbuf_r+0x30>
   a5168:	20800e17 	ldw	r2,56(r4)
   a516c:	10004226 	beq	r2,zero,a5278 <__swbuf_r+0x138>
   a5170:	80800617 	ldw	r2,24(r16)
   a5174:	8100030b 	ldhu	r4,12(r16)
   a5178:	80800215 	stw	r2,8(r16)
   a517c:	2080020c 	andi	r2,r4,8
   a5180:	10003626 	beq	r2,zero,a525c <__swbuf_r+0x11c>
   a5184:	80c00417 	ldw	r3,16(r16)
   a5188:	18003426 	beq	r3,zero,a525c <__swbuf_r+0x11c>
   a518c:	2088000c 	andi	r2,r4,8192
   a5190:	9c403fcc 	andi	r17,r19,255
   a5194:	10001a26 	beq	r2,zero,a5200 <__swbuf_r+0xc0>
   a5198:	80800017 	ldw	r2,0(r16)
   a519c:	81000517 	ldw	r4,20(r16)
   a51a0:	10c7c83a 	sub	r3,r2,r3
   a51a4:	1900200e 	bge	r3,r4,a5228 <__swbuf_r+0xe8>
   a51a8:	18c00044 	addi	r3,r3,1
   a51ac:	81000217 	ldw	r4,8(r16)
   a51b0:	11400044 	addi	r5,r2,1
   a51b4:	81400015 	stw	r5,0(r16)
   a51b8:	213fffc4 	addi	r4,r4,-1
   a51bc:	81000215 	stw	r4,8(r16)
   a51c0:	14c00005 	stb	r19,0(r2)
   a51c4:	80800517 	ldw	r2,20(r16)
   a51c8:	10c01e26 	beq	r2,r3,a5244 <__swbuf_r+0x104>
   a51cc:	8080030b 	ldhu	r2,12(r16)
   a51d0:	1080004c 	andi	r2,r2,1
   a51d4:	10000226 	beq	r2,zero,a51e0 <__swbuf_r+0xa0>
   a51d8:	00800284 	movi	r2,10
   a51dc:	88801926 	beq	r17,r2,a5244 <__swbuf_r+0x104>
   a51e0:	8805883a 	mov	r2,r17
   a51e4:	dfc00417 	ldw	ra,16(sp)
   a51e8:	dcc00317 	ldw	r19,12(sp)
   a51ec:	dc800217 	ldw	r18,8(sp)
   a51f0:	dc400117 	ldw	r17,4(sp)
   a51f4:	dc000017 	ldw	r16,0(sp)
   a51f8:	dec00504 	addi	sp,sp,20
   a51fc:	f800283a 	ret
   a5200:	81401917 	ldw	r5,100(r16)
   a5204:	00b7ffc4 	movi	r2,-8193
   a5208:	21080014 	ori	r4,r4,8192
   a520c:	2884703a 	and	r2,r5,r2
   a5210:	80801915 	stw	r2,100(r16)
   a5214:	80800017 	ldw	r2,0(r16)
   a5218:	8100030d 	sth	r4,12(r16)
   a521c:	81000517 	ldw	r4,20(r16)
   a5220:	10c7c83a 	sub	r3,r2,r3
   a5224:	193fe016 	blt	r3,r4,a51a8 <__alt_data_end+0xfffe51a8>
   a5228:	800b883a 	mov	r5,r16
   a522c:	9009883a 	mov	r4,r18
   a5230:	00a099c0 	call	a099c <_fflush_r>
   a5234:	1000071e 	bne	r2,zero,a5254 <__swbuf_r+0x114>
   a5238:	80800017 	ldw	r2,0(r16)
   a523c:	00c00044 	movi	r3,1
   a5240:	003fda06 	br	a51ac <__alt_data_end+0xfffe51ac>
   a5244:	800b883a 	mov	r5,r16
   a5248:	9009883a 	mov	r4,r18
   a524c:	00a099c0 	call	a099c <_fflush_r>
   a5250:	103fe326 	beq	r2,zero,a51e0 <__alt_data_end+0xfffe51e0>
   a5254:	00bfffc4 	movi	r2,-1
   a5258:	003fe206 	br	a51e4 <__alt_data_end+0xfffe51e4>
   a525c:	800b883a 	mov	r5,r16
   a5260:	9009883a 	mov	r4,r18
   a5264:	00a52f80 	call	a52f8 <__swsetup_r>
   a5268:	103ffa1e 	bne	r2,zero,a5254 <__alt_data_end+0xfffe5254>
   a526c:	8100030b 	ldhu	r4,12(r16)
   a5270:	80c00417 	ldw	r3,16(r16)
   a5274:	003fc506 	br	a518c <__alt_data_end+0xfffe518c>
   a5278:	00a0d880 	call	a0d88 <__sinit>
   a527c:	003fbc06 	br	a5170 <__alt_data_end+0xfffe5170>

000a5280 <__swbuf>:
   a5280:	008002f4 	movhi	r2,11
   a5284:	108c9504 	addi	r2,r2,12884
   a5288:	280d883a 	mov	r6,r5
   a528c:	200b883a 	mov	r5,r4
   a5290:	11000017 	ldw	r4,0(r2)
   a5294:	00a51401 	jmpi	a5140 <__swbuf_r>

000a5298 <_write_r>:
   a5298:	defffd04 	addi	sp,sp,-12
   a529c:	2805883a 	mov	r2,r5
   a52a0:	dc000015 	stw	r16,0(sp)
   a52a4:	040002f4 	movhi	r16,11
   a52a8:	dc400115 	stw	r17,4(sp)
   a52ac:	300b883a 	mov	r5,r6
   a52b0:	8413ad04 	addi	r16,r16,20148
   a52b4:	2023883a 	mov	r17,r4
   a52b8:	380d883a 	mov	r6,r7
   a52bc:	1009883a 	mov	r4,r2
   a52c0:	dfc00215 	stw	ra,8(sp)
   a52c4:	80000015 	stw	zero,0(r16)
   a52c8:	00aecc40 	call	aecc4 <write>
   a52cc:	00ffffc4 	movi	r3,-1
   a52d0:	10c00526 	beq	r2,r3,a52e8 <_write_r+0x50>
   a52d4:	dfc00217 	ldw	ra,8(sp)
   a52d8:	dc400117 	ldw	r17,4(sp)
   a52dc:	dc000017 	ldw	r16,0(sp)
   a52e0:	dec00304 	addi	sp,sp,12
   a52e4:	f800283a 	ret
   a52e8:	80c00017 	ldw	r3,0(r16)
   a52ec:	183ff926 	beq	r3,zero,a52d4 <__alt_data_end+0xfffe52d4>
   a52f0:	88c00015 	stw	r3,0(r17)
   a52f4:	003ff706 	br	a52d4 <__alt_data_end+0xfffe52d4>

000a52f8 <__swsetup_r>:
   a52f8:	008002f4 	movhi	r2,11
   a52fc:	defffd04 	addi	sp,sp,-12
   a5300:	108c9504 	addi	r2,r2,12884
   a5304:	dc400115 	stw	r17,4(sp)
   a5308:	2023883a 	mov	r17,r4
   a530c:	11000017 	ldw	r4,0(r2)
   a5310:	dc000015 	stw	r16,0(sp)
   a5314:	dfc00215 	stw	ra,8(sp)
   a5318:	2821883a 	mov	r16,r5
   a531c:	20000226 	beq	r4,zero,a5328 <__swsetup_r+0x30>
   a5320:	20800e17 	ldw	r2,56(r4)
   a5324:	10003126 	beq	r2,zero,a53ec <__swsetup_r+0xf4>
   a5328:	8080030b 	ldhu	r2,12(r16)
   a532c:	10c0020c 	andi	r3,r2,8
   a5330:	1009883a 	mov	r4,r2
   a5334:	18000f26 	beq	r3,zero,a5374 <__swsetup_r+0x7c>
   a5338:	80c00417 	ldw	r3,16(r16)
   a533c:	18001526 	beq	r3,zero,a5394 <__swsetup_r+0x9c>
   a5340:	1100004c 	andi	r4,r2,1
   a5344:	20001c1e 	bne	r4,zero,a53b8 <__swsetup_r+0xc0>
   a5348:	1080008c 	andi	r2,r2,2
   a534c:	1000291e 	bne	r2,zero,a53f4 <__swsetup_r+0xfc>
   a5350:	80800517 	ldw	r2,20(r16)
   a5354:	80800215 	stw	r2,8(r16)
   a5358:	18001c26 	beq	r3,zero,a53cc <__swsetup_r+0xd4>
   a535c:	0005883a 	mov	r2,zero
   a5360:	dfc00217 	ldw	ra,8(sp)
   a5364:	dc400117 	ldw	r17,4(sp)
   a5368:	dc000017 	ldw	r16,0(sp)
   a536c:	dec00304 	addi	sp,sp,12
   a5370:	f800283a 	ret
   a5374:	2080040c 	andi	r2,r4,16
   a5378:	10002e26 	beq	r2,zero,a5434 <__swsetup_r+0x13c>
   a537c:	2080010c 	andi	r2,r4,4
   a5380:	10001e1e 	bne	r2,zero,a53fc <__swsetup_r+0x104>
   a5384:	80c00417 	ldw	r3,16(r16)
   a5388:	20800214 	ori	r2,r4,8
   a538c:	8080030d 	sth	r2,12(r16)
   a5390:	183feb1e 	bne	r3,zero,a5340 <__alt_data_end+0xfffe5340>
   a5394:	1100a00c 	andi	r4,r2,640
   a5398:	01408004 	movi	r5,512
   a539c:	217fe826 	beq	r4,r5,a5340 <__alt_data_end+0xfffe5340>
   a53a0:	800b883a 	mov	r5,r16
   a53a4:	8809883a 	mov	r4,r17
   a53a8:	00a1a680 	call	a1a68 <__smakebuf_r>
   a53ac:	8080030b 	ldhu	r2,12(r16)
   a53b0:	80c00417 	ldw	r3,16(r16)
   a53b4:	003fe206 	br	a5340 <__alt_data_end+0xfffe5340>
   a53b8:	80800517 	ldw	r2,20(r16)
   a53bc:	80000215 	stw	zero,8(r16)
   a53c0:	0085c83a 	sub	r2,zero,r2
   a53c4:	80800615 	stw	r2,24(r16)
   a53c8:	183fe41e 	bne	r3,zero,a535c <__alt_data_end+0xfffe535c>
   a53cc:	80c0030b 	ldhu	r3,12(r16)
   a53d0:	0005883a 	mov	r2,zero
   a53d4:	1900200c 	andi	r4,r3,128
   a53d8:	203fe126 	beq	r4,zero,a5360 <__alt_data_end+0xfffe5360>
   a53dc:	18c01014 	ori	r3,r3,64
   a53e0:	80c0030d 	sth	r3,12(r16)
   a53e4:	00bfffc4 	movi	r2,-1
   a53e8:	003fdd06 	br	a5360 <__alt_data_end+0xfffe5360>
   a53ec:	00a0d880 	call	a0d88 <__sinit>
   a53f0:	003fcd06 	br	a5328 <__alt_data_end+0xfffe5328>
   a53f4:	0005883a 	mov	r2,zero
   a53f8:	003fd606 	br	a5354 <__alt_data_end+0xfffe5354>
   a53fc:	81400c17 	ldw	r5,48(r16)
   a5400:	28000626 	beq	r5,zero,a541c <__swsetup_r+0x124>
   a5404:	80801004 	addi	r2,r16,64
   a5408:	28800326 	beq	r5,r2,a5418 <__swsetup_r+0x120>
   a540c:	8809883a 	mov	r4,r17
   a5410:	00a10f40 	call	a10f4 <_free_r>
   a5414:	8100030b 	ldhu	r4,12(r16)
   a5418:	80000c15 	stw	zero,48(r16)
   a541c:	80c00417 	ldw	r3,16(r16)
   a5420:	00bff6c4 	movi	r2,-37
   a5424:	1108703a 	and	r4,r2,r4
   a5428:	80000115 	stw	zero,4(r16)
   a542c:	80c00015 	stw	r3,0(r16)
   a5430:	003fd506 	br	a5388 <__alt_data_end+0xfffe5388>
   a5434:	00800244 	movi	r2,9
   a5438:	88800015 	stw	r2,0(r17)
   a543c:	20801014 	ori	r2,r4,64
   a5440:	8080030d 	sth	r2,12(r16)
   a5444:	00bfffc4 	movi	r2,-1
   a5448:	003fc506 	br	a5360 <__alt_data_end+0xfffe5360>

000a544c <_close_r>:
   a544c:	defffd04 	addi	sp,sp,-12
   a5450:	dc000015 	stw	r16,0(sp)
   a5454:	040002f4 	movhi	r16,11
   a5458:	dc400115 	stw	r17,4(sp)
   a545c:	8413ad04 	addi	r16,r16,20148
   a5460:	2023883a 	mov	r17,r4
   a5464:	2809883a 	mov	r4,r5
   a5468:	dfc00215 	stw	ra,8(sp)
   a546c:	80000015 	stw	zero,0(r16)
   a5470:	00ae1e80 	call	ae1e8 <close>
   a5474:	00ffffc4 	movi	r3,-1
   a5478:	10c00526 	beq	r2,r3,a5490 <_close_r+0x44>
   a547c:	dfc00217 	ldw	ra,8(sp)
   a5480:	dc400117 	ldw	r17,4(sp)
   a5484:	dc000017 	ldw	r16,0(sp)
   a5488:	dec00304 	addi	sp,sp,12
   a548c:	f800283a 	ret
   a5490:	80c00017 	ldw	r3,0(r16)
   a5494:	183ff926 	beq	r3,zero,a547c <__alt_data_end+0xfffe547c>
   a5498:	88c00015 	stw	r3,0(r17)
   a549c:	003ff706 	br	a547c <__alt_data_end+0xfffe547c>

000a54a0 <quorem>:
   a54a0:	defff204 	addi	sp,sp,-56
   a54a4:	ddc00b15 	stw	r23,44(sp)
   a54a8:	20800417 	ldw	r2,16(r4)
   a54ac:	2dc00417 	ldw	r23,16(r5)
   a54b0:	dfc00d15 	stw	ra,52(sp)
   a54b4:	df000c15 	stw	fp,48(sp)
   a54b8:	dd800a15 	stw	r22,40(sp)
   a54bc:	dd400915 	stw	r21,36(sp)
   a54c0:	dd000815 	stw	r20,32(sp)
   a54c4:	dcc00715 	stw	r19,28(sp)
   a54c8:	dc800615 	stw	r18,24(sp)
   a54cc:	dc400515 	stw	r17,20(sp)
   a54d0:	dc000415 	stw	r16,16(sp)
   a54d4:	15c07a16 	blt	r2,r23,a56c0 <quorem+0x220>
   a54d8:	bdffffc4 	addi	r23,r23,-1
   a54dc:	bde9883a 	add	r20,r23,r23
   a54e0:	28c00504 	addi	r3,r5,20
   a54e4:	a529883a 	add	r20,r20,r20
   a54e8:	1d39883a 	add	fp,r3,r20
   a54ec:	24c00504 	addi	r19,r4,20
   a54f0:	d9400215 	stw	r5,8(sp)
   a54f4:	9d29883a 	add	r20,r19,r20
   a54f8:	e1400017 	ldw	r5,0(fp)
   a54fc:	d9000015 	stw	r4,0(sp)
   a5500:	a1000017 	ldw	r4,0(r20)
   a5504:	29400044 	addi	r5,r5,1
   a5508:	d8c00115 	stw	r3,4(sp)
   a550c:	dd000315 	stw	r20,12(sp)
   a5510:	00ab8240 	call	ab824 <__udivsi3>
   a5514:	1025883a 	mov	r18,r2
   a5518:	10003026 	beq	r2,zero,a55dc <quorem+0x13c>
   a551c:	dc400117 	ldw	r17,4(sp)
   a5520:	9829883a 	mov	r20,r19
   a5524:	002d883a 	mov	r22,zero
   a5528:	0021883a 	mov	r16,zero
   a552c:	8d400017 	ldw	r21,0(r17)
   a5530:	900b883a 	mov	r5,r18
   a5534:	8c400104 	addi	r17,r17,4
   a5538:	a93fffcc 	andi	r4,r21,65535
   a553c:	00ab8e00 	call	ab8e0 <__mulsi3>
   a5540:	a808d43a 	srli	r4,r21,16
   a5544:	900b883a 	mov	r5,r18
   a5548:	15ad883a 	add	r22,r2,r22
   a554c:	00ab8e00 	call	ab8e0 <__mulsi3>
   a5550:	a1000017 	ldw	r4,0(r20)
   a5554:	b00cd43a 	srli	r6,r22,16
   a5558:	b0ffffcc 	andi	r3,r22,65535
   a555c:	217fffcc 	andi	r5,r4,65535
   a5560:	2c21883a 	add	r16,r5,r16
   a5564:	80c7c83a 	sub	r3,r16,r3
   a5568:	2008d43a 	srli	r4,r4,16
   a556c:	1185883a 	add	r2,r2,r6
   a5570:	1821d43a 	srai	r16,r3,16
   a5574:	117fffcc 	andi	r5,r2,65535
   a5578:	2149c83a 	sub	r4,r4,r5
   a557c:	2421883a 	add	r16,r4,r16
   a5580:	8008943a 	slli	r4,r16,16
   a5584:	18ffffcc 	andi	r3,r3,65535
   a5588:	102cd43a 	srli	r22,r2,16
   a558c:	20c8b03a 	or	r4,r4,r3
   a5590:	a1000015 	stw	r4,0(r20)
   a5594:	8021d43a 	srai	r16,r16,16
   a5598:	a5000104 	addi	r20,r20,4
   a559c:	e47fe32e 	bgeu	fp,r17,a552c <__alt_data_end+0xfffe552c>
   a55a0:	d8c00317 	ldw	r3,12(sp)
   a55a4:	18800017 	ldw	r2,0(r3)
   a55a8:	10000c1e 	bne	r2,zero,a55dc <quorem+0x13c>
   a55ac:	18bfff04 	addi	r2,r3,-4
   a55b0:	9880082e 	bgeu	r19,r2,a55d4 <quorem+0x134>
   a55b4:	18ffff17 	ldw	r3,-4(r3)
   a55b8:	18000326 	beq	r3,zero,a55c8 <quorem+0x128>
   a55bc:	00000506 	br	a55d4 <quorem+0x134>
   a55c0:	10c00017 	ldw	r3,0(r2)
   a55c4:	1800031e 	bne	r3,zero,a55d4 <quorem+0x134>
   a55c8:	10bfff04 	addi	r2,r2,-4
   a55cc:	bdffffc4 	addi	r23,r23,-1
   a55d0:	98bffb36 	bltu	r19,r2,a55c0 <__alt_data_end+0xfffe55c0>
   a55d4:	d8c00017 	ldw	r3,0(sp)
   a55d8:	1dc00415 	stw	r23,16(r3)
   a55dc:	d9400217 	ldw	r5,8(sp)
   a55e0:	d9000017 	ldw	r4,0(sp)
   a55e4:	00a81600 	call	a8160 <__mcmp>
   a55e8:	10002816 	blt	r2,zero,a568c <quorem+0x1ec>
   a55ec:	dc400117 	ldw	r17,4(sp)
   a55f0:	94800044 	addi	r18,r18,1
   a55f4:	980d883a 	mov	r6,r19
   a55f8:	0007883a 	mov	r3,zero
   a55fc:	31000017 	ldw	r4,0(r6)
   a5600:	89400017 	ldw	r5,0(r17)
   a5604:	31800104 	addi	r6,r6,4
   a5608:	20bfffcc 	andi	r2,r4,65535
   a560c:	10c7883a 	add	r3,r2,r3
   a5610:	28bfffcc 	andi	r2,r5,65535
   a5614:	1885c83a 	sub	r2,r3,r2
   a5618:	280ad43a 	srli	r5,r5,16
   a561c:	2008d43a 	srli	r4,r4,16
   a5620:	1007d43a 	srai	r3,r2,16
   a5624:	10bfffcc 	andi	r2,r2,65535
   a5628:	2149c83a 	sub	r4,r4,r5
   a562c:	20c9883a 	add	r4,r4,r3
   a5630:	200a943a 	slli	r5,r4,16
   a5634:	8c400104 	addi	r17,r17,4
   a5638:	2007d43a 	srai	r3,r4,16
   a563c:	2884b03a 	or	r2,r5,r2
   a5640:	30bfff15 	stw	r2,-4(r6)
   a5644:	e47fed2e 	bgeu	fp,r17,a55fc <__alt_data_end+0xfffe55fc>
   a5648:	bdc5883a 	add	r2,r23,r23
   a564c:	1085883a 	add	r2,r2,r2
   a5650:	9887883a 	add	r3,r19,r2
   a5654:	18800017 	ldw	r2,0(r3)
   a5658:	10000c1e 	bne	r2,zero,a568c <quorem+0x1ec>
   a565c:	18bfff04 	addi	r2,r3,-4
   a5660:	9880082e 	bgeu	r19,r2,a5684 <quorem+0x1e4>
   a5664:	18ffff17 	ldw	r3,-4(r3)
   a5668:	18000326 	beq	r3,zero,a5678 <quorem+0x1d8>
   a566c:	00000506 	br	a5684 <quorem+0x1e4>
   a5670:	10c00017 	ldw	r3,0(r2)
   a5674:	1800031e 	bne	r3,zero,a5684 <quorem+0x1e4>
   a5678:	10bfff04 	addi	r2,r2,-4
   a567c:	bdffffc4 	addi	r23,r23,-1
   a5680:	98bffb36 	bltu	r19,r2,a5670 <__alt_data_end+0xfffe5670>
   a5684:	d8c00017 	ldw	r3,0(sp)
   a5688:	1dc00415 	stw	r23,16(r3)
   a568c:	9005883a 	mov	r2,r18
   a5690:	dfc00d17 	ldw	ra,52(sp)
   a5694:	df000c17 	ldw	fp,48(sp)
   a5698:	ddc00b17 	ldw	r23,44(sp)
   a569c:	dd800a17 	ldw	r22,40(sp)
   a56a0:	dd400917 	ldw	r21,36(sp)
   a56a4:	dd000817 	ldw	r20,32(sp)
   a56a8:	dcc00717 	ldw	r19,28(sp)
   a56ac:	dc800617 	ldw	r18,24(sp)
   a56b0:	dc400517 	ldw	r17,20(sp)
   a56b4:	dc000417 	ldw	r16,16(sp)
   a56b8:	dec00e04 	addi	sp,sp,56
   a56bc:	f800283a 	ret
   a56c0:	0005883a 	mov	r2,zero
   a56c4:	003ff206 	br	a5690 <__alt_data_end+0xfffe5690>

000a56c8 <_dtoa_r>:
   a56c8:	20801017 	ldw	r2,64(r4)
   a56cc:	deffde04 	addi	sp,sp,-136
   a56d0:	df002015 	stw	fp,128(sp)
   a56d4:	dcc01b15 	stw	r19,108(sp)
   a56d8:	dc801a15 	stw	r18,104(sp)
   a56dc:	dc401915 	stw	r17,100(sp)
   a56e0:	dc001815 	stw	r16,96(sp)
   a56e4:	dfc02115 	stw	ra,132(sp)
   a56e8:	ddc01f15 	stw	r23,124(sp)
   a56ec:	dd801e15 	stw	r22,120(sp)
   a56f0:	dd401d15 	stw	r21,116(sp)
   a56f4:	dd001c15 	stw	r20,112(sp)
   a56f8:	d9c00315 	stw	r7,12(sp)
   a56fc:	2039883a 	mov	fp,r4
   a5700:	3023883a 	mov	r17,r6
   a5704:	2825883a 	mov	r18,r5
   a5708:	dc002417 	ldw	r16,144(sp)
   a570c:	3027883a 	mov	r19,r6
   a5710:	10000826 	beq	r2,zero,a5734 <_dtoa_r+0x6c>
   a5714:	21801117 	ldw	r6,68(r4)
   a5718:	00c00044 	movi	r3,1
   a571c:	100b883a 	mov	r5,r2
   a5720:	1986983a 	sll	r3,r3,r6
   a5724:	11800115 	stw	r6,4(r2)
   a5728:	10c00215 	stw	r3,8(r2)
   a572c:	00a78840 	call	a7884 <_Bfree>
   a5730:	e0001015 	stw	zero,64(fp)
   a5734:	88002e16 	blt	r17,zero,a57f0 <_dtoa_r+0x128>
   a5738:	80000015 	stw	zero,0(r16)
   a573c:	889ffc2c 	andhi	r2,r17,32752
   a5740:	00dffc34 	movhi	r3,32752
   a5744:	10c01c26 	beq	r2,r3,a57b8 <_dtoa_r+0xf0>
   a5748:	000d883a 	mov	r6,zero
   a574c:	000f883a 	mov	r7,zero
   a5750:	9009883a 	mov	r4,r18
   a5754:	980b883a 	mov	r5,r19
   a5758:	00acb840 	call	acb84 <__eqdf2>
   a575c:	10002b1e 	bne	r2,zero,a580c <_dtoa_r+0x144>
   a5760:	d9c02317 	ldw	r7,140(sp)
   a5764:	00800044 	movi	r2,1
   a5768:	38800015 	stw	r2,0(r7)
   a576c:	d8802517 	ldw	r2,148(sp)
   a5770:	10019e26 	beq	r2,zero,a5dec <_dtoa_r+0x724>
   a5774:	d8c02517 	ldw	r3,148(sp)
   a5778:	008002f4 	movhi	r2,11
   a577c:	10851044 	addi	r2,r2,5185
   a5780:	18800015 	stw	r2,0(r3)
   a5784:	10bfffc4 	addi	r2,r2,-1
   a5788:	dfc02117 	ldw	ra,132(sp)
   a578c:	df002017 	ldw	fp,128(sp)
   a5790:	ddc01f17 	ldw	r23,124(sp)
   a5794:	dd801e17 	ldw	r22,120(sp)
   a5798:	dd401d17 	ldw	r21,116(sp)
   a579c:	dd001c17 	ldw	r20,112(sp)
   a57a0:	dcc01b17 	ldw	r19,108(sp)
   a57a4:	dc801a17 	ldw	r18,104(sp)
   a57a8:	dc401917 	ldw	r17,100(sp)
   a57ac:	dc001817 	ldw	r16,96(sp)
   a57b0:	dec02204 	addi	sp,sp,136
   a57b4:	f800283a 	ret
   a57b8:	d8c02317 	ldw	r3,140(sp)
   a57bc:	0089c3c4 	movi	r2,9999
   a57c0:	18800015 	stw	r2,0(r3)
   a57c4:	90017726 	beq	r18,zero,a5da4 <_dtoa_r+0x6dc>
   a57c8:	008002f4 	movhi	r2,11
   a57cc:	10851c04 	addi	r2,r2,5232
   a57d0:	d9002517 	ldw	r4,148(sp)
   a57d4:	203fec26 	beq	r4,zero,a5788 <__alt_data_end+0xfffe5788>
   a57d8:	10c000c7 	ldb	r3,3(r2)
   a57dc:	1801781e 	bne	r3,zero,a5dc0 <_dtoa_r+0x6f8>
   a57e0:	10c000c4 	addi	r3,r2,3
   a57e4:	d9802517 	ldw	r6,148(sp)
   a57e8:	30c00015 	stw	r3,0(r6)
   a57ec:	003fe606 	br	a5788 <__alt_data_end+0xfffe5788>
   a57f0:	04e00034 	movhi	r19,32768
   a57f4:	9cffffc4 	addi	r19,r19,-1
   a57f8:	00800044 	movi	r2,1
   a57fc:	8ce6703a 	and	r19,r17,r19
   a5800:	80800015 	stw	r2,0(r16)
   a5804:	9823883a 	mov	r17,r19
   a5808:	003fcc06 	br	a573c <__alt_data_end+0xfffe573c>
   a580c:	d8800204 	addi	r2,sp,8
   a5810:	d8800015 	stw	r2,0(sp)
   a5814:	d9c00104 	addi	r7,sp,4
   a5818:	900b883a 	mov	r5,r18
   a581c:	980d883a 	mov	r6,r19
   a5820:	e009883a 	mov	r4,fp
   a5824:	8820d53a 	srli	r16,r17,20
   a5828:	00a852c0 	call	a852c <__d2b>
   a582c:	d8800915 	stw	r2,36(sp)
   a5830:	8001651e 	bne	r16,zero,a5dc8 <_dtoa_r+0x700>
   a5834:	dd800217 	ldw	r22,8(sp)
   a5838:	dc000117 	ldw	r16,4(sp)
   a583c:	00800804 	movi	r2,32
   a5840:	b421883a 	add	r16,r22,r16
   a5844:	80c10c84 	addi	r3,r16,1074
   a5848:	10c2d10e 	bge	r2,r3,a6390 <_dtoa_r+0xcc8>
   a584c:	00801004 	movi	r2,64
   a5850:	81010484 	addi	r4,r16,1042
   a5854:	10c7c83a 	sub	r3,r2,r3
   a5858:	9108d83a 	srl	r4,r18,r4
   a585c:	88e2983a 	sll	r17,r17,r3
   a5860:	2448b03a 	or	r4,r4,r17
   a5864:	00ae0a00 	call	ae0a0 <__floatunsidf>
   a5868:	017f8434 	movhi	r5,65040
   a586c:	01800044 	movi	r6,1
   a5870:	1009883a 	mov	r4,r2
   a5874:	194b883a 	add	r5,r3,r5
   a5878:	843fffc4 	addi	r16,r16,-1
   a587c:	d9801115 	stw	r6,68(sp)
   a5880:	000d883a 	mov	r6,zero
   a5884:	01cffe34 	movhi	r7,16376
   a5888:	00ad6480 	call	ad648 <__subdf3>
   a588c:	0198dbf4 	movhi	r6,25455
   a5890:	01cff4f4 	movhi	r7,16339
   a5894:	3190d844 	addi	r6,r6,17249
   a5898:	39e1e9c4 	addi	r7,r7,-30809
   a589c:	1009883a 	mov	r4,r2
   a58a0:	180b883a 	mov	r5,r3
   a58a4:	00acddc0 	call	acddc <__muldf3>
   a58a8:	01a2d874 	movhi	r6,35681
   a58ac:	01cff1f4 	movhi	r7,16327
   a58b0:	31b22cc4 	addi	r6,r6,-14157
   a58b4:	39e28a04 	addi	r7,r7,-30168
   a58b8:	180b883a 	mov	r5,r3
   a58bc:	1009883a 	mov	r4,r2
   a58c0:	00ab9080 	call	ab908 <__adddf3>
   a58c4:	8009883a 	mov	r4,r16
   a58c8:	1029883a 	mov	r20,r2
   a58cc:	1823883a 	mov	r17,r3
   a58d0:	00adfc40 	call	adfc4 <__floatsidf>
   a58d4:	019427f4 	movhi	r6,20639
   a58d8:	01cff4f4 	movhi	r7,16339
   a58dc:	319e7ec4 	addi	r6,r6,31227
   a58e0:	39d104c4 	addi	r7,r7,17427
   a58e4:	1009883a 	mov	r4,r2
   a58e8:	180b883a 	mov	r5,r3
   a58ec:	00acddc0 	call	acddc <__muldf3>
   a58f0:	100d883a 	mov	r6,r2
   a58f4:	180f883a 	mov	r7,r3
   a58f8:	a009883a 	mov	r4,r20
   a58fc:	880b883a 	mov	r5,r17
   a5900:	00ab9080 	call	ab908 <__adddf3>
   a5904:	1009883a 	mov	r4,r2
   a5908:	180b883a 	mov	r5,r3
   a590c:	1029883a 	mov	r20,r2
   a5910:	1823883a 	mov	r17,r3
   a5914:	00adf440 	call	adf44 <__fixdfsi>
   a5918:	000d883a 	mov	r6,zero
   a591c:	000f883a 	mov	r7,zero
   a5920:	a009883a 	mov	r4,r20
   a5924:	880b883a 	mov	r5,r17
   a5928:	d8800515 	stw	r2,20(sp)
   a592c:	00acce80 	call	acce8 <__ledf2>
   a5930:	10028716 	blt	r2,zero,a6350 <_dtoa_r+0xc88>
   a5934:	d8c00517 	ldw	r3,20(sp)
   a5938:	00800584 	movi	r2,22
   a593c:	10c27536 	bltu	r2,r3,a6314 <_dtoa_r+0xc4c>
   a5940:	180490fa 	slli	r2,r3,3
   a5944:	00c002f4 	movhi	r3,11
   a5948:	18c53704 	addi	r3,r3,5340
   a594c:	1885883a 	add	r2,r3,r2
   a5950:	11000017 	ldw	r4,0(r2)
   a5954:	11400117 	ldw	r5,4(r2)
   a5958:	900d883a 	mov	r6,r18
   a595c:	980f883a 	mov	r7,r19
   a5960:	00acc0c0 	call	acc0c <__gedf2>
   a5964:	00828d0e 	bge	zero,r2,a639c <_dtoa_r+0xcd4>
   a5968:	d9000517 	ldw	r4,20(sp)
   a596c:	d8000e15 	stw	zero,56(sp)
   a5970:	213fffc4 	addi	r4,r4,-1
   a5974:	d9000515 	stw	r4,20(sp)
   a5978:	b42dc83a 	sub	r22,r22,r16
   a597c:	b5bfffc4 	addi	r22,r22,-1
   a5980:	b0026f16 	blt	r22,zero,a6340 <_dtoa_r+0xc78>
   a5984:	d8000815 	stw	zero,32(sp)
   a5988:	d9c00517 	ldw	r7,20(sp)
   a598c:	38026416 	blt	r7,zero,a6320 <_dtoa_r+0xc58>
   a5990:	b1ed883a 	add	r22,r22,r7
   a5994:	d9c00d15 	stw	r7,52(sp)
   a5998:	d8000a15 	stw	zero,40(sp)
   a599c:	d9800317 	ldw	r6,12(sp)
   a59a0:	00800244 	movi	r2,9
   a59a4:	11811436 	bltu	r2,r6,a5df8 <_dtoa_r+0x730>
   a59a8:	00800144 	movi	r2,5
   a59ac:	1184e10e 	bge	r2,r6,a6d34 <_dtoa_r+0x166c>
   a59b0:	31bfff04 	addi	r6,r6,-4
   a59b4:	d9800315 	stw	r6,12(sp)
   a59b8:	0023883a 	mov	r17,zero
   a59bc:	d9800317 	ldw	r6,12(sp)
   a59c0:	008000c4 	movi	r2,3
   a59c4:	30836726 	beq	r6,r2,a6764 <_dtoa_r+0x109c>
   a59c8:	1183410e 	bge	r2,r6,a66d0 <_dtoa_r+0x1008>
   a59cc:	d9c00317 	ldw	r7,12(sp)
   a59d0:	00800104 	movi	r2,4
   a59d4:	38827c26 	beq	r7,r2,a63c8 <_dtoa_r+0xd00>
   a59d8:	00800144 	movi	r2,5
   a59dc:	3884c41e 	bne	r7,r2,a6cf0 <_dtoa_r+0x1628>
   a59e0:	00800044 	movi	r2,1
   a59e4:	d8800b15 	stw	r2,44(sp)
   a59e8:	d8c00517 	ldw	r3,20(sp)
   a59ec:	d9002217 	ldw	r4,136(sp)
   a59f0:	1907883a 	add	r3,r3,r4
   a59f4:	19800044 	addi	r6,r3,1
   a59f8:	d8c00c15 	stw	r3,48(sp)
   a59fc:	d9800615 	stw	r6,24(sp)
   a5a00:	0183a40e 	bge	zero,r6,a6894 <_dtoa_r+0x11cc>
   a5a04:	d9800617 	ldw	r6,24(sp)
   a5a08:	3021883a 	mov	r16,r6
   a5a0c:	e0001115 	stw	zero,68(fp)
   a5a10:	008005c4 	movi	r2,23
   a5a14:	1184c92e 	bgeu	r2,r6,a6d3c <_dtoa_r+0x1674>
   a5a18:	00c00044 	movi	r3,1
   a5a1c:	00800104 	movi	r2,4
   a5a20:	1085883a 	add	r2,r2,r2
   a5a24:	11000504 	addi	r4,r2,20
   a5a28:	180b883a 	mov	r5,r3
   a5a2c:	18c00044 	addi	r3,r3,1
   a5a30:	313ffb2e 	bgeu	r6,r4,a5a20 <__alt_data_end+0xfffe5a20>
   a5a34:	e1401115 	stw	r5,68(fp)
   a5a38:	e009883a 	mov	r4,fp
   a5a3c:	00a77dc0 	call	a77dc <_Balloc>
   a5a40:	d8800715 	stw	r2,28(sp)
   a5a44:	e0801015 	stw	r2,64(fp)
   a5a48:	00800384 	movi	r2,14
   a5a4c:	1400f736 	bltu	r2,r16,a5e2c <_dtoa_r+0x764>
   a5a50:	8800f626 	beq	r17,zero,a5e2c <_dtoa_r+0x764>
   a5a54:	d9c00517 	ldw	r7,20(sp)
   a5a58:	01c39a0e 	bge	zero,r7,a68c4 <_dtoa_r+0x11fc>
   a5a5c:	388003cc 	andi	r2,r7,15
   a5a60:	100490fa 	slli	r2,r2,3
   a5a64:	382bd13a 	srai	r21,r7,4
   a5a68:	00c002f4 	movhi	r3,11
   a5a6c:	18c53704 	addi	r3,r3,5340
   a5a70:	1885883a 	add	r2,r3,r2
   a5a74:	a8c0040c 	andi	r3,r21,16
   a5a78:	12400017 	ldw	r9,0(r2)
   a5a7c:	12000117 	ldw	r8,4(r2)
   a5a80:	18037926 	beq	r3,zero,a6868 <_dtoa_r+0x11a0>
   a5a84:	008002f4 	movhi	r2,11
   a5a88:	10852d04 	addi	r2,r2,5300
   a5a8c:	11800817 	ldw	r6,32(r2)
   a5a90:	11c00917 	ldw	r7,36(r2)
   a5a94:	9009883a 	mov	r4,r18
   a5a98:	980b883a 	mov	r5,r19
   a5a9c:	da001715 	stw	r8,92(sp)
   a5aa0:	da401615 	stw	r9,88(sp)
   a5aa4:	00ac1b40 	call	ac1b4 <__divdf3>
   a5aa8:	da001717 	ldw	r8,92(sp)
   a5aac:	da401617 	ldw	r9,88(sp)
   a5ab0:	ad4003cc 	andi	r21,r21,15
   a5ab4:	040000c4 	movi	r16,3
   a5ab8:	1023883a 	mov	r17,r2
   a5abc:	1829883a 	mov	r20,r3
   a5ac0:	a8001126 	beq	r21,zero,a5b08 <_dtoa_r+0x440>
   a5ac4:	05c002f4 	movhi	r23,11
   a5ac8:	bdc52d04 	addi	r23,r23,5300
   a5acc:	4805883a 	mov	r2,r9
   a5ad0:	4007883a 	mov	r3,r8
   a5ad4:	a980004c 	andi	r6,r21,1
   a5ad8:	1009883a 	mov	r4,r2
   a5adc:	a82bd07a 	srai	r21,r21,1
   a5ae0:	180b883a 	mov	r5,r3
   a5ae4:	30000426 	beq	r6,zero,a5af8 <_dtoa_r+0x430>
   a5ae8:	b9800017 	ldw	r6,0(r23)
   a5aec:	b9c00117 	ldw	r7,4(r23)
   a5af0:	84000044 	addi	r16,r16,1
   a5af4:	00acddc0 	call	acddc <__muldf3>
   a5af8:	bdc00204 	addi	r23,r23,8
   a5afc:	a83ff51e 	bne	r21,zero,a5ad4 <__alt_data_end+0xfffe5ad4>
   a5b00:	1013883a 	mov	r9,r2
   a5b04:	1811883a 	mov	r8,r3
   a5b08:	480d883a 	mov	r6,r9
   a5b0c:	400f883a 	mov	r7,r8
   a5b10:	8809883a 	mov	r4,r17
   a5b14:	a00b883a 	mov	r5,r20
   a5b18:	00ac1b40 	call	ac1b4 <__divdf3>
   a5b1c:	d8800f15 	stw	r2,60(sp)
   a5b20:	d8c01015 	stw	r3,64(sp)
   a5b24:	d8c00e17 	ldw	r3,56(sp)
   a5b28:	18000626 	beq	r3,zero,a5b44 <_dtoa_r+0x47c>
   a5b2c:	d9000f17 	ldw	r4,60(sp)
   a5b30:	d9401017 	ldw	r5,64(sp)
   a5b34:	000d883a 	mov	r6,zero
   a5b38:	01cffc34 	movhi	r7,16368
   a5b3c:	00acce80 	call	acce8 <__ledf2>
   a5b40:	10040b16 	blt	r2,zero,a6b70 <_dtoa_r+0x14a8>
   a5b44:	8009883a 	mov	r4,r16
   a5b48:	00adfc40 	call	adfc4 <__floatsidf>
   a5b4c:	d9800f17 	ldw	r6,60(sp)
   a5b50:	d9c01017 	ldw	r7,64(sp)
   a5b54:	1009883a 	mov	r4,r2
   a5b58:	180b883a 	mov	r5,r3
   a5b5c:	00acddc0 	call	acddc <__muldf3>
   a5b60:	000d883a 	mov	r6,zero
   a5b64:	01d00734 	movhi	r7,16412
   a5b68:	1009883a 	mov	r4,r2
   a5b6c:	180b883a 	mov	r5,r3
   a5b70:	00ab9080 	call	ab908 <__adddf3>
   a5b74:	1021883a 	mov	r16,r2
   a5b78:	d8800617 	ldw	r2,24(sp)
   a5b7c:	047f3034 	movhi	r17,64704
   a5b80:	1c63883a 	add	r17,r3,r17
   a5b84:	10031826 	beq	r2,zero,a67e8 <_dtoa_r+0x1120>
   a5b88:	d8c00517 	ldw	r3,20(sp)
   a5b8c:	db000617 	ldw	r12,24(sp)
   a5b90:	d8c01315 	stw	r3,76(sp)
   a5b94:	d9000b17 	ldw	r4,44(sp)
   a5b98:	20038f26 	beq	r4,zero,a69d8 <_dtoa_r+0x1310>
   a5b9c:	60bfffc4 	addi	r2,r12,-1
   a5ba0:	100490fa 	slli	r2,r2,3
   a5ba4:	00c002f4 	movhi	r3,11
   a5ba8:	18c53704 	addi	r3,r3,5340
   a5bac:	1885883a 	add	r2,r3,r2
   a5bb0:	11800017 	ldw	r6,0(r2)
   a5bb4:	11c00117 	ldw	r7,4(r2)
   a5bb8:	d8800717 	ldw	r2,28(sp)
   a5bbc:	0009883a 	mov	r4,zero
   a5bc0:	014ff834 	movhi	r5,16352
   a5bc4:	db001615 	stw	r12,88(sp)
   a5bc8:	15c00044 	addi	r23,r2,1
   a5bcc:	00ac1b40 	call	ac1b4 <__divdf3>
   a5bd0:	800d883a 	mov	r6,r16
   a5bd4:	880f883a 	mov	r7,r17
   a5bd8:	1009883a 	mov	r4,r2
   a5bdc:	180b883a 	mov	r5,r3
   a5be0:	00ad6480 	call	ad648 <__subdf3>
   a5be4:	d9401017 	ldw	r5,64(sp)
   a5be8:	d9000f17 	ldw	r4,60(sp)
   a5bec:	102b883a 	mov	r21,r2
   a5bf0:	d8c01215 	stw	r3,72(sp)
   a5bf4:	00adf440 	call	adf44 <__fixdfsi>
   a5bf8:	1009883a 	mov	r4,r2
   a5bfc:	1029883a 	mov	r20,r2
   a5c00:	00adfc40 	call	adfc4 <__floatsidf>
   a5c04:	d9000f17 	ldw	r4,60(sp)
   a5c08:	d9401017 	ldw	r5,64(sp)
   a5c0c:	100d883a 	mov	r6,r2
   a5c10:	180f883a 	mov	r7,r3
   a5c14:	00ad6480 	call	ad648 <__subdf3>
   a5c18:	1823883a 	mov	r17,r3
   a5c1c:	d8c00717 	ldw	r3,28(sp)
   a5c20:	d9401217 	ldw	r5,72(sp)
   a5c24:	a2000c04 	addi	r8,r20,48
   a5c28:	1021883a 	mov	r16,r2
   a5c2c:	1a000005 	stb	r8,0(r3)
   a5c30:	800d883a 	mov	r6,r16
   a5c34:	880f883a 	mov	r7,r17
   a5c38:	a809883a 	mov	r4,r21
   a5c3c:	4029883a 	mov	r20,r8
   a5c40:	00acc0c0 	call	acc0c <__gedf2>
   a5c44:	00841d16 	blt	zero,r2,a6cbc <_dtoa_r+0x15f4>
   a5c48:	800d883a 	mov	r6,r16
   a5c4c:	880f883a 	mov	r7,r17
   a5c50:	0009883a 	mov	r4,zero
   a5c54:	014ffc34 	movhi	r5,16368
   a5c58:	00ad6480 	call	ad648 <__subdf3>
   a5c5c:	d9401217 	ldw	r5,72(sp)
   a5c60:	100d883a 	mov	r6,r2
   a5c64:	180f883a 	mov	r7,r3
   a5c68:	a809883a 	mov	r4,r21
   a5c6c:	00acc0c0 	call	acc0c <__gedf2>
   a5c70:	db001617 	ldw	r12,88(sp)
   a5c74:	00840e16 	blt	zero,r2,a6cb0 <_dtoa_r+0x15e8>
   a5c78:	00800044 	movi	r2,1
   a5c7c:	13006b0e 	bge	r2,r12,a5e2c <_dtoa_r+0x764>
   a5c80:	d9000717 	ldw	r4,28(sp)
   a5c84:	dd800f15 	stw	r22,60(sp)
   a5c88:	dcc01015 	stw	r19,64(sp)
   a5c8c:	2319883a 	add	r12,r4,r12
   a5c90:	dcc01217 	ldw	r19,72(sp)
   a5c94:	602d883a 	mov	r22,r12
   a5c98:	dc801215 	stw	r18,72(sp)
   a5c9c:	b825883a 	mov	r18,r23
   a5ca0:	00000906 	br	a5cc8 <_dtoa_r+0x600>
   a5ca4:	00ad6480 	call	ad648 <__subdf3>
   a5ca8:	a80d883a 	mov	r6,r21
   a5cac:	980f883a 	mov	r7,r19
   a5cb0:	1009883a 	mov	r4,r2
   a5cb4:	180b883a 	mov	r5,r3
   a5cb8:	00acce80 	call	acce8 <__ledf2>
   a5cbc:	1003e816 	blt	r2,zero,a6c60 <_dtoa_r+0x1598>
   a5cc0:	b825883a 	mov	r18,r23
   a5cc4:	bd83e926 	beq	r23,r22,a6c6c <_dtoa_r+0x15a4>
   a5cc8:	a809883a 	mov	r4,r21
   a5ccc:	980b883a 	mov	r5,r19
   a5cd0:	000d883a 	mov	r6,zero
   a5cd4:	01d00934 	movhi	r7,16420
   a5cd8:	00acddc0 	call	acddc <__muldf3>
   a5cdc:	000d883a 	mov	r6,zero
   a5ce0:	01d00934 	movhi	r7,16420
   a5ce4:	8009883a 	mov	r4,r16
   a5ce8:	880b883a 	mov	r5,r17
   a5cec:	102b883a 	mov	r21,r2
   a5cf0:	1827883a 	mov	r19,r3
   a5cf4:	00acddc0 	call	acddc <__muldf3>
   a5cf8:	180b883a 	mov	r5,r3
   a5cfc:	1009883a 	mov	r4,r2
   a5d00:	1821883a 	mov	r16,r3
   a5d04:	1023883a 	mov	r17,r2
   a5d08:	00adf440 	call	adf44 <__fixdfsi>
   a5d0c:	1009883a 	mov	r4,r2
   a5d10:	1029883a 	mov	r20,r2
   a5d14:	00adfc40 	call	adfc4 <__floatsidf>
   a5d18:	8809883a 	mov	r4,r17
   a5d1c:	800b883a 	mov	r5,r16
   a5d20:	100d883a 	mov	r6,r2
   a5d24:	180f883a 	mov	r7,r3
   a5d28:	00ad6480 	call	ad648 <__subdf3>
   a5d2c:	a5000c04 	addi	r20,r20,48
   a5d30:	a80d883a 	mov	r6,r21
   a5d34:	980f883a 	mov	r7,r19
   a5d38:	1009883a 	mov	r4,r2
   a5d3c:	180b883a 	mov	r5,r3
   a5d40:	95000005 	stb	r20,0(r18)
   a5d44:	1021883a 	mov	r16,r2
   a5d48:	1823883a 	mov	r17,r3
   a5d4c:	00acce80 	call	acce8 <__ledf2>
   a5d50:	bdc00044 	addi	r23,r23,1
   a5d54:	800d883a 	mov	r6,r16
   a5d58:	880f883a 	mov	r7,r17
   a5d5c:	0009883a 	mov	r4,zero
   a5d60:	014ffc34 	movhi	r5,16368
   a5d64:	103fcf0e 	bge	r2,zero,a5ca4 <__alt_data_end+0xfffe5ca4>
   a5d68:	d8c01317 	ldw	r3,76(sp)
   a5d6c:	d8c00515 	stw	r3,20(sp)
   a5d70:	d9400917 	ldw	r5,36(sp)
   a5d74:	e009883a 	mov	r4,fp
   a5d78:	00a78840 	call	a7884 <_Bfree>
   a5d7c:	d9000517 	ldw	r4,20(sp)
   a5d80:	d9802317 	ldw	r6,140(sp)
   a5d84:	d9c02517 	ldw	r7,148(sp)
   a5d88:	b8000005 	stb	zero,0(r23)
   a5d8c:	20800044 	addi	r2,r4,1
   a5d90:	30800015 	stw	r2,0(r6)
   a5d94:	3802aa26 	beq	r7,zero,a6840 <_dtoa_r+0x1178>
   a5d98:	3dc00015 	stw	r23,0(r7)
   a5d9c:	d8800717 	ldw	r2,28(sp)
   a5da0:	003e7906 	br	a5788 <__alt_data_end+0xfffe5788>
   a5da4:	00800434 	movhi	r2,16
   a5da8:	10bfffc4 	addi	r2,r2,-1
   a5dac:	88a2703a 	and	r17,r17,r2
   a5db0:	883e851e 	bne	r17,zero,a57c8 <__alt_data_end+0xfffe57c8>
   a5db4:	008002f4 	movhi	r2,11
   a5db8:	10851904 	addi	r2,r2,5220
   a5dbc:	003e8406 	br	a57d0 <__alt_data_end+0xfffe57d0>
   a5dc0:	10c00204 	addi	r3,r2,8
   a5dc4:	003e8706 	br	a57e4 <__alt_data_end+0xfffe57e4>
   a5dc8:	01400434 	movhi	r5,16
   a5dcc:	297fffc4 	addi	r5,r5,-1
   a5dd0:	994a703a 	and	r5,r19,r5
   a5dd4:	9009883a 	mov	r4,r18
   a5dd8:	843f0044 	addi	r16,r16,-1023
   a5ddc:	294ffc34 	orhi	r5,r5,16368
   a5de0:	dd800217 	ldw	r22,8(sp)
   a5de4:	d8001115 	stw	zero,68(sp)
   a5de8:	003ea506 	br	a5880 <__alt_data_end+0xfffe5880>
   a5dec:	008002f4 	movhi	r2,11
   a5df0:	10851004 	addi	r2,r2,5184
   a5df4:	003e6406 	br	a5788 <__alt_data_end+0xfffe5788>
   a5df8:	e0001115 	stw	zero,68(fp)
   a5dfc:	000b883a 	mov	r5,zero
   a5e00:	e009883a 	mov	r4,fp
   a5e04:	00a77dc0 	call	a77dc <_Balloc>
   a5e08:	01bfffc4 	movi	r6,-1
   a5e0c:	01c00044 	movi	r7,1
   a5e10:	d8800715 	stw	r2,28(sp)
   a5e14:	d9800c15 	stw	r6,48(sp)
   a5e18:	e0801015 	stw	r2,64(fp)
   a5e1c:	d8000315 	stw	zero,12(sp)
   a5e20:	d9c00b15 	stw	r7,44(sp)
   a5e24:	d9800615 	stw	r6,24(sp)
   a5e28:	d8002215 	stw	zero,136(sp)
   a5e2c:	d8800117 	ldw	r2,4(sp)
   a5e30:	10008916 	blt	r2,zero,a6058 <_dtoa_r+0x990>
   a5e34:	d9000517 	ldw	r4,20(sp)
   a5e38:	00c00384 	movi	r3,14
   a5e3c:	19008616 	blt	r3,r4,a6058 <_dtoa_r+0x990>
   a5e40:	200490fa 	slli	r2,r4,3
   a5e44:	00c002f4 	movhi	r3,11
   a5e48:	d9802217 	ldw	r6,136(sp)
   a5e4c:	18c53704 	addi	r3,r3,5340
   a5e50:	1885883a 	add	r2,r3,r2
   a5e54:	14000017 	ldw	r16,0(r2)
   a5e58:	14400117 	ldw	r17,4(r2)
   a5e5c:	30016316 	blt	r6,zero,a63ec <_dtoa_r+0xd24>
   a5e60:	800d883a 	mov	r6,r16
   a5e64:	880f883a 	mov	r7,r17
   a5e68:	9009883a 	mov	r4,r18
   a5e6c:	980b883a 	mov	r5,r19
   a5e70:	00ac1b40 	call	ac1b4 <__divdf3>
   a5e74:	180b883a 	mov	r5,r3
   a5e78:	1009883a 	mov	r4,r2
   a5e7c:	00adf440 	call	adf44 <__fixdfsi>
   a5e80:	1009883a 	mov	r4,r2
   a5e84:	102b883a 	mov	r21,r2
   a5e88:	00adfc40 	call	adfc4 <__floatsidf>
   a5e8c:	800d883a 	mov	r6,r16
   a5e90:	880f883a 	mov	r7,r17
   a5e94:	1009883a 	mov	r4,r2
   a5e98:	180b883a 	mov	r5,r3
   a5e9c:	00acddc0 	call	acddc <__muldf3>
   a5ea0:	100d883a 	mov	r6,r2
   a5ea4:	180f883a 	mov	r7,r3
   a5ea8:	9009883a 	mov	r4,r18
   a5eac:	980b883a 	mov	r5,r19
   a5eb0:	00ad6480 	call	ad648 <__subdf3>
   a5eb4:	d9c00717 	ldw	r7,28(sp)
   a5eb8:	1009883a 	mov	r4,r2
   a5ebc:	a8800c04 	addi	r2,r21,48
   a5ec0:	38800005 	stb	r2,0(r7)
   a5ec4:	3dc00044 	addi	r23,r7,1
   a5ec8:	d9c00617 	ldw	r7,24(sp)
   a5ecc:	01800044 	movi	r6,1
   a5ed0:	180b883a 	mov	r5,r3
   a5ed4:	2005883a 	mov	r2,r4
   a5ed8:	39803826 	beq	r7,r6,a5fbc <_dtoa_r+0x8f4>
   a5edc:	000d883a 	mov	r6,zero
   a5ee0:	01d00934 	movhi	r7,16420
   a5ee4:	00acddc0 	call	acddc <__muldf3>
   a5ee8:	000d883a 	mov	r6,zero
   a5eec:	000f883a 	mov	r7,zero
   a5ef0:	1009883a 	mov	r4,r2
   a5ef4:	180b883a 	mov	r5,r3
   a5ef8:	1025883a 	mov	r18,r2
   a5efc:	1827883a 	mov	r19,r3
   a5f00:	00acb840 	call	acb84 <__eqdf2>
   a5f04:	103f9a26 	beq	r2,zero,a5d70 <__alt_data_end+0xfffe5d70>
   a5f08:	d9c00617 	ldw	r7,24(sp)
   a5f0c:	d8c00717 	ldw	r3,28(sp)
   a5f10:	b829883a 	mov	r20,r23
   a5f14:	38bfffc4 	addi	r2,r7,-1
   a5f18:	18ad883a 	add	r22,r3,r2
   a5f1c:	00000a06 	br	a5f48 <_dtoa_r+0x880>
   a5f20:	00acddc0 	call	acddc <__muldf3>
   a5f24:	000d883a 	mov	r6,zero
   a5f28:	000f883a 	mov	r7,zero
   a5f2c:	1009883a 	mov	r4,r2
   a5f30:	180b883a 	mov	r5,r3
   a5f34:	1025883a 	mov	r18,r2
   a5f38:	1827883a 	mov	r19,r3
   a5f3c:	b829883a 	mov	r20,r23
   a5f40:	00acb840 	call	acb84 <__eqdf2>
   a5f44:	103f8a26 	beq	r2,zero,a5d70 <__alt_data_end+0xfffe5d70>
   a5f48:	800d883a 	mov	r6,r16
   a5f4c:	880f883a 	mov	r7,r17
   a5f50:	9009883a 	mov	r4,r18
   a5f54:	980b883a 	mov	r5,r19
   a5f58:	00ac1b40 	call	ac1b4 <__divdf3>
   a5f5c:	180b883a 	mov	r5,r3
   a5f60:	1009883a 	mov	r4,r2
   a5f64:	00adf440 	call	adf44 <__fixdfsi>
   a5f68:	1009883a 	mov	r4,r2
   a5f6c:	102b883a 	mov	r21,r2
   a5f70:	00adfc40 	call	adfc4 <__floatsidf>
   a5f74:	800d883a 	mov	r6,r16
   a5f78:	880f883a 	mov	r7,r17
   a5f7c:	1009883a 	mov	r4,r2
   a5f80:	180b883a 	mov	r5,r3
   a5f84:	00acddc0 	call	acddc <__muldf3>
   a5f88:	100d883a 	mov	r6,r2
   a5f8c:	180f883a 	mov	r7,r3
   a5f90:	9009883a 	mov	r4,r18
   a5f94:	980b883a 	mov	r5,r19
   a5f98:	00ad6480 	call	ad648 <__subdf3>
   a5f9c:	aa000c04 	addi	r8,r21,48
   a5fa0:	a2000005 	stb	r8,0(r20)
   a5fa4:	000d883a 	mov	r6,zero
   a5fa8:	01d00934 	movhi	r7,16420
   a5fac:	1009883a 	mov	r4,r2
   a5fb0:	180b883a 	mov	r5,r3
   a5fb4:	a5c00044 	addi	r23,r20,1
   a5fb8:	b53fd91e 	bne	r22,r20,a5f20 <__alt_data_end+0xfffe5f20>
   a5fbc:	100d883a 	mov	r6,r2
   a5fc0:	180f883a 	mov	r7,r3
   a5fc4:	1009883a 	mov	r4,r2
   a5fc8:	180b883a 	mov	r5,r3
   a5fcc:	00ab9080 	call	ab908 <__adddf3>
   a5fd0:	100d883a 	mov	r6,r2
   a5fd4:	180f883a 	mov	r7,r3
   a5fd8:	8009883a 	mov	r4,r16
   a5fdc:	880b883a 	mov	r5,r17
   a5fe0:	1027883a 	mov	r19,r2
   a5fe4:	1825883a 	mov	r18,r3
   a5fe8:	00acce80 	call	acce8 <__ledf2>
   a5fec:	10000816 	blt	r2,zero,a6010 <_dtoa_r+0x948>
   a5ff0:	980d883a 	mov	r6,r19
   a5ff4:	900f883a 	mov	r7,r18
   a5ff8:	8009883a 	mov	r4,r16
   a5ffc:	880b883a 	mov	r5,r17
   a6000:	00acb840 	call	acb84 <__eqdf2>
   a6004:	103f5a1e 	bne	r2,zero,a5d70 <__alt_data_end+0xfffe5d70>
   a6008:	ad40004c 	andi	r21,r21,1
   a600c:	a83f5826 	beq	r21,zero,a5d70 <__alt_data_end+0xfffe5d70>
   a6010:	bd3fffc3 	ldbu	r20,-1(r23)
   a6014:	b8bfffc4 	addi	r2,r23,-1
   a6018:	1007883a 	mov	r3,r2
   a601c:	01400e44 	movi	r5,57
   a6020:	d9800717 	ldw	r6,28(sp)
   a6024:	00000506 	br	a603c <_dtoa_r+0x974>
   a6028:	18ffffc4 	addi	r3,r3,-1
   a602c:	11824726 	beq	r2,r6,a694c <_dtoa_r+0x1284>
   a6030:	1d000003 	ldbu	r20,0(r3)
   a6034:	102f883a 	mov	r23,r2
   a6038:	10bfffc4 	addi	r2,r2,-1
   a603c:	a1003fcc 	andi	r4,r20,255
   a6040:	2100201c 	xori	r4,r4,128
   a6044:	213fe004 	addi	r4,r4,-128
   a6048:	217ff726 	beq	r4,r5,a6028 <__alt_data_end+0xfffe6028>
   a604c:	a2000044 	addi	r8,r20,1
   a6050:	12000005 	stb	r8,0(r2)
   a6054:	003f4606 	br	a5d70 <__alt_data_end+0xfffe5d70>
   a6058:	d9000b17 	ldw	r4,44(sp)
   a605c:	2000c826 	beq	r4,zero,a6380 <_dtoa_r+0xcb8>
   a6060:	d9800317 	ldw	r6,12(sp)
   a6064:	00c00044 	movi	r3,1
   a6068:	1980f90e 	bge	r3,r6,a6450 <_dtoa_r+0xd88>
   a606c:	d8800617 	ldw	r2,24(sp)
   a6070:	d8c00a17 	ldw	r3,40(sp)
   a6074:	157fffc4 	addi	r21,r2,-1
   a6078:	1d41f316 	blt	r3,r21,a6848 <_dtoa_r+0x1180>
   a607c:	1d6bc83a 	sub	r21,r3,r21
   a6080:	d9c00617 	ldw	r7,24(sp)
   a6084:	3802aa16 	blt	r7,zero,a6b30 <_dtoa_r+0x1468>
   a6088:	dd000817 	ldw	r20,32(sp)
   a608c:	d8800617 	ldw	r2,24(sp)
   a6090:	d8c00817 	ldw	r3,32(sp)
   a6094:	01400044 	movi	r5,1
   a6098:	e009883a 	mov	r4,fp
   a609c:	1887883a 	add	r3,r3,r2
   a60a0:	d8c00815 	stw	r3,32(sp)
   a60a4:	b0ad883a 	add	r22,r22,r2
   a60a8:	00a7c100 	call	a7c10 <__i2b>
   a60ac:	1023883a 	mov	r17,r2
   a60b0:	a0000826 	beq	r20,zero,a60d4 <_dtoa_r+0xa0c>
   a60b4:	0580070e 	bge	zero,r22,a60d4 <_dtoa_r+0xa0c>
   a60b8:	a005883a 	mov	r2,r20
   a60bc:	b500b916 	blt	r22,r20,a63a4 <_dtoa_r+0xcdc>
   a60c0:	d9000817 	ldw	r4,32(sp)
   a60c4:	a0a9c83a 	sub	r20,r20,r2
   a60c8:	b0adc83a 	sub	r22,r22,r2
   a60cc:	2089c83a 	sub	r4,r4,r2
   a60d0:	d9000815 	stw	r4,32(sp)
   a60d4:	d9800a17 	ldw	r6,40(sp)
   a60d8:	0181810e 	bge	zero,r6,a66e0 <_dtoa_r+0x1018>
   a60dc:	d9c00b17 	ldw	r7,44(sp)
   a60e0:	3800b326 	beq	r7,zero,a63b0 <_dtoa_r+0xce8>
   a60e4:	a800b226 	beq	r21,zero,a63b0 <_dtoa_r+0xce8>
   a60e8:	880b883a 	mov	r5,r17
   a60ec:	a80d883a 	mov	r6,r21
   a60f0:	e009883a 	mov	r4,fp
   a60f4:	00a7ed80 	call	a7ed8 <__pow5mult>
   a60f8:	d9800917 	ldw	r6,36(sp)
   a60fc:	100b883a 	mov	r5,r2
   a6100:	e009883a 	mov	r4,fp
   a6104:	1023883a 	mov	r17,r2
   a6108:	00a7c4c0 	call	a7c4c <__multiply>
   a610c:	1021883a 	mov	r16,r2
   a6110:	d8800a17 	ldw	r2,40(sp)
   a6114:	d9400917 	ldw	r5,36(sp)
   a6118:	e009883a 	mov	r4,fp
   a611c:	1545c83a 	sub	r2,r2,r21
   a6120:	d8800a15 	stw	r2,40(sp)
   a6124:	00a78840 	call	a7884 <_Bfree>
   a6128:	d8c00a17 	ldw	r3,40(sp)
   a612c:	18009f1e 	bne	r3,zero,a63ac <_dtoa_r+0xce4>
   a6130:	05c00044 	movi	r23,1
   a6134:	e009883a 	mov	r4,fp
   a6138:	b80b883a 	mov	r5,r23
   a613c:	00a7c100 	call	a7c10 <__i2b>
   a6140:	d9000d17 	ldw	r4,52(sp)
   a6144:	102b883a 	mov	r21,r2
   a6148:	2000ce26 	beq	r4,zero,a6484 <_dtoa_r+0xdbc>
   a614c:	200d883a 	mov	r6,r4
   a6150:	100b883a 	mov	r5,r2
   a6154:	e009883a 	mov	r4,fp
   a6158:	00a7ed80 	call	a7ed8 <__pow5mult>
   a615c:	d9800317 	ldw	r6,12(sp)
   a6160:	102b883a 	mov	r21,r2
   a6164:	b981810e 	bge	r23,r6,a676c <_dtoa_r+0x10a4>
   a6168:	0027883a 	mov	r19,zero
   a616c:	a8800417 	ldw	r2,16(r21)
   a6170:	05c00804 	movi	r23,32
   a6174:	10800104 	addi	r2,r2,4
   a6178:	1085883a 	add	r2,r2,r2
   a617c:	1085883a 	add	r2,r2,r2
   a6180:	a885883a 	add	r2,r21,r2
   a6184:	11000017 	ldw	r4,0(r2)
   a6188:	00a7af80 	call	a7af8 <__hi0bits>
   a618c:	b885c83a 	sub	r2,r23,r2
   a6190:	1585883a 	add	r2,r2,r22
   a6194:	108007cc 	andi	r2,r2,31
   a6198:	1000b326 	beq	r2,zero,a6468 <_dtoa_r+0xda0>
   a619c:	00c00804 	movi	r3,32
   a61a0:	1887c83a 	sub	r3,r3,r2
   a61a4:	01000104 	movi	r4,4
   a61a8:	20c2cd0e 	bge	r4,r3,a6ce0 <_dtoa_r+0x1618>
   a61ac:	00c00704 	movi	r3,28
   a61b0:	1885c83a 	sub	r2,r3,r2
   a61b4:	d8c00817 	ldw	r3,32(sp)
   a61b8:	a0a9883a 	add	r20,r20,r2
   a61bc:	b0ad883a 	add	r22,r22,r2
   a61c0:	1887883a 	add	r3,r3,r2
   a61c4:	d8c00815 	stw	r3,32(sp)
   a61c8:	d9800817 	ldw	r6,32(sp)
   a61cc:	0180040e 	bge	zero,r6,a61e0 <_dtoa_r+0xb18>
   a61d0:	800b883a 	mov	r5,r16
   a61d4:	e009883a 	mov	r4,fp
   a61d8:	00a80180 	call	a8018 <__lshift>
   a61dc:	1021883a 	mov	r16,r2
   a61e0:	0580050e 	bge	zero,r22,a61f8 <_dtoa_r+0xb30>
   a61e4:	a80b883a 	mov	r5,r21
   a61e8:	b00d883a 	mov	r6,r22
   a61ec:	e009883a 	mov	r4,fp
   a61f0:	00a80180 	call	a8018 <__lshift>
   a61f4:	102b883a 	mov	r21,r2
   a61f8:	d9c00e17 	ldw	r7,56(sp)
   a61fc:	3801211e 	bne	r7,zero,a6684 <_dtoa_r+0xfbc>
   a6200:	d9800617 	ldw	r6,24(sp)
   a6204:	0181380e 	bge	zero,r6,a66e8 <_dtoa_r+0x1020>
   a6208:	d8c00b17 	ldw	r3,44(sp)
   a620c:	1800ab1e 	bne	r3,zero,a64bc <_dtoa_r+0xdf4>
   a6210:	dc800717 	ldw	r18,28(sp)
   a6214:	dcc00617 	ldw	r19,24(sp)
   a6218:	9029883a 	mov	r20,r18
   a621c:	00000206 	br	a6228 <_dtoa_r+0xb60>
   a6220:	00a78ac0 	call	a78ac <__multadd>
   a6224:	1021883a 	mov	r16,r2
   a6228:	a80b883a 	mov	r5,r21
   a622c:	8009883a 	mov	r4,r16
   a6230:	00a54a00 	call	a54a0 <quorem>
   a6234:	10800c04 	addi	r2,r2,48
   a6238:	90800005 	stb	r2,0(r18)
   a623c:	94800044 	addi	r18,r18,1
   a6240:	9507c83a 	sub	r3,r18,r20
   a6244:	000f883a 	mov	r7,zero
   a6248:	01800284 	movi	r6,10
   a624c:	800b883a 	mov	r5,r16
   a6250:	e009883a 	mov	r4,fp
   a6254:	1cfff216 	blt	r3,r19,a6220 <__alt_data_end+0xfffe6220>
   a6258:	1011883a 	mov	r8,r2
   a625c:	d8800617 	ldw	r2,24(sp)
   a6260:	0082370e 	bge	zero,r2,a6b40 <_dtoa_r+0x1478>
   a6264:	d9000717 	ldw	r4,28(sp)
   a6268:	0025883a 	mov	r18,zero
   a626c:	20af883a 	add	r23,r4,r2
   a6270:	01800044 	movi	r6,1
   a6274:	800b883a 	mov	r5,r16
   a6278:	e009883a 	mov	r4,fp
   a627c:	da001715 	stw	r8,92(sp)
   a6280:	00a80180 	call	a8018 <__lshift>
   a6284:	a80b883a 	mov	r5,r21
   a6288:	1009883a 	mov	r4,r2
   a628c:	d8800915 	stw	r2,36(sp)
   a6290:	00a81600 	call	a8160 <__mcmp>
   a6294:	da001717 	ldw	r8,92(sp)
   a6298:	0081800e 	bge	zero,r2,a689c <_dtoa_r+0x11d4>
   a629c:	b93fffc3 	ldbu	r4,-1(r23)
   a62a0:	b8bfffc4 	addi	r2,r23,-1
   a62a4:	1007883a 	mov	r3,r2
   a62a8:	01800e44 	movi	r6,57
   a62ac:	d9c00717 	ldw	r7,28(sp)
   a62b0:	00000506 	br	a62c8 <_dtoa_r+0xc00>
   a62b4:	18ffffc4 	addi	r3,r3,-1
   a62b8:	11c12326 	beq	r2,r7,a6748 <_dtoa_r+0x1080>
   a62bc:	19000003 	ldbu	r4,0(r3)
   a62c0:	102f883a 	mov	r23,r2
   a62c4:	10bfffc4 	addi	r2,r2,-1
   a62c8:	21403fcc 	andi	r5,r4,255
   a62cc:	2940201c 	xori	r5,r5,128
   a62d0:	297fe004 	addi	r5,r5,-128
   a62d4:	29bff726 	beq	r5,r6,a62b4 <__alt_data_end+0xfffe62b4>
   a62d8:	21000044 	addi	r4,r4,1
   a62dc:	11000005 	stb	r4,0(r2)
   a62e0:	a80b883a 	mov	r5,r21
   a62e4:	e009883a 	mov	r4,fp
   a62e8:	00a78840 	call	a7884 <_Bfree>
   a62ec:	883ea026 	beq	r17,zero,a5d70 <__alt_data_end+0xfffe5d70>
   a62f0:	90000426 	beq	r18,zero,a6304 <_dtoa_r+0xc3c>
   a62f4:	94400326 	beq	r18,r17,a6304 <_dtoa_r+0xc3c>
   a62f8:	900b883a 	mov	r5,r18
   a62fc:	e009883a 	mov	r4,fp
   a6300:	00a78840 	call	a7884 <_Bfree>
   a6304:	880b883a 	mov	r5,r17
   a6308:	e009883a 	mov	r4,fp
   a630c:	00a78840 	call	a7884 <_Bfree>
   a6310:	003e9706 	br	a5d70 <__alt_data_end+0xfffe5d70>
   a6314:	01800044 	movi	r6,1
   a6318:	d9800e15 	stw	r6,56(sp)
   a631c:	003d9606 	br	a5978 <__alt_data_end+0xfffe5978>
   a6320:	d8800817 	ldw	r2,32(sp)
   a6324:	d8c00517 	ldw	r3,20(sp)
   a6328:	d8000d15 	stw	zero,52(sp)
   a632c:	10c5c83a 	sub	r2,r2,r3
   a6330:	00c9c83a 	sub	r4,zero,r3
   a6334:	d8800815 	stw	r2,32(sp)
   a6338:	d9000a15 	stw	r4,40(sp)
   a633c:	003d9706 	br	a599c <__alt_data_end+0xfffe599c>
   a6340:	05adc83a 	sub	r22,zero,r22
   a6344:	dd800815 	stw	r22,32(sp)
   a6348:	002d883a 	mov	r22,zero
   a634c:	003d8e06 	br	a5988 <__alt_data_end+0xfffe5988>
   a6350:	d9000517 	ldw	r4,20(sp)
   a6354:	00adfc40 	call	adfc4 <__floatsidf>
   a6358:	100d883a 	mov	r6,r2
   a635c:	180f883a 	mov	r7,r3
   a6360:	a009883a 	mov	r4,r20
   a6364:	880b883a 	mov	r5,r17
   a6368:	00acb840 	call	acb84 <__eqdf2>
   a636c:	103d7126 	beq	r2,zero,a5934 <__alt_data_end+0xfffe5934>
   a6370:	d9c00517 	ldw	r7,20(sp)
   a6374:	39ffffc4 	addi	r7,r7,-1
   a6378:	d9c00515 	stw	r7,20(sp)
   a637c:	003d6d06 	br	a5934 <__alt_data_end+0xfffe5934>
   a6380:	dd400a17 	ldw	r21,40(sp)
   a6384:	dd000817 	ldw	r20,32(sp)
   a6388:	0023883a 	mov	r17,zero
   a638c:	003f4806 	br	a60b0 <__alt_data_end+0xfffe60b0>
   a6390:	10e3c83a 	sub	r17,r2,r3
   a6394:	9448983a 	sll	r4,r18,r17
   a6398:	003d3206 	br	a5864 <__alt_data_end+0xfffe5864>
   a639c:	d8000e15 	stw	zero,56(sp)
   a63a0:	003d7506 	br	a5978 <__alt_data_end+0xfffe5978>
   a63a4:	b005883a 	mov	r2,r22
   a63a8:	003f4506 	br	a60c0 <__alt_data_end+0xfffe60c0>
   a63ac:	dc000915 	stw	r16,36(sp)
   a63b0:	d9800a17 	ldw	r6,40(sp)
   a63b4:	d9400917 	ldw	r5,36(sp)
   a63b8:	e009883a 	mov	r4,fp
   a63bc:	00a7ed80 	call	a7ed8 <__pow5mult>
   a63c0:	1021883a 	mov	r16,r2
   a63c4:	003f5a06 	br	a6130 <__alt_data_end+0xfffe6130>
   a63c8:	01c00044 	movi	r7,1
   a63cc:	d9c00b15 	stw	r7,44(sp)
   a63d0:	d8802217 	ldw	r2,136(sp)
   a63d4:	0081280e 	bge	zero,r2,a6878 <_dtoa_r+0x11b0>
   a63d8:	100d883a 	mov	r6,r2
   a63dc:	1021883a 	mov	r16,r2
   a63e0:	d8800c15 	stw	r2,48(sp)
   a63e4:	d8800615 	stw	r2,24(sp)
   a63e8:	003d8806 	br	a5a0c <__alt_data_end+0xfffe5a0c>
   a63ec:	d8800617 	ldw	r2,24(sp)
   a63f0:	00be9b16 	blt	zero,r2,a5e60 <__alt_data_end+0xfffe5e60>
   a63f4:	10010f1e 	bne	r2,zero,a6834 <_dtoa_r+0x116c>
   a63f8:	880b883a 	mov	r5,r17
   a63fc:	000d883a 	mov	r6,zero
   a6400:	01d00534 	movhi	r7,16404
   a6404:	8009883a 	mov	r4,r16
   a6408:	00acddc0 	call	acddc <__muldf3>
   a640c:	900d883a 	mov	r6,r18
   a6410:	980f883a 	mov	r7,r19
   a6414:	1009883a 	mov	r4,r2
   a6418:	180b883a 	mov	r5,r3
   a641c:	00acc0c0 	call	acc0c <__gedf2>
   a6420:	002b883a 	mov	r21,zero
   a6424:	0023883a 	mov	r17,zero
   a6428:	1000bf16 	blt	r2,zero,a6728 <_dtoa_r+0x1060>
   a642c:	d9802217 	ldw	r6,136(sp)
   a6430:	ddc00717 	ldw	r23,28(sp)
   a6434:	018c303a 	nor	r6,zero,r6
   a6438:	d9800515 	stw	r6,20(sp)
   a643c:	a80b883a 	mov	r5,r21
   a6440:	e009883a 	mov	r4,fp
   a6444:	00a78840 	call	a7884 <_Bfree>
   a6448:	883e4926 	beq	r17,zero,a5d70 <__alt_data_end+0xfffe5d70>
   a644c:	003fad06 	br	a6304 <__alt_data_end+0xfffe6304>
   a6450:	d9c01117 	ldw	r7,68(sp)
   a6454:	3801bc26 	beq	r7,zero,a6b48 <_dtoa_r+0x1480>
   a6458:	10810cc4 	addi	r2,r2,1075
   a645c:	dd400a17 	ldw	r21,40(sp)
   a6460:	dd000817 	ldw	r20,32(sp)
   a6464:	003f0a06 	br	a6090 <__alt_data_end+0xfffe6090>
   a6468:	00800704 	movi	r2,28
   a646c:	d9000817 	ldw	r4,32(sp)
   a6470:	a0a9883a 	add	r20,r20,r2
   a6474:	b0ad883a 	add	r22,r22,r2
   a6478:	2089883a 	add	r4,r4,r2
   a647c:	d9000815 	stw	r4,32(sp)
   a6480:	003f5106 	br	a61c8 <__alt_data_end+0xfffe61c8>
   a6484:	d8c00317 	ldw	r3,12(sp)
   a6488:	b8c1fc0e 	bge	r23,r3,a6c7c <_dtoa_r+0x15b4>
   a648c:	0027883a 	mov	r19,zero
   a6490:	b805883a 	mov	r2,r23
   a6494:	003f3e06 	br	a6190 <__alt_data_end+0xfffe6190>
   a6498:	880b883a 	mov	r5,r17
   a649c:	e009883a 	mov	r4,fp
   a64a0:	000f883a 	mov	r7,zero
   a64a4:	01800284 	movi	r6,10
   a64a8:	00a78ac0 	call	a78ac <__multadd>
   a64ac:	d9000c17 	ldw	r4,48(sp)
   a64b0:	1023883a 	mov	r17,r2
   a64b4:	0102040e 	bge	zero,r4,a6cc8 <_dtoa_r+0x1600>
   a64b8:	d9000615 	stw	r4,24(sp)
   a64bc:	0500050e 	bge	zero,r20,a64d4 <_dtoa_r+0xe0c>
   a64c0:	880b883a 	mov	r5,r17
   a64c4:	a00d883a 	mov	r6,r20
   a64c8:	e009883a 	mov	r4,fp
   a64cc:	00a80180 	call	a8018 <__lshift>
   a64d0:	1023883a 	mov	r17,r2
   a64d4:	9801241e 	bne	r19,zero,a6968 <_dtoa_r+0x12a0>
   a64d8:	8829883a 	mov	r20,r17
   a64dc:	d9000617 	ldw	r4,24(sp)
   a64e0:	dcc00717 	ldw	r19,28(sp)
   a64e4:	9480004c 	andi	r18,r18,1
   a64e8:	20bfffc4 	addi	r2,r4,-1
   a64ec:	9885883a 	add	r2,r19,r2
   a64f0:	d8800415 	stw	r2,16(sp)
   a64f4:	dc800615 	stw	r18,24(sp)
   a64f8:	a80b883a 	mov	r5,r21
   a64fc:	8009883a 	mov	r4,r16
   a6500:	00a54a00 	call	a54a0 <quorem>
   a6504:	880b883a 	mov	r5,r17
   a6508:	8009883a 	mov	r4,r16
   a650c:	102f883a 	mov	r23,r2
   a6510:	00a81600 	call	a8160 <__mcmp>
   a6514:	a80b883a 	mov	r5,r21
   a6518:	a00d883a 	mov	r6,r20
   a651c:	e009883a 	mov	r4,fp
   a6520:	102d883a 	mov	r22,r2
   a6524:	00a81c00 	call	a81c0 <__mdiff>
   a6528:	1007883a 	mov	r3,r2
   a652c:	10800317 	ldw	r2,12(r2)
   a6530:	bc800c04 	addi	r18,r23,48
   a6534:	180b883a 	mov	r5,r3
   a6538:	10004e1e 	bne	r2,zero,a6674 <_dtoa_r+0xfac>
   a653c:	8009883a 	mov	r4,r16
   a6540:	d8c01615 	stw	r3,88(sp)
   a6544:	00a81600 	call	a8160 <__mcmp>
   a6548:	d8c01617 	ldw	r3,88(sp)
   a654c:	e009883a 	mov	r4,fp
   a6550:	d8801615 	stw	r2,88(sp)
   a6554:	180b883a 	mov	r5,r3
   a6558:	00a78840 	call	a7884 <_Bfree>
   a655c:	d8801617 	ldw	r2,88(sp)
   a6560:	1000041e 	bne	r2,zero,a6574 <_dtoa_r+0xeac>
   a6564:	d9800317 	ldw	r6,12(sp)
   a6568:	3000021e 	bne	r6,zero,a6574 <_dtoa_r+0xeac>
   a656c:	d8c00617 	ldw	r3,24(sp)
   a6570:	18003726 	beq	r3,zero,a6650 <_dtoa_r+0xf88>
   a6574:	b0002016 	blt	r22,zero,a65f8 <_dtoa_r+0xf30>
   a6578:	b000041e 	bne	r22,zero,a658c <_dtoa_r+0xec4>
   a657c:	d9000317 	ldw	r4,12(sp)
   a6580:	2000021e 	bne	r4,zero,a658c <_dtoa_r+0xec4>
   a6584:	d8c00617 	ldw	r3,24(sp)
   a6588:	18001b26 	beq	r3,zero,a65f8 <_dtoa_r+0xf30>
   a658c:	00810716 	blt	zero,r2,a69ac <_dtoa_r+0x12e4>
   a6590:	d8c00417 	ldw	r3,16(sp)
   a6594:	9d800044 	addi	r22,r19,1
   a6598:	9c800005 	stb	r18,0(r19)
   a659c:	b02f883a 	mov	r23,r22
   a65a0:	98c10626 	beq	r19,r3,a69bc <_dtoa_r+0x12f4>
   a65a4:	800b883a 	mov	r5,r16
   a65a8:	000f883a 	mov	r7,zero
   a65ac:	01800284 	movi	r6,10
   a65b0:	e009883a 	mov	r4,fp
   a65b4:	00a78ac0 	call	a78ac <__multadd>
   a65b8:	1021883a 	mov	r16,r2
   a65bc:	000f883a 	mov	r7,zero
   a65c0:	01800284 	movi	r6,10
   a65c4:	880b883a 	mov	r5,r17
   a65c8:	e009883a 	mov	r4,fp
   a65cc:	8d002526 	beq	r17,r20,a6664 <_dtoa_r+0xf9c>
   a65d0:	00a78ac0 	call	a78ac <__multadd>
   a65d4:	a00b883a 	mov	r5,r20
   a65d8:	000f883a 	mov	r7,zero
   a65dc:	01800284 	movi	r6,10
   a65e0:	e009883a 	mov	r4,fp
   a65e4:	1023883a 	mov	r17,r2
   a65e8:	00a78ac0 	call	a78ac <__multadd>
   a65ec:	1029883a 	mov	r20,r2
   a65f0:	b027883a 	mov	r19,r22
   a65f4:	003fc006 	br	a64f8 <__alt_data_end+0xfffe64f8>
   a65f8:	9011883a 	mov	r8,r18
   a65fc:	00800e0e 	bge	zero,r2,a6638 <_dtoa_r+0xf70>
   a6600:	800b883a 	mov	r5,r16
   a6604:	01800044 	movi	r6,1
   a6608:	e009883a 	mov	r4,fp
   a660c:	da001715 	stw	r8,92(sp)
   a6610:	00a80180 	call	a8018 <__lshift>
   a6614:	a80b883a 	mov	r5,r21
   a6618:	1009883a 	mov	r4,r2
   a661c:	1021883a 	mov	r16,r2
   a6620:	00a81600 	call	a8160 <__mcmp>
   a6624:	da001717 	ldw	r8,92(sp)
   a6628:	0081960e 	bge	zero,r2,a6c84 <_dtoa_r+0x15bc>
   a662c:	00800e44 	movi	r2,57
   a6630:	40817026 	beq	r8,r2,a6bf4 <_dtoa_r+0x152c>
   a6634:	ba000c44 	addi	r8,r23,49
   a6638:	8825883a 	mov	r18,r17
   a663c:	9dc00044 	addi	r23,r19,1
   a6640:	9a000005 	stb	r8,0(r19)
   a6644:	a023883a 	mov	r17,r20
   a6648:	dc000915 	stw	r16,36(sp)
   a664c:	003f2406 	br	a62e0 <__alt_data_end+0xfffe62e0>
   a6650:	00800e44 	movi	r2,57
   a6654:	9011883a 	mov	r8,r18
   a6658:	90816626 	beq	r18,r2,a6bf4 <_dtoa_r+0x152c>
   a665c:	05bff516 	blt	zero,r22,a6634 <__alt_data_end+0xfffe6634>
   a6660:	003ff506 	br	a6638 <__alt_data_end+0xfffe6638>
   a6664:	00a78ac0 	call	a78ac <__multadd>
   a6668:	1023883a 	mov	r17,r2
   a666c:	1029883a 	mov	r20,r2
   a6670:	003fdf06 	br	a65f0 <__alt_data_end+0xfffe65f0>
   a6674:	e009883a 	mov	r4,fp
   a6678:	00a78840 	call	a7884 <_Bfree>
   a667c:	00800044 	movi	r2,1
   a6680:	003fbc06 	br	a6574 <__alt_data_end+0xfffe6574>
   a6684:	a80b883a 	mov	r5,r21
   a6688:	8009883a 	mov	r4,r16
   a668c:	00a81600 	call	a8160 <__mcmp>
   a6690:	103edb0e 	bge	r2,zero,a6200 <__alt_data_end+0xfffe6200>
   a6694:	800b883a 	mov	r5,r16
   a6698:	000f883a 	mov	r7,zero
   a669c:	01800284 	movi	r6,10
   a66a0:	e009883a 	mov	r4,fp
   a66a4:	00a78ac0 	call	a78ac <__multadd>
   a66a8:	1021883a 	mov	r16,r2
   a66ac:	d8800517 	ldw	r2,20(sp)
   a66b0:	d8c00b17 	ldw	r3,44(sp)
   a66b4:	10bfffc4 	addi	r2,r2,-1
   a66b8:	d8800515 	stw	r2,20(sp)
   a66bc:	183f761e 	bne	r3,zero,a6498 <__alt_data_end+0xfffe6498>
   a66c0:	d9000c17 	ldw	r4,48(sp)
   a66c4:	0101730e 	bge	zero,r4,a6c94 <_dtoa_r+0x15cc>
   a66c8:	d9000615 	stw	r4,24(sp)
   a66cc:	003ed006 	br	a6210 <__alt_data_end+0xfffe6210>
   a66d0:	00800084 	movi	r2,2
   a66d4:	3081861e 	bne	r6,r2,a6cf0 <_dtoa_r+0x1628>
   a66d8:	d8000b15 	stw	zero,44(sp)
   a66dc:	003f3c06 	br	a63d0 <__alt_data_end+0xfffe63d0>
   a66e0:	dc000917 	ldw	r16,36(sp)
   a66e4:	003e9206 	br	a6130 <__alt_data_end+0xfffe6130>
   a66e8:	d9c00317 	ldw	r7,12(sp)
   a66ec:	00800084 	movi	r2,2
   a66f0:	11fec50e 	bge	r2,r7,a6208 <__alt_data_end+0xfffe6208>
   a66f4:	d9000617 	ldw	r4,24(sp)
   a66f8:	20013c1e 	bne	r4,zero,a6bec <_dtoa_r+0x1524>
   a66fc:	a80b883a 	mov	r5,r21
   a6700:	000f883a 	mov	r7,zero
   a6704:	01800144 	movi	r6,5
   a6708:	e009883a 	mov	r4,fp
   a670c:	00a78ac0 	call	a78ac <__multadd>
   a6710:	100b883a 	mov	r5,r2
   a6714:	8009883a 	mov	r4,r16
   a6718:	102b883a 	mov	r21,r2
   a671c:	00a81600 	call	a8160 <__mcmp>
   a6720:	dc000915 	stw	r16,36(sp)
   a6724:	00bf410e 	bge	zero,r2,a642c <__alt_data_end+0xfffe642c>
   a6728:	d9c00717 	ldw	r7,28(sp)
   a672c:	00800c44 	movi	r2,49
   a6730:	38800005 	stb	r2,0(r7)
   a6734:	d8800517 	ldw	r2,20(sp)
   a6738:	3dc00044 	addi	r23,r7,1
   a673c:	10800044 	addi	r2,r2,1
   a6740:	d8800515 	stw	r2,20(sp)
   a6744:	003f3d06 	br	a643c <__alt_data_end+0xfffe643c>
   a6748:	d9800517 	ldw	r6,20(sp)
   a674c:	d9c00717 	ldw	r7,28(sp)
   a6750:	00800c44 	movi	r2,49
   a6754:	31800044 	addi	r6,r6,1
   a6758:	d9800515 	stw	r6,20(sp)
   a675c:	38800005 	stb	r2,0(r7)
   a6760:	003edf06 	br	a62e0 <__alt_data_end+0xfffe62e0>
   a6764:	d8000b15 	stw	zero,44(sp)
   a6768:	003c9f06 	br	a59e8 <__alt_data_end+0xfffe59e8>
   a676c:	903e7e1e 	bne	r18,zero,a6168 <__alt_data_end+0xfffe6168>
   a6770:	00800434 	movhi	r2,16
   a6774:	10bfffc4 	addi	r2,r2,-1
   a6778:	9884703a 	and	r2,r19,r2
   a677c:	1000ea1e 	bne	r2,zero,a6b28 <_dtoa_r+0x1460>
   a6780:	9cdffc2c 	andhi	r19,r19,32752
   a6784:	9800e826 	beq	r19,zero,a6b28 <_dtoa_r+0x1460>
   a6788:	d9c00817 	ldw	r7,32(sp)
   a678c:	b5800044 	addi	r22,r22,1
   a6790:	04c00044 	movi	r19,1
   a6794:	39c00044 	addi	r7,r7,1
   a6798:	d9c00815 	stw	r7,32(sp)
   a679c:	d8800d17 	ldw	r2,52(sp)
   a67a0:	103e721e 	bne	r2,zero,a616c <__alt_data_end+0xfffe616c>
   a67a4:	00800044 	movi	r2,1
   a67a8:	003e7906 	br	a6190 <__alt_data_end+0xfffe6190>
   a67ac:	8009883a 	mov	r4,r16
   a67b0:	00adfc40 	call	adfc4 <__floatsidf>
   a67b4:	d9800f17 	ldw	r6,60(sp)
   a67b8:	d9c01017 	ldw	r7,64(sp)
   a67bc:	1009883a 	mov	r4,r2
   a67c0:	180b883a 	mov	r5,r3
   a67c4:	00acddc0 	call	acddc <__muldf3>
   a67c8:	000d883a 	mov	r6,zero
   a67cc:	01d00734 	movhi	r7,16412
   a67d0:	1009883a 	mov	r4,r2
   a67d4:	180b883a 	mov	r5,r3
   a67d8:	00ab9080 	call	ab908 <__adddf3>
   a67dc:	047f3034 	movhi	r17,64704
   a67e0:	1021883a 	mov	r16,r2
   a67e4:	1c63883a 	add	r17,r3,r17
   a67e8:	d9000f17 	ldw	r4,60(sp)
   a67ec:	d9401017 	ldw	r5,64(sp)
   a67f0:	000d883a 	mov	r6,zero
   a67f4:	01d00534 	movhi	r7,16404
   a67f8:	00ad6480 	call	ad648 <__subdf3>
   a67fc:	800d883a 	mov	r6,r16
   a6800:	880f883a 	mov	r7,r17
   a6804:	1009883a 	mov	r4,r2
   a6808:	180b883a 	mov	r5,r3
   a680c:	102b883a 	mov	r21,r2
   a6810:	1829883a 	mov	r20,r3
   a6814:	00acc0c0 	call	acc0c <__gedf2>
   a6818:	00806c16 	blt	zero,r2,a69cc <_dtoa_r+0x1304>
   a681c:	89e0003c 	xorhi	r7,r17,32768
   a6820:	800d883a 	mov	r6,r16
   a6824:	a809883a 	mov	r4,r21
   a6828:	a00b883a 	mov	r5,r20
   a682c:	00acce80 	call	acce8 <__ledf2>
   a6830:	103d7e0e 	bge	r2,zero,a5e2c <__alt_data_end+0xfffe5e2c>
   a6834:	002b883a 	mov	r21,zero
   a6838:	0023883a 	mov	r17,zero
   a683c:	003efb06 	br	a642c <__alt_data_end+0xfffe642c>
   a6840:	d8800717 	ldw	r2,28(sp)
   a6844:	003bd006 	br	a5788 <__alt_data_end+0xfffe5788>
   a6848:	d9000a17 	ldw	r4,40(sp)
   a684c:	d9800d17 	ldw	r6,52(sp)
   a6850:	dd400a15 	stw	r21,40(sp)
   a6854:	a905c83a 	sub	r2,r21,r4
   a6858:	308d883a 	add	r6,r6,r2
   a685c:	d9800d15 	stw	r6,52(sp)
   a6860:	002b883a 	mov	r21,zero
   a6864:	003e0606 	br	a6080 <__alt_data_end+0xfffe6080>
   a6868:	9023883a 	mov	r17,r18
   a686c:	9829883a 	mov	r20,r19
   a6870:	04000084 	movi	r16,2
   a6874:	003c9206 	br	a5ac0 <__alt_data_end+0xfffe5ac0>
   a6878:	04000044 	movi	r16,1
   a687c:	dc000c15 	stw	r16,48(sp)
   a6880:	dc000615 	stw	r16,24(sp)
   a6884:	dc002215 	stw	r16,136(sp)
   a6888:	e0001115 	stw	zero,68(fp)
   a688c:	000b883a 	mov	r5,zero
   a6890:	003c6906 	br	a5a38 <__alt_data_end+0xfffe5a38>
   a6894:	3021883a 	mov	r16,r6
   a6898:	003ffb06 	br	a6888 <__alt_data_end+0xfffe6888>
   a689c:	1000021e 	bne	r2,zero,a68a8 <_dtoa_r+0x11e0>
   a68a0:	4200004c 	andi	r8,r8,1
   a68a4:	403e7d1e 	bne	r8,zero,a629c <__alt_data_end+0xfffe629c>
   a68a8:	01000c04 	movi	r4,48
   a68ac:	00000106 	br	a68b4 <_dtoa_r+0x11ec>
   a68b0:	102f883a 	mov	r23,r2
   a68b4:	b8bfffc4 	addi	r2,r23,-1
   a68b8:	10c00007 	ldb	r3,0(r2)
   a68bc:	193ffc26 	beq	r3,r4,a68b0 <__alt_data_end+0xfffe68b0>
   a68c0:	003e8706 	br	a62e0 <__alt_data_end+0xfffe62e0>
   a68c4:	d8800517 	ldw	r2,20(sp)
   a68c8:	00a3c83a 	sub	r17,zero,r2
   a68cc:	8800a426 	beq	r17,zero,a6b60 <_dtoa_r+0x1498>
   a68d0:	888003cc 	andi	r2,r17,15
   a68d4:	100490fa 	slli	r2,r2,3
   a68d8:	00c002f4 	movhi	r3,11
   a68dc:	18c53704 	addi	r3,r3,5340
   a68e0:	1885883a 	add	r2,r3,r2
   a68e4:	11800017 	ldw	r6,0(r2)
   a68e8:	11c00117 	ldw	r7,4(r2)
   a68ec:	9009883a 	mov	r4,r18
   a68f0:	980b883a 	mov	r5,r19
   a68f4:	8823d13a 	srai	r17,r17,4
   a68f8:	00acddc0 	call	acddc <__muldf3>
   a68fc:	d8800f15 	stw	r2,60(sp)
   a6900:	d8c01015 	stw	r3,64(sp)
   a6904:	8800e826 	beq	r17,zero,a6ca8 <_dtoa_r+0x15e0>
   a6908:	050002f4 	movhi	r20,11
   a690c:	a5052d04 	addi	r20,r20,5300
   a6910:	04000084 	movi	r16,2
   a6914:	8980004c 	andi	r6,r17,1
   a6918:	1009883a 	mov	r4,r2
   a691c:	8823d07a 	srai	r17,r17,1
   a6920:	180b883a 	mov	r5,r3
   a6924:	30000426 	beq	r6,zero,a6938 <_dtoa_r+0x1270>
   a6928:	a1800017 	ldw	r6,0(r20)
   a692c:	a1c00117 	ldw	r7,4(r20)
   a6930:	84000044 	addi	r16,r16,1
   a6934:	00acddc0 	call	acddc <__muldf3>
   a6938:	a5000204 	addi	r20,r20,8
   a693c:	883ff51e 	bne	r17,zero,a6914 <__alt_data_end+0xfffe6914>
   a6940:	d8800f15 	stw	r2,60(sp)
   a6944:	d8c01015 	stw	r3,64(sp)
   a6948:	003c7606 	br	a5b24 <__alt_data_end+0xfffe5b24>
   a694c:	00c00c04 	movi	r3,48
   a6950:	10c00005 	stb	r3,0(r2)
   a6954:	d8c00517 	ldw	r3,20(sp)
   a6958:	bd3fffc3 	ldbu	r20,-1(r23)
   a695c:	18c00044 	addi	r3,r3,1
   a6960:	d8c00515 	stw	r3,20(sp)
   a6964:	003db906 	br	a604c <__alt_data_end+0xfffe604c>
   a6968:	89400117 	ldw	r5,4(r17)
   a696c:	e009883a 	mov	r4,fp
   a6970:	00a77dc0 	call	a77dc <_Balloc>
   a6974:	89800417 	ldw	r6,16(r17)
   a6978:	89400304 	addi	r5,r17,12
   a697c:	11000304 	addi	r4,r2,12
   a6980:	31800084 	addi	r6,r6,2
   a6984:	318d883a 	add	r6,r6,r6
   a6988:	318d883a 	add	r6,r6,r6
   a698c:	1027883a 	mov	r19,r2
   a6990:	00a75380 	call	a7538 <memcpy>
   a6994:	01800044 	movi	r6,1
   a6998:	980b883a 	mov	r5,r19
   a699c:	e009883a 	mov	r4,fp
   a69a0:	00a80180 	call	a8018 <__lshift>
   a69a4:	1029883a 	mov	r20,r2
   a69a8:	003ecc06 	br	a64dc <__alt_data_end+0xfffe64dc>
   a69ac:	00800e44 	movi	r2,57
   a69b0:	90809026 	beq	r18,r2,a6bf4 <_dtoa_r+0x152c>
   a69b4:	92000044 	addi	r8,r18,1
   a69b8:	003f1f06 	br	a6638 <__alt_data_end+0xfffe6638>
   a69bc:	9011883a 	mov	r8,r18
   a69c0:	8825883a 	mov	r18,r17
   a69c4:	a023883a 	mov	r17,r20
   a69c8:	003e2906 	br	a6270 <__alt_data_end+0xfffe6270>
   a69cc:	002b883a 	mov	r21,zero
   a69d0:	0023883a 	mov	r17,zero
   a69d4:	003f5406 	br	a6728 <__alt_data_end+0xfffe6728>
   a69d8:	61bfffc4 	addi	r6,r12,-1
   a69dc:	300490fa 	slli	r2,r6,3
   a69e0:	00c002f4 	movhi	r3,11
   a69e4:	18c53704 	addi	r3,r3,5340
   a69e8:	1885883a 	add	r2,r3,r2
   a69ec:	11000017 	ldw	r4,0(r2)
   a69f0:	11400117 	ldw	r5,4(r2)
   a69f4:	d8800717 	ldw	r2,28(sp)
   a69f8:	880f883a 	mov	r7,r17
   a69fc:	d9801215 	stw	r6,72(sp)
   a6a00:	800d883a 	mov	r6,r16
   a6a04:	db001615 	stw	r12,88(sp)
   a6a08:	15c00044 	addi	r23,r2,1
   a6a0c:	00acddc0 	call	acddc <__muldf3>
   a6a10:	d9401017 	ldw	r5,64(sp)
   a6a14:	d9000f17 	ldw	r4,60(sp)
   a6a18:	d8c01515 	stw	r3,84(sp)
   a6a1c:	d8801415 	stw	r2,80(sp)
   a6a20:	00adf440 	call	adf44 <__fixdfsi>
   a6a24:	1009883a 	mov	r4,r2
   a6a28:	1021883a 	mov	r16,r2
   a6a2c:	00adfc40 	call	adfc4 <__floatsidf>
   a6a30:	d9000f17 	ldw	r4,60(sp)
   a6a34:	d9401017 	ldw	r5,64(sp)
   a6a38:	100d883a 	mov	r6,r2
   a6a3c:	180f883a 	mov	r7,r3
   a6a40:	00ad6480 	call	ad648 <__subdf3>
   a6a44:	1829883a 	mov	r20,r3
   a6a48:	d8c00717 	ldw	r3,28(sp)
   a6a4c:	84000c04 	addi	r16,r16,48
   a6a50:	1023883a 	mov	r17,r2
   a6a54:	1c000005 	stb	r16,0(r3)
   a6a58:	db001617 	ldw	r12,88(sp)
   a6a5c:	00800044 	movi	r2,1
   a6a60:	60802226 	beq	r12,r2,a6aec <_dtoa_r+0x1424>
   a6a64:	d9c00717 	ldw	r7,28(sp)
   a6a68:	8805883a 	mov	r2,r17
   a6a6c:	b82b883a 	mov	r21,r23
   a6a70:	3b19883a 	add	r12,r7,r12
   a6a74:	6023883a 	mov	r17,r12
   a6a78:	a007883a 	mov	r3,r20
   a6a7c:	dc800f15 	stw	r18,60(sp)
   a6a80:	000d883a 	mov	r6,zero
   a6a84:	01d00934 	movhi	r7,16420
   a6a88:	1009883a 	mov	r4,r2
   a6a8c:	180b883a 	mov	r5,r3
   a6a90:	00acddc0 	call	acddc <__muldf3>
   a6a94:	180b883a 	mov	r5,r3
   a6a98:	1009883a 	mov	r4,r2
   a6a9c:	1829883a 	mov	r20,r3
   a6aa0:	1025883a 	mov	r18,r2
   a6aa4:	00adf440 	call	adf44 <__fixdfsi>
   a6aa8:	1009883a 	mov	r4,r2
   a6aac:	1021883a 	mov	r16,r2
   a6ab0:	00adfc40 	call	adfc4 <__floatsidf>
   a6ab4:	100d883a 	mov	r6,r2
   a6ab8:	180f883a 	mov	r7,r3
   a6abc:	9009883a 	mov	r4,r18
   a6ac0:	a00b883a 	mov	r5,r20
   a6ac4:	84000c04 	addi	r16,r16,48
   a6ac8:	00ad6480 	call	ad648 <__subdf3>
   a6acc:	ad400044 	addi	r21,r21,1
   a6ad0:	ac3fffc5 	stb	r16,-1(r21)
   a6ad4:	ac7fea1e 	bne	r21,r17,a6a80 <__alt_data_end+0xfffe6a80>
   a6ad8:	1023883a 	mov	r17,r2
   a6adc:	d8801217 	ldw	r2,72(sp)
   a6ae0:	dc800f17 	ldw	r18,60(sp)
   a6ae4:	1829883a 	mov	r20,r3
   a6ae8:	b8af883a 	add	r23,r23,r2
   a6aec:	d9001417 	ldw	r4,80(sp)
   a6af0:	d9401517 	ldw	r5,84(sp)
   a6af4:	000d883a 	mov	r6,zero
   a6af8:	01cff834 	movhi	r7,16352
   a6afc:	00ab9080 	call	ab908 <__adddf3>
   a6b00:	880d883a 	mov	r6,r17
   a6b04:	a00f883a 	mov	r7,r20
   a6b08:	1009883a 	mov	r4,r2
   a6b0c:	180b883a 	mov	r5,r3
   a6b10:	00acce80 	call	acce8 <__ledf2>
   a6b14:	10003e0e 	bge	r2,zero,a6c10 <_dtoa_r+0x1548>
   a6b18:	d9001317 	ldw	r4,76(sp)
   a6b1c:	bd3fffc3 	ldbu	r20,-1(r23)
   a6b20:	d9000515 	stw	r4,20(sp)
   a6b24:	003d3b06 	br	a6014 <__alt_data_end+0xfffe6014>
   a6b28:	0027883a 	mov	r19,zero
   a6b2c:	003f1b06 	br	a679c <__alt_data_end+0xfffe679c>
   a6b30:	d8800817 	ldw	r2,32(sp)
   a6b34:	11e9c83a 	sub	r20,r2,r7
   a6b38:	0005883a 	mov	r2,zero
   a6b3c:	003d5406 	br	a6090 <__alt_data_end+0xfffe6090>
   a6b40:	00800044 	movi	r2,1
   a6b44:	003dc706 	br	a6264 <__alt_data_end+0xfffe6264>
   a6b48:	d8c00217 	ldw	r3,8(sp)
   a6b4c:	00800d84 	movi	r2,54
   a6b50:	dd400a17 	ldw	r21,40(sp)
   a6b54:	10c5c83a 	sub	r2,r2,r3
   a6b58:	dd000817 	ldw	r20,32(sp)
   a6b5c:	003d4c06 	br	a6090 <__alt_data_end+0xfffe6090>
   a6b60:	dc800f15 	stw	r18,60(sp)
   a6b64:	dcc01015 	stw	r19,64(sp)
   a6b68:	04000084 	movi	r16,2
   a6b6c:	003bed06 	br	a5b24 <__alt_data_end+0xfffe5b24>
   a6b70:	d9000617 	ldw	r4,24(sp)
   a6b74:	203f0d26 	beq	r4,zero,a67ac <__alt_data_end+0xfffe67ac>
   a6b78:	d9800c17 	ldw	r6,48(sp)
   a6b7c:	01bcab0e 	bge	zero,r6,a5e2c <__alt_data_end+0xfffe5e2c>
   a6b80:	d9401017 	ldw	r5,64(sp)
   a6b84:	d9000f17 	ldw	r4,60(sp)
   a6b88:	000d883a 	mov	r6,zero
   a6b8c:	01d00934 	movhi	r7,16420
   a6b90:	00acddc0 	call	acddc <__muldf3>
   a6b94:	81000044 	addi	r4,r16,1
   a6b98:	d8800f15 	stw	r2,60(sp)
   a6b9c:	d8c01015 	stw	r3,64(sp)
   a6ba0:	00adfc40 	call	adfc4 <__floatsidf>
   a6ba4:	d9800f17 	ldw	r6,60(sp)
   a6ba8:	d9c01017 	ldw	r7,64(sp)
   a6bac:	1009883a 	mov	r4,r2
   a6bb0:	180b883a 	mov	r5,r3
   a6bb4:	00acddc0 	call	acddc <__muldf3>
   a6bb8:	01d00734 	movhi	r7,16412
   a6bbc:	000d883a 	mov	r6,zero
   a6bc0:	1009883a 	mov	r4,r2
   a6bc4:	180b883a 	mov	r5,r3
   a6bc8:	00ab9080 	call	ab908 <__adddf3>
   a6bcc:	d9c00517 	ldw	r7,20(sp)
   a6bd0:	047f3034 	movhi	r17,64704
   a6bd4:	1021883a 	mov	r16,r2
   a6bd8:	39ffffc4 	addi	r7,r7,-1
   a6bdc:	d9c01315 	stw	r7,76(sp)
   a6be0:	1c63883a 	add	r17,r3,r17
   a6be4:	db000c17 	ldw	r12,48(sp)
   a6be8:	003bea06 	br	a5b94 <__alt_data_end+0xfffe5b94>
   a6bec:	dc000915 	stw	r16,36(sp)
   a6bf0:	003e0e06 	br	a642c <__alt_data_end+0xfffe642c>
   a6bf4:	01000e44 	movi	r4,57
   a6bf8:	8825883a 	mov	r18,r17
   a6bfc:	9dc00044 	addi	r23,r19,1
   a6c00:	99000005 	stb	r4,0(r19)
   a6c04:	a023883a 	mov	r17,r20
   a6c08:	dc000915 	stw	r16,36(sp)
   a6c0c:	003da406 	br	a62a0 <__alt_data_end+0xfffe62a0>
   a6c10:	d9801417 	ldw	r6,80(sp)
   a6c14:	d9c01517 	ldw	r7,84(sp)
   a6c18:	0009883a 	mov	r4,zero
   a6c1c:	014ff834 	movhi	r5,16352
   a6c20:	00ad6480 	call	ad648 <__subdf3>
   a6c24:	880d883a 	mov	r6,r17
   a6c28:	a00f883a 	mov	r7,r20
   a6c2c:	1009883a 	mov	r4,r2
   a6c30:	180b883a 	mov	r5,r3
   a6c34:	00acc0c0 	call	acc0c <__gedf2>
   a6c38:	00bc7c0e 	bge	zero,r2,a5e2c <__alt_data_end+0xfffe5e2c>
   a6c3c:	01000c04 	movi	r4,48
   a6c40:	00000106 	br	a6c48 <_dtoa_r+0x1580>
   a6c44:	102f883a 	mov	r23,r2
   a6c48:	b8bfffc4 	addi	r2,r23,-1
   a6c4c:	10c00007 	ldb	r3,0(r2)
   a6c50:	193ffc26 	beq	r3,r4,a6c44 <__alt_data_end+0xfffe6c44>
   a6c54:	d9801317 	ldw	r6,76(sp)
   a6c58:	d9800515 	stw	r6,20(sp)
   a6c5c:	003c4406 	br	a5d70 <__alt_data_end+0xfffe5d70>
   a6c60:	d9801317 	ldw	r6,76(sp)
   a6c64:	d9800515 	stw	r6,20(sp)
   a6c68:	003cea06 	br	a6014 <__alt_data_end+0xfffe6014>
   a6c6c:	dd800f17 	ldw	r22,60(sp)
   a6c70:	dcc01017 	ldw	r19,64(sp)
   a6c74:	dc801217 	ldw	r18,72(sp)
   a6c78:	003c6c06 	br	a5e2c <__alt_data_end+0xfffe5e2c>
   a6c7c:	903e031e 	bne	r18,zero,a648c <__alt_data_end+0xfffe648c>
   a6c80:	003ebb06 	br	a6770 <__alt_data_end+0xfffe6770>
   a6c84:	103e6c1e 	bne	r2,zero,a6638 <__alt_data_end+0xfffe6638>
   a6c88:	4080004c 	andi	r2,r8,1
   a6c8c:	103e6a26 	beq	r2,zero,a6638 <__alt_data_end+0xfffe6638>
   a6c90:	003e6606 	br	a662c <__alt_data_end+0xfffe662c>
   a6c94:	d8c00317 	ldw	r3,12(sp)
   a6c98:	00800084 	movi	r2,2
   a6c9c:	10c02916 	blt	r2,r3,a6d44 <_dtoa_r+0x167c>
   a6ca0:	d9000c17 	ldw	r4,48(sp)
   a6ca4:	003e8806 	br	a66c8 <__alt_data_end+0xfffe66c8>
   a6ca8:	04000084 	movi	r16,2
   a6cac:	003b9d06 	br	a5b24 <__alt_data_end+0xfffe5b24>
   a6cb0:	d9001317 	ldw	r4,76(sp)
   a6cb4:	d9000515 	stw	r4,20(sp)
   a6cb8:	003cd606 	br	a6014 <__alt_data_end+0xfffe6014>
   a6cbc:	d8801317 	ldw	r2,76(sp)
   a6cc0:	d8800515 	stw	r2,20(sp)
   a6cc4:	003c2a06 	br	a5d70 <__alt_data_end+0xfffe5d70>
   a6cc8:	d9800317 	ldw	r6,12(sp)
   a6ccc:	00800084 	movi	r2,2
   a6cd0:	11801516 	blt	r2,r6,a6d28 <_dtoa_r+0x1660>
   a6cd4:	d9c00c17 	ldw	r7,48(sp)
   a6cd8:	d9c00615 	stw	r7,24(sp)
   a6cdc:	003df706 	br	a64bc <__alt_data_end+0xfffe64bc>
   a6ce0:	193d3926 	beq	r3,r4,a61c8 <__alt_data_end+0xfffe61c8>
   a6ce4:	00c00f04 	movi	r3,60
   a6ce8:	1885c83a 	sub	r2,r3,r2
   a6cec:	003ddf06 	br	a646c <__alt_data_end+0xfffe646c>
   a6cf0:	e009883a 	mov	r4,fp
   a6cf4:	e0001115 	stw	zero,68(fp)
   a6cf8:	000b883a 	mov	r5,zero
   a6cfc:	00a77dc0 	call	a77dc <_Balloc>
   a6d00:	d8800715 	stw	r2,28(sp)
   a6d04:	d8c00717 	ldw	r3,28(sp)
   a6d08:	00bfffc4 	movi	r2,-1
   a6d0c:	01000044 	movi	r4,1
   a6d10:	d8800c15 	stw	r2,48(sp)
   a6d14:	e0c01015 	stw	r3,64(fp)
   a6d18:	d9000b15 	stw	r4,44(sp)
   a6d1c:	d8800615 	stw	r2,24(sp)
   a6d20:	d8002215 	stw	zero,136(sp)
   a6d24:	003c4106 	br	a5e2c <__alt_data_end+0xfffe5e2c>
   a6d28:	d8c00c17 	ldw	r3,48(sp)
   a6d2c:	d8c00615 	stw	r3,24(sp)
   a6d30:	003e7006 	br	a66f4 <__alt_data_end+0xfffe66f4>
   a6d34:	04400044 	movi	r17,1
   a6d38:	003b2006 	br	a59bc <__alt_data_end+0xfffe59bc>
   a6d3c:	000b883a 	mov	r5,zero
   a6d40:	003b3d06 	br	a5a38 <__alt_data_end+0xfffe5a38>
   a6d44:	d8800c17 	ldw	r2,48(sp)
   a6d48:	d8800615 	stw	r2,24(sp)
   a6d4c:	003e6906 	br	a66f4 <__alt_data_end+0xfffe66f4>

000a6d50 <__sflags>:
   a6d50:	28800007 	ldb	r2,0(r5)
   a6d54:	00c01c84 	movi	r3,114
   a6d58:	10c02426 	beq	r2,r3,a6dec <__sflags+0x9c>
   a6d5c:	00c01dc4 	movi	r3,119
   a6d60:	10c01e26 	beq	r2,r3,a6ddc <__sflags+0x8c>
   a6d64:	00c01844 	movi	r3,97
   a6d68:	10c00426 	beq	r2,r3,a6d7c <__sflags+0x2c>
   a6d6c:	00800584 	movi	r2,22
   a6d70:	20800015 	stw	r2,0(r4)
   a6d74:	0005883a 	mov	r2,zero
   a6d78:	f800283a 	ret
   a6d7c:	02c08204 	movi	r11,520
   a6d80:	01000044 	movi	r4,1
   a6d84:	00804204 	movi	r2,264
   a6d88:	01c00ac4 	movi	r7,43
   a6d8c:	02bff8c4 	movi	r10,-29
   a6d90:	027fff04 	movi	r9,-4
   a6d94:	02001e04 	movi	r8,120
   a6d98:	29400044 	addi	r5,r5,1
   a6d9c:	28c00007 	ldb	r3,0(r5)
   a6da0:	18000626 	beq	r3,zero,a6dbc <__sflags+0x6c>
   a6da4:	19c00826 	beq	r3,r7,a6dc8 <__sflags+0x78>
   a6da8:	1a3ffb1e 	bne	r3,r8,a6d98 <__alt_data_end+0xfffe6d98>
   a6dac:	29400044 	addi	r5,r5,1
   a6db0:	28c00007 	ldb	r3,0(r5)
   a6db4:	21020014 	ori	r4,r4,2048
   a6db8:	183ffa1e 	bne	r3,zero,a6da4 <__alt_data_end+0xfffe6da4>
   a6dbc:	22c8b03a 	or	r4,r4,r11
   a6dc0:	31000015 	stw	r4,0(r6)
   a6dc4:	f800283a 	ret
   a6dc8:	1284703a 	and	r2,r2,r10
   a6dcc:	2248703a 	and	r4,r4,r9
   a6dd0:	10800414 	ori	r2,r2,16
   a6dd4:	21000094 	ori	r4,r4,2
   a6dd8:	003fef06 	br	a6d98 <__alt_data_end+0xfffe6d98>
   a6ddc:	02c18004 	movi	r11,1536
   a6de0:	01000044 	movi	r4,1
   a6de4:	00800204 	movi	r2,8
   a6de8:	003fe706 	br	a6d88 <__alt_data_end+0xfffe6d88>
   a6dec:	0017883a 	mov	r11,zero
   a6df0:	0009883a 	mov	r4,zero
   a6df4:	00800104 	movi	r2,4
   a6df8:	003fe306 	br	a6d88 <__alt_data_end+0xfffe6d88>

000a6dfc <__sfvwrite_r>:
   a6dfc:	30800217 	ldw	r2,8(r6)
   a6e00:	10006726 	beq	r2,zero,a6fa0 <__sfvwrite_r+0x1a4>
   a6e04:	28c0030b 	ldhu	r3,12(r5)
   a6e08:	defff404 	addi	sp,sp,-48
   a6e0c:	dd400715 	stw	r21,28(sp)
   a6e10:	dd000615 	stw	r20,24(sp)
   a6e14:	dc000215 	stw	r16,8(sp)
   a6e18:	dfc00b15 	stw	ra,44(sp)
   a6e1c:	df000a15 	stw	fp,40(sp)
   a6e20:	ddc00915 	stw	r23,36(sp)
   a6e24:	dd800815 	stw	r22,32(sp)
   a6e28:	dcc00515 	stw	r19,20(sp)
   a6e2c:	dc800415 	stw	r18,16(sp)
   a6e30:	dc400315 	stw	r17,12(sp)
   a6e34:	1880020c 	andi	r2,r3,8
   a6e38:	2821883a 	mov	r16,r5
   a6e3c:	202b883a 	mov	r21,r4
   a6e40:	3029883a 	mov	r20,r6
   a6e44:	10002726 	beq	r2,zero,a6ee4 <__sfvwrite_r+0xe8>
   a6e48:	28800417 	ldw	r2,16(r5)
   a6e4c:	10002526 	beq	r2,zero,a6ee4 <__sfvwrite_r+0xe8>
   a6e50:	1880008c 	andi	r2,r3,2
   a6e54:	a4400017 	ldw	r17,0(r20)
   a6e58:	10002a26 	beq	r2,zero,a6f04 <__sfvwrite_r+0x108>
   a6e5c:	05a00034 	movhi	r22,32768
   a6e60:	0027883a 	mov	r19,zero
   a6e64:	0025883a 	mov	r18,zero
   a6e68:	b5bf0004 	addi	r22,r22,-1024
   a6e6c:	980d883a 	mov	r6,r19
   a6e70:	a809883a 	mov	r4,r21
   a6e74:	90004626 	beq	r18,zero,a6f90 <__sfvwrite_r+0x194>
   a6e78:	900f883a 	mov	r7,r18
   a6e7c:	b480022e 	bgeu	r22,r18,a6e88 <__sfvwrite_r+0x8c>
   a6e80:	01e00034 	movhi	r7,32768
   a6e84:	39ff0004 	addi	r7,r7,-1024
   a6e88:	80800917 	ldw	r2,36(r16)
   a6e8c:	81400717 	ldw	r5,28(r16)
   a6e90:	103ee83a 	callr	r2
   a6e94:	00805a0e 	bge	zero,r2,a7000 <__sfvwrite_r+0x204>
   a6e98:	a0c00217 	ldw	r3,8(r20)
   a6e9c:	98a7883a 	add	r19,r19,r2
   a6ea0:	90a5c83a 	sub	r18,r18,r2
   a6ea4:	1885c83a 	sub	r2,r3,r2
   a6ea8:	a0800215 	stw	r2,8(r20)
   a6eac:	103fef1e 	bne	r2,zero,a6e6c <__alt_data_end+0xfffe6e6c>
   a6eb0:	0005883a 	mov	r2,zero
   a6eb4:	dfc00b17 	ldw	ra,44(sp)
   a6eb8:	df000a17 	ldw	fp,40(sp)
   a6ebc:	ddc00917 	ldw	r23,36(sp)
   a6ec0:	dd800817 	ldw	r22,32(sp)
   a6ec4:	dd400717 	ldw	r21,28(sp)
   a6ec8:	dd000617 	ldw	r20,24(sp)
   a6ecc:	dcc00517 	ldw	r19,20(sp)
   a6ed0:	dc800417 	ldw	r18,16(sp)
   a6ed4:	dc400317 	ldw	r17,12(sp)
   a6ed8:	dc000217 	ldw	r16,8(sp)
   a6edc:	dec00c04 	addi	sp,sp,48
   a6ee0:	f800283a 	ret
   a6ee4:	800b883a 	mov	r5,r16
   a6ee8:	a809883a 	mov	r4,r21
   a6eec:	00a52f80 	call	a52f8 <__swsetup_r>
   a6ef0:	1000ee1e 	bne	r2,zero,a72ac <__sfvwrite_r+0x4b0>
   a6ef4:	80c0030b 	ldhu	r3,12(r16)
   a6ef8:	a4400017 	ldw	r17,0(r20)
   a6efc:	1880008c 	andi	r2,r3,2
   a6f00:	103fd61e 	bne	r2,zero,a6e5c <__alt_data_end+0xfffe6e5c>
   a6f04:	1880004c 	andi	r2,r3,1
   a6f08:	1000421e 	bne	r2,zero,a7014 <__sfvwrite_r+0x218>
   a6f0c:	0039883a 	mov	fp,zero
   a6f10:	0025883a 	mov	r18,zero
   a6f14:	90001a26 	beq	r18,zero,a6f80 <__sfvwrite_r+0x184>
   a6f18:	1880800c 	andi	r2,r3,512
   a6f1c:	84c00217 	ldw	r19,8(r16)
   a6f20:	10002126 	beq	r2,zero,a6fa8 <__sfvwrite_r+0x1ac>
   a6f24:	982f883a 	mov	r23,r19
   a6f28:	94c09636 	bltu	r18,r19,a7184 <__sfvwrite_r+0x388>
   a6f2c:	1881200c 	andi	r2,r3,1152
   a6f30:	1000a11e 	bne	r2,zero,a71b8 <__sfvwrite_r+0x3bc>
   a6f34:	81000017 	ldw	r4,0(r16)
   a6f38:	b80d883a 	mov	r6,r23
   a6f3c:	e00b883a 	mov	r5,fp
   a6f40:	00a76800 	call	a7680 <memmove>
   a6f44:	80c00217 	ldw	r3,8(r16)
   a6f48:	81000017 	ldw	r4,0(r16)
   a6f4c:	9005883a 	mov	r2,r18
   a6f50:	1ce7c83a 	sub	r19,r3,r19
   a6f54:	25cf883a 	add	r7,r4,r23
   a6f58:	84c00215 	stw	r19,8(r16)
   a6f5c:	81c00015 	stw	r7,0(r16)
   a6f60:	a0c00217 	ldw	r3,8(r20)
   a6f64:	e0b9883a 	add	fp,fp,r2
   a6f68:	90a5c83a 	sub	r18,r18,r2
   a6f6c:	18a7c83a 	sub	r19,r3,r2
   a6f70:	a4c00215 	stw	r19,8(r20)
   a6f74:	983fce26 	beq	r19,zero,a6eb0 <__alt_data_end+0xfffe6eb0>
   a6f78:	80c0030b 	ldhu	r3,12(r16)
   a6f7c:	903fe61e 	bne	r18,zero,a6f18 <__alt_data_end+0xfffe6f18>
   a6f80:	8f000017 	ldw	fp,0(r17)
   a6f84:	8c800117 	ldw	r18,4(r17)
   a6f88:	8c400204 	addi	r17,r17,8
   a6f8c:	003fe106 	br	a6f14 <__alt_data_end+0xfffe6f14>
   a6f90:	8cc00017 	ldw	r19,0(r17)
   a6f94:	8c800117 	ldw	r18,4(r17)
   a6f98:	8c400204 	addi	r17,r17,8
   a6f9c:	003fb306 	br	a6e6c <__alt_data_end+0xfffe6e6c>
   a6fa0:	0005883a 	mov	r2,zero
   a6fa4:	f800283a 	ret
   a6fa8:	81000017 	ldw	r4,0(r16)
   a6fac:	80800417 	ldw	r2,16(r16)
   a6fb0:	11005a36 	bltu	r2,r4,a711c <__sfvwrite_r+0x320>
   a6fb4:	85c00517 	ldw	r23,20(r16)
   a6fb8:	95c05836 	bltu	r18,r23,a711c <__sfvwrite_r+0x320>
   a6fbc:	00a00034 	movhi	r2,32768
   a6fc0:	10bfffc4 	addi	r2,r2,-1
   a6fc4:	9009883a 	mov	r4,r18
   a6fc8:	1480012e 	bgeu	r2,r18,a6fd0 <__sfvwrite_r+0x1d4>
   a6fcc:	1009883a 	mov	r4,r2
   a6fd0:	b80b883a 	mov	r5,r23
   a6fd4:	00ab72c0 	call	ab72c <__divsi3>
   a6fd8:	b80b883a 	mov	r5,r23
   a6fdc:	1009883a 	mov	r4,r2
   a6fe0:	00ab8e00 	call	ab8e0 <__mulsi3>
   a6fe4:	81400717 	ldw	r5,28(r16)
   a6fe8:	80c00917 	ldw	r3,36(r16)
   a6fec:	100f883a 	mov	r7,r2
   a6ff0:	e00d883a 	mov	r6,fp
   a6ff4:	a809883a 	mov	r4,r21
   a6ff8:	183ee83a 	callr	r3
   a6ffc:	00bfd816 	blt	zero,r2,a6f60 <__alt_data_end+0xfffe6f60>
   a7000:	8080030b 	ldhu	r2,12(r16)
   a7004:	10801014 	ori	r2,r2,64
   a7008:	8080030d 	sth	r2,12(r16)
   a700c:	00bfffc4 	movi	r2,-1
   a7010:	003fa806 	br	a6eb4 <__alt_data_end+0xfffe6eb4>
   a7014:	0027883a 	mov	r19,zero
   a7018:	0011883a 	mov	r8,zero
   a701c:	0039883a 	mov	fp,zero
   a7020:	0025883a 	mov	r18,zero
   a7024:	90001f26 	beq	r18,zero,a70a4 <__sfvwrite_r+0x2a8>
   a7028:	40005a26 	beq	r8,zero,a7194 <__sfvwrite_r+0x398>
   a702c:	982d883a 	mov	r22,r19
   a7030:	94c0012e 	bgeu	r18,r19,a7038 <__sfvwrite_r+0x23c>
   a7034:	902d883a 	mov	r22,r18
   a7038:	81000017 	ldw	r4,0(r16)
   a703c:	80800417 	ldw	r2,16(r16)
   a7040:	b02f883a 	mov	r23,r22
   a7044:	81c00517 	ldw	r7,20(r16)
   a7048:	1100032e 	bgeu	r2,r4,a7058 <__sfvwrite_r+0x25c>
   a704c:	80c00217 	ldw	r3,8(r16)
   a7050:	38c7883a 	add	r3,r7,r3
   a7054:	1d801816 	blt	r3,r22,a70b8 <__sfvwrite_r+0x2bc>
   a7058:	b1c03e16 	blt	r22,r7,a7154 <__sfvwrite_r+0x358>
   a705c:	80800917 	ldw	r2,36(r16)
   a7060:	81400717 	ldw	r5,28(r16)
   a7064:	e00d883a 	mov	r6,fp
   a7068:	da000115 	stw	r8,4(sp)
   a706c:	a809883a 	mov	r4,r21
   a7070:	103ee83a 	callr	r2
   a7074:	102f883a 	mov	r23,r2
   a7078:	da000117 	ldw	r8,4(sp)
   a707c:	00bfe00e 	bge	zero,r2,a7000 <__alt_data_end+0xfffe7000>
   a7080:	9de7c83a 	sub	r19,r19,r23
   a7084:	98001f26 	beq	r19,zero,a7104 <__sfvwrite_r+0x308>
   a7088:	a0800217 	ldw	r2,8(r20)
   a708c:	e5f9883a 	add	fp,fp,r23
   a7090:	95e5c83a 	sub	r18,r18,r23
   a7094:	15efc83a 	sub	r23,r2,r23
   a7098:	a5c00215 	stw	r23,8(r20)
   a709c:	b83f8426 	beq	r23,zero,a6eb0 <__alt_data_end+0xfffe6eb0>
   a70a0:	903fe11e 	bne	r18,zero,a7028 <__alt_data_end+0xfffe7028>
   a70a4:	8f000017 	ldw	fp,0(r17)
   a70a8:	8c800117 	ldw	r18,4(r17)
   a70ac:	0011883a 	mov	r8,zero
   a70b0:	8c400204 	addi	r17,r17,8
   a70b4:	003fdb06 	br	a7024 <__alt_data_end+0xfffe7024>
   a70b8:	180d883a 	mov	r6,r3
   a70bc:	e00b883a 	mov	r5,fp
   a70c0:	da000115 	stw	r8,4(sp)
   a70c4:	d8c00015 	stw	r3,0(sp)
   a70c8:	00a76800 	call	a7680 <memmove>
   a70cc:	d8c00017 	ldw	r3,0(sp)
   a70d0:	80800017 	ldw	r2,0(r16)
   a70d4:	800b883a 	mov	r5,r16
   a70d8:	a809883a 	mov	r4,r21
   a70dc:	10c5883a 	add	r2,r2,r3
   a70e0:	80800015 	stw	r2,0(r16)
   a70e4:	d8c00015 	stw	r3,0(sp)
   a70e8:	00a099c0 	call	a099c <_fflush_r>
   a70ec:	d8c00017 	ldw	r3,0(sp)
   a70f0:	da000117 	ldw	r8,4(sp)
   a70f4:	103fc21e 	bne	r2,zero,a7000 <__alt_data_end+0xfffe7000>
   a70f8:	182f883a 	mov	r23,r3
   a70fc:	9de7c83a 	sub	r19,r19,r23
   a7100:	983fe11e 	bne	r19,zero,a7088 <__alt_data_end+0xfffe7088>
   a7104:	800b883a 	mov	r5,r16
   a7108:	a809883a 	mov	r4,r21
   a710c:	00a099c0 	call	a099c <_fflush_r>
   a7110:	103fbb1e 	bne	r2,zero,a7000 <__alt_data_end+0xfffe7000>
   a7114:	0011883a 	mov	r8,zero
   a7118:	003fdb06 	br	a7088 <__alt_data_end+0xfffe7088>
   a711c:	94c0012e 	bgeu	r18,r19,a7124 <__sfvwrite_r+0x328>
   a7120:	9027883a 	mov	r19,r18
   a7124:	980d883a 	mov	r6,r19
   a7128:	e00b883a 	mov	r5,fp
   a712c:	00a76800 	call	a7680 <memmove>
   a7130:	80800217 	ldw	r2,8(r16)
   a7134:	80c00017 	ldw	r3,0(r16)
   a7138:	14c5c83a 	sub	r2,r2,r19
   a713c:	1cc7883a 	add	r3,r3,r19
   a7140:	80800215 	stw	r2,8(r16)
   a7144:	80c00015 	stw	r3,0(r16)
   a7148:	10004326 	beq	r2,zero,a7258 <__sfvwrite_r+0x45c>
   a714c:	9805883a 	mov	r2,r19
   a7150:	003f8306 	br	a6f60 <__alt_data_end+0xfffe6f60>
   a7154:	b00d883a 	mov	r6,r22
   a7158:	e00b883a 	mov	r5,fp
   a715c:	da000115 	stw	r8,4(sp)
   a7160:	00a76800 	call	a7680 <memmove>
   a7164:	80800217 	ldw	r2,8(r16)
   a7168:	80c00017 	ldw	r3,0(r16)
   a716c:	da000117 	ldw	r8,4(sp)
   a7170:	1585c83a 	sub	r2,r2,r22
   a7174:	1dad883a 	add	r22,r3,r22
   a7178:	80800215 	stw	r2,8(r16)
   a717c:	85800015 	stw	r22,0(r16)
   a7180:	003fbf06 	br	a7080 <__alt_data_end+0xfffe7080>
   a7184:	81000017 	ldw	r4,0(r16)
   a7188:	9027883a 	mov	r19,r18
   a718c:	902f883a 	mov	r23,r18
   a7190:	003f6906 	br	a6f38 <__alt_data_end+0xfffe6f38>
   a7194:	900d883a 	mov	r6,r18
   a7198:	01400284 	movi	r5,10
   a719c:	e009883a 	mov	r4,fp
   a71a0:	00a74540 	call	a7454 <memchr>
   a71a4:	10003e26 	beq	r2,zero,a72a0 <__sfvwrite_r+0x4a4>
   a71a8:	10800044 	addi	r2,r2,1
   a71ac:	1727c83a 	sub	r19,r2,fp
   a71b0:	02000044 	movi	r8,1
   a71b4:	003f9d06 	br	a702c <__alt_data_end+0xfffe702c>
   a71b8:	80800517 	ldw	r2,20(r16)
   a71bc:	81400417 	ldw	r5,16(r16)
   a71c0:	81c00017 	ldw	r7,0(r16)
   a71c4:	10a7883a 	add	r19,r2,r2
   a71c8:	9885883a 	add	r2,r19,r2
   a71cc:	1026d7fa 	srli	r19,r2,31
   a71d0:	396dc83a 	sub	r22,r7,r5
   a71d4:	b1000044 	addi	r4,r22,1
   a71d8:	9885883a 	add	r2,r19,r2
   a71dc:	1027d07a 	srai	r19,r2,1
   a71e0:	2485883a 	add	r2,r4,r18
   a71e4:	980d883a 	mov	r6,r19
   a71e8:	9880022e 	bgeu	r19,r2,a71f4 <__sfvwrite_r+0x3f8>
   a71ec:	1027883a 	mov	r19,r2
   a71f0:	100d883a 	mov	r6,r2
   a71f4:	18c1000c 	andi	r3,r3,1024
   a71f8:	18001c26 	beq	r3,zero,a726c <__sfvwrite_r+0x470>
   a71fc:	300b883a 	mov	r5,r6
   a7200:	a809883a 	mov	r4,r21
   a7204:	00a1c240 	call	a1c24 <_malloc_r>
   a7208:	102f883a 	mov	r23,r2
   a720c:	10002926 	beq	r2,zero,a72b4 <__sfvwrite_r+0x4b8>
   a7210:	81400417 	ldw	r5,16(r16)
   a7214:	b00d883a 	mov	r6,r22
   a7218:	1009883a 	mov	r4,r2
   a721c:	00a75380 	call	a7538 <memcpy>
   a7220:	8080030b 	ldhu	r2,12(r16)
   a7224:	00fedfc4 	movi	r3,-1153
   a7228:	10c4703a 	and	r2,r2,r3
   a722c:	10802014 	ori	r2,r2,128
   a7230:	8080030d 	sth	r2,12(r16)
   a7234:	bd89883a 	add	r4,r23,r22
   a7238:	9d8fc83a 	sub	r7,r19,r22
   a723c:	85c00415 	stw	r23,16(r16)
   a7240:	84c00515 	stw	r19,20(r16)
   a7244:	81000015 	stw	r4,0(r16)
   a7248:	9027883a 	mov	r19,r18
   a724c:	81c00215 	stw	r7,8(r16)
   a7250:	902f883a 	mov	r23,r18
   a7254:	003f3806 	br	a6f38 <__alt_data_end+0xfffe6f38>
   a7258:	800b883a 	mov	r5,r16
   a725c:	a809883a 	mov	r4,r21
   a7260:	00a099c0 	call	a099c <_fflush_r>
   a7264:	103fb926 	beq	r2,zero,a714c <__alt_data_end+0xfffe714c>
   a7268:	003f6506 	br	a7000 <__alt_data_end+0xfffe7000>
   a726c:	a809883a 	mov	r4,r21
   a7270:	00a88f40 	call	a88f4 <_realloc_r>
   a7274:	102f883a 	mov	r23,r2
   a7278:	103fee1e 	bne	r2,zero,a7234 <__alt_data_end+0xfffe7234>
   a727c:	81400417 	ldw	r5,16(r16)
   a7280:	a809883a 	mov	r4,r21
   a7284:	00a10f40 	call	a10f4 <_free_r>
   a7288:	8080030b 	ldhu	r2,12(r16)
   a728c:	00ffdfc4 	movi	r3,-129
   a7290:	1884703a 	and	r2,r3,r2
   a7294:	00c00304 	movi	r3,12
   a7298:	a8c00015 	stw	r3,0(r21)
   a729c:	003f5906 	br	a7004 <__alt_data_end+0xfffe7004>
   a72a0:	94c00044 	addi	r19,r18,1
   a72a4:	02000044 	movi	r8,1
   a72a8:	003f6006 	br	a702c <__alt_data_end+0xfffe702c>
   a72ac:	00bfffc4 	movi	r2,-1
   a72b0:	003f0006 	br	a6eb4 <__alt_data_end+0xfffe6eb4>
   a72b4:	00800304 	movi	r2,12
   a72b8:	a8800015 	stw	r2,0(r21)
   a72bc:	8080030b 	ldhu	r2,12(r16)
   a72c0:	003f5006 	br	a7004 <__alt_data_end+0xfffe7004>

000a72c4 <_isatty_r>:
   a72c4:	defffd04 	addi	sp,sp,-12
   a72c8:	dc000015 	stw	r16,0(sp)
   a72cc:	040002f4 	movhi	r16,11
   a72d0:	dc400115 	stw	r17,4(sp)
   a72d4:	8413ad04 	addi	r16,r16,20148
   a72d8:	2023883a 	mov	r17,r4
   a72dc:	2809883a 	mov	r4,r5
   a72e0:	dfc00215 	stw	ra,8(sp)
   a72e4:	80000015 	stw	zero,0(r16)
   a72e8:	00ae41c0 	call	ae41c <isatty>
   a72ec:	00ffffc4 	movi	r3,-1
   a72f0:	10c00526 	beq	r2,r3,a7308 <_isatty_r+0x44>
   a72f4:	dfc00217 	ldw	ra,8(sp)
   a72f8:	dc400117 	ldw	r17,4(sp)
   a72fc:	dc000017 	ldw	r16,0(sp)
   a7300:	dec00304 	addi	sp,sp,12
   a7304:	f800283a 	ret
   a7308:	80c00017 	ldw	r3,0(r16)
   a730c:	183ff926 	beq	r3,zero,a72f4 <__alt_data_end+0xfffe72f4>
   a7310:	88c00015 	stw	r3,0(r17)
   a7314:	003ff706 	br	a72f4 <__alt_data_end+0xfffe72f4>

000a7318 <_setlocale_r>:
   a7318:	30001b26 	beq	r6,zero,a7388 <_setlocale_r+0x70>
   a731c:	014002f4 	movhi	r5,11
   a7320:	defffe04 	addi	sp,sp,-8
   a7324:	29451d04 	addi	r5,r5,5236
   a7328:	3009883a 	mov	r4,r6
   a732c:	dc000015 	stw	r16,0(sp)
   a7330:	dfc00115 	stw	ra,4(sp)
   a7334:	3021883a 	mov	r16,r6
   a7338:	00a8ecc0 	call	a8ecc <strcmp>
   a733c:	1000061e 	bne	r2,zero,a7358 <_setlocale_r+0x40>
   a7340:	008002f4 	movhi	r2,11
   a7344:	1084fe04 	addi	r2,r2,5112
   a7348:	dfc00117 	ldw	ra,4(sp)
   a734c:	dc000017 	ldw	r16,0(sp)
   a7350:	dec00204 	addi	sp,sp,8
   a7354:	f800283a 	ret
   a7358:	014002f4 	movhi	r5,11
   a735c:	2944fe04 	addi	r5,r5,5112
   a7360:	8009883a 	mov	r4,r16
   a7364:	00a8ecc0 	call	a8ecc <strcmp>
   a7368:	103ff526 	beq	r2,zero,a7340 <__alt_data_end+0xfffe7340>
   a736c:	014002f4 	movhi	r5,11
   a7370:	29450804 	addi	r5,r5,5152
   a7374:	8009883a 	mov	r4,r16
   a7378:	00a8ecc0 	call	a8ecc <strcmp>
   a737c:	103ff026 	beq	r2,zero,a7340 <__alt_data_end+0xfffe7340>
   a7380:	0005883a 	mov	r2,zero
   a7384:	003ff006 	br	a7348 <__alt_data_end+0xfffe7348>
   a7388:	008002f4 	movhi	r2,11
   a738c:	1084fe04 	addi	r2,r2,5112
   a7390:	f800283a 	ret

000a7394 <__locale_charset>:
   a7394:	008002f4 	movhi	r2,11
   a7398:	1087f204 	addi	r2,r2,8136
   a739c:	f800283a 	ret

000a73a0 <__locale_mb_cur_max>:
   a73a0:	008002f4 	movhi	r2,11
   a73a4:	108c9804 	addi	r2,r2,12896
   a73a8:	10800017 	ldw	r2,0(r2)
   a73ac:	f800283a 	ret

000a73b0 <__locale_msgcharset>:
   a73b0:	008002f4 	movhi	r2,11
   a73b4:	1087ea04 	addi	r2,r2,8104
   a73b8:	f800283a 	ret

000a73bc <__locale_cjk_lang>:
   a73bc:	0005883a 	mov	r2,zero
   a73c0:	f800283a 	ret

000a73c4 <_localeconv_r>:
   a73c4:	008002f4 	movhi	r2,11
   a73c8:	1087fa04 	addi	r2,r2,8168
   a73cc:	f800283a 	ret

000a73d0 <setlocale>:
   a73d0:	008002f4 	movhi	r2,11
   a73d4:	108c9504 	addi	r2,r2,12884
   a73d8:	280d883a 	mov	r6,r5
   a73dc:	200b883a 	mov	r5,r4
   a73e0:	11000017 	ldw	r4,0(r2)
   a73e4:	00a73181 	jmpi	a7318 <_setlocale_r>

000a73e8 <localeconv>:
   a73e8:	008002f4 	movhi	r2,11
   a73ec:	1087fa04 	addi	r2,r2,8168
   a73f0:	f800283a 	ret

000a73f4 <_lseek_r>:
   a73f4:	defffd04 	addi	sp,sp,-12
   a73f8:	2805883a 	mov	r2,r5
   a73fc:	dc000015 	stw	r16,0(sp)
   a7400:	040002f4 	movhi	r16,11
   a7404:	dc400115 	stw	r17,4(sp)
   a7408:	300b883a 	mov	r5,r6
   a740c:	8413ad04 	addi	r16,r16,20148
   a7410:	2023883a 	mov	r17,r4
   a7414:	380d883a 	mov	r6,r7
   a7418:	1009883a 	mov	r4,r2
   a741c:	dfc00215 	stw	ra,8(sp)
   a7420:	80000015 	stw	zero,0(r16)
   a7424:	00ae5f00 	call	ae5f0 <lseek>
   a7428:	00ffffc4 	movi	r3,-1
   a742c:	10c00526 	beq	r2,r3,a7444 <_lseek_r+0x50>
   a7430:	dfc00217 	ldw	ra,8(sp)
   a7434:	dc400117 	ldw	r17,4(sp)
   a7438:	dc000017 	ldw	r16,0(sp)
   a743c:	dec00304 	addi	sp,sp,12
   a7440:	f800283a 	ret
   a7444:	80c00017 	ldw	r3,0(r16)
   a7448:	183ff926 	beq	r3,zero,a7430 <__alt_data_end+0xfffe7430>
   a744c:	88c00015 	stw	r3,0(r17)
   a7450:	003ff706 	br	a7430 <__alt_data_end+0xfffe7430>

000a7454 <memchr>:
   a7454:	208000cc 	andi	r2,r4,3
   a7458:	280f883a 	mov	r7,r5
   a745c:	10003426 	beq	r2,zero,a7530 <memchr+0xdc>
   a7460:	30bfffc4 	addi	r2,r6,-1
   a7464:	30001a26 	beq	r6,zero,a74d0 <memchr+0x7c>
   a7468:	20c00003 	ldbu	r3,0(r4)
   a746c:	29803fcc 	andi	r6,r5,255
   a7470:	30c0051e 	bne	r6,r3,a7488 <memchr+0x34>
   a7474:	00001806 	br	a74d8 <memchr+0x84>
   a7478:	10001526 	beq	r2,zero,a74d0 <memchr+0x7c>
   a747c:	20c00003 	ldbu	r3,0(r4)
   a7480:	10bfffc4 	addi	r2,r2,-1
   a7484:	30c01426 	beq	r6,r3,a74d8 <memchr+0x84>
   a7488:	21000044 	addi	r4,r4,1
   a748c:	20c000cc 	andi	r3,r4,3
   a7490:	183ff91e 	bne	r3,zero,a7478 <__alt_data_end+0xfffe7478>
   a7494:	020000c4 	movi	r8,3
   a7498:	40801136 	bltu	r8,r2,a74e0 <memchr+0x8c>
   a749c:	10000c26 	beq	r2,zero,a74d0 <memchr+0x7c>
   a74a0:	20c00003 	ldbu	r3,0(r4)
   a74a4:	29403fcc 	andi	r5,r5,255
   a74a8:	28c00b26 	beq	r5,r3,a74d8 <memchr+0x84>
   a74ac:	20c00044 	addi	r3,r4,1
   a74b0:	39803fcc 	andi	r6,r7,255
   a74b4:	2089883a 	add	r4,r4,r2
   a74b8:	00000306 	br	a74c8 <memchr+0x74>
   a74bc:	18c00044 	addi	r3,r3,1
   a74c0:	197fffc3 	ldbu	r5,-1(r3)
   a74c4:	31400526 	beq	r6,r5,a74dc <memchr+0x88>
   a74c8:	1805883a 	mov	r2,r3
   a74cc:	20fffb1e 	bne	r4,r3,a74bc <__alt_data_end+0xfffe74bc>
   a74d0:	0005883a 	mov	r2,zero
   a74d4:	f800283a 	ret
   a74d8:	2005883a 	mov	r2,r4
   a74dc:	f800283a 	ret
   a74e0:	28c03fcc 	andi	r3,r5,255
   a74e4:	1812923a 	slli	r9,r3,8
   a74e8:	02ffbff4 	movhi	r11,65279
   a74ec:	02a02074 	movhi	r10,32897
   a74f0:	48d2b03a 	or	r9,r9,r3
   a74f4:	4806943a 	slli	r3,r9,16
   a74f8:	5affbfc4 	addi	r11,r11,-257
   a74fc:	52a02004 	addi	r10,r10,-32640
   a7500:	48d2b03a 	or	r9,r9,r3
   a7504:	20c00017 	ldw	r3,0(r4)
   a7508:	48c6f03a 	xor	r3,r9,r3
   a750c:	1acd883a 	add	r6,r3,r11
   a7510:	00c6303a 	nor	r3,zero,r3
   a7514:	30c6703a 	and	r3,r6,r3
   a7518:	1a86703a 	and	r3,r3,r10
   a751c:	183fe01e 	bne	r3,zero,a74a0 <__alt_data_end+0xfffe74a0>
   a7520:	10bfff04 	addi	r2,r2,-4
   a7524:	21000104 	addi	r4,r4,4
   a7528:	40bff636 	bltu	r8,r2,a7504 <__alt_data_end+0xfffe7504>
   a752c:	003fdb06 	br	a749c <__alt_data_end+0xfffe749c>
   a7530:	3005883a 	mov	r2,r6
   a7534:	003fd706 	br	a7494 <__alt_data_end+0xfffe7494>

000a7538 <memcpy>:
   a7538:	defffd04 	addi	sp,sp,-12
   a753c:	dfc00215 	stw	ra,8(sp)
   a7540:	dc400115 	stw	r17,4(sp)
   a7544:	dc000015 	stw	r16,0(sp)
   a7548:	00c003c4 	movi	r3,15
   a754c:	2005883a 	mov	r2,r4
   a7550:	1980452e 	bgeu	r3,r6,a7668 <memcpy+0x130>
   a7554:	2906b03a 	or	r3,r5,r4
   a7558:	18c000cc 	andi	r3,r3,3
   a755c:	1800441e 	bne	r3,zero,a7670 <memcpy+0x138>
   a7560:	347ffc04 	addi	r17,r6,-16
   a7564:	8822d13a 	srli	r17,r17,4
   a7568:	28c00104 	addi	r3,r5,4
   a756c:	23400104 	addi	r13,r4,4
   a7570:	8820913a 	slli	r16,r17,4
   a7574:	2b000204 	addi	r12,r5,8
   a7578:	22c00204 	addi	r11,r4,8
   a757c:	84000504 	addi	r16,r16,20
   a7580:	2a800304 	addi	r10,r5,12
   a7584:	22400304 	addi	r9,r4,12
   a7588:	2c21883a 	add	r16,r5,r16
   a758c:	2811883a 	mov	r8,r5
   a7590:	200f883a 	mov	r7,r4
   a7594:	41000017 	ldw	r4,0(r8)
   a7598:	1fc00017 	ldw	ra,0(r3)
   a759c:	63c00017 	ldw	r15,0(r12)
   a75a0:	39000015 	stw	r4,0(r7)
   a75a4:	53800017 	ldw	r14,0(r10)
   a75a8:	6fc00015 	stw	ra,0(r13)
   a75ac:	5bc00015 	stw	r15,0(r11)
   a75b0:	4b800015 	stw	r14,0(r9)
   a75b4:	18c00404 	addi	r3,r3,16
   a75b8:	39c00404 	addi	r7,r7,16
   a75bc:	42000404 	addi	r8,r8,16
   a75c0:	6b400404 	addi	r13,r13,16
   a75c4:	63000404 	addi	r12,r12,16
   a75c8:	5ac00404 	addi	r11,r11,16
   a75cc:	52800404 	addi	r10,r10,16
   a75d0:	4a400404 	addi	r9,r9,16
   a75d4:	1c3fef1e 	bne	r3,r16,a7594 <__alt_data_end+0xfffe7594>
   a75d8:	89c00044 	addi	r7,r17,1
   a75dc:	380e913a 	slli	r7,r7,4
   a75e0:	310003cc 	andi	r4,r6,15
   a75e4:	02c000c4 	movi	r11,3
   a75e8:	11c7883a 	add	r3,r2,r7
   a75ec:	29cb883a 	add	r5,r5,r7
   a75f0:	5900212e 	bgeu	r11,r4,a7678 <memcpy+0x140>
   a75f4:	1813883a 	mov	r9,r3
   a75f8:	2811883a 	mov	r8,r5
   a75fc:	200f883a 	mov	r7,r4
   a7600:	42800017 	ldw	r10,0(r8)
   a7604:	4a400104 	addi	r9,r9,4
   a7608:	39ffff04 	addi	r7,r7,-4
   a760c:	4abfff15 	stw	r10,-4(r9)
   a7610:	42000104 	addi	r8,r8,4
   a7614:	59fffa36 	bltu	r11,r7,a7600 <__alt_data_end+0xfffe7600>
   a7618:	213fff04 	addi	r4,r4,-4
   a761c:	2008d0ba 	srli	r4,r4,2
   a7620:	318000cc 	andi	r6,r6,3
   a7624:	21000044 	addi	r4,r4,1
   a7628:	2109883a 	add	r4,r4,r4
   a762c:	2109883a 	add	r4,r4,r4
   a7630:	1907883a 	add	r3,r3,r4
   a7634:	290b883a 	add	r5,r5,r4
   a7638:	30000626 	beq	r6,zero,a7654 <memcpy+0x11c>
   a763c:	198d883a 	add	r6,r3,r6
   a7640:	29c00003 	ldbu	r7,0(r5)
   a7644:	18c00044 	addi	r3,r3,1
   a7648:	29400044 	addi	r5,r5,1
   a764c:	19ffffc5 	stb	r7,-1(r3)
   a7650:	19bffb1e 	bne	r3,r6,a7640 <__alt_data_end+0xfffe7640>
   a7654:	dfc00217 	ldw	ra,8(sp)
   a7658:	dc400117 	ldw	r17,4(sp)
   a765c:	dc000017 	ldw	r16,0(sp)
   a7660:	dec00304 	addi	sp,sp,12
   a7664:	f800283a 	ret
   a7668:	2007883a 	mov	r3,r4
   a766c:	003ff206 	br	a7638 <__alt_data_end+0xfffe7638>
   a7670:	2007883a 	mov	r3,r4
   a7674:	003ff106 	br	a763c <__alt_data_end+0xfffe763c>
   a7678:	200d883a 	mov	r6,r4
   a767c:	003fee06 	br	a7638 <__alt_data_end+0xfffe7638>

000a7680 <memmove>:
   a7680:	2005883a 	mov	r2,r4
   a7684:	29000b2e 	bgeu	r5,r4,a76b4 <memmove+0x34>
   a7688:	298f883a 	add	r7,r5,r6
   a768c:	21c0092e 	bgeu	r4,r7,a76b4 <memmove+0x34>
   a7690:	2187883a 	add	r3,r4,r6
   a7694:	198bc83a 	sub	r5,r3,r6
   a7698:	30004826 	beq	r6,zero,a77bc <memmove+0x13c>
   a769c:	39ffffc4 	addi	r7,r7,-1
   a76a0:	39000003 	ldbu	r4,0(r7)
   a76a4:	18ffffc4 	addi	r3,r3,-1
   a76a8:	19000005 	stb	r4,0(r3)
   a76ac:	28fffb1e 	bne	r5,r3,a769c <__alt_data_end+0xfffe769c>
   a76b0:	f800283a 	ret
   a76b4:	00c003c4 	movi	r3,15
   a76b8:	1980412e 	bgeu	r3,r6,a77c0 <memmove+0x140>
   a76bc:	2886b03a 	or	r3,r5,r2
   a76c0:	18c000cc 	andi	r3,r3,3
   a76c4:	1800401e 	bne	r3,zero,a77c8 <memmove+0x148>
   a76c8:	33fffc04 	addi	r15,r6,-16
   a76cc:	781ed13a 	srli	r15,r15,4
   a76d0:	28c00104 	addi	r3,r5,4
   a76d4:	13400104 	addi	r13,r2,4
   a76d8:	781c913a 	slli	r14,r15,4
   a76dc:	2b000204 	addi	r12,r5,8
   a76e0:	12c00204 	addi	r11,r2,8
   a76e4:	73800504 	addi	r14,r14,20
   a76e8:	2a800304 	addi	r10,r5,12
   a76ec:	12400304 	addi	r9,r2,12
   a76f0:	2b9d883a 	add	r14,r5,r14
   a76f4:	2811883a 	mov	r8,r5
   a76f8:	100f883a 	mov	r7,r2
   a76fc:	41000017 	ldw	r4,0(r8)
   a7700:	39c00404 	addi	r7,r7,16
   a7704:	18c00404 	addi	r3,r3,16
   a7708:	393ffc15 	stw	r4,-16(r7)
   a770c:	193ffc17 	ldw	r4,-16(r3)
   a7710:	6b400404 	addi	r13,r13,16
   a7714:	5ac00404 	addi	r11,r11,16
   a7718:	693ffc15 	stw	r4,-16(r13)
   a771c:	61000017 	ldw	r4,0(r12)
   a7720:	4a400404 	addi	r9,r9,16
   a7724:	42000404 	addi	r8,r8,16
   a7728:	593ffc15 	stw	r4,-16(r11)
   a772c:	51000017 	ldw	r4,0(r10)
   a7730:	63000404 	addi	r12,r12,16
   a7734:	52800404 	addi	r10,r10,16
   a7738:	493ffc15 	stw	r4,-16(r9)
   a773c:	1bbfef1e 	bne	r3,r14,a76fc <__alt_data_end+0xfffe76fc>
   a7740:	79000044 	addi	r4,r15,1
   a7744:	2008913a 	slli	r4,r4,4
   a7748:	328003cc 	andi	r10,r6,15
   a774c:	02c000c4 	movi	r11,3
   a7750:	1107883a 	add	r3,r2,r4
   a7754:	290b883a 	add	r5,r5,r4
   a7758:	5a801e2e 	bgeu	r11,r10,a77d4 <memmove+0x154>
   a775c:	1813883a 	mov	r9,r3
   a7760:	2811883a 	mov	r8,r5
   a7764:	500f883a 	mov	r7,r10
   a7768:	41000017 	ldw	r4,0(r8)
   a776c:	4a400104 	addi	r9,r9,4
   a7770:	39ffff04 	addi	r7,r7,-4
   a7774:	493fff15 	stw	r4,-4(r9)
   a7778:	42000104 	addi	r8,r8,4
   a777c:	59fffa36 	bltu	r11,r7,a7768 <__alt_data_end+0xfffe7768>
   a7780:	513fff04 	addi	r4,r10,-4
   a7784:	2008d0ba 	srli	r4,r4,2
   a7788:	318000cc 	andi	r6,r6,3
   a778c:	21000044 	addi	r4,r4,1
   a7790:	2109883a 	add	r4,r4,r4
   a7794:	2109883a 	add	r4,r4,r4
   a7798:	1907883a 	add	r3,r3,r4
   a779c:	290b883a 	add	r5,r5,r4
   a77a0:	30000b26 	beq	r6,zero,a77d0 <memmove+0x150>
   a77a4:	198d883a 	add	r6,r3,r6
   a77a8:	29c00003 	ldbu	r7,0(r5)
   a77ac:	18c00044 	addi	r3,r3,1
   a77b0:	29400044 	addi	r5,r5,1
   a77b4:	19ffffc5 	stb	r7,-1(r3)
   a77b8:	19bffb1e 	bne	r3,r6,a77a8 <__alt_data_end+0xfffe77a8>
   a77bc:	f800283a 	ret
   a77c0:	1007883a 	mov	r3,r2
   a77c4:	003ff606 	br	a77a0 <__alt_data_end+0xfffe77a0>
   a77c8:	1007883a 	mov	r3,r2
   a77cc:	003ff506 	br	a77a4 <__alt_data_end+0xfffe77a4>
   a77d0:	f800283a 	ret
   a77d4:	500d883a 	mov	r6,r10
   a77d8:	003ff106 	br	a77a0 <__alt_data_end+0xfffe77a0>

000a77dc <_Balloc>:
   a77dc:	20801317 	ldw	r2,76(r4)
   a77e0:	defffc04 	addi	sp,sp,-16
   a77e4:	dc400115 	stw	r17,4(sp)
   a77e8:	dc000015 	stw	r16,0(sp)
   a77ec:	dfc00315 	stw	ra,12(sp)
   a77f0:	dc800215 	stw	r18,8(sp)
   a77f4:	2023883a 	mov	r17,r4
   a77f8:	2821883a 	mov	r16,r5
   a77fc:	10000f26 	beq	r2,zero,a783c <_Balloc+0x60>
   a7800:	8407883a 	add	r3,r16,r16
   a7804:	18c7883a 	add	r3,r3,r3
   a7808:	10c7883a 	add	r3,r2,r3
   a780c:	18800017 	ldw	r2,0(r3)
   a7810:	10001126 	beq	r2,zero,a7858 <_Balloc+0x7c>
   a7814:	11000017 	ldw	r4,0(r2)
   a7818:	19000015 	stw	r4,0(r3)
   a781c:	10000415 	stw	zero,16(r2)
   a7820:	10000315 	stw	zero,12(r2)
   a7824:	dfc00317 	ldw	ra,12(sp)
   a7828:	dc800217 	ldw	r18,8(sp)
   a782c:	dc400117 	ldw	r17,4(sp)
   a7830:	dc000017 	ldw	r16,0(sp)
   a7834:	dec00404 	addi	sp,sp,16
   a7838:	f800283a 	ret
   a783c:	01800844 	movi	r6,33
   a7840:	01400104 	movi	r5,4
   a7844:	00aa6a00 	call	aa6a0 <_calloc_r>
   a7848:	88801315 	stw	r2,76(r17)
   a784c:	103fec1e 	bne	r2,zero,a7800 <__alt_data_end+0xfffe7800>
   a7850:	0005883a 	mov	r2,zero
   a7854:	003ff306 	br	a7824 <__alt_data_end+0xfffe7824>
   a7858:	01400044 	movi	r5,1
   a785c:	2c24983a 	sll	r18,r5,r16
   a7860:	8809883a 	mov	r4,r17
   a7864:	91800144 	addi	r6,r18,5
   a7868:	318d883a 	add	r6,r6,r6
   a786c:	318d883a 	add	r6,r6,r6
   a7870:	00aa6a00 	call	aa6a0 <_calloc_r>
   a7874:	103ff626 	beq	r2,zero,a7850 <__alt_data_end+0xfffe7850>
   a7878:	14000115 	stw	r16,4(r2)
   a787c:	14800215 	stw	r18,8(r2)
   a7880:	003fe606 	br	a781c <__alt_data_end+0xfffe781c>

000a7884 <_Bfree>:
   a7884:	28000826 	beq	r5,zero,a78a8 <_Bfree+0x24>
   a7888:	28c00117 	ldw	r3,4(r5)
   a788c:	20801317 	ldw	r2,76(r4)
   a7890:	18c7883a 	add	r3,r3,r3
   a7894:	18c7883a 	add	r3,r3,r3
   a7898:	10c5883a 	add	r2,r2,r3
   a789c:	10c00017 	ldw	r3,0(r2)
   a78a0:	28c00015 	stw	r3,0(r5)
   a78a4:	11400015 	stw	r5,0(r2)
   a78a8:	f800283a 	ret

000a78ac <__multadd>:
   a78ac:	defff704 	addi	sp,sp,-36
   a78b0:	dc800215 	stw	r18,8(sp)
   a78b4:	2c800417 	ldw	r18,16(r5)
   a78b8:	dd800615 	stw	r22,24(sp)
   a78bc:	dd400515 	stw	r21,20(sp)
   a78c0:	dd000415 	stw	r20,16(sp)
   a78c4:	dcc00315 	stw	r19,12(sp)
   a78c8:	dc400115 	stw	r17,4(sp)
   a78cc:	dc000015 	stw	r16,0(sp)
   a78d0:	dfc00815 	stw	ra,32(sp)
   a78d4:	ddc00715 	stw	r23,28(sp)
   a78d8:	2827883a 	mov	r19,r5
   a78dc:	2029883a 	mov	r20,r4
   a78e0:	3023883a 	mov	r17,r6
   a78e4:	3821883a 	mov	r16,r7
   a78e8:	2d400504 	addi	r21,r5,20
   a78ec:	002d883a 	mov	r22,zero
   a78f0:	adc00017 	ldw	r23,0(r21)
   a78f4:	880b883a 	mov	r5,r17
   a78f8:	ad400104 	addi	r21,r21,4
   a78fc:	b93fffcc 	andi	r4,r23,65535
   a7900:	00ab8e00 	call	ab8e0 <__mulsi3>
   a7904:	b808d43a 	srli	r4,r23,16
   a7908:	880b883a 	mov	r5,r17
   a790c:	1421883a 	add	r16,r2,r16
   a7910:	00ab8e00 	call	ab8e0 <__mulsi3>
   a7914:	800ed43a 	srli	r7,r16,16
   a7918:	80ffffcc 	andi	r3,r16,65535
   a791c:	b5800044 	addi	r22,r22,1
   a7920:	11c5883a 	add	r2,r2,r7
   a7924:	100e943a 	slli	r7,r2,16
   a7928:	1020d43a 	srli	r16,r2,16
   a792c:	38c7883a 	add	r3,r7,r3
   a7930:	a8ffff15 	stw	r3,-4(r21)
   a7934:	b4bfee16 	blt	r22,r18,a78f0 <__alt_data_end+0xfffe78f0>
   a7938:	80000926 	beq	r16,zero,a7960 <__multadd+0xb4>
   a793c:	98800217 	ldw	r2,8(r19)
   a7940:	9080130e 	bge	r18,r2,a7990 <__multadd+0xe4>
   a7944:	90800144 	addi	r2,r18,5
   a7948:	1085883a 	add	r2,r2,r2
   a794c:	1085883a 	add	r2,r2,r2
   a7950:	9885883a 	add	r2,r19,r2
   a7954:	14000015 	stw	r16,0(r2)
   a7958:	94800044 	addi	r18,r18,1
   a795c:	9c800415 	stw	r18,16(r19)
   a7960:	9805883a 	mov	r2,r19
   a7964:	dfc00817 	ldw	ra,32(sp)
   a7968:	ddc00717 	ldw	r23,28(sp)
   a796c:	dd800617 	ldw	r22,24(sp)
   a7970:	dd400517 	ldw	r21,20(sp)
   a7974:	dd000417 	ldw	r20,16(sp)
   a7978:	dcc00317 	ldw	r19,12(sp)
   a797c:	dc800217 	ldw	r18,8(sp)
   a7980:	dc400117 	ldw	r17,4(sp)
   a7984:	dc000017 	ldw	r16,0(sp)
   a7988:	dec00904 	addi	sp,sp,36
   a798c:	f800283a 	ret
   a7990:	99400117 	ldw	r5,4(r19)
   a7994:	a009883a 	mov	r4,r20
   a7998:	29400044 	addi	r5,r5,1
   a799c:	00a77dc0 	call	a77dc <_Balloc>
   a79a0:	99800417 	ldw	r6,16(r19)
   a79a4:	99400304 	addi	r5,r19,12
   a79a8:	11000304 	addi	r4,r2,12
   a79ac:	31800084 	addi	r6,r6,2
   a79b0:	318d883a 	add	r6,r6,r6
   a79b4:	318d883a 	add	r6,r6,r6
   a79b8:	1023883a 	mov	r17,r2
   a79bc:	00a75380 	call	a7538 <memcpy>
   a79c0:	98000a26 	beq	r19,zero,a79ec <__multadd+0x140>
   a79c4:	98c00117 	ldw	r3,4(r19)
   a79c8:	a0801317 	ldw	r2,76(r20)
   a79cc:	18c7883a 	add	r3,r3,r3
   a79d0:	18c7883a 	add	r3,r3,r3
   a79d4:	10c5883a 	add	r2,r2,r3
   a79d8:	10c00017 	ldw	r3,0(r2)
   a79dc:	98c00015 	stw	r3,0(r19)
   a79e0:	14c00015 	stw	r19,0(r2)
   a79e4:	8827883a 	mov	r19,r17
   a79e8:	003fd606 	br	a7944 <__alt_data_end+0xfffe7944>
   a79ec:	8827883a 	mov	r19,r17
   a79f0:	003fd406 	br	a7944 <__alt_data_end+0xfffe7944>

000a79f4 <__s2b>:
   a79f4:	defff904 	addi	sp,sp,-28
   a79f8:	dc400115 	stw	r17,4(sp)
   a79fc:	dc000015 	stw	r16,0(sp)
   a7a00:	2023883a 	mov	r17,r4
   a7a04:	2821883a 	mov	r16,r5
   a7a08:	39000204 	addi	r4,r7,8
   a7a0c:	01400244 	movi	r5,9
   a7a10:	dcc00315 	stw	r19,12(sp)
   a7a14:	dc800215 	stw	r18,8(sp)
   a7a18:	dfc00615 	stw	ra,24(sp)
   a7a1c:	dd400515 	stw	r21,20(sp)
   a7a20:	dd000415 	stw	r20,16(sp)
   a7a24:	3825883a 	mov	r18,r7
   a7a28:	3027883a 	mov	r19,r6
   a7a2c:	00ab72c0 	call	ab72c <__divsi3>
   a7a30:	00c00044 	movi	r3,1
   a7a34:	000b883a 	mov	r5,zero
   a7a38:	1880030e 	bge	r3,r2,a7a48 <__s2b+0x54>
   a7a3c:	18c7883a 	add	r3,r3,r3
   a7a40:	29400044 	addi	r5,r5,1
   a7a44:	18bffd16 	blt	r3,r2,a7a3c <__alt_data_end+0xfffe7a3c>
   a7a48:	8809883a 	mov	r4,r17
   a7a4c:	00a77dc0 	call	a77dc <_Balloc>
   a7a50:	d8c00717 	ldw	r3,28(sp)
   a7a54:	10c00515 	stw	r3,20(r2)
   a7a58:	00c00044 	movi	r3,1
   a7a5c:	10c00415 	stw	r3,16(r2)
   a7a60:	00c00244 	movi	r3,9
   a7a64:	1cc0210e 	bge	r3,r19,a7aec <__s2b+0xf8>
   a7a68:	80eb883a 	add	r21,r16,r3
   a7a6c:	a829883a 	mov	r20,r21
   a7a70:	84e1883a 	add	r16,r16,r19
   a7a74:	a1c00007 	ldb	r7,0(r20)
   a7a78:	01800284 	movi	r6,10
   a7a7c:	a5000044 	addi	r20,r20,1
   a7a80:	100b883a 	mov	r5,r2
   a7a84:	39fff404 	addi	r7,r7,-48
   a7a88:	8809883a 	mov	r4,r17
   a7a8c:	00a78ac0 	call	a78ac <__multadd>
   a7a90:	a43ff81e 	bne	r20,r16,a7a74 <__alt_data_end+0xfffe7a74>
   a7a94:	ace1883a 	add	r16,r21,r19
   a7a98:	843ffe04 	addi	r16,r16,-8
   a7a9c:	9c800a0e 	bge	r19,r18,a7ac8 <__s2b+0xd4>
   a7aa0:	94e5c83a 	sub	r18,r18,r19
   a7aa4:	84a5883a 	add	r18,r16,r18
   a7aa8:	81c00007 	ldb	r7,0(r16)
   a7aac:	01800284 	movi	r6,10
   a7ab0:	84000044 	addi	r16,r16,1
   a7ab4:	100b883a 	mov	r5,r2
   a7ab8:	39fff404 	addi	r7,r7,-48
   a7abc:	8809883a 	mov	r4,r17
   a7ac0:	00a78ac0 	call	a78ac <__multadd>
   a7ac4:	84bff81e 	bne	r16,r18,a7aa8 <__alt_data_end+0xfffe7aa8>
   a7ac8:	dfc00617 	ldw	ra,24(sp)
   a7acc:	dd400517 	ldw	r21,20(sp)
   a7ad0:	dd000417 	ldw	r20,16(sp)
   a7ad4:	dcc00317 	ldw	r19,12(sp)
   a7ad8:	dc800217 	ldw	r18,8(sp)
   a7adc:	dc400117 	ldw	r17,4(sp)
   a7ae0:	dc000017 	ldw	r16,0(sp)
   a7ae4:	dec00704 	addi	sp,sp,28
   a7ae8:	f800283a 	ret
   a7aec:	84000284 	addi	r16,r16,10
   a7af0:	1827883a 	mov	r19,r3
   a7af4:	003fe906 	br	a7a9c <__alt_data_end+0xfffe7a9c>

000a7af8 <__hi0bits>:
   a7af8:	20bfffec 	andhi	r2,r4,65535
   a7afc:	1000141e 	bne	r2,zero,a7b50 <__hi0bits+0x58>
   a7b00:	2008943a 	slli	r4,r4,16
   a7b04:	00800404 	movi	r2,16
   a7b08:	20ffc02c 	andhi	r3,r4,65280
   a7b0c:	1800021e 	bne	r3,zero,a7b18 <__hi0bits+0x20>
   a7b10:	2008923a 	slli	r4,r4,8
   a7b14:	10800204 	addi	r2,r2,8
   a7b18:	20fc002c 	andhi	r3,r4,61440
   a7b1c:	1800021e 	bne	r3,zero,a7b28 <__hi0bits+0x30>
   a7b20:	2008913a 	slli	r4,r4,4
   a7b24:	10800104 	addi	r2,r2,4
   a7b28:	20f0002c 	andhi	r3,r4,49152
   a7b2c:	1800031e 	bne	r3,zero,a7b3c <__hi0bits+0x44>
   a7b30:	2109883a 	add	r4,r4,r4
   a7b34:	10800084 	addi	r2,r2,2
   a7b38:	2109883a 	add	r4,r4,r4
   a7b3c:	20000316 	blt	r4,zero,a7b4c <__hi0bits+0x54>
   a7b40:	2110002c 	andhi	r4,r4,16384
   a7b44:	2000041e 	bne	r4,zero,a7b58 <__hi0bits+0x60>
   a7b48:	00800804 	movi	r2,32
   a7b4c:	f800283a 	ret
   a7b50:	0005883a 	mov	r2,zero
   a7b54:	003fec06 	br	a7b08 <__alt_data_end+0xfffe7b08>
   a7b58:	10800044 	addi	r2,r2,1
   a7b5c:	f800283a 	ret

000a7b60 <__lo0bits>:
   a7b60:	20c00017 	ldw	r3,0(r4)
   a7b64:	188001cc 	andi	r2,r3,7
   a7b68:	10000826 	beq	r2,zero,a7b8c <__lo0bits+0x2c>
   a7b6c:	1880004c 	andi	r2,r3,1
   a7b70:	1000211e 	bne	r2,zero,a7bf8 <__lo0bits+0x98>
   a7b74:	1880008c 	andi	r2,r3,2
   a7b78:	1000211e 	bne	r2,zero,a7c00 <__lo0bits+0xa0>
   a7b7c:	1806d0ba 	srli	r3,r3,2
   a7b80:	00800084 	movi	r2,2
   a7b84:	20c00015 	stw	r3,0(r4)
   a7b88:	f800283a 	ret
   a7b8c:	18bfffcc 	andi	r2,r3,65535
   a7b90:	10001326 	beq	r2,zero,a7be0 <__lo0bits+0x80>
   a7b94:	0005883a 	mov	r2,zero
   a7b98:	19403fcc 	andi	r5,r3,255
   a7b9c:	2800021e 	bne	r5,zero,a7ba8 <__lo0bits+0x48>
   a7ba0:	1806d23a 	srli	r3,r3,8
   a7ba4:	10800204 	addi	r2,r2,8
   a7ba8:	194003cc 	andi	r5,r3,15
   a7bac:	2800021e 	bne	r5,zero,a7bb8 <__lo0bits+0x58>
   a7bb0:	1806d13a 	srli	r3,r3,4
   a7bb4:	10800104 	addi	r2,r2,4
   a7bb8:	194000cc 	andi	r5,r3,3
   a7bbc:	2800021e 	bne	r5,zero,a7bc8 <__lo0bits+0x68>
   a7bc0:	1806d0ba 	srli	r3,r3,2
   a7bc4:	10800084 	addi	r2,r2,2
   a7bc8:	1940004c 	andi	r5,r3,1
   a7bcc:	2800081e 	bne	r5,zero,a7bf0 <__lo0bits+0x90>
   a7bd0:	1806d07a 	srli	r3,r3,1
   a7bd4:	1800051e 	bne	r3,zero,a7bec <__lo0bits+0x8c>
   a7bd8:	00800804 	movi	r2,32
   a7bdc:	f800283a 	ret
   a7be0:	1806d43a 	srli	r3,r3,16
   a7be4:	00800404 	movi	r2,16
   a7be8:	003feb06 	br	a7b98 <__alt_data_end+0xfffe7b98>
   a7bec:	10800044 	addi	r2,r2,1
   a7bf0:	20c00015 	stw	r3,0(r4)
   a7bf4:	f800283a 	ret
   a7bf8:	0005883a 	mov	r2,zero
   a7bfc:	f800283a 	ret
   a7c00:	1806d07a 	srli	r3,r3,1
   a7c04:	00800044 	movi	r2,1
   a7c08:	20c00015 	stw	r3,0(r4)
   a7c0c:	f800283a 	ret

000a7c10 <__i2b>:
   a7c10:	defffd04 	addi	sp,sp,-12
   a7c14:	dc000015 	stw	r16,0(sp)
   a7c18:	04000044 	movi	r16,1
   a7c1c:	dc400115 	stw	r17,4(sp)
   a7c20:	2823883a 	mov	r17,r5
   a7c24:	800b883a 	mov	r5,r16
   a7c28:	dfc00215 	stw	ra,8(sp)
   a7c2c:	00a77dc0 	call	a77dc <_Balloc>
   a7c30:	14400515 	stw	r17,20(r2)
   a7c34:	14000415 	stw	r16,16(r2)
   a7c38:	dfc00217 	ldw	ra,8(sp)
   a7c3c:	dc400117 	ldw	r17,4(sp)
   a7c40:	dc000017 	ldw	r16,0(sp)
   a7c44:	dec00304 	addi	sp,sp,12
   a7c48:	f800283a 	ret

000a7c4c <__multiply>:
   a7c4c:	deffef04 	addi	sp,sp,-68
   a7c50:	dc400815 	stw	r17,32(sp)
   a7c54:	dc000715 	stw	r16,28(sp)
   a7c58:	34400417 	ldw	r17,16(r6)
   a7c5c:	2c000417 	ldw	r16,16(r5)
   a7c60:	dd800d15 	stw	r22,52(sp)
   a7c64:	dc800915 	stw	r18,36(sp)
   a7c68:	dfc01015 	stw	ra,64(sp)
   a7c6c:	df000f15 	stw	fp,60(sp)
   a7c70:	ddc00e15 	stw	r23,56(sp)
   a7c74:	dd400c15 	stw	r21,48(sp)
   a7c78:	dd000b15 	stw	r20,44(sp)
   a7c7c:	dcc00a15 	stw	r19,40(sp)
   a7c80:	2825883a 	mov	r18,r5
   a7c84:	302d883a 	mov	r22,r6
   a7c88:	8440050e 	bge	r16,r17,a7ca0 <__multiply+0x54>
   a7c8c:	8007883a 	mov	r3,r16
   a7c90:	3025883a 	mov	r18,r6
   a7c94:	8821883a 	mov	r16,r17
   a7c98:	282d883a 	mov	r22,r5
   a7c9c:	1823883a 	mov	r17,r3
   a7ca0:	90800217 	ldw	r2,8(r18)
   a7ca4:	8447883a 	add	r3,r16,r17
   a7ca8:	d8c00215 	stw	r3,8(sp)
   a7cac:	91400117 	ldw	r5,4(r18)
   a7cb0:	10c0010e 	bge	r2,r3,a7cb8 <__multiply+0x6c>
   a7cb4:	29400044 	addi	r5,r5,1
   a7cb8:	00a77dc0 	call	a77dc <_Balloc>
   a7cbc:	d8c00217 	ldw	r3,8(sp)
   a7cc0:	d8800615 	stw	r2,24(sp)
   a7cc4:	18eb883a 	add	r21,r3,r3
   a7cc8:	ad6b883a 	add	r21,r21,r21
   a7ccc:	10c00504 	addi	r3,r2,20
   a7cd0:	1d6b883a 	add	r21,r3,r21
   a7cd4:	d8c00115 	stw	r3,4(sp)
   a7cd8:	dd400315 	stw	r21,12(sp)
   a7cdc:	1805883a 	mov	r2,r3
   a7ce0:	1d40042e 	bgeu	r3,r21,a7cf4 <__multiply+0xa8>
   a7ce4:	d8c00317 	ldw	r3,12(sp)
   a7ce8:	10000015 	stw	zero,0(r2)
   a7cec:	10800104 	addi	r2,r2,4
   a7cf0:	10fffc36 	bltu	r2,r3,a7ce4 <__alt_data_end+0xfffe7ce4>
   a7cf4:	8c63883a 	add	r17,r17,r17
   a7cf8:	b5800504 	addi	r22,r22,20
   a7cfc:	8c63883a 	add	r17,r17,r17
   a7d00:	94800504 	addi	r18,r18,20
   a7d04:	8421883a 	add	r16,r16,r16
   a7d08:	b463883a 	add	r17,r22,r17
   a7d0c:	8421883a 	add	r16,r16,r16
   a7d10:	dd800015 	stw	r22,0(sp)
   a7d14:	dc800415 	stw	r18,16(sp)
   a7d18:	dc400515 	stw	r17,20(sp)
   a7d1c:	9429883a 	add	r20,r18,r16
   a7d20:	b4404f2e 	bgeu	r22,r17,a7e60 <__multiply+0x214>
   a7d24:	d8c00017 	ldw	r3,0(sp)
   a7d28:	1c800017 	ldw	r18,0(r3)
   a7d2c:	947fffcc 	andi	r17,r18,65535
   a7d30:	88001e26 	beq	r17,zero,a7dac <__multiply+0x160>
   a7d34:	dd800117 	ldw	r22,4(sp)
   a7d38:	dd400417 	ldw	r21,16(sp)
   a7d3c:	0027883a 	mov	r19,zero
   a7d40:	ac800017 	ldw	r18,0(r21)
   a7d44:	b4000017 	ldw	r16,0(r22)
   a7d48:	880b883a 	mov	r5,r17
   a7d4c:	913fffcc 	andi	r4,r18,65535
   a7d50:	00ab8e00 	call	ab8e0 <__mulsi3>
   a7d54:	9008d43a 	srli	r4,r18,16
   a7d58:	84bfffcc 	andi	r18,r16,65535
   a7d5c:	1485883a 	add	r2,r2,r18
   a7d60:	14e5883a 	add	r18,r2,r19
   a7d64:	8020d43a 	srli	r16,r16,16
   a7d68:	9026d43a 	srli	r19,r18,16
   a7d6c:	880b883a 	mov	r5,r17
   a7d70:	00ab8e00 	call	ab8e0 <__mulsi3>
   a7d74:	1405883a 	add	r2,r2,r16
   a7d78:	14e1883a 	add	r16,r2,r19
   a7d7c:	90ffffcc 	andi	r3,r18,65535
   a7d80:	8024943a 	slli	r18,r16,16
   a7d84:	ad400104 	addi	r21,r21,4
   a7d88:	b005883a 	mov	r2,r22
   a7d8c:	90c6b03a 	or	r3,r18,r3
   a7d90:	b0c00015 	stw	r3,0(r22)
   a7d94:	8026d43a 	srli	r19,r16,16
   a7d98:	b5800104 	addi	r22,r22,4
   a7d9c:	ad3fe836 	bltu	r21,r20,a7d40 <__alt_data_end+0xfffe7d40>
   a7da0:	d8c00017 	ldw	r3,0(sp)
   a7da4:	14c00115 	stw	r19,4(r2)
   a7da8:	1c800017 	ldw	r18,0(r3)
   a7dac:	9024d43a 	srli	r18,r18,16
   a7db0:	90002226 	beq	r18,zero,a7e3c <__multiply+0x1f0>
   a7db4:	d8c00117 	ldw	r3,4(sp)
   a7db8:	dd800417 	ldw	r22,16(sp)
   a7dbc:	002f883a 	mov	r23,zero
   a7dc0:	1f000017 	ldw	fp,0(r3)
   a7dc4:	1823883a 	mov	r17,r3
   a7dc8:	182b883a 	mov	r21,r3
   a7dcc:	e021883a 	mov	r16,fp
   a7dd0:	00000106 	br	a7dd8 <__multiply+0x18c>
   a7dd4:	982b883a 	mov	r21,r19
   a7dd8:	b100000b 	ldhu	r4,0(r22)
   a7ddc:	8020d43a 	srli	r16,r16,16
   a7de0:	900b883a 	mov	r5,r18
   a7de4:	00ab8e00 	call	ab8e0 <__mulsi3>
   a7de8:	1405883a 	add	r2,r2,r16
   a7dec:	15ef883a 	add	r23,r2,r23
   a7df0:	b804943a 	slli	r2,r23,16
   a7df4:	e0ffffcc 	andi	r3,fp,65535
   a7df8:	8c400104 	addi	r17,r17,4
   a7dfc:	10c6b03a 	or	r3,r2,r3
   a7e00:	88ffff15 	stw	r3,-4(r17)
   a7e04:	b5800104 	addi	r22,r22,4
   a7e08:	b13fff17 	ldw	r4,-4(r22)
   a7e0c:	acc00104 	addi	r19,r21,4
   a7e10:	900b883a 	mov	r5,r18
   a7e14:	2008d43a 	srli	r4,r4,16
   a7e18:	9c000017 	ldw	r16,0(r19)
   a7e1c:	00ab8e00 	call	ab8e0 <__mulsi3>
   a7e20:	b806d43a 	srli	r3,r23,16
   a7e24:	813fffcc 	andi	r4,r16,65535
   a7e28:	1105883a 	add	r2,r2,r4
   a7e2c:	10f9883a 	add	fp,r2,r3
   a7e30:	e02ed43a 	srli	r23,fp,16
   a7e34:	b53fe736 	bltu	r22,r20,a7dd4 <__alt_data_end+0xfffe7dd4>
   a7e38:	af000115 	stw	fp,4(r21)
   a7e3c:	d8c00017 	ldw	r3,0(sp)
   a7e40:	d9000517 	ldw	r4,20(sp)
   a7e44:	18c00104 	addi	r3,r3,4
   a7e48:	d8c00015 	stw	r3,0(sp)
   a7e4c:	d8c00117 	ldw	r3,4(sp)
   a7e50:	18c00104 	addi	r3,r3,4
   a7e54:	d8c00115 	stw	r3,4(sp)
   a7e58:	d8c00017 	ldw	r3,0(sp)
   a7e5c:	193fb136 	bltu	r3,r4,a7d24 <__alt_data_end+0xfffe7d24>
   a7e60:	d8c00217 	ldw	r3,8(sp)
   a7e64:	00c00c0e 	bge	zero,r3,a7e98 <__multiply+0x24c>
   a7e68:	d8c00317 	ldw	r3,12(sp)
   a7e6c:	18bfff17 	ldw	r2,-4(r3)
   a7e70:	1d7fff04 	addi	r21,r3,-4
   a7e74:	10000326 	beq	r2,zero,a7e84 <__multiply+0x238>
   a7e78:	00000706 	br	a7e98 <__multiply+0x24c>
   a7e7c:	a8800017 	ldw	r2,0(r21)
   a7e80:	1000051e 	bne	r2,zero,a7e98 <__multiply+0x24c>
   a7e84:	d8c00217 	ldw	r3,8(sp)
   a7e88:	ad7fff04 	addi	r21,r21,-4
   a7e8c:	18ffffc4 	addi	r3,r3,-1
   a7e90:	d8c00215 	stw	r3,8(sp)
   a7e94:	183ff91e 	bne	r3,zero,a7e7c <__alt_data_end+0xfffe7e7c>
   a7e98:	d8c00617 	ldw	r3,24(sp)
   a7e9c:	d9000217 	ldw	r4,8(sp)
   a7ea0:	1805883a 	mov	r2,r3
   a7ea4:	19000415 	stw	r4,16(r3)
   a7ea8:	dfc01017 	ldw	ra,64(sp)
   a7eac:	df000f17 	ldw	fp,60(sp)
   a7eb0:	ddc00e17 	ldw	r23,56(sp)
   a7eb4:	dd800d17 	ldw	r22,52(sp)
   a7eb8:	dd400c17 	ldw	r21,48(sp)
   a7ebc:	dd000b17 	ldw	r20,44(sp)
   a7ec0:	dcc00a17 	ldw	r19,40(sp)
   a7ec4:	dc800917 	ldw	r18,36(sp)
   a7ec8:	dc400817 	ldw	r17,32(sp)
   a7ecc:	dc000717 	ldw	r16,28(sp)
   a7ed0:	dec01104 	addi	sp,sp,68
   a7ed4:	f800283a 	ret

000a7ed8 <__pow5mult>:
   a7ed8:	defffa04 	addi	sp,sp,-24
   a7edc:	dcc00315 	stw	r19,12(sp)
   a7ee0:	dc000015 	stw	r16,0(sp)
   a7ee4:	dfc00515 	stw	ra,20(sp)
   a7ee8:	dd000415 	stw	r20,16(sp)
   a7eec:	dc800215 	stw	r18,8(sp)
   a7ef0:	dc400115 	stw	r17,4(sp)
   a7ef4:	308000cc 	andi	r2,r6,3
   a7ef8:	3021883a 	mov	r16,r6
   a7efc:	2027883a 	mov	r19,r4
   a7f00:	10002f1e 	bne	r2,zero,a7fc0 <__pow5mult+0xe8>
   a7f04:	2825883a 	mov	r18,r5
   a7f08:	8021d0ba 	srai	r16,r16,2
   a7f0c:	80001a26 	beq	r16,zero,a7f78 <__pow5mult+0xa0>
   a7f10:	9c401217 	ldw	r17,72(r19)
   a7f14:	8800061e 	bne	r17,zero,a7f30 <__pow5mult+0x58>
   a7f18:	00003406 	br	a7fec <__pow5mult+0x114>
   a7f1c:	8021d07a 	srai	r16,r16,1
   a7f20:	80001526 	beq	r16,zero,a7f78 <__pow5mult+0xa0>
   a7f24:	88800017 	ldw	r2,0(r17)
   a7f28:	10001c26 	beq	r2,zero,a7f9c <__pow5mult+0xc4>
   a7f2c:	1023883a 	mov	r17,r2
   a7f30:	8080004c 	andi	r2,r16,1
   a7f34:	103ff926 	beq	r2,zero,a7f1c <__alt_data_end+0xfffe7f1c>
   a7f38:	880d883a 	mov	r6,r17
   a7f3c:	900b883a 	mov	r5,r18
   a7f40:	9809883a 	mov	r4,r19
   a7f44:	00a7c4c0 	call	a7c4c <__multiply>
   a7f48:	90001b26 	beq	r18,zero,a7fb8 <__pow5mult+0xe0>
   a7f4c:	91000117 	ldw	r4,4(r18)
   a7f50:	98c01317 	ldw	r3,76(r19)
   a7f54:	8021d07a 	srai	r16,r16,1
   a7f58:	2109883a 	add	r4,r4,r4
   a7f5c:	2109883a 	add	r4,r4,r4
   a7f60:	1907883a 	add	r3,r3,r4
   a7f64:	19000017 	ldw	r4,0(r3)
   a7f68:	91000015 	stw	r4,0(r18)
   a7f6c:	1c800015 	stw	r18,0(r3)
   a7f70:	1025883a 	mov	r18,r2
   a7f74:	803feb1e 	bne	r16,zero,a7f24 <__alt_data_end+0xfffe7f24>
   a7f78:	9005883a 	mov	r2,r18
   a7f7c:	dfc00517 	ldw	ra,20(sp)
   a7f80:	dd000417 	ldw	r20,16(sp)
   a7f84:	dcc00317 	ldw	r19,12(sp)
   a7f88:	dc800217 	ldw	r18,8(sp)
   a7f8c:	dc400117 	ldw	r17,4(sp)
   a7f90:	dc000017 	ldw	r16,0(sp)
   a7f94:	dec00604 	addi	sp,sp,24
   a7f98:	f800283a 	ret
   a7f9c:	880d883a 	mov	r6,r17
   a7fa0:	880b883a 	mov	r5,r17
   a7fa4:	9809883a 	mov	r4,r19
   a7fa8:	00a7c4c0 	call	a7c4c <__multiply>
   a7fac:	88800015 	stw	r2,0(r17)
   a7fb0:	10000015 	stw	zero,0(r2)
   a7fb4:	003fdd06 	br	a7f2c <__alt_data_end+0xfffe7f2c>
   a7fb8:	1025883a 	mov	r18,r2
   a7fbc:	003fd706 	br	a7f1c <__alt_data_end+0xfffe7f1c>
   a7fc0:	10bfffc4 	addi	r2,r2,-1
   a7fc4:	1085883a 	add	r2,r2,r2
   a7fc8:	00c002f4 	movhi	r3,11
   a7fcc:	18c52004 	addi	r3,r3,5248
   a7fd0:	1085883a 	add	r2,r2,r2
   a7fd4:	1885883a 	add	r2,r3,r2
   a7fd8:	11800017 	ldw	r6,0(r2)
   a7fdc:	000f883a 	mov	r7,zero
   a7fe0:	00a78ac0 	call	a78ac <__multadd>
   a7fe4:	1025883a 	mov	r18,r2
   a7fe8:	003fc706 	br	a7f08 <__alt_data_end+0xfffe7f08>
   a7fec:	05000044 	movi	r20,1
   a7ff0:	a00b883a 	mov	r5,r20
   a7ff4:	9809883a 	mov	r4,r19
   a7ff8:	00a77dc0 	call	a77dc <_Balloc>
   a7ffc:	1023883a 	mov	r17,r2
   a8000:	00809c44 	movi	r2,625
   a8004:	88800515 	stw	r2,20(r17)
   a8008:	8d000415 	stw	r20,16(r17)
   a800c:	9c401215 	stw	r17,72(r19)
   a8010:	88000015 	stw	zero,0(r17)
   a8014:	003fc606 	br	a7f30 <__alt_data_end+0xfffe7f30>

000a8018 <__lshift>:
   a8018:	defff904 	addi	sp,sp,-28
   a801c:	dd400515 	stw	r21,20(sp)
   a8020:	dcc00315 	stw	r19,12(sp)
   a8024:	302bd17a 	srai	r21,r6,5
   a8028:	2cc00417 	ldw	r19,16(r5)
   a802c:	28800217 	ldw	r2,8(r5)
   a8030:	dd000415 	stw	r20,16(sp)
   a8034:	ace7883a 	add	r19,r21,r19
   a8038:	dc800215 	stw	r18,8(sp)
   a803c:	dc400115 	stw	r17,4(sp)
   a8040:	dc000015 	stw	r16,0(sp)
   a8044:	dfc00615 	stw	ra,24(sp)
   a8048:	9c000044 	addi	r16,r19,1
   a804c:	2823883a 	mov	r17,r5
   a8050:	3029883a 	mov	r20,r6
   a8054:	2025883a 	mov	r18,r4
   a8058:	29400117 	ldw	r5,4(r5)
   a805c:	1400030e 	bge	r2,r16,a806c <__lshift+0x54>
   a8060:	1085883a 	add	r2,r2,r2
   a8064:	29400044 	addi	r5,r5,1
   a8068:	143ffd16 	blt	r2,r16,a8060 <__alt_data_end+0xfffe8060>
   a806c:	9009883a 	mov	r4,r18
   a8070:	00a77dc0 	call	a77dc <_Balloc>
   a8074:	10c00504 	addi	r3,r2,20
   a8078:	0540070e 	bge	zero,r21,a8098 <__lshift+0x80>
   a807c:	ad6b883a 	add	r21,r21,r21
   a8080:	ad6b883a 	add	r21,r21,r21
   a8084:	1809883a 	mov	r4,r3
   a8088:	1d47883a 	add	r3,r3,r21
   a808c:	20000015 	stw	zero,0(r4)
   a8090:	21000104 	addi	r4,r4,4
   a8094:	193ffd1e 	bne	r3,r4,a808c <__alt_data_end+0xfffe808c>
   a8098:	8a000417 	ldw	r8,16(r17)
   a809c:	89000504 	addi	r4,r17,20
   a80a0:	a18007cc 	andi	r6,r20,31
   a80a4:	4211883a 	add	r8,r8,r8
   a80a8:	4211883a 	add	r8,r8,r8
   a80ac:	2211883a 	add	r8,r4,r8
   a80b0:	30002326 	beq	r6,zero,a8140 <__lshift+0x128>
   a80b4:	02400804 	movi	r9,32
   a80b8:	4993c83a 	sub	r9,r9,r6
   a80bc:	000b883a 	mov	r5,zero
   a80c0:	21c00017 	ldw	r7,0(r4)
   a80c4:	1815883a 	mov	r10,r3
   a80c8:	18c00104 	addi	r3,r3,4
   a80cc:	398e983a 	sll	r7,r7,r6
   a80d0:	21000104 	addi	r4,r4,4
   a80d4:	394ab03a 	or	r5,r7,r5
   a80d8:	197fff15 	stw	r5,-4(r3)
   a80dc:	217fff17 	ldw	r5,-4(r4)
   a80e0:	2a4ad83a 	srl	r5,r5,r9
   a80e4:	223ff636 	bltu	r4,r8,a80c0 <__alt_data_end+0xfffe80c0>
   a80e8:	51400115 	stw	r5,4(r10)
   a80ec:	28001a1e 	bne	r5,zero,a8158 <__lshift+0x140>
   a80f0:	843fffc4 	addi	r16,r16,-1
   a80f4:	14000415 	stw	r16,16(r2)
   a80f8:	88000826 	beq	r17,zero,a811c <__lshift+0x104>
   a80fc:	89000117 	ldw	r4,4(r17)
   a8100:	90c01317 	ldw	r3,76(r18)
   a8104:	2109883a 	add	r4,r4,r4
   a8108:	2109883a 	add	r4,r4,r4
   a810c:	1907883a 	add	r3,r3,r4
   a8110:	19000017 	ldw	r4,0(r3)
   a8114:	89000015 	stw	r4,0(r17)
   a8118:	1c400015 	stw	r17,0(r3)
   a811c:	dfc00617 	ldw	ra,24(sp)
   a8120:	dd400517 	ldw	r21,20(sp)
   a8124:	dd000417 	ldw	r20,16(sp)
   a8128:	dcc00317 	ldw	r19,12(sp)
   a812c:	dc800217 	ldw	r18,8(sp)
   a8130:	dc400117 	ldw	r17,4(sp)
   a8134:	dc000017 	ldw	r16,0(sp)
   a8138:	dec00704 	addi	sp,sp,28
   a813c:	f800283a 	ret
   a8140:	21400017 	ldw	r5,0(r4)
   a8144:	18c00104 	addi	r3,r3,4
   a8148:	21000104 	addi	r4,r4,4
   a814c:	197fff15 	stw	r5,-4(r3)
   a8150:	223ffb36 	bltu	r4,r8,a8140 <__alt_data_end+0xfffe8140>
   a8154:	003fe606 	br	a80f0 <__alt_data_end+0xfffe80f0>
   a8158:	9c000084 	addi	r16,r19,2
   a815c:	003fe406 	br	a80f0 <__alt_data_end+0xfffe80f0>

000a8160 <__mcmp>:
   a8160:	20800417 	ldw	r2,16(r4)
   a8164:	28c00417 	ldw	r3,16(r5)
   a8168:	10c5c83a 	sub	r2,r2,r3
   a816c:	1000111e 	bne	r2,zero,a81b4 <__mcmp+0x54>
   a8170:	18c7883a 	add	r3,r3,r3
   a8174:	18c7883a 	add	r3,r3,r3
   a8178:	21000504 	addi	r4,r4,20
   a817c:	29400504 	addi	r5,r5,20
   a8180:	20c5883a 	add	r2,r4,r3
   a8184:	28cb883a 	add	r5,r5,r3
   a8188:	00000106 	br	a8190 <__mcmp+0x30>
   a818c:	20800a2e 	bgeu	r4,r2,a81b8 <__mcmp+0x58>
   a8190:	10bfff04 	addi	r2,r2,-4
   a8194:	297fff04 	addi	r5,r5,-4
   a8198:	11800017 	ldw	r6,0(r2)
   a819c:	28c00017 	ldw	r3,0(r5)
   a81a0:	30fffa26 	beq	r6,r3,a818c <__alt_data_end+0xfffe818c>
   a81a4:	30c00236 	bltu	r6,r3,a81b0 <__mcmp+0x50>
   a81a8:	00800044 	movi	r2,1
   a81ac:	f800283a 	ret
   a81b0:	00bfffc4 	movi	r2,-1
   a81b4:	f800283a 	ret
   a81b8:	0005883a 	mov	r2,zero
   a81bc:	f800283a 	ret

000a81c0 <__mdiff>:
   a81c0:	28c00417 	ldw	r3,16(r5)
   a81c4:	30800417 	ldw	r2,16(r6)
   a81c8:	defffa04 	addi	sp,sp,-24
   a81cc:	dcc00315 	stw	r19,12(sp)
   a81d0:	dc800215 	stw	r18,8(sp)
   a81d4:	dfc00515 	stw	ra,20(sp)
   a81d8:	dd000415 	stw	r20,16(sp)
   a81dc:	dc400115 	stw	r17,4(sp)
   a81e0:	dc000015 	stw	r16,0(sp)
   a81e4:	1887c83a 	sub	r3,r3,r2
   a81e8:	2825883a 	mov	r18,r5
   a81ec:	3027883a 	mov	r19,r6
   a81f0:	1800141e 	bne	r3,zero,a8244 <__mdiff+0x84>
   a81f4:	1085883a 	add	r2,r2,r2
   a81f8:	1085883a 	add	r2,r2,r2
   a81fc:	2a000504 	addi	r8,r5,20
   a8200:	34000504 	addi	r16,r6,20
   a8204:	4087883a 	add	r3,r8,r2
   a8208:	8085883a 	add	r2,r16,r2
   a820c:	00000106 	br	a8214 <__mdiff+0x54>
   a8210:	40c0592e 	bgeu	r8,r3,a8378 <__mdiff+0x1b8>
   a8214:	18ffff04 	addi	r3,r3,-4
   a8218:	10bfff04 	addi	r2,r2,-4
   a821c:	19c00017 	ldw	r7,0(r3)
   a8220:	11400017 	ldw	r5,0(r2)
   a8224:	397ffa26 	beq	r7,r5,a8210 <__alt_data_end+0xfffe8210>
   a8228:	3940592e 	bgeu	r7,r5,a8390 <__mdiff+0x1d0>
   a822c:	9005883a 	mov	r2,r18
   a8230:	4023883a 	mov	r17,r8
   a8234:	9825883a 	mov	r18,r19
   a8238:	05000044 	movi	r20,1
   a823c:	1027883a 	mov	r19,r2
   a8240:	00000406 	br	a8254 <__mdiff+0x94>
   a8244:	18005616 	blt	r3,zero,a83a0 <__mdiff+0x1e0>
   a8248:	34400504 	addi	r17,r6,20
   a824c:	2c000504 	addi	r16,r5,20
   a8250:	0029883a 	mov	r20,zero
   a8254:	91400117 	ldw	r5,4(r18)
   a8258:	00a77dc0 	call	a77dc <_Balloc>
   a825c:	92400417 	ldw	r9,16(r18)
   a8260:	9b000417 	ldw	r12,16(r19)
   a8264:	12c00504 	addi	r11,r2,20
   a8268:	4a51883a 	add	r8,r9,r9
   a826c:	6319883a 	add	r12,r12,r12
   a8270:	4211883a 	add	r8,r8,r8
   a8274:	6319883a 	add	r12,r12,r12
   a8278:	15000315 	stw	r20,12(r2)
   a827c:	8211883a 	add	r8,r16,r8
   a8280:	8b19883a 	add	r12,r17,r12
   a8284:	0007883a 	mov	r3,zero
   a8288:	81400017 	ldw	r5,0(r16)
   a828c:	89c00017 	ldw	r7,0(r17)
   a8290:	59800104 	addi	r6,r11,4
   a8294:	293fffcc 	andi	r4,r5,65535
   a8298:	20c7883a 	add	r3,r4,r3
   a829c:	393fffcc 	andi	r4,r7,65535
   a82a0:	1909c83a 	sub	r4,r3,r4
   a82a4:	280ad43a 	srli	r5,r5,16
   a82a8:	380ed43a 	srli	r7,r7,16
   a82ac:	2007d43a 	srai	r3,r4,16
   a82b0:	213fffcc 	andi	r4,r4,65535
   a82b4:	29cbc83a 	sub	r5,r5,r7
   a82b8:	28c7883a 	add	r3,r5,r3
   a82bc:	180a943a 	slli	r5,r3,16
   a82c0:	8c400104 	addi	r17,r17,4
   a82c4:	84000104 	addi	r16,r16,4
   a82c8:	2908b03a 	or	r4,r5,r4
   a82cc:	59000015 	stw	r4,0(r11)
   a82d0:	1807d43a 	srai	r3,r3,16
   a82d4:	3015883a 	mov	r10,r6
   a82d8:	3017883a 	mov	r11,r6
   a82dc:	8b3fea36 	bltu	r17,r12,a8288 <__alt_data_end+0xfffe8288>
   a82e0:	8200162e 	bgeu	r16,r8,a833c <__mdiff+0x17c>
   a82e4:	8017883a 	mov	r11,r16
   a82e8:	59400017 	ldw	r5,0(r11)
   a82ec:	31800104 	addi	r6,r6,4
   a82f0:	5ac00104 	addi	r11,r11,4
   a82f4:	293fffcc 	andi	r4,r5,65535
   a82f8:	20c7883a 	add	r3,r4,r3
   a82fc:	280ed43a 	srli	r7,r5,16
   a8300:	180bd43a 	srai	r5,r3,16
   a8304:	193fffcc 	andi	r4,r3,65535
   a8308:	3947883a 	add	r3,r7,r5
   a830c:	180a943a 	slli	r5,r3,16
   a8310:	1807d43a 	srai	r3,r3,16
   a8314:	2908b03a 	or	r4,r5,r4
   a8318:	313fff15 	stw	r4,-4(r6)
   a831c:	5a3ff236 	bltu	r11,r8,a82e8 <__alt_data_end+0xfffe82e8>
   a8320:	0406303a 	nor	r3,zero,r16
   a8324:	1a07883a 	add	r3,r3,r8
   a8328:	1806d0ba 	srli	r3,r3,2
   a832c:	18c00044 	addi	r3,r3,1
   a8330:	18c7883a 	add	r3,r3,r3
   a8334:	18c7883a 	add	r3,r3,r3
   a8338:	50d5883a 	add	r10,r10,r3
   a833c:	50ffff04 	addi	r3,r10,-4
   a8340:	2000041e 	bne	r4,zero,a8354 <__mdiff+0x194>
   a8344:	18ffff04 	addi	r3,r3,-4
   a8348:	19000017 	ldw	r4,0(r3)
   a834c:	4a7fffc4 	addi	r9,r9,-1
   a8350:	203ffc26 	beq	r4,zero,a8344 <__alt_data_end+0xfffe8344>
   a8354:	12400415 	stw	r9,16(r2)
   a8358:	dfc00517 	ldw	ra,20(sp)
   a835c:	dd000417 	ldw	r20,16(sp)
   a8360:	dcc00317 	ldw	r19,12(sp)
   a8364:	dc800217 	ldw	r18,8(sp)
   a8368:	dc400117 	ldw	r17,4(sp)
   a836c:	dc000017 	ldw	r16,0(sp)
   a8370:	dec00604 	addi	sp,sp,24
   a8374:	f800283a 	ret
   a8378:	000b883a 	mov	r5,zero
   a837c:	00a77dc0 	call	a77dc <_Balloc>
   a8380:	00c00044 	movi	r3,1
   a8384:	10c00415 	stw	r3,16(r2)
   a8388:	10000515 	stw	zero,20(r2)
   a838c:	003ff206 	br	a8358 <__alt_data_end+0xfffe8358>
   a8390:	8023883a 	mov	r17,r16
   a8394:	0029883a 	mov	r20,zero
   a8398:	4021883a 	mov	r16,r8
   a839c:	003fad06 	br	a8254 <__alt_data_end+0xfffe8254>
   a83a0:	9005883a 	mov	r2,r18
   a83a4:	94400504 	addi	r17,r18,20
   a83a8:	9c000504 	addi	r16,r19,20
   a83ac:	9825883a 	mov	r18,r19
   a83b0:	05000044 	movi	r20,1
   a83b4:	1027883a 	mov	r19,r2
   a83b8:	003fa606 	br	a8254 <__alt_data_end+0xfffe8254>

000a83bc <__ulp>:
   a83bc:	295ffc2c 	andhi	r5,r5,32752
   a83c0:	00bf3034 	movhi	r2,64704
   a83c4:	2887883a 	add	r3,r5,r2
   a83c8:	00c0020e 	bge	zero,r3,a83d4 <__ulp+0x18>
   a83cc:	0005883a 	mov	r2,zero
   a83d0:	f800283a 	ret
   a83d4:	00c7c83a 	sub	r3,zero,r3
   a83d8:	1807d53a 	srai	r3,r3,20
   a83dc:	008004c4 	movi	r2,19
   a83e0:	10c00b0e 	bge	r2,r3,a8410 <__ulp+0x54>
   a83e4:	18bffb04 	addi	r2,r3,-20
   a83e8:	01000784 	movi	r4,30
   a83ec:	0007883a 	mov	r3,zero
   a83f0:	20800516 	blt	r4,r2,a8408 <__ulp+0x4c>
   a83f4:	010007c4 	movi	r4,31
   a83f8:	2089c83a 	sub	r4,r4,r2
   a83fc:	00800044 	movi	r2,1
   a8400:	1104983a 	sll	r2,r2,r4
   a8404:	f800283a 	ret
   a8408:	00800044 	movi	r2,1
   a840c:	f800283a 	ret
   a8410:	01400234 	movhi	r5,8
   a8414:	28c7d83a 	sra	r3,r5,r3
   a8418:	0005883a 	mov	r2,zero
   a841c:	f800283a 	ret

000a8420 <__b2d>:
   a8420:	defffa04 	addi	sp,sp,-24
   a8424:	dc000015 	stw	r16,0(sp)
   a8428:	24000417 	ldw	r16,16(r4)
   a842c:	dc400115 	stw	r17,4(sp)
   a8430:	24400504 	addi	r17,r4,20
   a8434:	8421883a 	add	r16,r16,r16
   a8438:	8421883a 	add	r16,r16,r16
   a843c:	8c21883a 	add	r16,r17,r16
   a8440:	dc800215 	stw	r18,8(sp)
   a8444:	84bfff17 	ldw	r18,-4(r16)
   a8448:	dd000415 	stw	r20,16(sp)
   a844c:	dcc00315 	stw	r19,12(sp)
   a8450:	9009883a 	mov	r4,r18
   a8454:	2829883a 	mov	r20,r5
   a8458:	dfc00515 	stw	ra,20(sp)
   a845c:	00a7af80 	call	a7af8 <__hi0bits>
   a8460:	00c00804 	movi	r3,32
   a8464:	1889c83a 	sub	r4,r3,r2
   a8468:	a1000015 	stw	r4,0(r20)
   a846c:	01000284 	movi	r4,10
   a8470:	84ffff04 	addi	r19,r16,-4
   a8474:	20801216 	blt	r4,r2,a84c0 <__b2d+0xa0>
   a8478:	018002c4 	movi	r6,11
   a847c:	308dc83a 	sub	r6,r6,r2
   a8480:	9186d83a 	srl	r3,r18,r6
   a8484:	18cffc34 	orhi	r3,r3,16368
   a8488:	8cc0212e 	bgeu	r17,r19,a8510 <__b2d+0xf0>
   a848c:	813ffe17 	ldw	r4,-8(r16)
   a8490:	218cd83a 	srl	r6,r4,r6
   a8494:	10800544 	addi	r2,r2,21
   a8498:	9084983a 	sll	r2,r18,r2
   a849c:	1184b03a 	or	r2,r2,r6
   a84a0:	dfc00517 	ldw	ra,20(sp)
   a84a4:	dd000417 	ldw	r20,16(sp)
   a84a8:	dcc00317 	ldw	r19,12(sp)
   a84ac:	dc800217 	ldw	r18,8(sp)
   a84b0:	dc400117 	ldw	r17,4(sp)
   a84b4:	dc000017 	ldw	r16,0(sp)
   a84b8:	dec00604 	addi	sp,sp,24
   a84bc:	f800283a 	ret
   a84c0:	8cc00f2e 	bgeu	r17,r19,a8500 <__b2d+0xe0>
   a84c4:	117ffd44 	addi	r5,r2,-11
   a84c8:	80bffe17 	ldw	r2,-8(r16)
   a84cc:	28000e26 	beq	r5,zero,a8508 <__b2d+0xe8>
   a84d0:	1949c83a 	sub	r4,r3,r5
   a84d4:	9164983a 	sll	r18,r18,r5
   a84d8:	1106d83a 	srl	r3,r2,r4
   a84dc:	81bffe04 	addi	r6,r16,-8
   a84e0:	948ffc34 	orhi	r18,r18,16368
   a84e4:	90c6b03a 	or	r3,r18,r3
   a84e8:	89800e2e 	bgeu	r17,r6,a8524 <__b2d+0x104>
   a84ec:	81bffd17 	ldw	r6,-12(r16)
   a84f0:	1144983a 	sll	r2,r2,r5
   a84f4:	310ad83a 	srl	r5,r6,r4
   a84f8:	2884b03a 	or	r2,r5,r2
   a84fc:	003fe806 	br	a84a0 <__alt_data_end+0xfffe84a0>
   a8500:	10bffd44 	addi	r2,r2,-11
   a8504:	1000041e 	bne	r2,zero,a8518 <__b2d+0xf8>
   a8508:	90cffc34 	orhi	r3,r18,16368
   a850c:	003fe406 	br	a84a0 <__alt_data_end+0xfffe84a0>
   a8510:	000d883a 	mov	r6,zero
   a8514:	003fdf06 	br	a8494 <__alt_data_end+0xfffe8494>
   a8518:	90a4983a 	sll	r18,r18,r2
   a851c:	0005883a 	mov	r2,zero
   a8520:	003ff906 	br	a8508 <__alt_data_end+0xfffe8508>
   a8524:	1144983a 	sll	r2,r2,r5
   a8528:	003fdd06 	br	a84a0 <__alt_data_end+0xfffe84a0>

000a852c <__d2b>:
   a852c:	defff804 	addi	sp,sp,-32
   a8530:	dc000215 	stw	r16,8(sp)
   a8534:	3021883a 	mov	r16,r6
   a8538:	dc400315 	stw	r17,12(sp)
   a853c:	8022907a 	slli	r17,r16,1
   a8540:	dd000615 	stw	r20,24(sp)
   a8544:	2829883a 	mov	r20,r5
   a8548:	01400044 	movi	r5,1
   a854c:	dcc00515 	stw	r19,20(sp)
   a8550:	dc800415 	stw	r18,16(sp)
   a8554:	dfc00715 	stw	ra,28(sp)
   a8558:	3825883a 	mov	r18,r7
   a855c:	8822d57a 	srli	r17,r17,21
   a8560:	00a77dc0 	call	a77dc <_Balloc>
   a8564:	1027883a 	mov	r19,r2
   a8568:	00800434 	movhi	r2,16
   a856c:	10bfffc4 	addi	r2,r2,-1
   a8570:	808c703a 	and	r6,r16,r2
   a8574:	88000126 	beq	r17,zero,a857c <__d2b+0x50>
   a8578:	31800434 	orhi	r6,r6,16
   a857c:	d9800015 	stw	r6,0(sp)
   a8580:	a0002426 	beq	r20,zero,a8614 <__d2b+0xe8>
   a8584:	d9000104 	addi	r4,sp,4
   a8588:	dd000115 	stw	r20,4(sp)
   a858c:	00a7b600 	call	a7b60 <__lo0bits>
   a8590:	d8c00017 	ldw	r3,0(sp)
   a8594:	10002f1e 	bne	r2,zero,a8654 <__d2b+0x128>
   a8598:	d9000117 	ldw	r4,4(sp)
   a859c:	99000515 	stw	r4,20(r19)
   a85a0:	1821003a 	cmpeq	r16,r3,zero
   a85a4:	01000084 	movi	r4,2
   a85a8:	2421c83a 	sub	r16,r4,r16
   a85ac:	98c00615 	stw	r3,24(r19)
   a85b0:	9c000415 	stw	r16,16(r19)
   a85b4:	88001f1e 	bne	r17,zero,a8634 <__d2b+0x108>
   a85b8:	10bef384 	addi	r2,r2,-1074
   a85bc:	90800015 	stw	r2,0(r18)
   a85c0:	00900034 	movhi	r2,16384
   a85c4:	10bfffc4 	addi	r2,r2,-1
   a85c8:	8085883a 	add	r2,r16,r2
   a85cc:	1085883a 	add	r2,r2,r2
   a85d0:	1085883a 	add	r2,r2,r2
   a85d4:	9885883a 	add	r2,r19,r2
   a85d8:	11000517 	ldw	r4,20(r2)
   a85dc:	8020917a 	slli	r16,r16,5
   a85e0:	00a7af80 	call	a7af8 <__hi0bits>
   a85e4:	d8c00817 	ldw	r3,32(sp)
   a85e8:	8085c83a 	sub	r2,r16,r2
   a85ec:	18800015 	stw	r2,0(r3)
   a85f0:	9805883a 	mov	r2,r19
   a85f4:	dfc00717 	ldw	ra,28(sp)
   a85f8:	dd000617 	ldw	r20,24(sp)
   a85fc:	dcc00517 	ldw	r19,20(sp)
   a8600:	dc800417 	ldw	r18,16(sp)
   a8604:	dc400317 	ldw	r17,12(sp)
   a8608:	dc000217 	ldw	r16,8(sp)
   a860c:	dec00804 	addi	sp,sp,32
   a8610:	f800283a 	ret
   a8614:	d809883a 	mov	r4,sp
   a8618:	00a7b600 	call	a7b60 <__lo0bits>
   a861c:	d8c00017 	ldw	r3,0(sp)
   a8620:	04000044 	movi	r16,1
   a8624:	9c000415 	stw	r16,16(r19)
   a8628:	98c00515 	stw	r3,20(r19)
   a862c:	10800804 	addi	r2,r2,32
   a8630:	883fe126 	beq	r17,zero,a85b8 <__alt_data_end+0xfffe85b8>
   a8634:	00c00d44 	movi	r3,53
   a8638:	8c7ef344 	addi	r17,r17,-1075
   a863c:	88a3883a 	add	r17,r17,r2
   a8640:	1885c83a 	sub	r2,r3,r2
   a8644:	d8c00817 	ldw	r3,32(sp)
   a8648:	94400015 	stw	r17,0(r18)
   a864c:	18800015 	stw	r2,0(r3)
   a8650:	003fe706 	br	a85f0 <__alt_data_end+0xfffe85f0>
   a8654:	01000804 	movi	r4,32
   a8658:	2089c83a 	sub	r4,r4,r2
   a865c:	1908983a 	sll	r4,r3,r4
   a8660:	d9400117 	ldw	r5,4(sp)
   a8664:	1886d83a 	srl	r3,r3,r2
   a8668:	2148b03a 	or	r4,r4,r5
   a866c:	99000515 	stw	r4,20(r19)
   a8670:	d8c00015 	stw	r3,0(sp)
   a8674:	003fca06 	br	a85a0 <__alt_data_end+0xfffe85a0>

000a8678 <__ratio>:
   a8678:	defff904 	addi	sp,sp,-28
   a867c:	dc400315 	stw	r17,12(sp)
   a8680:	2823883a 	mov	r17,r5
   a8684:	d9400104 	addi	r5,sp,4
   a8688:	dfc00615 	stw	ra,24(sp)
   a868c:	dcc00515 	stw	r19,20(sp)
   a8690:	dc800415 	stw	r18,16(sp)
   a8694:	2027883a 	mov	r19,r4
   a8698:	dc000215 	stw	r16,8(sp)
   a869c:	00a84200 	call	a8420 <__b2d>
   a86a0:	d80b883a 	mov	r5,sp
   a86a4:	8809883a 	mov	r4,r17
   a86a8:	1025883a 	mov	r18,r2
   a86ac:	1821883a 	mov	r16,r3
   a86b0:	00a84200 	call	a8420 <__b2d>
   a86b4:	8a000417 	ldw	r8,16(r17)
   a86b8:	99000417 	ldw	r4,16(r19)
   a86bc:	d9400117 	ldw	r5,4(sp)
   a86c0:	2209c83a 	sub	r4,r4,r8
   a86c4:	2010917a 	slli	r8,r4,5
   a86c8:	d9000017 	ldw	r4,0(sp)
   a86cc:	2909c83a 	sub	r4,r5,r4
   a86d0:	4109883a 	add	r4,r8,r4
   a86d4:	01000e0e 	bge	zero,r4,a8710 <__ratio+0x98>
   a86d8:	2008953a 	slli	r4,r4,20
   a86dc:	2421883a 	add	r16,r4,r16
   a86e0:	100d883a 	mov	r6,r2
   a86e4:	180f883a 	mov	r7,r3
   a86e8:	9009883a 	mov	r4,r18
   a86ec:	800b883a 	mov	r5,r16
   a86f0:	00ac1b40 	call	ac1b4 <__divdf3>
   a86f4:	dfc00617 	ldw	ra,24(sp)
   a86f8:	dcc00517 	ldw	r19,20(sp)
   a86fc:	dc800417 	ldw	r18,16(sp)
   a8700:	dc400317 	ldw	r17,12(sp)
   a8704:	dc000217 	ldw	r16,8(sp)
   a8708:	dec00704 	addi	sp,sp,28
   a870c:	f800283a 	ret
   a8710:	2008953a 	slli	r4,r4,20
   a8714:	1907c83a 	sub	r3,r3,r4
   a8718:	003ff106 	br	a86e0 <__alt_data_end+0xfffe86e0>

000a871c <_mprec_log10>:
   a871c:	defffe04 	addi	sp,sp,-8
   a8720:	dc000015 	stw	r16,0(sp)
   a8724:	dfc00115 	stw	ra,4(sp)
   a8728:	008005c4 	movi	r2,23
   a872c:	2021883a 	mov	r16,r4
   a8730:	11000d0e 	bge	r2,r4,a8768 <_mprec_log10+0x4c>
   a8734:	0005883a 	mov	r2,zero
   a8738:	00cffc34 	movhi	r3,16368
   a873c:	843fffc4 	addi	r16,r16,-1
   a8740:	000d883a 	mov	r6,zero
   a8744:	01d00934 	movhi	r7,16420
   a8748:	1009883a 	mov	r4,r2
   a874c:	180b883a 	mov	r5,r3
   a8750:	00acddc0 	call	acddc <__muldf3>
   a8754:	803ff91e 	bne	r16,zero,a873c <__alt_data_end+0xfffe873c>
   a8758:	dfc00117 	ldw	ra,4(sp)
   a875c:	dc000017 	ldw	r16,0(sp)
   a8760:	dec00204 	addi	sp,sp,8
   a8764:	f800283a 	ret
   a8768:	202090fa 	slli	r16,r4,3
   a876c:	008002f4 	movhi	r2,11
   a8770:	10853704 	addi	r2,r2,5340
   a8774:	1421883a 	add	r16,r2,r16
   a8778:	80800017 	ldw	r2,0(r16)
   a877c:	80c00117 	ldw	r3,4(r16)
   a8780:	dfc00117 	ldw	ra,4(sp)
   a8784:	dc000017 	ldw	r16,0(sp)
   a8788:	dec00204 	addi	sp,sp,8
   a878c:	f800283a 	ret

000a8790 <__copybits>:
   a8790:	297fffc4 	addi	r5,r5,-1
   a8794:	280fd17a 	srai	r7,r5,5
   a8798:	30c00417 	ldw	r3,16(r6)
   a879c:	30800504 	addi	r2,r6,20
   a87a0:	39c00044 	addi	r7,r7,1
   a87a4:	18c7883a 	add	r3,r3,r3
   a87a8:	39cf883a 	add	r7,r7,r7
   a87ac:	18c7883a 	add	r3,r3,r3
   a87b0:	39cf883a 	add	r7,r7,r7
   a87b4:	10c7883a 	add	r3,r2,r3
   a87b8:	21cf883a 	add	r7,r4,r7
   a87bc:	10c00d2e 	bgeu	r2,r3,a87f4 <__copybits+0x64>
   a87c0:	200b883a 	mov	r5,r4
   a87c4:	12000017 	ldw	r8,0(r2)
   a87c8:	29400104 	addi	r5,r5,4
   a87cc:	10800104 	addi	r2,r2,4
   a87d0:	2a3fff15 	stw	r8,-4(r5)
   a87d4:	10fffb36 	bltu	r2,r3,a87c4 <__alt_data_end+0xfffe87c4>
   a87d8:	1985c83a 	sub	r2,r3,r6
   a87dc:	10bffac4 	addi	r2,r2,-21
   a87e0:	1004d0ba 	srli	r2,r2,2
   a87e4:	10800044 	addi	r2,r2,1
   a87e8:	1085883a 	add	r2,r2,r2
   a87ec:	1085883a 	add	r2,r2,r2
   a87f0:	2089883a 	add	r4,r4,r2
   a87f4:	21c0032e 	bgeu	r4,r7,a8804 <__copybits+0x74>
   a87f8:	20000015 	stw	zero,0(r4)
   a87fc:	21000104 	addi	r4,r4,4
   a8800:	21fffd36 	bltu	r4,r7,a87f8 <__alt_data_end+0xfffe87f8>
   a8804:	f800283a 	ret

000a8808 <__any_on>:
   a8808:	20c00417 	ldw	r3,16(r4)
   a880c:	2805d17a 	srai	r2,r5,5
   a8810:	21000504 	addi	r4,r4,20
   a8814:	18800d0e 	bge	r3,r2,a884c <__any_on+0x44>
   a8818:	18c7883a 	add	r3,r3,r3
   a881c:	18c7883a 	add	r3,r3,r3
   a8820:	20c7883a 	add	r3,r4,r3
   a8824:	20c0192e 	bgeu	r4,r3,a888c <__any_on+0x84>
   a8828:	18bfff17 	ldw	r2,-4(r3)
   a882c:	18ffff04 	addi	r3,r3,-4
   a8830:	1000041e 	bne	r2,zero,a8844 <__any_on+0x3c>
   a8834:	20c0142e 	bgeu	r4,r3,a8888 <__any_on+0x80>
   a8838:	18ffff04 	addi	r3,r3,-4
   a883c:	19400017 	ldw	r5,0(r3)
   a8840:	283ffc26 	beq	r5,zero,a8834 <__alt_data_end+0xfffe8834>
   a8844:	00800044 	movi	r2,1
   a8848:	f800283a 	ret
   a884c:	10c00a0e 	bge	r2,r3,a8878 <__any_on+0x70>
   a8850:	1085883a 	add	r2,r2,r2
   a8854:	1085883a 	add	r2,r2,r2
   a8858:	294007cc 	andi	r5,r5,31
   a885c:	2087883a 	add	r3,r4,r2
   a8860:	283ff026 	beq	r5,zero,a8824 <__alt_data_end+0xfffe8824>
   a8864:	19800017 	ldw	r6,0(r3)
   a8868:	3144d83a 	srl	r2,r6,r5
   a886c:	114a983a 	sll	r5,r2,r5
   a8870:	317ff41e 	bne	r6,r5,a8844 <__alt_data_end+0xfffe8844>
   a8874:	003feb06 	br	a8824 <__alt_data_end+0xfffe8824>
   a8878:	1085883a 	add	r2,r2,r2
   a887c:	1085883a 	add	r2,r2,r2
   a8880:	2087883a 	add	r3,r4,r2
   a8884:	003fe706 	br	a8824 <__alt_data_end+0xfffe8824>
   a8888:	f800283a 	ret
   a888c:	0005883a 	mov	r2,zero
   a8890:	f800283a 	ret

000a8894 <_read_r>:
   a8894:	defffd04 	addi	sp,sp,-12
   a8898:	2805883a 	mov	r2,r5
   a889c:	dc000015 	stw	r16,0(sp)
   a88a0:	040002f4 	movhi	r16,11
   a88a4:	dc400115 	stw	r17,4(sp)
   a88a8:	300b883a 	mov	r5,r6
   a88ac:	8413ad04 	addi	r16,r16,20148
   a88b0:	2023883a 	mov	r17,r4
   a88b4:	380d883a 	mov	r6,r7
   a88b8:	1009883a 	mov	r4,r2
   a88bc:	dfc00215 	stw	ra,8(sp)
   a88c0:	80000015 	stw	zero,0(r16)
   a88c4:	00aea500 	call	aea50 <read>
   a88c8:	00ffffc4 	movi	r3,-1
   a88cc:	10c00526 	beq	r2,r3,a88e4 <_read_r+0x50>
   a88d0:	dfc00217 	ldw	ra,8(sp)
   a88d4:	dc400117 	ldw	r17,4(sp)
   a88d8:	dc000017 	ldw	r16,0(sp)
   a88dc:	dec00304 	addi	sp,sp,12
   a88e0:	f800283a 	ret
   a88e4:	80c00017 	ldw	r3,0(r16)
   a88e8:	183ff926 	beq	r3,zero,a88d0 <__alt_data_end+0xfffe88d0>
   a88ec:	88c00015 	stw	r3,0(r17)
   a88f0:	003ff706 	br	a88d0 <__alt_data_end+0xfffe88d0>

000a88f4 <_realloc_r>:
   a88f4:	defff604 	addi	sp,sp,-40
   a88f8:	dc800215 	stw	r18,8(sp)
   a88fc:	dfc00915 	stw	ra,36(sp)
   a8900:	df000815 	stw	fp,32(sp)
   a8904:	ddc00715 	stw	r23,28(sp)
   a8908:	dd800615 	stw	r22,24(sp)
   a890c:	dd400515 	stw	r21,20(sp)
   a8910:	dd000415 	stw	r20,16(sp)
   a8914:	dcc00315 	stw	r19,12(sp)
   a8918:	dc400115 	stw	r17,4(sp)
   a891c:	dc000015 	stw	r16,0(sp)
   a8920:	3025883a 	mov	r18,r6
   a8924:	2800b726 	beq	r5,zero,a8c04 <_realloc_r+0x310>
   a8928:	282b883a 	mov	r21,r5
   a892c:	2029883a 	mov	r20,r4
   a8930:	00ae7480 	call	ae748 <__malloc_lock>
   a8934:	a8bfff17 	ldw	r2,-4(r21)
   a8938:	043fff04 	movi	r16,-4
   a893c:	90c002c4 	addi	r3,r18,11
   a8940:	01000584 	movi	r4,22
   a8944:	acfffe04 	addi	r19,r21,-8
   a8948:	1420703a 	and	r16,r2,r16
   a894c:	20c0332e 	bgeu	r4,r3,a8a1c <_realloc_r+0x128>
   a8950:	047ffe04 	movi	r17,-8
   a8954:	1c62703a 	and	r17,r3,r17
   a8958:	8807883a 	mov	r3,r17
   a895c:	88005816 	blt	r17,zero,a8ac0 <_realloc_r+0x1cc>
   a8960:	8c805736 	bltu	r17,r18,a8ac0 <_realloc_r+0x1cc>
   a8964:	80c0300e 	bge	r16,r3,a8a28 <_realloc_r+0x134>
   a8968:	070002f4 	movhi	fp,11
   a896c:	e706e804 	addi	fp,fp,7072
   a8970:	e1c00217 	ldw	r7,8(fp)
   a8974:	9c09883a 	add	r4,r19,r16
   a8978:	22000117 	ldw	r8,4(r4)
   a897c:	21c06326 	beq	r4,r7,a8b0c <_realloc_r+0x218>
   a8980:	017fff84 	movi	r5,-2
   a8984:	414a703a 	and	r5,r8,r5
   a8988:	214b883a 	add	r5,r4,r5
   a898c:	29800117 	ldw	r6,4(r5)
   a8990:	3180004c 	andi	r6,r6,1
   a8994:	30003f26 	beq	r6,zero,a8a94 <_realloc_r+0x1a0>
   a8998:	1080004c 	andi	r2,r2,1
   a899c:	10008326 	beq	r2,zero,a8bac <_realloc_r+0x2b8>
   a89a0:	900b883a 	mov	r5,r18
   a89a4:	a009883a 	mov	r4,r20
   a89a8:	00a1c240 	call	a1c24 <_malloc_r>
   a89ac:	1025883a 	mov	r18,r2
   a89b0:	10011e26 	beq	r2,zero,a8e2c <_realloc_r+0x538>
   a89b4:	a93fff17 	ldw	r4,-4(r21)
   a89b8:	10fffe04 	addi	r3,r2,-8
   a89bc:	00bfff84 	movi	r2,-2
   a89c0:	2084703a 	and	r2,r4,r2
   a89c4:	9885883a 	add	r2,r19,r2
   a89c8:	1880ee26 	beq	r3,r2,a8d84 <_realloc_r+0x490>
   a89cc:	81bfff04 	addi	r6,r16,-4
   a89d0:	00800904 	movi	r2,36
   a89d4:	1180b836 	bltu	r2,r6,a8cb8 <_realloc_r+0x3c4>
   a89d8:	00c004c4 	movi	r3,19
   a89dc:	19809636 	bltu	r3,r6,a8c38 <_realloc_r+0x344>
   a89e0:	9005883a 	mov	r2,r18
   a89e4:	a807883a 	mov	r3,r21
   a89e8:	19000017 	ldw	r4,0(r3)
   a89ec:	11000015 	stw	r4,0(r2)
   a89f0:	19000117 	ldw	r4,4(r3)
   a89f4:	11000115 	stw	r4,4(r2)
   a89f8:	18c00217 	ldw	r3,8(r3)
   a89fc:	10c00215 	stw	r3,8(r2)
   a8a00:	a80b883a 	mov	r5,r21
   a8a04:	a009883a 	mov	r4,r20
   a8a08:	00a10f40 	call	a10f4 <_free_r>
   a8a0c:	a009883a 	mov	r4,r20
   a8a10:	00ae76c0 	call	ae76c <__malloc_unlock>
   a8a14:	9005883a 	mov	r2,r18
   a8a18:	00001206 	br	a8a64 <_realloc_r+0x170>
   a8a1c:	00c00404 	movi	r3,16
   a8a20:	1823883a 	mov	r17,r3
   a8a24:	003fce06 	br	a8960 <__alt_data_end+0xfffe8960>
   a8a28:	a825883a 	mov	r18,r21
   a8a2c:	8445c83a 	sub	r2,r16,r17
   a8a30:	00c003c4 	movi	r3,15
   a8a34:	18802636 	bltu	r3,r2,a8ad0 <_realloc_r+0x1dc>
   a8a38:	99800117 	ldw	r6,4(r19)
   a8a3c:	9c07883a 	add	r3,r19,r16
   a8a40:	3180004c 	andi	r6,r6,1
   a8a44:	3420b03a 	or	r16,r6,r16
   a8a48:	9c000115 	stw	r16,4(r19)
   a8a4c:	18800117 	ldw	r2,4(r3)
   a8a50:	10800054 	ori	r2,r2,1
   a8a54:	18800115 	stw	r2,4(r3)
   a8a58:	a009883a 	mov	r4,r20
   a8a5c:	00ae76c0 	call	ae76c <__malloc_unlock>
   a8a60:	9005883a 	mov	r2,r18
   a8a64:	dfc00917 	ldw	ra,36(sp)
   a8a68:	df000817 	ldw	fp,32(sp)
   a8a6c:	ddc00717 	ldw	r23,28(sp)
   a8a70:	dd800617 	ldw	r22,24(sp)
   a8a74:	dd400517 	ldw	r21,20(sp)
   a8a78:	dd000417 	ldw	r20,16(sp)
   a8a7c:	dcc00317 	ldw	r19,12(sp)
   a8a80:	dc800217 	ldw	r18,8(sp)
   a8a84:	dc400117 	ldw	r17,4(sp)
   a8a88:	dc000017 	ldw	r16,0(sp)
   a8a8c:	dec00a04 	addi	sp,sp,40
   a8a90:	f800283a 	ret
   a8a94:	017fff04 	movi	r5,-4
   a8a98:	414a703a 	and	r5,r8,r5
   a8a9c:	814d883a 	add	r6,r16,r5
   a8aa0:	30c01f16 	blt	r6,r3,a8b20 <_realloc_r+0x22c>
   a8aa4:	20800317 	ldw	r2,12(r4)
   a8aa8:	20c00217 	ldw	r3,8(r4)
   a8aac:	a825883a 	mov	r18,r21
   a8ab0:	3021883a 	mov	r16,r6
   a8ab4:	18800315 	stw	r2,12(r3)
   a8ab8:	10c00215 	stw	r3,8(r2)
   a8abc:	003fdb06 	br	a8a2c <__alt_data_end+0xfffe8a2c>
   a8ac0:	00800304 	movi	r2,12
   a8ac4:	a0800015 	stw	r2,0(r20)
   a8ac8:	0005883a 	mov	r2,zero
   a8acc:	003fe506 	br	a8a64 <__alt_data_end+0xfffe8a64>
   a8ad0:	98c00117 	ldw	r3,4(r19)
   a8ad4:	9c4b883a 	add	r5,r19,r17
   a8ad8:	11000054 	ori	r4,r2,1
   a8adc:	18c0004c 	andi	r3,r3,1
   a8ae0:	1c62b03a 	or	r17,r3,r17
   a8ae4:	9c400115 	stw	r17,4(r19)
   a8ae8:	29000115 	stw	r4,4(r5)
   a8aec:	2885883a 	add	r2,r5,r2
   a8af0:	10c00117 	ldw	r3,4(r2)
   a8af4:	29400204 	addi	r5,r5,8
   a8af8:	a009883a 	mov	r4,r20
   a8afc:	18c00054 	ori	r3,r3,1
   a8b00:	10c00115 	stw	r3,4(r2)
   a8b04:	00a10f40 	call	a10f4 <_free_r>
   a8b08:	003fd306 	br	a8a58 <__alt_data_end+0xfffe8a58>
   a8b0c:	017fff04 	movi	r5,-4
   a8b10:	414a703a 	and	r5,r8,r5
   a8b14:	89800404 	addi	r6,r17,16
   a8b18:	8151883a 	add	r8,r16,r5
   a8b1c:	4180590e 	bge	r8,r6,a8c84 <_realloc_r+0x390>
   a8b20:	1080004c 	andi	r2,r2,1
   a8b24:	103f9e1e 	bne	r2,zero,a89a0 <__alt_data_end+0xfffe89a0>
   a8b28:	adbffe17 	ldw	r22,-8(r21)
   a8b2c:	00bfff04 	movi	r2,-4
   a8b30:	9dadc83a 	sub	r22,r19,r22
   a8b34:	b1800117 	ldw	r6,4(r22)
   a8b38:	3084703a 	and	r2,r6,r2
   a8b3c:	20002026 	beq	r4,zero,a8bc0 <_realloc_r+0x2cc>
   a8b40:	80af883a 	add	r23,r16,r2
   a8b44:	b96f883a 	add	r23,r23,r5
   a8b48:	21c05f26 	beq	r4,r7,a8cc8 <_realloc_r+0x3d4>
   a8b4c:	b8c01c16 	blt	r23,r3,a8bc0 <_realloc_r+0x2cc>
   a8b50:	20800317 	ldw	r2,12(r4)
   a8b54:	20c00217 	ldw	r3,8(r4)
   a8b58:	81bfff04 	addi	r6,r16,-4
   a8b5c:	01000904 	movi	r4,36
   a8b60:	18800315 	stw	r2,12(r3)
   a8b64:	10c00215 	stw	r3,8(r2)
   a8b68:	b0c00217 	ldw	r3,8(r22)
   a8b6c:	b0800317 	ldw	r2,12(r22)
   a8b70:	b4800204 	addi	r18,r22,8
   a8b74:	18800315 	stw	r2,12(r3)
   a8b78:	10c00215 	stw	r3,8(r2)
   a8b7c:	21801b36 	bltu	r4,r6,a8bec <_realloc_r+0x2f8>
   a8b80:	008004c4 	movi	r2,19
   a8b84:	1180352e 	bgeu	r2,r6,a8c5c <_realloc_r+0x368>
   a8b88:	a8800017 	ldw	r2,0(r21)
   a8b8c:	b0800215 	stw	r2,8(r22)
   a8b90:	a8800117 	ldw	r2,4(r21)
   a8b94:	b0800315 	stw	r2,12(r22)
   a8b98:	008006c4 	movi	r2,27
   a8b9c:	11807f36 	bltu	r2,r6,a8d9c <_realloc_r+0x4a8>
   a8ba0:	b0800404 	addi	r2,r22,16
   a8ba4:	ad400204 	addi	r21,r21,8
   a8ba8:	00002d06 	br	a8c60 <_realloc_r+0x36c>
   a8bac:	adbffe17 	ldw	r22,-8(r21)
   a8bb0:	00bfff04 	movi	r2,-4
   a8bb4:	9dadc83a 	sub	r22,r19,r22
   a8bb8:	b1000117 	ldw	r4,4(r22)
   a8bbc:	2084703a 	and	r2,r4,r2
   a8bc0:	b03f7726 	beq	r22,zero,a89a0 <__alt_data_end+0xfffe89a0>
   a8bc4:	80af883a 	add	r23,r16,r2
   a8bc8:	b8ff7516 	blt	r23,r3,a89a0 <__alt_data_end+0xfffe89a0>
   a8bcc:	b0800317 	ldw	r2,12(r22)
   a8bd0:	b0c00217 	ldw	r3,8(r22)
   a8bd4:	81bfff04 	addi	r6,r16,-4
   a8bd8:	01000904 	movi	r4,36
   a8bdc:	18800315 	stw	r2,12(r3)
   a8be0:	10c00215 	stw	r3,8(r2)
   a8be4:	b4800204 	addi	r18,r22,8
   a8be8:	21bfe52e 	bgeu	r4,r6,a8b80 <__alt_data_end+0xfffe8b80>
   a8bec:	a80b883a 	mov	r5,r21
   a8bf0:	9009883a 	mov	r4,r18
   a8bf4:	00a76800 	call	a7680 <memmove>
   a8bf8:	b821883a 	mov	r16,r23
   a8bfc:	b027883a 	mov	r19,r22
   a8c00:	003f8a06 	br	a8a2c <__alt_data_end+0xfffe8a2c>
   a8c04:	300b883a 	mov	r5,r6
   a8c08:	dfc00917 	ldw	ra,36(sp)
   a8c0c:	df000817 	ldw	fp,32(sp)
   a8c10:	ddc00717 	ldw	r23,28(sp)
   a8c14:	dd800617 	ldw	r22,24(sp)
   a8c18:	dd400517 	ldw	r21,20(sp)
   a8c1c:	dd000417 	ldw	r20,16(sp)
   a8c20:	dcc00317 	ldw	r19,12(sp)
   a8c24:	dc800217 	ldw	r18,8(sp)
   a8c28:	dc400117 	ldw	r17,4(sp)
   a8c2c:	dc000017 	ldw	r16,0(sp)
   a8c30:	dec00a04 	addi	sp,sp,40
   a8c34:	00a1c241 	jmpi	a1c24 <_malloc_r>
   a8c38:	a8c00017 	ldw	r3,0(r21)
   a8c3c:	90c00015 	stw	r3,0(r18)
   a8c40:	a8c00117 	ldw	r3,4(r21)
   a8c44:	90c00115 	stw	r3,4(r18)
   a8c48:	00c006c4 	movi	r3,27
   a8c4c:	19804536 	bltu	r3,r6,a8d64 <_realloc_r+0x470>
   a8c50:	90800204 	addi	r2,r18,8
   a8c54:	a8c00204 	addi	r3,r21,8
   a8c58:	003f6306 	br	a89e8 <__alt_data_end+0xfffe89e8>
   a8c5c:	9005883a 	mov	r2,r18
   a8c60:	a8c00017 	ldw	r3,0(r21)
   a8c64:	b821883a 	mov	r16,r23
   a8c68:	b027883a 	mov	r19,r22
   a8c6c:	10c00015 	stw	r3,0(r2)
   a8c70:	a8c00117 	ldw	r3,4(r21)
   a8c74:	10c00115 	stw	r3,4(r2)
   a8c78:	a8c00217 	ldw	r3,8(r21)
   a8c7c:	10c00215 	stw	r3,8(r2)
   a8c80:	003f6a06 	br	a8a2c <__alt_data_end+0xfffe8a2c>
   a8c84:	9c67883a 	add	r19,r19,r17
   a8c88:	4445c83a 	sub	r2,r8,r17
   a8c8c:	e4c00215 	stw	r19,8(fp)
   a8c90:	10800054 	ori	r2,r2,1
   a8c94:	98800115 	stw	r2,4(r19)
   a8c98:	a8bfff17 	ldw	r2,-4(r21)
   a8c9c:	a009883a 	mov	r4,r20
   a8ca0:	1080004c 	andi	r2,r2,1
   a8ca4:	1462b03a 	or	r17,r2,r17
   a8ca8:	ac7fff15 	stw	r17,-4(r21)
   a8cac:	00ae76c0 	call	ae76c <__malloc_unlock>
   a8cb0:	a805883a 	mov	r2,r21
   a8cb4:	003f6b06 	br	a8a64 <__alt_data_end+0xfffe8a64>
   a8cb8:	a80b883a 	mov	r5,r21
   a8cbc:	9009883a 	mov	r4,r18
   a8cc0:	00a76800 	call	a7680 <memmove>
   a8cc4:	003f4e06 	br	a8a00 <__alt_data_end+0xfffe8a00>
   a8cc8:	89000404 	addi	r4,r17,16
   a8ccc:	b93fbc16 	blt	r23,r4,a8bc0 <__alt_data_end+0xfffe8bc0>
   a8cd0:	b0800317 	ldw	r2,12(r22)
   a8cd4:	b0c00217 	ldw	r3,8(r22)
   a8cd8:	81bfff04 	addi	r6,r16,-4
   a8cdc:	01000904 	movi	r4,36
   a8ce0:	18800315 	stw	r2,12(r3)
   a8ce4:	10c00215 	stw	r3,8(r2)
   a8ce8:	b4800204 	addi	r18,r22,8
   a8cec:	21804336 	bltu	r4,r6,a8dfc <_realloc_r+0x508>
   a8cf0:	008004c4 	movi	r2,19
   a8cf4:	11803f2e 	bgeu	r2,r6,a8df4 <_realloc_r+0x500>
   a8cf8:	a8800017 	ldw	r2,0(r21)
   a8cfc:	b0800215 	stw	r2,8(r22)
   a8d00:	a8800117 	ldw	r2,4(r21)
   a8d04:	b0800315 	stw	r2,12(r22)
   a8d08:	008006c4 	movi	r2,27
   a8d0c:	11803f36 	bltu	r2,r6,a8e0c <_realloc_r+0x518>
   a8d10:	b0800404 	addi	r2,r22,16
   a8d14:	ad400204 	addi	r21,r21,8
   a8d18:	a8c00017 	ldw	r3,0(r21)
   a8d1c:	10c00015 	stw	r3,0(r2)
   a8d20:	a8c00117 	ldw	r3,4(r21)
   a8d24:	10c00115 	stw	r3,4(r2)
   a8d28:	a8c00217 	ldw	r3,8(r21)
   a8d2c:	10c00215 	stw	r3,8(r2)
   a8d30:	b447883a 	add	r3,r22,r17
   a8d34:	bc45c83a 	sub	r2,r23,r17
   a8d38:	e0c00215 	stw	r3,8(fp)
   a8d3c:	10800054 	ori	r2,r2,1
   a8d40:	18800115 	stw	r2,4(r3)
   a8d44:	b0800117 	ldw	r2,4(r22)
   a8d48:	a009883a 	mov	r4,r20
   a8d4c:	1080004c 	andi	r2,r2,1
   a8d50:	1462b03a 	or	r17,r2,r17
   a8d54:	b4400115 	stw	r17,4(r22)
   a8d58:	00ae76c0 	call	ae76c <__malloc_unlock>
   a8d5c:	9005883a 	mov	r2,r18
   a8d60:	003f4006 	br	a8a64 <__alt_data_end+0xfffe8a64>
   a8d64:	a8c00217 	ldw	r3,8(r21)
   a8d68:	90c00215 	stw	r3,8(r18)
   a8d6c:	a8c00317 	ldw	r3,12(r21)
   a8d70:	90c00315 	stw	r3,12(r18)
   a8d74:	30801126 	beq	r6,r2,a8dbc <_realloc_r+0x4c8>
   a8d78:	90800404 	addi	r2,r18,16
   a8d7c:	a8c00404 	addi	r3,r21,16
   a8d80:	003f1906 	br	a89e8 <__alt_data_end+0xfffe89e8>
   a8d84:	90ffff17 	ldw	r3,-4(r18)
   a8d88:	00bfff04 	movi	r2,-4
   a8d8c:	a825883a 	mov	r18,r21
   a8d90:	1884703a 	and	r2,r3,r2
   a8d94:	80a1883a 	add	r16,r16,r2
   a8d98:	003f2406 	br	a8a2c <__alt_data_end+0xfffe8a2c>
   a8d9c:	a8800217 	ldw	r2,8(r21)
   a8da0:	b0800415 	stw	r2,16(r22)
   a8da4:	a8800317 	ldw	r2,12(r21)
   a8da8:	b0800515 	stw	r2,20(r22)
   a8dac:	31000a26 	beq	r6,r4,a8dd8 <_realloc_r+0x4e4>
   a8db0:	b0800604 	addi	r2,r22,24
   a8db4:	ad400404 	addi	r21,r21,16
   a8db8:	003fa906 	br	a8c60 <__alt_data_end+0xfffe8c60>
   a8dbc:	a9000417 	ldw	r4,16(r21)
   a8dc0:	90800604 	addi	r2,r18,24
   a8dc4:	a8c00604 	addi	r3,r21,24
   a8dc8:	91000415 	stw	r4,16(r18)
   a8dcc:	a9000517 	ldw	r4,20(r21)
   a8dd0:	91000515 	stw	r4,20(r18)
   a8dd4:	003f0406 	br	a89e8 <__alt_data_end+0xfffe89e8>
   a8dd8:	a8c00417 	ldw	r3,16(r21)
   a8ddc:	ad400604 	addi	r21,r21,24
   a8de0:	b0800804 	addi	r2,r22,32
   a8de4:	b0c00615 	stw	r3,24(r22)
   a8de8:	a8ffff17 	ldw	r3,-4(r21)
   a8dec:	b0c00715 	stw	r3,28(r22)
   a8df0:	003f9b06 	br	a8c60 <__alt_data_end+0xfffe8c60>
   a8df4:	9005883a 	mov	r2,r18
   a8df8:	003fc706 	br	a8d18 <__alt_data_end+0xfffe8d18>
   a8dfc:	a80b883a 	mov	r5,r21
   a8e00:	9009883a 	mov	r4,r18
   a8e04:	00a76800 	call	a7680 <memmove>
   a8e08:	003fc906 	br	a8d30 <__alt_data_end+0xfffe8d30>
   a8e0c:	a8800217 	ldw	r2,8(r21)
   a8e10:	b0800415 	stw	r2,16(r22)
   a8e14:	a8800317 	ldw	r2,12(r21)
   a8e18:	b0800515 	stw	r2,20(r22)
   a8e1c:	31000726 	beq	r6,r4,a8e3c <_realloc_r+0x548>
   a8e20:	b0800604 	addi	r2,r22,24
   a8e24:	ad400404 	addi	r21,r21,16
   a8e28:	003fbb06 	br	a8d18 <__alt_data_end+0xfffe8d18>
   a8e2c:	a009883a 	mov	r4,r20
   a8e30:	00ae76c0 	call	ae76c <__malloc_unlock>
   a8e34:	0005883a 	mov	r2,zero
   a8e38:	003f0a06 	br	a8a64 <__alt_data_end+0xfffe8a64>
   a8e3c:	a8c00417 	ldw	r3,16(r21)
   a8e40:	ad400604 	addi	r21,r21,24
   a8e44:	b0800804 	addi	r2,r22,32
   a8e48:	b0c00615 	stw	r3,24(r22)
   a8e4c:	a8ffff17 	ldw	r3,-4(r21)
   a8e50:	b0c00715 	stw	r3,28(r22)
   a8e54:	003fb006 	br	a8d18 <__alt_data_end+0xfffe8d18>

000a8e58 <__fpclassifyd>:
   a8e58:	00a00034 	movhi	r2,32768
   a8e5c:	10bfffc4 	addi	r2,r2,-1
   a8e60:	2884703a 	and	r2,r5,r2
   a8e64:	10000726 	beq	r2,zero,a8e84 <__fpclassifyd+0x2c>
   a8e68:	00fffc34 	movhi	r3,65520
   a8e6c:	019ff834 	movhi	r6,32736
   a8e70:	28c7883a 	add	r3,r5,r3
   a8e74:	31bfffc4 	addi	r6,r6,-1
   a8e78:	30c00536 	bltu	r6,r3,a8e90 <__fpclassifyd+0x38>
   a8e7c:	00800104 	movi	r2,4
   a8e80:	f800283a 	ret
   a8e84:	2000021e 	bne	r4,zero,a8e90 <__fpclassifyd+0x38>
   a8e88:	00800084 	movi	r2,2
   a8e8c:	f800283a 	ret
   a8e90:	00dffc34 	movhi	r3,32752
   a8e94:	019ff834 	movhi	r6,32736
   a8e98:	28cb883a 	add	r5,r5,r3
   a8e9c:	31bfffc4 	addi	r6,r6,-1
   a8ea0:	317ff62e 	bgeu	r6,r5,a8e7c <__alt_data_end+0xfffe8e7c>
   a8ea4:	01400434 	movhi	r5,16
   a8ea8:	297fffc4 	addi	r5,r5,-1
   a8eac:	28800236 	bltu	r5,r2,a8eb8 <__fpclassifyd+0x60>
   a8eb0:	008000c4 	movi	r2,3
   a8eb4:	f800283a 	ret
   a8eb8:	10c00226 	beq	r2,r3,a8ec4 <__fpclassifyd+0x6c>
   a8ebc:	0005883a 	mov	r2,zero
   a8ec0:	f800283a 	ret
   a8ec4:	2005003a 	cmpeq	r2,r4,zero
   a8ec8:	f800283a 	ret

000a8ecc <strcmp>:
   a8ecc:	2144b03a 	or	r2,r4,r5
   a8ed0:	108000cc 	andi	r2,r2,3
   a8ed4:	1000171e 	bne	r2,zero,a8f34 <strcmp+0x68>
   a8ed8:	20800017 	ldw	r2,0(r4)
   a8edc:	28c00017 	ldw	r3,0(r5)
   a8ee0:	10c0141e 	bne	r2,r3,a8f34 <strcmp+0x68>
   a8ee4:	027fbff4 	movhi	r9,65279
   a8ee8:	4a7fbfc4 	addi	r9,r9,-257
   a8eec:	0086303a 	nor	r3,zero,r2
   a8ef0:	02202074 	movhi	r8,32897
   a8ef4:	1245883a 	add	r2,r2,r9
   a8ef8:	42202004 	addi	r8,r8,-32640
   a8efc:	10c4703a 	and	r2,r2,r3
   a8f00:	1204703a 	and	r2,r2,r8
   a8f04:	10000226 	beq	r2,zero,a8f10 <strcmp+0x44>
   a8f08:	00002306 	br	a8f98 <strcmp+0xcc>
   a8f0c:	1000221e 	bne	r2,zero,a8f98 <strcmp+0xcc>
   a8f10:	21000104 	addi	r4,r4,4
   a8f14:	20c00017 	ldw	r3,0(r4)
   a8f18:	29400104 	addi	r5,r5,4
   a8f1c:	29800017 	ldw	r6,0(r5)
   a8f20:	1a4f883a 	add	r7,r3,r9
   a8f24:	00c4303a 	nor	r2,zero,r3
   a8f28:	3884703a 	and	r2,r7,r2
   a8f2c:	1204703a 	and	r2,r2,r8
   a8f30:	19bff626 	beq	r3,r6,a8f0c <__alt_data_end+0xfffe8f0c>
   a8f34:	20800003 	ldbu	r2,0(r4)
   a8f38:	10c03fcc 	andi	r3,r2,255
   a8f3c:	18c0201c 	xori	r3,r3,128
   a8f40:	18ffe004 	addi	r3,r3,-128
   a8f44:	18000c26 	beq	r3,zero,a8f78 <strcmp+0xac>
   a8f48:	29800007 	ldb	r6,0(r5)
   a8f4c:	19800326 	beq	r3,r6,a8f5c <strcmp+0x90>
   a8f50:	00001306 	br	a8fa0 <strcmp+0xd4>
   a8f54:	29800007 	ldb	r6,0(r5)
   a8f58:	11800b1e 	bne	r2,r6,a8f88 <strcmp+0xbc>
   a8f5c:	21000044 	addi	r4,r4,1
   a8f60:	20c00003 	ldbu	r3,0(r4)
   a8f64:	29400044 	addi	r5,r5,1
   a8f68:	18803fcc 	andi	r2,r3,255
   a8f6c:	1080201c 	xori	r2,r2,128
   a8f70:	10bfe004 	addi	r2,r2,-128
   a8f74:	103ff71e 	bne	r2,zero,a8f54 <__alt_data_end+0xfffe8f54>
   a8f78:	0007883a 	mov	r3,zero
   a8f7c:	28800003 	ldbu	r2,0(r5)
   a8f80:	1885c83a 	sub	r2,r3,r2
   a8f84:	f800283a 	ret
   a8f88:	28800003 	ldbu	r2,0(r5)
   a8f8c:	18c03fcc 	andi	r3,r3,255
   a8f90:	1885c83a 	sub	r2,r3,r2
   a8f94:	f800283a 	ret
   a8f98:	0005883a 	mov	r2,zero
   a8f9c:	f800283a 	ret
   a8fa0:	10c03fcc 	andi	r3,r2,255
   a8fa4:	003ff506 	br	a8f7c <__alt_data_end+0xfffe8f7c>

000a8fa8 <__sprint_r.part.0>:
   a8fa8:	28801917 	ldw	r2,100(r5)
   a8fac:	defff604 	addi	sp,sp,-40
   a8fb0:	dd400515 	stw	r21,20(sp)
   a8fb4:	dfc00915 	stw	ra,36(sp)
   a8fb8:	df000815 	stw	fp,32(sp)
   a8fbc:	ddc00715 	stw	r23,28(sp)
   a8fc0:	dd800615 	stw	r22,24(sp)
   a8fc4:	dd000415 	stw	r20,16(sp)
   a8fc8:	dcc00315 	stw	r19,12(sp)
   a8fcc:	dc800215 	stw	r18,8(sp)
   a8fd0:	dc400115 	stw	r17,4(sp)
   a8fd4:	dc000015 	stw	r16,0(sp)
   a8fd8:	1088000c 	andi	r2,r2,8192
   a8fdc:	302b883a 	mov	r21,r6
   a8fe0:	10002e26 	beq	r2,zero,a909c <__sprint_r.part.0+0xf4>
   a8fe4:	30800217 	ldw	r2,8(r6)
   a8fe8:	35800017 	ldw	r22,0(r6)
   a8fec:	10002926 	beq	r2,zero,a9094 <__sprint_r.part.0+0xec>
   a8ff0:	2827883a 	mov	r19,r5
   a8ff4:	2029883a 	mov	r20,r4
   a8ff8:	b5c00104 	addi	r23,r22,4
   a8ffc:	04bfffc4 	movi	r18,-1
   a9000:	bc400017 	ldw	r17,0(r23)
   a9004:	b4000017 	ldw	r16,0(r22)
   a9008:	0039883a 	mov	fp,zero
   a900c:	8822d0ba 	srli	r17,r17,2
   a9010:	8800031e 	bne	r17,zero,a9020 <__sprint_r.part.0+0x78>
   a9014:	00001806 	br	a9078 <__sprint_r.part.0+0xd0>
   a9018:	84000104 	addi	r16,r16,4
   a901c:	8f001526 	beq	r17,fp,a9074 <__sprint_r.part.0+0xcc>
   a9020:	81400017 	ldw	r5,0(r16)
   a9024:	980d883a 	mov	r6,r19
   a9028:	a009883a 	mov	r4,r20
   a902c:	00aa8e00 	call	aa8e0 <_fputwc_r>
   a9030:	e7000044 	addi	fp,fp,1
   a9034:	14bff81e 	bne	r2,r18,a9018 <__alt_data_end+0xfffe9018>
   a9038:	9005883a 	mov	r2,r18
   a903c:	a8000215 	stw	zero,8(r21)
   a9040:	a8000115 	stw	zero,4(r21)
   a9044:	dfc00917 	ldw	ra,36(sp)
   a9048:	df000817 	ldw	fp,32(sp)
   a904c:	ddc00717 	ldw	r23,28(sp)
   a9050:	dd800617 	ldw	r22,24(sp)
   a9054:	dd400517 	ldw	r21,20(sp)
   a9058:	dd000417 	ldw	r20,16(sp)
   a905c:	dcc00317 	ldw	r19,12(sp)
   a9060:	dc800217 	ldw	r18,8(sp)
   a9064:	dc400117 	ldw	r17,4(sp)
   a9068:	dc000017 	ldw	r16,0(sp)
   a906c:	dec00a04 	addi	sp,sp,40
   a9070:	f800283a 	ret
   a9074:	a8800217 	ldw	r2,8(r21)
   a9078:	8c63883a 	add	r17,r17,r17
   a907c:	8c63883a 	add	r17,r17,r17
   a9080:	1445c83a 	sub	r2,r2,r17
   a9084:	a8800215 	stw	r2,8(r21)
   a9088:	b5800204 	addi	r22,r22,8
   a908c:	bdc00204 	addi	r23,r23,8
   a9090:	103fdb1e 	bne	r2,zero,a9000 <__alt_data_end+0xfffe9000>
   a9094:	0005883a 	mov	r2,zero
   a9098:	003fe806 	br	a903c <__alt_data_end+0xfffe903c>
   a909c:	00a6dfc0 	call	a6dfc <__sfvwrite_r>
   a90a0:	003fe606 	br	a903c <__alt_data_end+0xfffe903c>

000a90a4 <__sprint_r>:
   a90a4:	30c00217 	ldw	r3,8(r6)
   a90a8:	18000126 	beq	r3,zero,a90b0 <__sprint_r+0xc>
   a90ac:	00a8fa81 	jmpi	a8fa8 <__sprint_r.part.0>
   a90b0:	30000115 	stw	zero,4(r6)
   a90b4:	0005883a 	mov	r2,zero
   a90b8:	f800283a 	ret

000a90bc <___vfiprintf_internal_r>:
   a90bc:	deffca04 	addi	sp,sp,-216
   a90c0:	dd403115 	stw	r21,196(sp)
   a90c4:	dfc03515 	stw	ra,212(sp)
   a90c8:	df003415 	stw	fp,208(sp)
   a90cc:	ddc03315 	stw	r23,204(sp)
   a90d0:	dd803215 	stw	r22,200(sp)
   a90d4:	dd003015 	stw	r20,192(sp)
   a90d8:	dcc02f15 	stw	r19,188(sp)
   a90dc:	dc802e15 	stw	r18,184(sp)
   a90e0:	dc402d15 	stw	r17,180(sp)
   a90e4:	dc002c15 	stw	r16,176(sp)
   a90e8:	d9002115 	stw	r4,132(sp)
   a90ec:	d9402015 	stw	r5,128(sp)
   a90f0:	d9c02215 	stw	r7,136(sp)
   a90f4:	302b883a 	mov	r21,r6
   a90f8:	20000226 	beq	r4,zero,a9104 <___vfiprintf_internal_r+0x48>
   a90fc:	20800e17 	ldw	r2,56(r4)
   a9100:	1000cf26 	beq	r2,zero,a9440 <___vfiprintf_internal_r+0x384>
   a9104:	d8c02017 	ldw	r3,128(sp)
   a9108:	1880030b 	ldhu	r2,12(r3)
   a910c:	10c8000c 	andi	r3,r2,8192
   a9110:	1800071e 	bne	r3,zero,a9130 <___vfiprintf_internal_r+0x74>
   a9114:	d9402017 	ldw	r5,128(sp)
   a9118:	00f7ffc4 	movi	r3,-8193
   a911c:	10880014 	ori	r2,r2,8192
   a9120:	29001917 	ldw	r4,100(r5)
   a9124:	2880030d 	sth	r2,12(r5)
   a9128:	20c6703a 	and	r3,r4,r3
   a912c:	28c01915 	stw	r3,100(r5)
   a9130:	10c0020c 	andi	r3,r2,8
   a9134:	1800a526 	beq	r3,zero,a93cc <___vfiprintf_internal_r+0x310>
   a9138:	d9002017 	ldw	r4,128(sp)
   a913c:	20c00417 	ldw	r3,16(r4)
   a9140:	1800a226 	beq	r3,zero,a93cc <___vfiprintf_internal_r+0x310>
   a9144:	1080068c 	andi	r2,r2,26
   a9148:	00c00284 	movi	r3,10
   a914c:	10c0a826 	beq	r2,r3,a93f0 <___vfiprintf_internal_r+0x334>
   a9150:	d9001a04 	addi	r4,sp,104
   a9154:	d94019c4 	addi	r5,sp,103
   a9158:	048002f4 	movhi	r18,11
   a915c:	2145c83a 	sub	r2,r4,r5
   a9160:	94856904 	addi	r18,r18,5540
   a9164:	d9001e15 	stw	r4,120(sp)
   a9168:	d9401f15 	stw	r5,124(sp)
   a916c:	dec01a15 	stw	sp,104(sp)
   a9170:	d8001c15 	stw	zero,112(sp)
   a9174:	d8001b15 	stw	zero,108(sp)
   a9178:	d811883a 	mov	r8,sp
   a917c:	d8002615 	stw	zero,152(sp)
   a9180:	d8002415 	stw	zero,144(sp)
   a9184:	d8802815 	stw	r2,160(sp)
   a9188:	a82d883a 	mov	r22,r21
   a918c:	b0800007 	ldb	r2,0(r22)
   a9190:	10040d26 	beq	r2,zero,aa1c8 <___vfiprintf_internal_r+0x110c>
   a9194:	00c00944 	movi	r3,37
   a9198:	b029883a 	mov	r20,r22
   a919c:	10c0021e 	bne	r2,r3,a91a8 <___vfiprintf_internal_r+0xec>
   a91a0:	00001606 	br	a91fc <___vfiprintf_internal_r+0x140>
   a91a4:	10c00326 	beq	r2,r3,a91b4 <___vfiprintf_internal_r+0xf8>
   a91a8:	a5000044 	addi	r20,r20,1
   a91ac:	a0800007 	ldb	r2,0(r20)
   a91b0:	103ffc1e 	bne	r2,zero,a91a4 <__alt_data_end+0xfffe91a4>
   a91b4:	a5a1c83a 	sub	r16,r20,r22
   a91b8:	80001026 	beq	r16,zero,a91fc <___vfiprintf_internal_r+0x140>
   a91bc:	d8c01c17 	ldw	r3,112(sp)
   a91c0:	d8801b17 	ldw	r2,108(sp)
   a91c4:	45800015 	stw	r22,0(r8)
   a91c8:	80c7883a 	add	r3,r16,r3
   a91cc:	10800044 	addi	r2,r2,1
   a91d0:	44000115 	stw	r16,4(r8)
   a91d4:	d8c01c15 	stw	r3,112(sp)
   a91d8:	d8801b15 	stw	r2,108(sp)
   a91dc:	010001c4 	movi	r4,7
   a91e0:	2080750e 	bge	r4,r2,a93b8 <___vfiprintf_internal_r+0x2fc>
   a91e4:	1803951e 	bne	r3,zero,aa03c <___vfiprintf_internal_r+0xf80>
   a91e8:	d8c02417 	ldw	r3,144(sp)
   a91ec:	d8001b15 	stw	zero,108(sp)
   a91f0:	d811883a 	mov	r8,sp
   a91f4:	1c07883a 	add	r3,r3,r16
   a91f8:	d8c02415 	stw	r3,144(sp)
   a91fc:	a0800007 	ldb	r2,0(r20)
   a9200:	1002e026 	beq	r2,zero,a9d84 <___vfiprintf_internal_r+0xcc8>
   a9204:	a5800044 	addi	r22,r20,1
   a9208:	a0c00047 	ldb	r3,1(r20)
   a920c:	d8001d85 	stb	zero,118(sp)
   a9210:	0027883a 	mov	r19,zero
   a9214:	d8002305 	stb	zero,140(sp)
   a9218:	043fffc4 	movi	r16,-1
   a921c:	d8002515 	stw	zero,148(sp)
   a9220:	0023883a 	mov	r17,zero
   a9224:	05001604 	movi	r20,88
   a9228:	05400244 	movi	r21,9
   a922c:	402f883a 	mov	r23,r8
   a9230:	b5800044 	addi	r22,r22,1
   a9234:	18bff804 	addi	r2,r3,-32
   a9238:	a0827736 	bltu	r20,r2,a9c18 <___vfiprintf_internal_r+0xb5c>
   a923c:	100490ba 	slli	r2,r2,2
   a9240:	010002f4 	movhi	r4,11
   a9244:	21249504 	addi	r4,r4,-28076
   a9248:	1105883a 	add	r2,r2,r4
   a924c:	10800017 	ldw	r2,0(r2)
   a9250:	1000683a 	jmp	r2
   a9254:	000a9918 	cmpnei	zero,zero,10852
   a9258:	000a9c18 	cmpnei	zero,zero,10864
   a925c:	000a9c18 	cmpnei	zero,zero,10864
   a9260:	000a9934 	movhi	zero,10852
   a9264:	000a9c18 	cmpnei	zero,zero,10864
   a9268:	000a9c18 	cmpnei	zero,zero,10864
   a926c:	000a9c18 	cmpnei	zero,zero,10864
   a9270:	000a9c18 	cmpnei	zero,zero,10864
   a9274:	000a9c18 	cmpnei	zero,zero,10864
   a9278:	000a9c18 	cmpnei	zero,zero,10864
   a927c:	000a9b3c 	xorhi	zero,zero,10860
   a9280:	000a9b60 	cmpeqi	zero,zero,10861
   a9284:	000a9c18 	cmpnei	zero,zero,10864
   a9288:	000a9458 	cmpnei	zero,zero,10833
   a928c:	000a9b74 	movhi	zero,10861
   a9290:	000a9c18 	cmpnei	zero,zero,10864
   a9294:	000a9940 	call	a994 <__alt_mem_sdram_controller+0xa994>
   a9298:	000a994c 	andi	zero,zero,10853
   a929c:	000a994c 	andi	zero,zero,10853
   a92a0:	000a994c 	andi	zero,zero,10853
   a92a4:	000a994c 	andi	zero,zero,10853
   a92a8:	000a994c 	andi	zero,zero,10853
   a92ac:	000a994c 	andi	zero,zero,10853
   a92b0:	000a994c 	andi	zero,zero,10853
   a92b4:	000a994c 	andi	zero,zero,10853
   a92b8:	000a994c 	andi	zero,zero,10853
   a92bc:	000a9c18 	cmpnei	zero,zero,10864
   a92c0:	000a9c18 	cmpnei	zero,zero,10864
   a92c4:	000a9c18 	cmpnei	zero,zero,10864
   a92c8:	000a9c18 	cmpnei	zero,zero,10864
   a92cc:	000a9c18 	cmpnei	zero,zero,10864
   a92d0:	000a9c18 	cmpnei	zero,zero,10864
   a92d4:	000a9c18 	cmpnei	zero,zero,10864
   a92d8:	000a9c18 	cmpnei	zero,zero,10864
   a92dc:	000a9c18 	cmpnei	zero,zero,10864
   a92e0:	000a9c18 	cmpnei	zero,zero,10864
   a92e4:	000a998c 	andi	zero,zero,10854
   a92e8:	000a9c18 	cmpnei	zero,zero,10864
   a92ec:	000a9c18 	cmpnei	zero,zero,10864
   a92f0:	000a9c18 	cmpnei	zero,zero,10864
   a92f4:	000a9c18 	cmpnei	zero,zero,10864
   a92f8:	000a9c18 	cmpnei	zero,zero,10864
   a92fc:	000a9c18 	cmpnei	zero,zero,10864
   a9300:	000a9c18 	cmpnei	zero,zero,10864
   a9304:	000a9c18 	cmpnei	zero,zero,10864
   a9308:	000a9c18 	cmpnei	zero,zero,10864
   a930c:	000a9c18 	cmpnei	zero,zero,10864
   a9310:	000a99c8 	cmpgei	zero,zero,10855
   a9314:	000a9c18 	cmpnei	zero,zero,10864
   a9318:	000a9c18 	cmpnei	zero,zero,10864
   a931c:	000a9c18 	cmpnei	zero,zero,10864
   a9320:	000a9c18 	cmpnei	zero,zero,10864
   a9324:	000a9c18 	cmpnei	zero,zero,10864
   a9328:	000a9a24 	muli	zero,zero,10856
   a932c:	000a9c18 	cmpnei	zero,zero,10864
   a9330:	000a9c18 	cmpnei	zero,zero,10864
   a9334:	000a9a98 	cmpnei	zero,zero,10858
   a9338:	000a9c18 	cmpnei	zero,zero,10864
   a933c:	000a9c18 	cmpnei	zero,zero,10864
   a9340:	000a9c18 	cmpnei	zero,zero,10864
   a9344:	000a9c18 	cmpnei	zero,zero,10864
   a9348:	000a9c18 	cmpnei	zero,zero,10864
   a934c:	000a9c18 	cmpnei	zero,zero,10864
   a9350:	000a9c18 	cmpnei	zero,zero,10864
   a9354:	000a9c18 	cmpnei	zero,zero,10864
   a9358:	000a9c18 	cmpnei	zero,zero,10864
   a935c:	000a9c18 	cmpnei	zero,zero,10864
   a9360:	000a9840 	call	a984 <__alt_mem_sdram_controller+0xa984>
   a9364:	000a9870 	cmpltui	zero,zero,10849
   a9368:	000a9c18 	cmpnei	zero,zero,10864
   a936c:	000a9c18 	cmpnei	zero,zero,10864
   a9370:	000a9c18 	cmpnei	zero,zero,10864
   a9374:	000a9bc0 	call	a9bc <__alt_mem_sdram_controller+0xa9bc>
   a9378:	000a9870 	cmpltui	zero,zero,10849
   a937c:	000a9c18 	cmpnei	zero,zero,10864
   a9380:	000a9c18 	cmpnei	zero,zero,10864
   a9384:	000a9718 	cmpnei	zero,zero,10844
   a9388:	000a9c18 	cmpnei	zero,zero,10864
   a938c:	000a972c 	andhi	zero,zero,10844
   a9390:	000a9764 	muli	zero,zero,10845
   a9394:	000a9464 	muli	zero,zero,10833
   a9398:	000a970c 	andi	zero,zero,10844
   a939c:	000a9c18 	cmpnei	zero,zero,10864
   a93a0:	000a9ad8 	cmpnei	zero,zero,10859
   a93a4:	000a9c18 	cmpnei	zero,zero,10864
   a93a8:	000a9b24 	muli	zero,zero,10860
   a93ac:	000a9c18 	cmpnei	zero,zero,10864
   a93b0:	000a9c18 	cmpnei	zero,zero,10864
   a93b4:	000a97e8 	cmpgeui	zero,zero,10847
   a93b8:	42000204 	addi	r8,r8,8
   a93bc:	d8c02417 	ldw	r3,144(sp)
   a93c0:	1c07883a 	add	r3,r3,r16
   a93c4:	d8c02415 	stw	r3,144(sp)
   a93c8:	003f8c06 	br	a91fc <__alt_data_end+0xfffe91fc>
   a93cc:	d9402017 	ldw	r5,128(sp)
   a93d0:	d9002117 	ldw	r4,132(sp)
   a93d4:	00a52f80 	call	a52f8 <__swsetup_r>
   a93d8:	1003c11e 	bne	r2,zero,aa2e0 <___vfiprintf_internal_r+0x1224>
   a93dc:	d9402017 	ldw	r5,128(sp)
   a93e0:	00c00284 	movi	r3,10
   a93e4:	2880030b 	ldhu	r2,12(r5)
   a93e8:	1080068c 	andi	r2,r2,26
   a93ec:	10ff581e 	bne	r2,r3,a9150 <__alt_data_end+0xfffe9150>
   a93f0:	d8c02017 	ldw	r3,128(sp)
   a93f4:	1880038f 	ldh	r2,14(r3)
   a93f8:	103f5516 	blt	r2,zero,a9150 <__alt_data_end+0xfffe9150>
   a93fc:	d9c02217 	ldw	r7,136(sp)
   a9400:	d9002117 	ldw	r4,132(sp)
   a9404:	a80d883a 	mov	r6,r21
   a9408:	180b883a 	mov	r5,r3
   a940c:	00aa5e40 	call	aa5e4 <__sbprintf>
   a9410:	dfc03517 	ldw	ra,212(sp)
   a9414:	df003417 	ldw	fp,208(sp)
   a9418:	ddc03317 	ldw	r23,204(sp)
   a941c:	dd803217 	ldw	r22,200(sp)
   a9420:	dd403117 	ldw	r21,196(sp)
   a9424:	dd003017 	ldw	r20,192(sp)
   a9428:	dcc02f17 	ldw	r19,188(sp)
   a942c:	dc802e17 	ldw	r18,184(sp)
   a9430:	dc402d17 	ldw	r17,180(sp)
   a9434:	dc002c17 	ldw	r16,176(sp)
   a9438:	dec03604 	addi	sp,sp,216
   a943c:	f800283a 	ret
   a9440:	00a0d880 	call	a0d88 <__sinit>
   a9444:	003f2f06 	br	a9104 <__alt_data_end+0xfffe9104>
   a9448:	d8c02517 	ldw	r3,148(sp)
   a944c:	d8802215 	stw	r2,136(sp)
   a9450:	00c7c83a 	sub	r3,zero,r3
   a9454:	d8c02515 	stw	r3,148(sp)
   a9458:	8c400114 	ori	r17,r17,4
   a945c:	b0c00007 	ldb	r3,0(r22)
   a9460:	003f7306 	br	a9230 <__alt_data_end+0xfffe9230>
   a9464:	00800c04 	movi	r2,48
   a9468:	d9402217 	ldw	r5,136(sp)
   a946c:	d8801d05 	stb	r2,116(sp)
   a9470:	00801e04 	movi	r2,120
   a9474:	d8801d45 	stb	r2,117(sp)
   a9478:	d8001d85 	stb	zero,118(sp)
   a947c:	b811883a 	mov	r8,r23
   a9480:	28c00104 	addi	r3,r5,4
   a9484:	2cc00017 	ldw	r19,0(r5)
   a9488:	0029883a 	mov	r20,zero
   a948c:	88800094 	ori	r2,r17,2
   a9490:	80032516 	blt	r16,zero,aa128 <___vfiprintf_internal_r+0x106c>
   a9494:	00bfdfc4 	movi	r2,-129
   a9498:	88a2703a 	and	r17,r17,r2
   a949c:	d8c02215 	stw	r3,136(sp)
   a94a0:	8c400094 	ori	r17,r17,2
   a94a4:	98032a1e 	bne	r19,zero,aa150 <___vfiprintf_internal_r+0x1094>
   a94a8:	008002f4 	movhi	r2,11
   a94ac:	10850904 	addi	r2,r2,5156
   a94b0:	d8802615 	stw	r2,152(sp)
   a94b4:	002b883a 	mov	r21,zero
   a94b8:	8001741e 	bne	r16,zero,a9a8c <___vfiprintf_internal_r+0x9d0>
   a94bc:	0021883a 	mov	r16,zero
   a94c0:	0029883a 	mov	r20,zero
   a94c4:	ddc01a04 	addi	r23,sp,104
   a94c8:	8027883a 	mov	r19,r16
   a94cc:	8500010e 	bge	r16,r20,a94d4 <___vfiprintf_internal_r+0x418>
   a94d0:	a027883a 	mov	r19,r20
   a94d4:	ad403fcc 	andi	r21,r21,255
   a94d8:	ad40201c 	xori	r21,r21,128
   a94dc:	ad7fe004 	addi	r21,r21,-128
   a94e0:	a8000126 	beq	r21,zero,a94e8 <___vfiprintf_internal_r+0x42c>
   a94e4:	9cc00044 	addi	r19,r19,1
   a94e8:	89c0008c 	andi	r7,r17,2
   a94ec:	38000126 	beq	r7,zero,a94f4 <___vfiprintf_internal_r+0x438>
   a94f0:	9cc00084 	addi	r19,r19,2
   a94f4:	88c0210c 	andi	r3,r17,132
   a94f8:	1801dd1e 	bne	r3,zero,a9c70 <___vfiprintf_internal_r+0xbb4>
   a94fc:	d9402517 	ldw	r5,148(sp)
   a9500:	2cebc83a 	sub	r21,r5,r19
   a9504:	0541da0e 	bge	zero,r21,a9c70 <___vfiprintf_internal_r+0xbb4>
   a9508:	07000404 	movi	fp,16
   a950c:	d8801c17 	ldw	r2,112(sp)
   a9510:	e543be0e 	bge	fp,r21,aa40c <___vfiprintf_internal_r+0x1350>
   a9514:	014002f4 	movhi	r5,11
   a9518:	29456d04 	addi	r5,r5,5556
   a951c:	dc002715 	stw	r16,156(sp)
   a9520:	d9801b17 	ldw	r6,108(sp)
   a9524:	a821883a 	mov	r16,r21
   a9528:	d9402315 	stw	r5,140(sp)
   a952c:	028001c4 	movi	r10,7
   a9530:	d9c02915 	stw	r7,164(sp)
   a9534:	182b883a 	mov	r21,r3
   a9538:	00000506 	br	a9550 <___vfiprintf_internal_r+0x494>
   a953c:	31000084 	addi	r4,r6,2
   a9540:	42000204 	addi	r8,r8,8
   a9544:	180d883a 	mov	r6,r3
   a9548:	843ffc04 	addi	r16,r16,-16
   a954c:	e4000f0e 	bge	fp,r16,a958c <___vfiprintf_internal_r+0x4d0>
   a9550:	010002f4 	movhi	r4,11
   a9554:	10800404 	addi	r2,r2,16
   a9558:	30c00044 	addi	r3,r6,1
   a955c:	21056d04 	addi	r4,r4,5556
   a9560:	41000015 	stw	r4,0(r8)
   a9564:	47000115 	stw	fp,4(r8)
   a9568:	d8801c15 	stw	r2,112(sp)
   a956c:	d8c01b15 	stw	r3,108(sp)
   a9570:	50fff20e 	bge	r10,r3,a953c <__alt_data_end+0xfffe953c>
   a9574:	1001b21e 	bne	r2,zero,a9c40 <___vfiprintf_internal_r+0xb84>
   a9578:	843ffc04 	addi	r16,r16,-16
   a957c:	000d883a 	mov	r6,zero
   a9580:	01000044 	movi	r4,1
   a9584:	d811883a 	mov	r8,sp
   a9588:	e43ff116 	blt	fp,r16,a9550 <__alt_data_end+0xfffe9550>
   a958c:	a807883a 	mov	r3,r21
   a9590:	d9c02917 	ldw	r7,164(sp)
   a9594:	802b883a 	mov	r21,r16
   a9598:	dc002717 	ldw	r16,156(sp)
   a959c:	d9402317 	ldw	r5,140(sp)
   a95a0:	a885883a 	add	r2,r21,r2
   a95a4:	45400115 	stw	r21,4(r8)
   a95a8:	41400015 	stw	r5,0(r8)
   a95ac:	d8801c15 	stw	r2,112(sp)
   a95b0:	d9001b15 	stw	r4,108(sp)
   a95b4:	014001c4 	movi	r5,7
   a95b8:	29026216 	blt	r5,r4,a9f44 <___vfiprintf_internal_r+0xe88>
   a95bc:	d9801d87 	ldb	r6,118(sp)
   a95c0:	42000204 	addi	r8,r8,8
   a95c4:	21400044 	addi	r5,r4,1
   a95c8:	3001ae1e 	bne	r6,zero,a9c84 <___vfiprintf_internal_r+0xbc8>
   a95cc:	3801bb26 	beq	r7,zero,a9cbc <___vfiprintf_internal_r+0xc00>
   a95d0:	d9001d04 	addi	r4,sp,116
   a95d4:	10800084 	addi	r2,r2,2
   a95d8:	41000015 	stw	r4,0(r8)
   a95dc:	01000084 	movi	r4,2
   a95e0:	41000115 	stw	r4,4(r8)
   a95e4:	d8801c15 	stw	r2,112(sp)
   a95e8:	d9401b15 	stw	r5,108(sp)
   a95ec:	010001c4 	movi	r4,7
   a95f0:	2142680e 	bge	r4,r5,a9f94 <___vfiprintf_internal_r+0xed8>
   a95f4:	1002b11e 	bne	r2,zero,aa0bc <___vfiprintf_internal_r+0x1000>
   a95f8:	01802004 	movi	r6,128
   a95fc:	01400044 	movi	r5,1
   a9600:	0009883a 	mov	r4,zero
   a9604:	d811883a 	mov	r8,sp
   a9608:	1981ae1e 	bne	r3,r6,a9cc4 <___vfiprintf_internal_r+0xc08>
   a960c:	d8c02517 	ldw	r3,148(sp)
   a9610:	1cf9c83a 	sub	fp,r3,r19
   a9614:	0701ab0e 	bge	zero,fp,a9cc4 <___vfiprintf_internal_r+0xc08>
   a9618:	05400404 	movi	r21,16
   a961c:	af03a90e 	bge	r21,fp,aa4c4 <___vfiprintf_internal_r+0x1408>
   a9620:	014002f4 	movhi	r5,11
   a9624:	29456904 	addi	r5,r5,5540
   a9628:	d9402315 	stw	r5,140(sp)
   a962c:	01c001c4 	movi	r7,7
   a9630:	00000506 	br	a9648 <___vfiprintf_internal_r+0x58c>
   a9634:	21800084 	addi	r6,r4,2
   a9638:	42000204 	addi	r8,r8,8
   a963c:	1809883a 	mov	r4,r3
   a9640:	e73ffc04 	addi	fp,fp,-16
   a9644:	af000d0e 	bge	r21,fp,a967c <___vfiprintf_internal_r+0x5c0>
   a9648:	10800404 	addi	r2,r2,16
   a964c:	20c00044 	addi	r3,r4,1
   a9650:	44800015 	stw	r18,0(r8)
   a9654:	45400115 	stw	r21,4(r8)
   a9658:	d8801c15 	stw	r2,112(sp)
   a965c:	d8c01b15 	stw	r3,108(sp)
   a9660:	38fff40e 	bge	r7,r3,a9634 <__alt_data_end+0xfffe9634>
   a9664:	10022b1e 	bne	r2,zero,a9f14 <___vfiprintf_internal_r+0xe58>
   a9668:	e73ffc04 	addi	fp,fp,-16
   a966c:	01800044 	movi	r6,1
   a9670:	0009883a 	mov	r4,zero
   a9674:	d811883a 	mov	r8,sp
   a9678:	af3ff316 	blt	r21,fp,a9648 <__alt_data_end+0xfffe9648>
   a967c:	d8c02317 	ldw	r3,140(sp)
   a9680:	1705883a 	add	r2,r2,fp
   a9684:	47000115 	stw	fp,4(r8)
   a9688:	40c00015 	stw	r3,0(r8)
   a968c:	d8801c15 	stw	r2,112(sp)
   a9690:	d9801b15 	stw	r6,108(sp)
   a9694:	00c001c4 	movi	r3,7
   a9698:	19829416 	blt	r3,r6,aa0ec <___vfiprintf_internal_r+0x1030>
   a969c:	8521c83a 	sub	r16,r16,r20
   a96a0:	42000204 	addi	r8,r8,8
   a96a4:	31400044 	addi	r5,r6,1
   a96a8:	3009883a 	mov	r4,r6
   a96ac:	04018716 	blt	zero,r16,a9ccc <___vfiprintf_internal_r+0xc10>
   a96b0:	a085883a 	add	r2,r20,r2
   a96b4:	45c00015 	stw	r23,0(r8)
   a96b8:	45000115 	stw	r20,4(r8)
   a96bc:	d8801c15 	stw	r2,112(sp)
   a96c0:	d9401b15 	stw	r5,108(sp)
   a96c4:	00c001c4 	movi	r3,7
   a96c8:	1941c20e 	bge	r3,r5,a9dd4 <___vfiprintf_internal_r+0xd18>
   a96cc:	1002531e 	bne	r2,zero,aa01c <___vfiprintf_internal_r+0xf60>
   a96d0:	d8001b15 	stw	zero,108(sp)
   a96d4:	8c40010c 	andi	r17,r17,4
   a96d8:	88023226 	beq	r17,zero,a9fa4 <___vfiprintf_internal_r+0xee8>
   a96dc:	d9002517 	ldw	r4,148(sp)
   a96e0:	24e3c83a 	sub	r17,r4,r19
   a96e4:	04432916 	blt	zero,r17,aa38c <___vfiprintf_internal_r+0x12d0>
   a96e8:	d8802517 	ldw	r2,148(sp)
   a96ec:	14c0010e 	bge	r2,r19,a96f4 <___vfiprintf_internal_r+0x638>
   a96f0:	9805883a 	mov	r2,r19
   a96f4:	d8c02417 	ldw	r3,144(sp)
   a96f8:	1887883a 	add	r3,r3,r2
   a96fc:	d8c02415 	stw	r3,144(sp)
   a9700:	d8001b15 	stw	zero,108(sp)
   a9704:	d811883a 	mov	r8,sp
   a9708:	003ea006 	br	a918c <__alt_data_end+0xfffe918c>
   a970c:	8c400814 	ori	r17,r17,32
   a9710:	b0c00007 	ldb	r3,0(r22)
   a9714:	003ec606 	br	a9230 <__alt_data_end+0xfffe9230>
   a9718:	b0c00007 	ldb	r3,0(r22)
   a971c:	00801b04 	movi	r2,108
   a9720:	18832026 	beq	r3,r2,aa3a4 <___vfiprintf_internal_r+0x12e8>
   a9724:	8c400414 	ori	r17,r17,16
   a9728:	003ec106 	br	a9230 <__alt_data_end+0xfffe9230>
   a972c:	9cc03fcc 	andi	r19,r19,255
   a9730:	b811883a 	mov	r8,r23
   a9734:	9803981e 	bne	r19,zero,aa598 <___vfiprintf_internal_r+0x14dc>
   a9738:	8880080c 	andi	r2,r17,32
   a973c:	1002be26 	beq	r2,zero,aa238 <___vfiprintf_internal_r+0x117c>
   a9740:	d9002217 	ldw	r4,136(sp)
   a9744:	d9402417 	ldw	r5,144(sp)
   a9748:	20800017 	ldw	r2,0(r4)
   a974c:	2807d7fa 	srai	r3,r5,31
   a9750:	21000104 	addi	r4,r4,4
   a9754:	d9002215 	stw	r4,136(sp)
   a9758:	11400015 	stw	r5,0(r2)
   a975c:	10c00115 	stw	r3,4(r2)
   a9760:	003e8a06 	br	a918c <__alt_data_end+0xfffe918c>
   a9764:	9cc03fcc 	andi	r19,r19,255
   a9768:	b811883a 	mov	r8,r23
   a976c:	9803871e 	bne	r19,zero,aa58c <___vfiprintf_internal_r+0x14d0>
   a9770:	8880080c 	andi	r2,r17,32
   a9774:	10009a26 	beq	r2,zero,a99e0 <___vfiprintf_internal_r+0x924>
   a9778:	d9002217 	ldw	r4,136(sp)
   a977c:	d8001d85 	stb	zero,118(sp)
   a9780:	20800204 	addi	r2,r4,8
   a9784:	24c00017 	ldw	r19,0(r4)
   a9788:	25000117 	ldw	r20,4(r4)
   a978c:	8002a416 	blt	r16,zero,aa220 <___vfiprintf_internal_r+0x1164>
   a9790:	013fdfc4 	movi	r4,-129
   a9794:	9d06b03a 	or	r3,r19,r20
   a9798:	d8802215 	stw	r2,136(sp)
   a979c:	8922703a 	and	r17,r17,r4
   a97a0:	18009b26 	beq	r3,zero,a9a10 <___vfiprintf_internal_r+0x954>
   a97a4:	002b883a 	mov	r21,zero
   a97a8:	ddc01a04 	addi	r23,sp,104
   a97ac:	9806d0fa 	srli	r3,r19,3
   a97b0:	a008977a 	slli	r4,r20,29
   a97b4:	a028d0fa 	srli	r20,r20,3
   a97b8:	9cc001cc 	andi	r19,r19,7
   a97bc:	98800c04 	addi	r2,r19,48
   a97c0:	bdffffc4 	addi	r23,r23,-1
   a97c4:	20e6b03a 	or	r19,r4,r3
   a97c8:	b8800005 	stb	r2,0(r23)
   a97cc:	9d06b03a 	or	r3,r19,r20
   a97d0:	183ff61e 	bne	r3,zero,a97ac <__alt_data_end+0xfffe97ac>
   a97d4:	88c0004c 	andi	r3,r17,1
   a97d8:	18021f1e 	bne	r3,zero,aa058 <___vfiprintf_internal_r+0xf9c>
   a97dc:	d9401e17 	ldw	r5,120(sp)
   a97e0:	2de9c83a 	sub	r20,r5,r23
   a97e4:	003f3806 	br	a94c8 <__alt_data_end+0xfffe94c8>
   a97e8:	9cc03fcc 	andi	r19,r19,255
   a97ec:	b811883a 	mov	r8,r23
   a97f0:	98034f1e 	bne	r19,zero,aa530 <___vfiprintf_internal_r+0x1474>
   a97f4:	008002f4 	movhi	r2,11
   a97f8:	10850904 	addi	r2,r2,5156
   a97fc:	d8802615 	stw	r2,152(sp)
   a9800:	8880080c 	andi	r2,r17,32
   a9804:	1000ac26 	beq	r2,zero,a9ab8 <___vfiprintf_internal_r+0x9fc>
   a9808:	d9002217 	ldw	r4,136(sp)
   a980c:	24c00017 	ldw	r19,0(r4)
   a9810:	25000117 	ldw	r20,4(r4)
   a9814:	21000204 	addi	r4,r4,8
   a9818:	d9002215 	stw	r4,136(sp)
   a981c:	8880004c 	andi	r2,r17,1
   a9820:	1001e726 	beq	r2,zero,a9fc0 <___vfiprintf_internal_r+0xf04>
   a9824:	9d04b03a 	or	r2,r19,r20
   a9828:	10025c1e 	bne	r2,zero,aa19c <___vfiprintf_internal_r+0x10e0>
   a982c:	d8001d85 	stb	zero,118(sp)
   a9830:	80024416 	blt	r16,zero,aa144 <___vfiprintf_internal_r+0x1088>
   a9834:	00bfdfc4 	movi	r2,-129
   a9838:	88a2703a 	and	r17,r17,r2
   a983c:	003f1d06 	br	a94b4 <__alt_data_end+0xfffe94b4>
   a9840:	d8c02217 	ldw	r3,136(sp)
   a9844:	04c00044 	movi	r19,1
   a9848:	b811883a 	mov	r8,r23
   a984c:	18800017 	ldw	r2,0(r3)
   a9850:	18c00104 	addi	r3,r3,4
   a9854:	d8001d85 	stb	zero,118(sp)
   a9858:	d8801005 	stb	r2,64(sp)
   a985c:	d8c02215 	stw	r3,136(sp)
   a9860:	9829883a 	mov	r20,r19
   a9864:	ddc01004 	addi	r23,sp,64
   a9868:	0021883a 	mov	r16,zero
   a986c:	003f1e06 	br	a94e8 <__alt_data_end+0xfffe94e8>
   a9870:	9cc03fcc 	andi	r19,r19,255
   a9874:	b811883a 	mov	r8,r23
   a9878:	9803331e 	bne	r19,zero,aa548 <___vfiprintf_internal_r+0x148c>
   a987c:	8880080c 	andi	r2,r17,32
   a9880:	10004826 	beq	r2,zero,a99a4 <___vfiprintf_internal_r+0x8e8>
   a9884:	d9002217 	ldw	r4,136(sp)
   a9888:	20800117 	ldw	r2,4(r4)
   a988c:	24c00017 	ldw	r19,0(r4)
   a9890:	21000204 	addi	r4,r4,8
   a9894:	d9002215 	stw	r4,136(sp)
   a9898:	1029883a 	mov	r20,r2
   a989c:	10024c16 	blt	r2,zero,aa1d0 <___vfiprintf_internal_r+0x1114>
   a98a0:	dd401d83 	ldbu	r21,118(sp)
   a98a4:	80007116 	blt	r16,zero,a9a6c <___vfiprintf_internal_r+0x9b0>
   a98a8:	00ffdfc4 	movi	r3,-129
   a98ac:	9d04b03a 	or	r2,r19,r20
   a98b0:	88e2703a 	and	r17,r17,r3
   a98b4:	1000d126 	beq	r2,zero,a9bfc <___vfiprintf_internal_r+0xb40>
   a98b8:	a0023526 	beq	r20,zero,aa190 <___vfiprintf_internal_r+0x10d4>
   a98bc:	ddc01a04 	addi	r23,sp,104
   a98c0:	4039883a 	mov	fp,r8
   a98c4:	9809883a 	mov	r4,r19
   a98c8:	a00b883a 	mov	r5,r20
   a98cc:	01800284 	movi	r6,10
   a98d0:	000f883a 	mov	r7,zero
   a98d4:	00ab1680 	call	ab168 <__umoddi3>
   a98d8:	10800c04 	addi	r2,r2,48
   a98dc:	bdffffc4 	addi	r23,r23,-1
   a98e0:	9809883a 	mov	r4,r19
   a98e4:	a00b883a 	mov	r5,r20
   a98e8:	b8800005 	stb	r2,0(r23)
   a98ec:	01800284 	movi	r6,10
   a98f0:	000f883a 	mov	r7,zero
   a98f4:	00aab6c0 	call	aab6c <__udivdi3>
   a98f8:	1027883a 	mov	r19,r2
   a98fc:	10c4b03a 	or	r2,r2,r3
   a9900:	1829883a 	mov	r20,r3
   a9904:	103fef1e 	bne	r2,zero,a98c4 <__alt_data_end+0xfffe98c4>
   a9908:	d9001e17 	ldw	r4,120(sp)
   a990c:	e011883a 	mov	r8,fp
   a9910:	25e9c83a 	sub	r20,r4,r23
   a9914:	003eec06 	br	a94c8 <__alt_data_end+0xfffe94c8>
   a9918:	d8802307 	ldb	r2,140(sp)
   a991c:	1002361e 	bne	r2,zero,aa1f8 <___vfiprintf_internal_r+0x113c>
   a9920:	00c00804 	movi	r3,32
   a9924:	d8c02305 	stb	r3,140(sp)
   a9928:	04c00044 	movi	r19,1
   a992c:	b0c00007 	ldb	r3,0(r22)
   a9930:	003e3f06 	br	a9230 <__alt_data_end+0xfffe9230>
   a9934:	8c400054 	ori	r17,r17,1
   a9938:	b0c00007 	ldb	r3,0(r22)
   a993c:	003e3c06 	br	a9230 <__alt_data_end+0xfffe9230>
   a9940:	8c402014 	ori	r17,r17,128
   a9944:	b0c00007 	ldb	r3,0(r22)
   a9948:	003e3906 	br	a9230 <__alt_data_end+0xfffe9230>
   a994c:	dc002715 	stw	r16,156(sp)
   a9950:	d8002515 	stw	zero,148(sp)
   a9954:	1f3ff404 	addi	fp,r3,-48
   a9958:	0009883a 	mov	r4,zero
   a995c:	b021883a 	mov	r16,r22
   a9960:	01400284 	movi	r5,10
   a9964:	00ab8e00 	call	ab8e0 <__mulsi3>
   a9968:	80c00007 	ldb	r3,0(r16)
   a996c:	e089883a 	add	r4,fp,r2
   a9970:	b5800044 	addi	r22,r22,1
   a9974:	1f3ff404 	addi	fp,r3,-48
   a9978:	b021883a 	mov	r16,r22
   a997c:	af3ff82e 	bgeu	r21,fp,a9960 <__alt_data_end+0xfffe9960>
   a9980:	d9002515 	stw	r4,148(sp)
   a9984:	dc002717 	ldw	r16,156(sp)
   a9988:	003e2a06 	br	a9234 <__alt_data_end+0xfffe9234>
   a998c:	9cc03fcc 	andi	r19,r19,255
   a9990:	b811883a 	mov	r8,r23
   a9994:	9802e91e 	bne	r19,zero,aa53c <___vfiprintf_internal_r+0x1480>
   a9998:	8c400414 	ori	r17,r17,16
   a999c:	8880080c 	andi	r2,r17,32
   a99a0:	103fb81e 	bne	r2,zero,a9884 <__alt_data_end+0xfffe9884>
   a99a4:	8880040c 	andi	r2,r17,16
   a99a8:	10022e26 	beq	r2,zero,aa264 <___vfiprintf_internal_r+0x11a8>
   a99ac:	d9402217 	ldw	r5,136(sp)
   a99b0:	2cc00017 	ldw	r19,0(r5)
   a99b4:	29400104 	addi	r5,r5,4
   a99b8:	d9402215 	stw	r5,136(sp)
   a99bc:	9829d7fa 	srai	r20,r19,31
   a99c0:	a005883a 	mov	r2,r20
   a99c4:	003fb506 	br	a989c <__alt_data_end+0xfffe989c>
   a99c8:	9cc03fcc 	andi	r19,r19,255
   a99cc:	b811883a 	mov	r8,r23
   a99d0:	9802fa1e 	bne	r19,zero,aa5bc <___vfiprintf_internal_r+0x1500>
   a99d4:	8c400414 	ori	r17,r17,16
   a99d8:	8880080c 	andi	r2,r17,32
   a99dc:	103f661e 	bne	r2,zero,a9778 <__alt_data_end+0xfffe9778>
   a99e0:	8880040c 	andi	r2,r17,16
   a99e4:	10020626 	beq	r2,zero,aa200 <___vfiprintf_internal_r+0x1144>
   a99e8:	d9402217 	ldw	r5,136(sp)
   a99ec:	d8001d85 	stb	zero,118(sp)
   a99f0:	0029883a 	mov	r20,zero
   a99f4:	28800104 	addi	r2,r5,4
   a99f8:	2cc00017 	ldw	r19,0(r5)
   a99fc:	80020816 	blt	r16,zero,aa220 <___vfiprintf_internal_r+0x1164>
   a9a00:	00ffdfc4 	movi	r3,-129
   a9a04:	d8802215 	stw	r2,136(sp)
   a9a08:	88e2703a 	and	r17,r17,r3
   a9a0c:	983f651e 	bne	r19,zero,a97a4 <__alt_data_end+0xfffe97a4>
   a9a10:	002b883a 	mov	r21,zero
   a9a14:	8002cf26 	beq	r16,zero,aa554 <___vfiprintf_internal_r+0x1498>
   a9a18:	0027883a 	mov	r19,zero
   a9a1c:	0029883a 	mov	r20,zero
   a9a20:	003f6106 	br	a97a8 <__alt_data_end+0xfffe97a8>
   a9a24:	9cc03fcc 	andi	r19,r19,255
   a9a28:	b811883a 	mov	r8,r23
   a9a2c:	9802e01e 	bne	r19,zero,aa5b0 <___vfiprintf_internal_r+0x14f4>
   a9a30:	8c400414 	ori	r17,r17,16
   a9a34:	8880080c 	andi	r2,r17,32
   a9a38:	1000641e 	bne	r2,zero,a9bcc <___vfiprintf_internal_r+0xb10>
   a9a3c:	8880040c 	andi	r2,r17,16
   a9a40:	1001c81e 	bne	r2,zero,aa164 <___vfiprintf_internal_r+0x10a8>
   a9a44:	8880100c 	andi	r2,r17,64
   a9a48:	d8001d85 	stb	zero,118(sp)
   a9a4c:	1002281e 	bne	r2,zero,aa2f0 <___vfiprintf_internal_r+0x1234>
   a9a50:	d9002217 	ldw	r4,136(sp)
   a9a54:	0029883a 	mov	r20,zero
   a9a58:	20800104 	addi	r2,r4,4
   a9a5c:	24c00017 	ldw	r19,0(r4)
   a9a60:	8001c60e 	bge	r16,zero,aa17c <___vfiprintf_internal_r+0x10c0>
   a9a64:	d8802215 	stw	r2,136(sp)
   a9a68:	002b883a 	mov	r21,zero
   a9a6c:	9d04b03a 	or	r2,r19,r20
   a9a70:	103f911e 	bne	r2,zero,a98b8 <__alt_data_end+0xfffe98b8>
   a9a74:	00800044 	movi	r2,1
   a9a78:	10803fcc 	andi	r2,r2,255
   a9a7c:	00c00044 	movi	r3,1
   a9a80:	10c05f26 	beq	r2,r3,a9c00 <___vfiprintf_internal_r+0xb44>
   a9a84:	00c00084 	movi	r3,2
   a9a88:	10ffe31e 	bne	r2,r3,a9a18 <__alt_data_end+0xfffe9a18>
   a9a8c:	0027883a 	mov	r19,zero
   a9a90:	0029883a 	mov	r20,zero
   a9a94:	00015106 	br	a9fdc <___vfiprintf_internal_r+0xf20>
   a9a98:	9cc03fcc 	andi	r19,r19,255
   a9a9c:	b811883a 	mov	r8,r23
   a9aa0:	9802c01e 	bne	r19,zero,aa5a4 <___vfiprintf_internal_r+0x14e8>
   a9aa4:	014002f4 	movhi	r5,11
   a9aa8:	29450404 	addi	r5,r5,5136
   a9aac:	d9402615 	stw	r5,152(sp)
   a9ab0:	8880080c 	andi	r2,r17,32
   a9ab4:	103f541e 	bne	r2,zero,a9808 <__alt_data_end+0xfffe9808>
   a9ab8:	8880040c 	andi	r2,r17,16
   a9abc:	1001f226 	beq	r2,zero,aa288 <___vfiprintf_internal_r+0x11cc>
   a9ac0:	d9402217 	ldw	r5,136(sp)
   a9ac4:	0029883a 	mov	r20,zero
   a9ac8:	2cc00017 	ldw	r19,0(r5)
   a9acc:	29400104 	addi	r5,r5,4
   a9ad0:	d9402215 	stw	r5,136(sp)
   a9ad4:	003f5106 	br	a981c <__alt_data_end+0xfffe981c>
   a9ad8:	d8c02217 	ldw	r3,136(sp)
   a9adc:	b811883a 	mov	r8,r23
   a9ae0:	d8001d85 	stb	zero,118(sp)
   a9ae4:	1dc00017 	ldw	r23,0(r3)
   a9ae8:	1f000104 	addi	fp,r3,4
   a9aec:	b8025926 	beq	r23,zero,aa454 <___vfiprintf_internal_r+0x1398>
   a9af0:	80023316 	blt	r16,zero,aa3c0 <___vfiprintf_internal_r+0x1304>
   a9af4:	800d883a 	mov	r6,r16
   a9af8:	000b883a 	mov	r5,zero
   a9afc:	b809883a 	mov	r4,r23
   a9b00:	da002a15 	stw	r8,168(sp)
   a9b04:	00a74540 	call	a7454 <memchr>
   a9b08:	da002a17 	ldw	r8,168(sp)
   a9b0c:	10026826 	beq	r2,zero,aa4b0 <___vfiprintf_internal_r+0x13f4>
   a9b10:	15e9c83a 	sub	r20,r2,r23
   a9b14:	dd401d83 	ldbu	r21,118(sp)
   a9b18:	df002215 	stw	fp,136(sp)
   a9b1c:	0021883a 	mov	r16,zero
   a9b20:	003e6906 	br	a94c8 <__alt_data_end+0xfffe94c8>
   a9b24:	9cc03fcc 	andi	r19,r19,255
   a9b28:	b811883a 	mov	r8,r23
   a9b2c:	983fc126 	beq	r19,zero,a9a34 <__alt_data_end+0xfffe9a34>
   a9b30:	d8c02303 	ldbu	r3,140(sp)
   a9b34:	d8c01d85 	stb	r3,118(sp)
   a9b38:	003fbe06 	br	a9a34 <__alt_data_end+0xfffe9a34>
   a9b3c:	d9002217 	ldw	r4,136(sp)
   a9b40:	d9402217 	ldw	r5,136(sp)
   a9b44:	21000017 	ldw	r4,0(r4)
   a9b48:	28800104 	addi	r2,r5,4
   a9b4c:	d9002515 	stw	r4,148(sp)
   a9b50:	203e3d16 	blt	r4,zero,a9448 <__alt_data_end+0xfffe9448>
   a9b54:	d8802215 	stw	r2,136(sp)
   a9b58:	b0c00007 	ldb	r3,0(r22)
   a9b5c:	003db406 	br	a9230 <__alt_data_end+0xfffe9230>
   a9b60:	00c00ac4 	movi	r3,43
   a9b64:	d8c02305 	stb	r3,140(sp)
   a9b68:	04c00044 	movi	r19,1
   a9b6c:	b0c00007 	ldb	r3,0(r22)
   a9b70:	003daf06 	br	a9230 <__alt_data_end+0xfffe9230>
   a9b74:	b0c00007 	ldb	r3,0(r22)
   a9b78:	01000a84 	movi	r4,42
   a9b7c:	b4000044 	addi	r16,r22,1
   a9b80:	19025e26 	beq	r3,r4,aa4fc <___vfiprintf_internal_r+0x1440>
   a9b84:	1f3ff404 	addi	fp,r3,-48
   a9b88:	0009883a 	mov	r4,zero
   a9b8c:	af025236 	bltu	r21,fp,aa4d8 <___vfiprintf_internal_r+0x141c>
   a9b90:	01400284 	movi	r5,10
   a9b94:	00ab8e00 	call	ab8e0 <__mulsi3>
   a9b98:	80c00007 	ldb	r3,0(r16)
   a9b9c:	1709883a 	add	r4,r2,fp
   a9ba0:	85800044 	addi	r22,r16,1
   a9ba4:	1f3ff404 	addi	fp,r3,-48
   a9ba8:	b021883a 	mov	r16,r22
   a9bac:	af3ff82e 	bgeu	r21,fp,a9b90 <__alt_data_end+0xfffe9b90>
   a9bb0:	2021883a 	mov	r16,r4
   a9bb4:	203d9f0e 	bge	r4,zero,a9234 <__alt_data_end+0xfffe9234>
   a9bb8:	043fffc4 	movi	r16,-1
   a9bbc:	003d9d06 	br	a9234 <__alt_data_end+0xfffe9234>
   a9bc0:	8c401014 	ori	r17,r17,64
   a9bc4:	b0c00007 	ldb	r3,0(r22)
   a9bc8:	003d9906 	br	a9230 <__alt_data_end+0xfffe9230>
   a9bcc:	d9002217 	ldw	r4,136(sp)
   a9bd0:	d8001d85 	stb	zero,118(sp)
   a9bd4:	20c00204 	addi	r3,r4,8
   a9bd8:	24c00017 	ldw	r19,0(r4)
   a9bdc:	25000117 	ldw	r20,4(r4)
   a9be0:	8001e716 	blt	r16,zero,aa380 <___vfiprintf_internal_r+0x12c4>
   a9be4:	013fdfc4 	movi	r4,-129
   a9be8:	9d04b03a 	or	r2,r19,r20
   a9bec:	d8c02215 	stw	r3,136(sp)
   a9bf0:	8922703a 	and	r17,r17,r4
   a9bf4:	002b883a 	mov	r21,zero
   a9bf8:	103f2f1e 	bne	r2,zero,a98b8 <__alt_data_end+0xfffe98b8>
   a9bfc:	803e2f26 	beq	r16,zero,a94bc <__alt_data_end+0xfffe94bc>
   a9c00:	0027883a 	mov	r19,zero
   a9c04:	9cc00c04 	addi	r19,r19,48
   a9c08:	dcc019c5 	stb	r19,103(sp)
   a9c0c:	dd002817 	ldw	r20,160(sp)
   a9c10:	ddc019c4 	addi	r23,sp,103
   a9c14:	003e2c06 	br	a94c8 <__alt_data_end+0xfffe94c8>
   a9c18:	9cc03fcc 	andi	r19,r19,255
   a9c1c:	b811883a 	mov	r8,r23
   a9c20:	9802571e 	bne	r19,zero,aa580 <___vfiprintf_internal_r+0x14c4>
   a9c24:	18005726 	beq	r3,zero,a9d84 <___vfiprintf_internal_r+0xcc8>
   a9c28:	04c00044 	movi	r19,1
   a9c2c:	d8c01005 	stb	r3,64(sp)
   a9c30:	d8001d85 	stb	zero,118(sp)
   a9c34:	9829883a 	mov	r20,r19
   a9c38:	ddc01004 	addi	r23,sp,64
   a9c3c:	003f0a06 	br	a9868 <__alt_data_end+0xfffe9868>
   a9c40:	d9402017 	ldw	r5,128(sp)
   a9c44:	d9002117 	ldw	r4,132(sp)
   a9c48:	d9801a04 	addi	r6,sp,104
   a9c4c:	da802a15 	stw	r10,168(sp)
   a9c50:	00a8fa80 	call	a8fa8 <__sprint_r.part.0>
   a9c54:	da802a17 	ldw	r10,168(sp)
   a9c58:	1000501e 	bne	r2,zero,a9d9c <___vfiprintf_internal_r+0xce0>
   a9c5c:	d9801b17 	ldw	r6,108(sp)
   a9c60:	d8801c17 	ldw	r2,112(sp)
   a9c64:	d811883a 	mov	r8,sp
   a9c68:	31000044 	addi	r4,r6,1
   a9c6c:	003e3606 	br	a9548 <__alt_data_end+0xfffe9548>
   a9c70:	d9001b17 	ldw	r4,108(sp)
   a9c74:	d8801c17 	ldw	r2,112(sp)
   a9c78:	21400044 	addi	r5,r4,1
   a9c7c:	d9801d87 	ldb	r6,118(sp)
   a9c80:	303e5226 	beq	r6,zero,a95cc <__alt_data_end+0xfffe95cc>
   a9c84:	01800044 	movi	r6,1
   a9c88:	d9001d84 	addi	r4,sp,118
   a9c8c:	1185883a 	add	r2,r2,r6
   a9c90:	41000015 	stw	r4,0(r8)
   a9c94:	41800115 	stw	r6,4(r8)
   a9c98:	d8801c15 	stw	r2,112(sp)
   a9c9c:	d9401b15 	stw	r5,108(sp)
   a9ca0:	010001c4 	movi	r4,7
   a9ca4:	2140b00e 	bge	r4,r5,a9f68 <___vfiprintf_internal_r+0xeac>
   a9ca8:	1000f61e 	bne	r2,zero,aa084 <___vfiprintf_internal_r+0xfc8>
   a9cac:	3800b31e 	bne	r7,zero,a9f7c <___vfiprintf_internal_r+0xec0>
   a9cb0:	0009883a 	mov	r4,zero
   a9cb4:	300b883a 	mov	r5,r6
   a9cb8:	d811883a 	mov	r8,sp
   a9cbc:	01802004 	movi	r6,128
   a9cc0:	19be5226 	beq	r3,r6,a960c <__alt_data_end+0xfffe960c>
   a9cc4:	8521c83a 	sub	r16,r16,r20
   a9cc8:	043e790e 	bge	zero,r16,a96b0 <__alt_data_end+0xfffe96b0>
   a9ccc:	05400404 	movi	r21,16
   a9cd0:	ac01b00e 	bge	r21,r16,aa394 <___vfiprintf_internal_r+0x12d8>
   a9cd4:	014002f4 	movhi	r5,11
   a9cd8:	29456904 	addi	r5,r5,5540
   a9cdc:	d9402315 	stw	r5,140(sp)
   a9ce0:	070001c4 	movi	fp,7
   a9ce4:	00000506 	br	a9cfc <___vfiprintf_internal_r+0xc40>
   a9ce8:	21400084 	addi	r5,r4,2
   a9cec:	42000204 	addi	r8,r8,8
   a9cf0:	1809883a 	mov	r4,r3
   a9cf4:	843ffc04 	addi	r16,r16,-16
   a9cf8:	ac000d0e 	bge	r21,r16,a9d30 <___vfiprintf_internal_r+0xc74>
   a9cfc:	10800404 	addi	r2,r2,16
   a9d00:	20c00044 	addi	r3,r4,1
   a9d04:	44800015 	stw	r18,0(r8)
   a9d08:	45400115 	stw	r21,4(r8)
   a9d0c:	d8801c15 	stw	r2,112(sp)
   a9d10:	d8c01b15 	stw	r3,108(sp)
   a9d14:	e0fff40e 	bge	fp,r3,a9ce8 <__alt_data_end+0xfffe9ce8>
   a9d18:	1000101e 	bne	r2,zero,a9d5c <___vfiprintf_internal_r+0xca0>
   a9d1c:	843ffc04 	addi	r16,r16,-16
   a9d20:	01400044 	movi	r5,1
   a9d24:	0009883a 	mov	r4,zero
   a9d28:	d811883a 	mov	r8,sp
   a9d2c:	ac3ff316 	blt	r21,r16,a9cfc <__alt_data_end+0xfffe9cfc>
   a9d30:	d8c02317 	ldw	r3,140(sp)
   a9d34:	1405883a 	add	r2,r2,r16
   a9d38:	44000115 	stw	r16,4(r8)
   a9d3c:	40c00015 	stw	r3,0(r8)
   a9d40:	d8801c15 	stw	r2,112(sp)
   a9d44:	d9401b15 	stw	r5,108(sp)
   a9d48:	00c001c4 	movi	r3,7
   a9d4c:	19401916 	blt	r3,r5,a9db4 <___vfiprintf_internal_r+0xcf8>
   a9d50:	42000204 	addi	r8,r8,8
   a9d54:	29400044 	addi	r5,r5,1
   a9d58:	003e5506 	br	a96b0 <__alt_data_end+0xfffe96b0>
   a9d5c:	d9402017 	ldw	r5,128(sp)
   a9d60:	d9002117 	ldw	r4,132(sp)
   a9d64:	d9801a04 	addi	r6,sp,104
   a9d68:	00a8fa80 	call	a8fa8 <__sprint_r.part.0>
   a9d6c:	10000b1e 	bne	r2,zero,a9d9c <___vfiprintf_internal_r+0xce0>
   a9d70:	d9001b17 	ldw	r4,108(sp)
   a9d74:	d8801c17 	ldw	r2,112(sp)
   a9d78:	d811883a 	mov	r8,sp
   a9d7c:	21400044 	addi	r5,r4,1
   a9d80:	003fdc06 	br	a9cf4 <__alt_data_end+0xfffe9cf4>
   a9d84:	d8801c17 	ldw	r2,112(sp)
   a9d88:	10000426 	beq	r2,zero,a9d9c <___vfiprintf_internal_r+0xce0>
   a9d8c:	d9402017 	ldw	r5,128(sp)
   a9d90:	d9002117 	ldw	r4,132(sp)
   a9d94:	d9801a04 	addi	r6,sp,104
   a9d98:	00a8fa80 	call	a8fa8 <__sprint_r.part.0>
   a9d9c:	d9402017 	ldw	r5,128(sp)
   a9da0:	2880030b 	ldhu	r2,12(r5)
   a9da4:	1080100c 	andi	r2,r2,64
   a9da8:	10014d1e 	bne	r2,zero,aa2e0 <___vfiprintf_internal_r+0x1224>
   a9dac:	d8802417 	ldw	r2,144(sp)
   a9db0:	003d9706 	br	a9410 <__alt_data_end+0xfffe9410>
   a9db4:	1000d21e 	bne	r2,zero,aa100 <___vfiprintf_internal_r+0x1044>
   a9db8:	00c00044 	movi	r3,1
   a9dbc:	a005883a 	mov	r2,r20
   a9dc0:	ddc00015 	stw	r23,0(sp)
   a9dc4:	dd000115 	stw	r20,4(sp)
   a9dc8:	dd001c15 	stw	r20,112(sp)
   a9dcc:	d8c01b15 	stw	r3,108(sp)
   a9dd0:	d811883a 	mov	r8,sp
   a9dd4:	42000204 	addi	r8,r8,8
   a9dd8:	8c40010c 	andi	r17,r17,4
   a9ddc:	88004026 	beq	r17,zero,a9ee0 <___vfiprintf_internal_r+0xe24>
   a9de0:	d9002517 	ldw	r4,148(sp)
   a9de4:	24e3c83a 	sub	r17,r4,r19
   a9de8:	04403d0e 	bge	zero,r17,a9ee0 <___vfiprintf_internal_r+0xe24>
   a9dec:	04000404 	movi	r16,16
   a9df0:	8441a90e 	bge	r16,r17,aa498 <___vfiprintf_internal_r+0x13dc>
   a9df4:	00c002f4 	movhi	r3,11
   a9df8:	18c56d04 	addi	r3,r3,5556
   a9dfc:	d9001b17 	ldw	r4,108(sp)
   a9e00:	d8c02315 	stw	r3,140(sp)
   a9e04:	050001c4 	movi	r20,7
   a9e08:	dd402117 	ldw	r21,132(sp)
   a9e0c:	ddc02017 	ldw	r23,128(sp)
   a9e10:	00000506 	br	a9e28 <___vfiprintf_internal_r+0xd6c>
   a9e14:	21400084 	addi	r5,r4,2
   a9e18:	42000204 	addi	r8,r8,8
   a9e1c:	1809883a 	mov	r4,r3
   a9e20:	8c7ffc04 	addi	r17,r17,-16
   a9e24:	84400f0e 	bge	r16,r17,a9e64 <___vfiprintf_internal_r+0xda8>
   a9e28:	014002f4 	movhi	r5,11
   a9e2c:	10800404 	addi	r2,r2,16
   a9e30:	20c00044 	addi	r3,r4,1
   a9e34:	29456d04 	addi	r5,r5,5556
   a9e38:	41400015 	stw	r5,0(r8)
   a9e3c:	44000115 	stw	r16,4(r8)
   a9e40:	d8801c15 	stw	r2,112(sp)
   a9e44:	d8c01b15 	stw	r3,108(sp)
   a9e48:	a0fff20e 	bge	r20,r3,a9e14 <__alt_data_end+0xfffe9e14>
   a9e4c:	1000141e 	bne	r2,zero,a9ea0 <___vfiprintf_internal_r+0xde4>
   a9e50:	8c7ffc04 	addi	r17,r17,-16
   a9e54:	01400044 	movi	r5,1
   a9e58:	0009883a 	mov	r4,zero
   a9e5c:	d811883a 	mov	r8,sp
   a9e60:	847ff116 	blt	r16,r17,a9e28 <__alt_data_end+0xfffe9e28>
   a9e64:	d8c02317 	ldw	r3,140(sp)
   a9e68:	1445883a 	add	r2,r2,r17
   a9e6c:	44400115 	stw	r17,4(r8)
   a9e70:	40c00015 	stw	r3,0(r8)
   a9e74:	d8801c15 	stw	r2,112(sp)
   a9e78:	d9401b15 	stw	r5,108(sp)
   a9e7c:	00c001c4 	movi	r3,7
   a9e80:	1940170e 	bge	r3,r5,a9ee0 <___vfiprintf_internal_r+0xe24>
   a9e84:	1000101e 	bne	r2,zero,a9ec8 <___vfiprintf_internal_r+0xe0c>
   a9e88:	d8802517 	ldw	r2,148(sp)
   a9e8c:	14c11616 	blt	r2,r19,aa2e8 <___vfiprintf_internal_r+0x122c>
   a9e90:	d9002417 	ldw	r4,144(sp)
   a9e94:	2089883a 	add	r4,r4,r2
   a9e98:	d9002415 	stw	r4,144(sp)
   a9e9c:	003e1806 	br	a9700 <__alt_data_end+0xfffe9700>
   a9ea0:	d9801a04 	addi	r6,sp,104
   a9ea4:	b80b883a 	mov	r5,r23
   a9ea8:	a809883a 	mov	r4,r21
   a9eac:	00a8fa80 	call	a8fa8 <__sprint_r.part.0>
   a9eb0:	103fba1e 	bne	r2,zero,a9d9c <__alt_data_end+0xfffe9d9c>
   a9eb4:	d9001b17 	ldw	r4,108(sp)
   a9eb8:	d8801c17 	ldw	r2,112(sp)
   a9ebc:	d811883a 	mov	r8,sp
   a9ec0:	21400044 	addi	r5,r4,1
   a9ec4:	003fd606 	br	a9e20 <__alt_data_end+0xfffe9e20>
   a9ec8:	d9402017 	ldw	r5,128(sp)
   a9ecc:	d9002117 	ldw	r4,132(sp)
   a9ed0:	d9801a04 	addi	r6,sp,104
   a9ed4:	00a8fa80 	call	a8fa8 <__sprint_r.part.0>
   a9ed8:	103fb01e 	bne	r2,zero,a9d9c <__alt_data_end+0xfffe9d9c>
   a9edc:	d8801c17 	ldw	r2,112(sp)
   a9ee0:	d8c02517 	ldw	r3,148(sp)
   a9ee4:	1cc0010e 	bge	r3,r19,a9eec <___vfiprintf_internal_r+0xe30>
   a9ee8:	9807883a 	mov	r3,r19
   a9eec:	d9002417 	ldw	r4,144(sp)
   a9ef0:	20c9883a 	add	r4,r4,r3
   a9ef4:	d9002415 	stw	r4,144(sp)
   a9ef8:	103e0126 	beq	r2,zero,a9700 <__alt_data_end+0xfffe9700>
   a9efc:	d9402017 	ldw	r5,128(sp)
   a9f00:	d9002117 	ldw	r4,132(sp)
   a9f04:	d9801a04 	addi	r6,sp,104
   a9f08:	00a8fa80 	call	a8fa8 <__sprint_r.part.0>
   a9f0c:	103dfc26 	beq	r2,zero,a9700 <__alt_data_end+0xfffe9700>
   a9f10:	003fa206 	br	a9d9c <__alt_data_end+0xfffe9d9c>
   a9f14:	d9402017 	ldw	r5,128(sp)
   a9f18:	d9002117 	ldw	r4,132(sp)
   a9f1c:	d9801a04 	addi	r6,sp,104
   a9f20:	d9c02b15 	stw	r7,172(sp)
   a9f24:	00a8fa80 	call	a8fa8 <__sprint_r.part.0>
   a9f28:	d9c02b17 	ldw	r7,172(sp)
   a9f2c:	103f9b1e 	bne	r2,zero,a9d9c <__alt_data_end+0xfffe9d9c>
   a9f30:	d9001b17 	ldw	r4,108(sp)
   a9f34:	d8801c17 	ldw	r2,112(sp)
   a9f38:	d811883a 	mov	r8,sp
   a9f3c:	21800044 	addi	r6,r4,1
   a9f40:	003dbf06 	br	a9640 <__alt_data_end+0xfffe9640>
   a9f44:	1000d81e 	bne	r2,zero,aa2a8 <___vfiprintf_internal_r+0x11ec>
   a9f48:	d9001d87 	ldb	r4,118(sp)
   a9f4c:	20000a26 	beq	r4,zero,a9f78 <___vfiprintf_internal_r+0xebc>
   a9f50:	00800044 	movi	r2,1
   a9f54:	d9001d84 	addi	r4,sp,118
   a9f58:	100b883a 	mov	r5,r2
   a9f5c:	d9000015 	stw	r4,0(sp)
   a9f60:	d8800115 	stw	r2,4(sp)
   a9f64:	d811883a 	mov	r8,sp
   a9f68:	2809883a 	mov	r4,r5
   a9f6c:	42000204 	addi	r8,r8,8
   a9f70:	29400044 	addi	r5,r5,1
   a9f74:	003d9506 	br	a95cc <__alt_data_end+0xfffe95cc>
   a9f78:	3800fd26 	beq	r7,zero,aa370 <___vfiprintf_internal_r+0x12b4>
   a9f7c:	00800084 	movi	r2,2
   a9f80:	d9001d04 	addi	r4,sp,116
   a9f84:	d9000015 	stw	r4,0(sp)
   a9f88:	d8800115 	stw	r2,4(sp)
   a9f8c:	01400044 	movi	r5,1
   a9f90:	d811883a 	mov	r8,sp
   a9f94:	2809883a 	mov	r4,r5
   a9f98:	42000204 	addi	r8,r8,8
   a9f9c:	29400044 	addi	r5,r5,1
   a9fa0:	003f4606 	br	a9cbc <__alt_data_end+0xfffe9cbc>
   a9fa4:	d8802517 	ldw	r2,148(sp)
   a9fa8:	14c0010e 	bge	r2,r19,a9fb0 <___vfiprintf_internal_r+0xef4>
   a9fac:	9805883a 	mov	r2,r19
   a9fb0:	d9402417 	ldw	r5,144(sp)
   a9fb4:	288b883a 	add	r5,r5,r2
   a9fb8:	d9402415 	stw	r5,144(sp)
   a9fbc:	003dd006 	br	a9700 <__alt_data_end+0xfffe9700>
   a9fc0:	d8001d85 	stb	zero,118(sp)
   a9fc4:	80005d16 	blt	r16,zero,aa13c <___vfiprintf_internal_r+0x1080>
   a9fc8:	00ffdfc4 	movi	r3,-129
   a9fcc:	9d04b03a 	or	r2,r19,r20
   a9fd0:	88e2703a 	and	r17,r17,r3
   a9fd4:	103d3726 	beq	r2,zero,a94b4 <__alt_data_end+0xfffe94b4>
   a9fd8:	002b883a 	mov	r21,zero
   a9fdc:	d9002617 	ldw	r4,152(sp)
   a9fe0:	ddc01a04 	addi	r23,sp,104
   a9fe4:	988003cc 	andi	r2,r19,15
   a9fe8:	a006973a 	slli	r3,r20,28
   a9fec:	2085883a 	add	r2,r4,r2
   a9ff0:	9826d13a 	srli	r19,r19,4
   a9ff4:	10800003 	ldbu	r2,0(r2)
   a9ff8:	a028d13a 	srli	r20,r20,4
   a9ffc:	bdffffc4 	addi	r23,r23,-1
   aa000:	1ce6b03a 	or	r19,r3,r19
   aa004:	b8800005 	stb	r2,0(r23)
   aa008:	9d04b03a 	or	r2,r19,r20
   aa00c:	103ff51e 	bne	r2,zero,a9fe4 <__alt_data_end+0xfffe9fe4>
   aa010:	d8801e17 	ldw	r2,120(sp)
   aa014:	15e9c83a 	sub	r20,r2,r23
   aa018:	003d2b06 	br	a94c8 <__alt_data_end+0xfffe94c8>
   aa01c:	d9402017 	ldw	r5,128(sp)
   aa020:	d9002117 	ldw	r4,132(sp)
   aa024:	d9801a04 	addi	r6,sp,104
   aa028:	00a8fa80 	call	a8fa8 <__sprint_r.part.0>
   aa02c:	103f5b1e 	bne	r2,zero,a9d9c <__alt_data_end+0xfffe9d9c>
   aa030:	d8801c17 	ldw	r2,112(sp)
   aa034:	d811883a 	mov	r8,sp
   aa038:	003f6706 	br	a9dd8 <__alt_data_end+0xfffe9dd8>
   aa03c:	d9402017 	ldw	r5,128(sp)
   aa040:	d9002117 	ldw	r4,132(sp)
   aa044:	d9801a04 	addi	r6,sp,104
   aa048:	00a8fa80 	call	a8fa8 <__sprint_r.part.0>
   aa04c:	103f531e 	bne	r2,zero,a9d9c <__alt_data_end+0xfffe9d9c>
   aa050:	d811883a 	mov	r8,sp
   aa054:	003cd906 	br	a93bc <__alt_data_end+0xfffe93bc>
   aa058:	10803fcc 	andi	r2,r2,255
   aa05c:	1080201c 	xori	r2,r2,128
   aa060:	10bfe004 	addi	r2,r2,-128
   aa064:	00c00c04 	movi	r3,48
   aa068:	10ffe926 	beq	r2,r3,aa010 <__alt_data_end+0xfffea010>
   aa06c:	b8ffffc5 	stb	r3,-1(r23)
   aa070:	d8c01e17 	ldw	r3,120(sp)
   aa074:	b8bfffc4 	addi	r2,r23,-1
   aa078:	102f883a 	mov	r23,r2
   aa07c:	18a9c83a 	sub	r20,r3,r2
   aa080:	003d1106 	br	a94c8 <__alt_data_end+0xfffe94c8>
   aa084:	d9402017 	ldw	r5,128(sp)
   aa088:	d9002117 	ldw	r4,132(sp)
   aa08c:	d9801a04 	addi	r6,sp,104
   aa090:	d8c02a15 	stw	r3,168(sp)
   aa094:	d9c02b15 	stw	r7,172(sp)
   aa098:	00a8fa80 	call	a8fa8 <__sprint_r.part.0>
   aa09c:	d8c02a17 	ldw	r3,168(sp)
   aa0a0:	d9c02b17 	ldw	r7,172(sp)
   aa0a4:	103f3d1e 	bne	r2,zero,a9d9c <__alt_data_end+0xfffe9d9c>
   aa0a8:	d9001b17 	ldw	r4,108(sp)
   aa0ac:	d8801c17 	ldw	r2,112(sp)
   aa0b0:	d811883a 	mov	r8,sp
   aa0b4:	21400044 	addi	r5,r4,1
   aa0b8:	003d4406 	br	a95cc <__alt_data_end+0xfffe95cc>
   aa0bc:	d9402017 	ldw	r5,128(sp)
   aa0c0:	d9002117 	ldw	r4,132(sp)
   aa0c4:	d9801a04 	addi	r6,sp,104
   aa0c8:	d8c02a15 	stw	r3,168(sp)
   aa0cc:	00a8fa80 	call	a8fa8 <__sprint_r.part.0>
   aa0d0:	d8c02a17 	ldw	r3,168(sp)
   aa0d4:	103f311e 	bne	r2,zero,a9d9c <__alt_data_end+0xfffe9d9c>
   aa0d8:	d9001b17 	ldw	r4,108(sp)
   aa0dc:	d8801c17 	ldw	r2,112(sp)
   aa0e0:	d811883a 	mov	r8,sp
   aa0e4:	21400044 	addi	r5,r4,1
   aa0e8:	003ef406 	br	a9cbc <__alt_data_end+0xfffe9cbc>
   aa0ec:	1000bd1e 	bne	r2,zero,aa3e4 <___vfiprintf_internal_r+0x1328>
   aa0f0:	01400044 	movi	r5,1
   aa0f4:	0009883a 	mov	r4,zero
   aa0f8:	d811883a 	mov	r8,sp
   aa0fc:	003ef106 	br	a9cc4 <__alt_data_end+0xfffe9cc4>
   aa100:	d9402017 	ldw	r5,128(sp)
   aa104:	d9002117 	ldw	r4,132(sp)
   aa108:	d9801a04 	addi	r6,sp,104
   aa10c:	00a8fa80 	call	a8fa8 <__sprint_r.part.0>
   aa110:	103f221e 	bne	r2,zero,a9d9c <__alt_data_end+0xfffe9d9c>
   aa114:	d9401b17 	ldw	r5,108(sp)
   aa118:	d8801c17 	ldw	r2,112(sp)
   aa11c:	d811883a 	mov	r8,sp
   aa120:	29400044 	addi	r5,r5,1
   aa124:	003d6206 	br	a96b0 <__alt_data_end+0xfffe96b0>
   aa128:	014002f4 	movhi	r5,11
   aa12c:	29450904 	addi	r5,r5,5156
   aa130:	d9402615 	stw	r5,152(sp)
   aa134:	d8c02215 	stw	r3,136(sp)
   aa138:	1023883a 	mov	r17,r2
   aa13c:	9d04b03a 	or	r2,r19,r20
   aa140:	103fa51e 	bne	r2,zero,a9fd8 <__alt_data_end+0xfffe9fd8>
   aa144:	002b883a 	mov	r21,zero
   aa148:	00800084 	movi	r2,2
   aa14c:	003e4a06 	br	a9a78 <__alt_data_end+0xfffe9a78>
   aa150:	014002f4 	movhi	r5,11
   aa154:	29450904 	addi	r5,r5,5156
   aa158:	002b883a 	mov	r21,zero
   aa15c:	d9402615 	stw	r5,152(sp)
   aa160:	003f9e06 	br	a9fdc <__alt_data_end+0xfffe9fdc>
   aa164:	d9402217 	ldw	r5,136(sp)
   aa168:	d8001d85 	stb	zero,118(sp)
   aa16c:	0029883a 	mov	r20,zero
   aa170:	28800104 	addi	r2,r5,4
   aa174:	2cc00017 	ldw	r19,0(r5)
   aa178:	803e3a16 	blt	r16,zero,a9a64 <__alt_data_end+0xfffe9a64>
   aa17c:	00ffdfc4 	movi	r3,-129
   aa180:	d8802215 	stw	r2,136(sp)
   aa184:	88e2703a 	and	r17,r17,r3
   aa188:	002b883a 	mov	r21,zero
   aa18c:	983e9b26 	beq	r19,zero,a9bfc <__alt_data_end+0xfffe9bfc>
   aa190:	00800244 	movi	r2,9
   aa194:	14fdc936 	bltu	r2,r19,a98bc <__alt_data_end+0xfffe98bc>
   aa198:	003e9a06 	br	a9c04 <__alt_data_end+0xfffe9c04>
   aa19c:	00800c04 	movi	r2,48
   aa1a0:	d8c01d45 	stb	r3,117(sp)
   aa1a4:	d8801d05 	stb	r2,116(sp)
   aa1a8:	d8001d85 	stb	zero,118(sp)
   aa1ac:	88c00094 	ori	r3,r17,2
   aa1b0:	80009c16 	blt	r16,zero,aa424 <___vfiprintf_internal_r+0x1368>
   aa1b4:	00bfdfc4 	movi	r2,-129
   aa1b8:	88a2703a 	and	r17,r17,r2
   aa1bc:	8c400094 	ori	r17,r17,2
   aa1c0:	002b883a 	mov	r21,zero
   aa1c4:	003f8506 	br	a9fdc <__alt_data_end+0xfffe9fdc>
   aa1c8:	b029883a 	mov	r20,r22
   aa1cc:	003c0b06 	br	a91fc <__alt_data_end+0xfffe91fc>
   aa1d0:	04e7c83a 	sub	r19,zero,r19
   aa1d4:	05400b44 	movi	r21,45
   aa1d8:	9804c03a 	cmpne	r2,r19,zero
   aa1dc:	0529c83a 	sub	r20,zero,r20
   aa1e0:	dd401d85 	stb	r21,118(sp)
   aa1e4:	a0a9c83a 	sub	r20,r20,r2
   aa1e8:	80009716 	blt	r16,zero,aa448 <___vfiprintf_internal_r+0x138c>
   aa1ec:	00bfdfc4 	movi	r2,-129
   aa1f0:	88a2703a 	and	r17,r17,r2
   aa1f4:	003db006 	br	a98b8 <__alt_data_end+0xfffe98b8>
   aa1f8:	b0c00007 	ldb	r3,0(r22)
   aa1fc:	003c0c06 	br	a9230 <__alt_data_end+0xfffe9230>
   aa200:	8880100c 	andi	r2,r17,64
   aa204:	d8001d85 	stb	zero,118(sp)
   aa208:	1000461e 	bne	r2,zero,aa324 <___vfiprintf_internal_r+0x1268>
   aa20c:	d9002217 	ldw	r4,136(sp)
   aa210:	0029883a 	mov	r20,zero
   aa214:	20800104 	addi	r2,r4,4
   aa218:	24c00017 	ldw	r19,0(r4)
   aa21c:	803df80e 	bge	r16,zero,a9a00 <__alt_data_end+0xfffe9a00>
   aa220:	9d06b03a 	or	r3,r19,r20
   aa224:	d8802215 	stw	r2,136(sp)
   aa228:	183d5e1e 	bne	r3,zero,a97a4 <__alt_data_end+0xfffe97a4>
   aa22c:	002b883a 	mov	r21,zero
   aa230:	0005883a 	mov	r2,zero
   aa234:	003e1006 	br	a9a78 <__alt_data_end+0xfffe9a78>
   aa238:	8880040c 	andi	r2,r17,16
   aa23c:	1000321e 	bne	r2,zero,aa308 <___vfiprintf_internal_r+0x124c>
   aa240:	8c40100c 	andi	r17,r17,64
   aa244:	88008d26 	beq	r17,zero,aa47c <___vfiprintf_internal_r+0x13c0>
   aa248:	d9402217 	ldw	r5,136(sp)
   aa24c:	d8c02417 	ldw	r3,144(sp)
   aa250:	28800017 	ldw	r2,0(r5)
   aa254:	29400104 	addi	r5,r5,4
   aa258:	d9402215 	stw	r5,136(sp)
   aa25c:	10c0000d 	sth	r3,0(r2)
   aa260:	003bca06 	br	a918c <__alt_data_end+0xfffe918c>
   aa264:	8880100c 	andi	r2,r17,64
   aa268:	10003a26 	beq	r2,zero,aa354 <___vfiprintf_internal_r+0x1298>
   aa26c:	d8802217 	ldw	r2,136(sp)
   aa270:	14c0000f 	ldh	r19,0(r2)
   aa274:	10800104 	addi	r2,r2,4
   aa278:	d8802215 	stw	r2,136(sp)
   aa27c:	9829d7fa 	srai	r20,r19,31
   aa280:	a005883a 	mov	r2,r20
   aa284:	003d8506 	br	a989c <__alt_data_end+0xfffe989c>
   aa288:	8880100c 	andi	r2,r17,64
   aa28c:	10002b26 	beq	r2,zero,aa33c <___vfiprintf_internal_r+0x1280>
   aa290:	d8802217 	ldw	r2,136(sp)
   aa294:	0029883a 	mov	r20,zero
   aa298:	14c0000b 	ldhu	r19,0(r2)
   aa29c:	10800104 	addi	r2,r2,4
   aa2a0:	d8802215 	stw	r2,136(sp)
   aa2a4:	003d5d06 	br	a981c <__alt_data_end+0xfffe981c>
   aa2a8:	d9402017 	ldw	r5,128(sp)
   aa2ac:	d9002117 	ldw	r4,132(sp)
   aa2b0:	d9801a04 	addi	r6,sp,104
   aa2b4:	d8c02a15 	stw	r3,168(sp)
   aa2b8:	d9c02b15 	stw	r7,172(sp)
   aa2bc:	00a8fa80 	call	a8fa8 <__sprint_r.part.0>
   aa2c0:	d8c02a17 	ldw	r3,168(sp)
   aa2c4:	d9c02b17 	ldw	r7,172(sp)
   aa2c8:	103eb41e 	bne	r2,zero,a9d9c <__alt_data_end+0xfffe9d9c>
   aa2cc:	d9001b17 	ldw	r4,108(sp)
   aa2d0:	d8801c17 	ldw	r2,112(sp)
   aa2d4:	d811883a 	mov	r8,sp
   aa2d8:	21400044 	addi	r5,r4,1
   aa2dc:	003e6706 	br	a9c7c <__alt_data_end+0xfffe9c7c>
   aa2e0:	00bfffc4 	movi	r2,-1
   aa2e4:	003c4a06 	br	a9410 <__alt_data_end+0xfffe9410>
   aa2e8:	9805883a 	mov	r2,r19
   aa2ec:	003ee806 	br	a9e90 <__alt_data_end+0xfffe9e90>
   aa2f0:	d8c02217 	ldw	r3,136(sp)
   aa2f4:	0029883a 	mov	r20,zero
   aa2f8:	18800104 	addi	r2,r3,4
   aa2fc:	1cc0000b 	ldhu	r19,0(r3)
   aa300:	803f9e0e 	bge	r16,zero,aa17c <__alt_data_end+0xfffea17c>
   aa304:	003dd706 	br	a9a64 <__alt_data_end+0xfffe9a64>
   aa308:	d8c02217 	ldw	r3,136(sp)
   aa30c:	d9002417 	ldw	r4,144(sp)
   aa310:	18800017 	ldw	r2,0(r3)
   aa314:	18c00104 	addi	r3,r3,4
   aa318:	d8c02215 	stw	r3,136(sp)
   aa31c:	11000015 	stw	r4,0(r2)
   aa320:	003b9a06 	br	a918c <__alt_data_end+0xfffe918c>
   aa324:	d8c02217 	ldw	r3,136(sp)
   aa328:	0029883a 	mov	r20,zero
   aa32c:	18800104 	addi	r2,r3,4
   aa330:	1cc0000b 	ldhu	r19,0(r3)
   aa334:	803db20e 	bge	r16,zero,a9a00 <__alt_data_end+0xfffe9a00>
   aa338:	003fb906 	br	aa220 <__alt_data_end+0xfffea220>
   aa33c:	d9002217 	ldw	r4,136(sp)
   aa340:	0029883a 	mov	r20,zero
   aa344:	24c00017 	ldw	r19,0(r4)
   aa348:	21000104 	addi	r4,r4,4
   aa34c:	d9002215 	stw	r4,136(sp)
   aa350:	003d3206 	br	a981c <__alt_data_end+0xfffe981c>
   aa354:	d8c02217 	ldw	r3,136(sp)
   aa358:	1cc00017 	ldw	r19,0(r3)
   aa35c:	18c00104 	addi	r3,r3,4
   aa360:	d8c02215 	stw	r3,136(sp)
   aa364:	9829d7fa 	srai	r20,r19,31
   aa368:	a005883a 	mov	r2,r20
   aa36c:	003d4b06 	br	a989c <__alt_data_end+0xfffe989c>
   aa370:	0009883a 	mov	r4,zero
   aa374:	01400044 	movi	r5,1
   aa378:	d811883a 	mov	r8,sp
   aa37c:	003e4f06 	br	a9cbc <__alt_data_end+0xfffe9cbc>
   aa380:	d8c02215 	stw	r3,136(sp)
   aa384:	002b883a 	mov	r21,zero
   aa388:	003db806 	br	a9a6c <__alt_data_end+0xfffe9a6c>
   aa38c:	d811883a 	mov	r8,sp
   aa390:	003e9606 	br	a9dec <__alt_data_end+0xfffe9dec>
   aa394:	010002f4 	movhi	r4,11
   aa398:	21056904 	addi	r4,r4,5540
   aa39c:	d9002315 	stw	r4,140(sp)
   aa3a0:	003e6306 	br	a9d30 <__alt_data_end+0xfffe9d30>
   aa3a4:	b0c00043 	ldbu	r3,1(r22)
   aa3a8:	8c400814 	ori	r17,r17,32
   aa3ac:	b5800044 	addi	r22,r22,1
   aa3b0:	18c03fcc 	andi	r3,r3,255
   aa3b4:	18c0201c 	xori	r3,r3,128
   aa3b8:	18ffe004 	addi	r3,r3,-128
   aa3bc:	003b9c06 	br	a9230 <__alt_data_end+0xfffe9230>
   aa3c0:	b809883a 	mov	r4,r23
   aa3c4:	da002a15 	stw	r8,168(sp)
   aa3c8:	00a2cf40 	call	a2cf4 <strlen>
   aa3cc:	1029883a 	mov	r20,r2
   aa3d0:	dd401d83 	ldbu	r21,118(sp)
   aa3d4:	df002215 	stw	fp,136(sp)
   aa3d8:	0021883a 	mov	r16,zero
   aa3dc:	da002a17 	ldw	r8,168(sp)
   aa3e0:	003c3906 	br	a94c8 <__alt_data_end+0xfffe94c8>
   aa3e4:	d9402017 	ldw	r5,128(sp)
   aa3e8:	d9002117 	ldw	r4,132(sp)
   aa3ec:	d9801a04 	addi	r6,sp,104
   aa3f0:	00a8fa80 	call	a8fa8 <__sprint_r.part.0>
   aa3f4:	103e691e 	bne	r2,zero,a9d9c <__alt_data_end+0xfffe9d9c>
   aa3f8:	d9001b17 	ldw	r4,108(sp)
   aa3fc:	d8801c17 	ldw	r2,112(sp)
   aa400:	d811883a 	mov	r8,sp
   aa404:	21400044 	addi	r5,r4,1
   aa408:	003e2e06 	br	a9cc4 <__alt_data_end+0xfffe9cc4>
   aa40c:	010002f4 	movhi	r4,11
   aa410:	21056d04 	addi	r4,r4,5556
   aa414:	d9002315 	stw	r4,140(sp)
   aa418:	d9001b17 	ldw	r4,108(sp)
   aa41c:	21000044 	addi	r4,r4,1
   aa420:	003c5e06 	br	a959c <__alt_data_end+0xfffe959c>
   aa424:	002b883a 	mov	r21,zero
   aa428:	00800084 	movi	r2,2
   aa42c:	10803fcc 	andi	r2,r2,255
   aa430:	01000044 	movi	r4,1
   aa434:	11002b26 	beq	r2,r4,aa4e4 <___vfiprintf_internal_r+0x1428>
   aa438:	01000084 	movi	r4,2
   aa43c:	11002b1e 	bne	r2,r4,aa4ec <___vfiprintf_internal_r+0x1430>
   aa440:	1823883a 	mov	r17,r3
   aa444:	003ee506 	br	a9fdc <__alt_data_end+0xfffe9fdc>
   aa448:	8807883a 	mov	r3,r17
   aa44c:	00800044 	movi	r2,1
   aa450:	003ff606 	br	aa42c <__alt_data_end+0xfffea42c>
   aa454:	00800184 	movi	r2,6
   aa458:	1400012e 	bgeu	r2,r16,aa460 <___vfiprintf_internal_r+0x13a4>
   aa45c:	1021883a 	mov	r16,r2
   aa460:	8029883a 	mov	r20,r16
   aa464:	8027883a 	mov	r19,r16
   aa468:	80002216 	blt	r16,zero,aa4f4 <___vfiprintf_internal_r+0x1438>
   aa46c:	05c002f4 	movhi	r23,11
   aa470:	df002215 	stw	fp,136(sp)
   aa474:	bdc50e04 	addi	r23,r23,5176
   aa478:	003cfb06 	br	a9868 <__alt_data_end+0xfffe9868>
   aa47c:	d9002217 	ldw	r4,136(sp)
   aa480:	d9402417 	ldw	r5,144(sp)
   aa484:	20800017 	ldw	r2,0(r4)
   aa488:	21000104 	addi	r4,r4,4
   aa48c:	d9002215 	stw	r4,136(sp)
   aa490:	11400015 	stw	r5,0(r2)
   aa494:	003b3d06 	br	a918c <__alt_data_end+0xfffe918c>
   aa498:	014002f4 	movhi	r5,11
   aa49c:	29456d04 	addi	r5,r5,5556
   aa4a0:	d9402315 	stw	r5,140(sp)
   aa4a4:	d9401b17 	ldw	r5,108(sp)
   aa4a8:	29400044 	addi	r5,r5,1
   aa4ac:	003e6d06 	br	a9e64 <__alt_data_end+0xfffe9e64>
   aa4b0:	8029883a 	mov	r20,r16
   aa4b4:	dd401d83 	ldbu	r21,118(sp)
   aa4b8:	df002215 	stw	fp,136(sp)
   aa4bc:	0021883a 	mov	r16,zero
   aa4c0:	003c0106 	br	a94c8 <__alt_data_end+0xfffe94c8>
   aa4c4:	00c002f4 	movhi	r3,11
   aa4c8:	18c56904 	addi	r3,r3,5540
   aa4cc:	d8c02315 	stw	r3,140(sp)
   aa4d0:	280d883a 	mov	r6,r5
   aa4d4:	003c6906 	br	a967c <__alt_data_end+0xfffe967c>
   aa4d8:	802d883a 	mov	r22,r16
   aa4dc:	0021883a 	mov	r16,zero
   aa4e0:	003b5406 	br	a9234 <__alt_data_end+0xfffe9234>
   aa4e4:	1823883a 	mov	r17,r3
   aa4e8:	003cf306 	br	a98b8 <__alt_data_end+0xfffe98b8>
   aa4ec:	1823883a 	mov	r17,r3
   aa4f0:	003cad06 	br	a97a8 <__alt_data_end+0xfffe97a8>
   aa4f4:	0027883a 	mov	r19,zero
   aa4f8:	003fdc06 	br	aa46c <__alt_data_end+0xfffea46c>
   aa4fc:	d9402217 	ldw	r5,136(sp)
   aa500:	8005883a 	mov	r2,r16
   aa504:	b0c00043 	ldbu	r3,1(r22)
   aa508:	2c000017 	ldw	r16,0(r5)
   aa50c:	29000104 	addi	r4,r5,4
   aa510:	d9002215 	stw	r4,136(sp)
   aa514:	102d883a 	mov	r22,r2
   aa518:	803fa50e 	bge	r16,zero,aa3b0 <__alt_data_end+0xfffea3b0>
   aa51c:	18c03fcc 	andi	r3,r3,255
   aa520:	18c0201c 	xori	r3,r3,128
   aa524:	043fffc4 	movi	r16,-1
   aa528:	18ffe004 	addi	r3,r3,-128
   aa52c:	003b4006 	br	a9230 <__alt_data_end+0xfffe9230>
   aa530:	d9402303 	ldbu	r5,140(sp)
   aa534:	d9401d85 	stb	r5,118(sp)
   aa538:	003cae06 	br	a97f4 <__alt_data_end+0xfffe97f4>
   aa53c:	d8c02303 	ldbu	r3,140(sp)
   aa540:	d8c01d85 	stb	r3,118(sp)
   aa544:	003d1406 	br	a9998 <__alt_data_end+0xfffe9998>
   aa548:	d8c02303 	ldbu	r3,140(sp)
   aa54c:	d8c01d85 	stb	r3,118(sp)
   aa550:	003cca06 	br	a987c <__alt_data_end+0xfffe987c>
   aa554:	8880004c 	andi	r2,r17,1
   aa558:	002b883a 	mov	r21,zero
   aa55c:	10000526 	beq	r2,zero,aa574 <___vfiprintf_internal_r+0x14b8>
   aa560:	00800c04 	movi	r2,48
   aa564:	d88019c5 	stb	r2,103(sp)
   aa568:	dd002817 	ldw	r20,160(sp)
   aa56c:	ddc019c4 	addi	r23,sp,103
   aa570:	003bd506 	br	a94c8 <__alt_data_end+0xfffe94c8>
   aa574:	0029883a 	mov	r20,zero
   aa578:	ddc01a04 	addi	r23,sp,104
   aa57c:	003bd206 	br	a94c8 <__alt_data_end+0xfffe94c8>
   aa580:	d9002303 	ldbu	r4,140(sp)
   aa584:	d9001d85 	stb	r4,118(sp)
   aa588:	003da606 	br	a9c24 <__alt_data_end+0xfffe9c24>
   aa58c:	d8c02303 	ldbu	r3,140(sp)
   aa590:	d8c01d85 	stb	r3,118(sp)
   aa594:	003c7606 	br	a9770 <__alt_data_end+0xfffe9770>
   aa598:	d8c02303 	ldbu	r3,140(sp)
   aa59c:	d8c01d85 	stb	r3,118(sp)
   aa5a0:	003c6506 	br	a9738 <__alt_data_end+0xfffe9738>
   aa5a4:	d9002303 	ldbu	r4,140(sp)
   aa5a8:	d9001d85 	stb	r4,118(sp)
   aa5ac:	003d3d06 	br	a9aa4 <__alt_data_end+0xfffe9aa4>
   aa5b0:	d8c02303 	ldbu	r3,140(sp)
   aa5b4:	d8c01d85 	stb	r3,118(sp)
   aa5b8:	003d1d06 	br	a9a30 <__alt_data_end+0xfffe9a30>
   aa5bc:	d8c02303 	ldbu	r3,140(sp)
   aa5c0:	d8c01d85 	stb	r3,118(sp)
   aa5c4:	003d0306 	br	a99d4 <__alt_data_end+0xfffe99d4>

000aa5c8 <__vfiprintf_internal>:
   aa5c8:	008002f4 	movhi	r2,11
   aa5cc:	108c9504 	addi	r2,r2,12884
   aa5d0:	300f883a 	mov	r7,r6
   aa5d4:	280d883a 	mov	r6,r5
   aa5d8:	200b883a 	mov	r5,r4
   aa5dc:	11000017 	ldw	r4,0(r2)
   aa5e0:	00a90bc1 	jmpi	a90bc <___vfiprintf_internal_r>

000aa5e4 <__sbprintf>:
   aa5e4:	2880030b 	ldhu	r2,12(r5)
   aa5e8:	2ac01917 	ldw	r11,100(r5)
   aa5ec:	2a80038b 	ldhu	r10,14(r5)
   aa5f0:	2a400717 	ldw	r9,28(r5)
   aa5f4:	2a000917 	ldw	r8,36(r5)
   aa5f8:	defee204 	addi	sp,sp,-1144
   aa5fc:	00c10004 	movi	r3,1024
   aa600:	dc011a15 	stw	r16,1128(sp)
   aa604:	10bfff4c 	andi	r2,r2,65533
   aa608:	2821883a 	mov	r16,r5
   aa60c:	d8cb883a 	add	r5,sp,r3
   aa610:	dc811c15 	stw	r18,1136(sp)
   aa614:	dc411b15 	stw	r17,1132(sp)
   aa618:	dfc11d15 	stw	ra,1140(sp)
   aa61c:	2025883a 	mov	r18,r4
   aa620:	d881030d 	sth	r2,1036(sp)
   aa624:	dac11915 	stw	r11,1124(sp)
   aa628:	da81038d 	sth	r10,1038(sp)
   aa62c:	da410715 	stw	r9,1052(sp)
   aa630:	da010915 	stw	r8,1060(sp)
   aa634:	dec10015 	stw	sp,1024(sp)
   aa638:	dec10415 	stw	sp,1040(sp)
   aa63c:	d8c10215 	stw	r3,1032(sp)
   aa640:	d8c10515 	stw	r3,1044(sp)
   aa644:	d8010615 	stw	zero,1048(sp)
   aa648:	00a90bc0 	call	a90bc <___vfiprintf_internal_r>
   aa64c:	1023883a 	mov	r17,r2
   aa650:	10000416 	blt	r2,zero,aa664 <__sbprintf+0x80>
   aa654:	d9410004 	addi	r5,sp,1024
   aa658:	9009883a 	mov	r4,r18
   aa65c:	00a099c0 	call	a099c <_fflush_r>
   aa660:	10000d1e 	bne	r2,zero,aa698 <__sbprintf+0xb4>
   aa664:	d881030b 	ldhu	r2,1036(sp)
   aa668:	1080100c 	andi	r2,r2,64
   aa66c:	10000326 	beq	r2,zero,aa67c <__sbprintf+0x98>
   aa670:	8080030b 	ldhu	r2,12(r16)
   aa674:	10801014 	ori	r2,r2,64
   aa678:	8080030d 	sth	r2,12(r16)
   aa67c:	8805883a 	mov	r2,r17
   aa680:	dfc11d17 	ldw	ra,1140(sp)
   aa684:	dc811c17 	ldw	r18,1136(sp)
   aa688:	dc411b17 	ldw	r17,1132(sp)
   aa68c:	dc011a17 	ldw	r16,1128(sp)
   aa690:	dec11e04 	addi	sp,sp,1144
   aa694:	f800283a 	ret
   aa698:	047fffc4 	movi	r17,-1
   aa69c:	003ff106 	br	aa664 <__alt_data_end+0xfffea664>

000aa6a0 <_calloc_r>:
   aa6a0:	defffe04 	addi	sp,sp,-8
   aa6a4:	2805883a 	mov	r2,r5
   aa6a8:	dc000015 	stw	r16,0(sp)
   aa6ac:	300b883a 	mov	r5,r6
   aa6b0:	2021883a 	mov	r16,r4
   aa6b4:	1009883a 	mov	r4,r2
   aa6b8:	dfc00115 	stw	ra,4(sp)
   aa6bc:	00ab8e00 	call	ab8e0 <__mulsi3>
   aa6c0:	100b883a 	mov	r5,r2
   aa6c4:	8009883a 	mov	r4,r16
   aa6c8:	00a1c240 	call	a1c24 <_malloc_r>
   aa6cc:	10002926 	beq	r2,zero,aa774 <_calloc_r+0xd4>
   aa6d0:	11bfff17 	ldw	r6,-4(r2)
   aa6d4:	1021883a 	mov	r16,r2
   aa6d8:	00bfff04 	movi	r2,-4
   aa6dc:	308c703a 	and	r6,r6,r2
   aa6e0:	00c00904 	movi	r3,36
   aa6e4:	308d883a 	add	r6,r6,r2
   aa6e8:	19801636 	bltu	r3,r6,aa744 <_calloc_r+0xa4>
   aa6ec:	008004c4 	movi	r2,19
   aa6f0:	11800b2e 	bgeu	r2,r6,aa720 <_calloc_r+0x80>
   aa6f4:	80000015 	stw	zero,0(r16)
   aa6f8:	80000115 	stw	zero,4(r16)
   aa6fc:	008006c4 	movi	r2,27
   aa700:	11801a2e 	bgeu	r2,r6,aa76c <_calloc_r+0xcc>
   aa704:	80000215 	stw	zero,8(r16)
   aa708:	80000315 	stw	zero,12(r16)
   aa70c:	30c0151e 	bne	r6,r3,aa764 <_calloc_r+0xc4>
   aa710:	80000415 	stw	zero,16(r16)
   aa714:	80800604 	addi	r2,r16,24
   aa718:	80000515 	stw	zero,20(r16)
   aa71c:	00000106 	br	aa724 <_calloc_r+0x84>
   aa720:	8005883a 	mov	r2,r16
   aa724:	10000015 	stw	zero,0(r2)
   aa728:	10000115 	stw	zero,4(r2)
   aa72c:	10000215 	stw	zero,8(r2)
   aa730:	8005883a 	mov	r2,r16
   aa734:	dfc00117 	ldw	ra,4(sp)
   aa738:	dc000017 	ldw	r16,0(sp)
   aa73c:	dec00204 	addi	sp,sp,8
   aa740:	f800283a 	ret
   aa744:	000b883a 	mov	r5,zero
   aa748:	8009883a 	mov	r4,r16
   aa74c:	00a24300 	call	a2430 <memset>
   aa750:	8005883a 	mov	r2,r16
   aa754:	dfc00117 	ldw	ra,4(sp)
   aa758:	dc000017 	ldw	r16,0(sp)
   aa75c:	dec00204 	addi	sp,sp,8
   aa760:	f800283a 	ret
   aa764:	80800404 	addi	r2,r16,16
   aa768:	003fee06 	br	aa724 <__alt_data_end+0xfffea724>
   aa76c:	80800204 	addi	r2,r16,8
   aa770:	003fec06 	br	aa724 <__alt_data_end+0xfffea724>
   aa774:	0005883a 	mov	r2,zero
   aa778:	003fee06 	br	aa734 <__alt_data_end+0xfffea734>

000aa77c <__fputwc>:
   aa77c:	defff804 	addi	sp,sp,-32
   aa780:	dcc00415 	stw	r19,16(sp)
   aa784:	dc800315 	stw	r18,12(sp)
   aa788:	dc000115 	stw	r16,4(sp)
   aa78c:	dfc00715 	stw	ra,28(sp)
   aa790:	dd400615 	stw	r21,24(sp)
   aa794:	dd000515 	stw	r20,20(sp)
   aa798:	dc400215 	stw	r17,8(sp)
   aa79c:	2027883a 	mov	r19,r4
   aa7a0:	2825883a 	mov	r18,r5
   aa7a4:	3021883a 	mov	r16,r6
   aa7a8:	00a73a00 	call	a73a0 <__locale_mb_cur_max>
   aa7ac:	00c00044 	movi	r3,1
   aa7b0:	10c03e26 	beq	r2,r3,aa8ac <__fputwc+0x130>
   aa7b4:	81c01704 	addi	r7,r16,92
   aa7b8:	900d883a 	mov	r6,r18
   aa7bc:	d80b883a 	mov	r5,sp
   aa7c0:	9809883a 	mov	r4,r19
   aa7c4:	00aa9840 	call	aa984 <_wcrtomb_r>
   aa7c8:	1029883a 	mov	r20,r2
   aa7cc:	00bfffc4 	movi	r2,-1
   aa7d0:	a0802026 	beq	r20,r2,aa854 <__fputwc+0xd8>
   aa7d4:	d9400003 	ldbu	r5,0(sp)
   aa7d8:	a0001c26 	beq	r20,zero,aa84c <__fputwc+0xd0>
   aa7dc:	0023883a 	mov	r17,zero
   aa7e0:	05400284 	movi	r21,10
   aa7e4:	00000906 	br	aa80c <__fputwc+0x90>
   aa7e8:	80800017 	ldw	r2,0(r16)
   aa7ec:	11400005 	stb	r5,0(r2)
   aa7f0:	80c00017 	ldw	r3,0(r16)
   aa7f4:	18c00044 	addi	r3,r3,1
   aa7f8:	80c00015 	stw	r3,0(r16)
   aa7fc:	8c400044 	addi	r17,r17,1
   aa800:	dc45883a 	add	r2,sp,r17
   aa804:	8d00112e 	bgeu	r17,r20,aa84c <__fputwc+0xd0>
   aa808:	11400003 	ldbu	r5,0(r2)
   aa80c:	80c00217 	ldw	r3,8(r16)
   aa810:	18ffffc4 	addi	r3,r3,-1
   aa814:	80c00215 	stw	r3,8(r16)
   aa818:	183ff30e 	bge	r3,zero,aa7e8 <__alt_data_end+0xfffea7e8>
   aa81c:	80800617 	ldw	r2,24(r16)
   aa820:	18801916 	blt	r3,r2,aa888 <__fputwc+0x10c>
   aa824:	80800017 	ldw	r2,0(r16)
   aa828:	11400005 	stb	r5,0(r2)
   aa82c:	80800017 	ldw	r2,0(r16)
   aa830:	10c00003 	ldbu	r3,0(r2)
   aa834:	10800044 	addi	r2,r2,1
   aa838:	1d402326 	beq	r3,r21,aa8c8 <__fputwc+0x14c>
   aa83c:	80800015 	stw	r2,0(r16)
   aa840:	8c400044 	addi	r17,r17,1
   aa844:	dc45883a 	add	r2,sp,r17
   aa848:	8d3fef36 	bltu	r17,r20,aa808 <__alt_data_end+0xfffea808>
   aa84c:	9005883a 	mov	r2,r18
   aa850:	00000406 	br	aa864 <__fputwc+0xe8>
   aa854:	80c0030b 	ldhu	r3,12(r16)
   aa858:	a005883a 	mov	r2,r20
   aa85c:	18c01014 	ori	r3,r3,64
   aa860:	80c0030d 	sth	r3,12(r16)
   aa864:	dfc00717 	ldw	ra,28(sp)
   aa868:	dd400617 	ldw	r21,24(sp)
   aa86c:	dd000517 	ldw	r20,20(sp)
   aa870:	dcc00417 	ldw	r19,16(sp)
   aa874:	dc800317 	ldw	r18,12(sp)
   aa878:	dc400217 	ldw	r17,8(sp)
   aa87c:	dc000117 	ldw	r16,4(sp)
   aa880:	dec00804 	addi	sp,sp,32
   aa884:	f800283a 	ret
   aa888:	800d883a 	mov	r6,r16
   aa88c:	29403fcc 	andi	r5,r5,255
   aa890:	9809883a 	mov	r4,r19
   aa894:	00a51400 	call	a5140 <__swbuf_r>
   aa898:	10bfffe0 	cmpeqi	r2,r2,-1
   aa89c:	10803fcc 	andi	r2,r2,255
   aa8a0:	103fd626 	beq	r2,zero,aa7fc <__alt_data_end+0xfffea7fc>
   aa8a4:	00bfffc4 	movi	r2,-1
   aa8a8:	003fee06 	br	aa864 <__alt_data_end+0xfffea864>
   aa8ac:	90ffffc4 	addi	r3,r18,-1
   aa8b0:	01003f84 	movi	r4,254
   aa8b4:	20ffbf36 	bltu	r4,r3,aa7b4 <__alt_data_end+0xfffea7b4>
   aa8b8:	900b883a 	mov	r5,r18
   aa8bc:	dc800005 	stb	r18,0(sp)
   aa8c0:	1029883a 	mov	r20,r2
   aa8c4:	003fc506 	br	aa7dc <__alt_data_end+0xfffea7dc>
   aa8c8:	800d883a 	mov	r6,r16
   aa8cc:	a80b883a 	mov	r5,r21
   aa8d0:	9809883a 	mov	r4,r19
   aa8d4:	00a51400 	call	a5140 <__swbuf_r>
   aa8d8:	10bfffe0 	cmpeqi	r2,r2,-1
   aa8dc:	003fef06 	br	aa89c <__alt_data_end+0xfffea89c>

000aa8e0 <_fputwc_r>:
   aa8e0:	3080030b 	ldhu	r2,12(r6)
   aa8e4:	10c8000c 	andi	r3,r2,8192
   aa8e8:	1800051e 	bne	r3,zero,aa900 <_fputwc_r+0x20>
   aa8ec:	30c01917 	ldw	r3,100(r6)
   aa8f0:	10880014 	ori	r2,r2,8192
   aa8f4:	3080030d 	sth	r2,12(r6)
   aa8f8:	18880014 	ori	r2,r3,8192
   aa8fc:	30801915 	stw	r2,100(r6)
   aa900:	00aa77c1 	jmpi	aa77c <__fputwc>

000aa904 <fputwc>:
   aa904:	008002f4 	movhi	r2,11
   aa908:	defffc04 	addi	sp,sp,-16
   aa90c:	108c9504 	addi	r2,r2,12884
   aa910:	dc000115 	stw	r16,4(sp)
   aa914:	14000017 	ldw	r16,0(r2)
   aa918:	dc400215 	stw	r17,8(sp)
   aa91c:	dfc00315 	stw	ra,12(sp)
   aa920:	2023883a 	mov	r17,r4
   aa924:	80000226 	beq	r16,zero,aa930 <fputwc+0x2c>
   aa928:	80800e17 	ldw	r2,56(r16)
   aa92c:	10001026 	beq	r2,zero,aa970 <fputwc+0x6c>
   aa930:	2880030b 	ldhu	r2,12(r5)
   aa934:	10c8000c 	andi	r3,r2,8192
   aa938:	1800051e 	bne	r3,zero,aa950 <fputwc+0x4c>
   aa93c:	28c01917 	ldw	r3,100(r5)
   aa940:	10880014 	ori	r2,r2,8192
   aa944:	2880030d 	sth	r2,12(r5)
   aa948:	18880014 	ori	r2,r3,8192
   aa94c:	28801915 	stw	r2,100(r5)
   aa950:	280d883a 	mov	r6,r5
   aa954:	8009883a 	mov	r4,r16
   aa958:	880b883a 	mov	r5,r17
   aa95c:	dfc00317 	ldw	ra,12(sp)
   aa960:	dc400217 	ldw	r17,8(sp)
   aa964:	dc000117 	ldw	r16,4(sp)
   aa968:	dec00404 	addi	sp,sp,16
   aa96c:	00aa77c1 	jmpi	aa77c <__fputwc>
   aa970:	8009883a 	mov	r4,r16
   aa974:	d9400015 	stw	r5,0(sp)
   aa978:	00a0d880 	call	a0d88 <__sinit>
   aa97c:	d9400017 	ldw	r5,0(sp)
   aa980:	003feb06 	br	aa930 <__alt_data_end+0xfffea930>

000aa984 <_wcrtomb_r>:
   aa984:	defff604 	addi	sp,sp,-40
   aa988:	008002f4 	movhi	r2,11
   aa98c:	dc800815 	stw	r18,32(sp)
   aa990:	dc400715 	stw	r17,28(sp)
   aa994:	dc000615 	stw	r16,24(sp)
   aa998:	108c9904 	addi	r2,r2,12900
   aa99c:	dfc00915 	stw	ra,36(sp)
   aa9a0:	2021883a 	mov	r16,r4
   aa9a4:	3823883a 	mov	r17,r7
   aa9a8:	14800017 	ldw	r18,0(r2)
   aa9ac:	28001426 	beq	r5,zero,aaa00 <_wcrtomb_r+0x7c>
   aa9b0:	d9400415 	stw	r5,16(sp)
   aa9b4:	d9800515 	stw	r6,20(sp)
   aa9b8:	00a73940 	call	a7394 <__locale_charset>
   aa9bc:	d9800517 	ldw	r6,20(sp)
   aa9c0:	d9400417 	ldw	r5,16(sp)
   aa9c4:	100f883a 	mov	r7,r2
   aa9c8:	dc400015 	stw	r17,0(sp)
   aa9cc:	8009883a 	mov	r4,r16
   aa9d0:	903ee83a 	callr	r18
   aa9d4:	00ffffc4 	movi	r3,-1
   aa9d8:	10c0031e 	bne	r2,r3,aa9e8 <_wcrtomb_r+0x64>
   aa9dc:	88000015 	stw	zero,0(r17)
   aa9e0:	00c02284 	movi	r3,138
   aa9e4:	80c00015 	stw	r3,0(r16)
   aa9e8:	dfc00917 	ldw	ra,36(sp)
   aa9ec:	dc800817 	ldw	r18,32(sp)
   aa9f0:	dc400717 	ldw	r17,28(sp)
   aa9f4:	dc000617 	ldw	r16,24(sp)
   aa9f8:	dec00a04 	addi	sp,sp,40
   aa9fc:	f800283a 	ret
   aaa00:	00a73940 	call	a7394 <__locale_charset>
   aaa04:	100f883a 	mov	r7,r2
   aaa08:	dc400015 	stw	r17,0(sp)
   aaa0c:	000d883a 	mov	r6,zero
   aaa10:	d9400104 	addi	r5,sp,4
   aaa14:	8009883a 	mov	r4,r16
   aaa18:	903ee83a 	callr	r18
   aaa1c:	003fed06 	br	aa9d4 <__alt_data_end+0xfffea9d4>

000aaa20 <wcrtomb>:
   aaa20:	defff604 	addi	sp,sp,-40
   aaa24:	008002f4 	movhi	r2,11
   aaa28:	dc800615 	stw	r18,24(sp)
   aaa2c:	dc400515 	stw	r17,20(sp)
   aaa30:	108c9504 	addi	r2,r2,12884
   aaa34:	dfc00915 	stw	ra,36(sp)
   aaa38:	dd000815 	stw	r20,32(sp)
   aaa3c:	dcc00715 	stw	r19,28(sp)
   aaa40:	dc000415 	stw	r16,16(sp)
   aaa44:	3025883a 	mov	r18,r6
   aaa48:	14400017 	ldw	r17,0(r2)
   aaa4c:	20001926 	beq	r4,zero,aaab4 <wcrtomb+0x94>
   aaa50:	008002f4 	movhi	r2,11
   aaa54:	108c9904 	addi	r2,r2,12900
   aaa58:	15000017 	ldw	r20,0(r2)
   aaa5c:	2021883a 	mov	r16,r4
   aaa60:	2827883a 	mov	r19,r5
   aaa64:	00a73940 	call	a7394 <__locale_charset>
   aaa68:	100f883a 	mov	r7,r2
   aaa6c:	dc800015 	stw	r18,0(sp)
   aaa70:	980d883a 	mov	r6,r19
   aaa74:	800b883a 	mov	r5,r16
   aaa78:	8809883a 	mov	r4,r17
   aaa7c:	a03ee83a 	callr	r20
   aaa80:	00ffffc4 	movi	r3,-1
   aaa84:	10c0031e 	bne	r2,r3,aaa94 <wcrtomb+0x74>
   aaa88:	90000015 	stw	zero,0(r18)
   aaa8c:	00c02284 	movi	r3,138
   aaa90:	88c00015 	stw	r3,0(r17)
   aaa94:	dfc00917 	ldw	ra,36(sp)
   aaa98:	dd000817 	ldw	r20,32(sp)
   aaa9c:	dcc00717 	ldw	r19,28(sp)
   aaaa0:	dc800617 	ldw	r18,24(sp)
   aaaa4:	dc400517 	ldw	r17,20(sp)
   aaaa8:	dc000417 	ldw	r16,16(sp)
   aaaac:	dec00a04 	addi	sp,sp,40
   aaab0:	f800283a 	ret
   aaab4:	008002f4 	movhi	r2,11
   aaab8:	108c9904 	addi	r2,r2,12900
   aaabc:	14000017 	ldw	r16,0(r2)
   aaac0:	00a73940 	call	a7394 <__locale_charset>
   aaac4:	100f883a 	mov	r7,r2
   aaac8:	dc800015 	stw	r18,0(sp)
   aaacc:	000d883a 	mov	r6,zero
   aaad0:	d9400104 	addi	r5,sp,4
   aaad4:	8809883a 	mov	r4,r17
   aaad8:	803ee83a 	callr	r16
   aaadc:	003fe806 	br	aaa80 <__alt_data_end+0xfffeaa80>

000aaae0 <__ascii_wctomb>:
   aaae0:	28000526 	beq	r5,zero,aaaf8 <__ascii_wctomb+0x18>
   aaae4:	00803fc4 	movi	r2,255
   aaae8:	11800536 	bltu	r2,r6,aab00 <__ascii_wctomb+0x20>
   aaaec:	29800005 	stb	r6,0(r5)
   aaaf0:	00800044 	movi	r2,1
   aaaf4:	f800283a 	ret
   aaaf8:	0005883a 	mov	r2,zero
   aaafc:	f800283a 	ret
   aab00:	00802284 	movi	r2,138
   aab04:	20800015 	stw	r2,0(r4)
   aab08:	00bfffc4 	movi	r2,-1
   aab0c:	f800283a 	ret

000aab10 <_wctomb_r>:
   aab10:	008002f4 	movhi	r2,11
   aab14:	defff904 	addi	sp,sp,-28
   aab18:	108c9904 	addi	r2,r2,12900
   aab1c:	dfc00615 	stw	ra,24(sp)
   aab20:	dc400515 	stw	r17,20(sp)
   aab24:	dc000415 	stw	r16,16(sp)
   aab28:	3823883a 	mov	r17,r7
   aab2c:	14000017 	ldw	r16,0(r2)
   aab30:	d9000115 	stw	r4,4(sp)
   aab34:	d9400215 	stw	r5,8(sp)
   aab38:	d9800315 	stw	r6,12(sp)
   aab3c:	00a73940 	call	a7394 <__locale_charset>
   aab40:	d9800317 	ldw	r6,12(sp)
   aab44:	d9400217 	ldw	r5,8(sp)
   aab48:	d9000117 	ldw	r4,4(sp)
   aab4c:	100f883a 	mov	r7,r2
   aab50:	dc400015 	stw	r17,0(sp)
   aab54:	803ee83a 	callr	r16
   aab58:	dfc00617 	ldw	ra,24(sp)
   aab5c:	dc400517 	ldw	r17,20(sp)
   aab60:	dc000417 	ldw	r16,16(sp)
   aab64:	dec00704 	addi	sp,sp,28
   aab68:	f800283a 	ret

000aab6c <__udivdi3>:
   aab6c:	defff404 	addi	sp,sp,-48
   aab70:	dcc00515 	stw	r19,20(sp)
   aab74:	dc000215 	stw	r16,8(sp)
   aab78:	dfc00b15 	stw	ra,44(sp)
   aab7c:	df000a15 	stw	fp,40(sp)
   aab80:	ddc00915 	stw	r23,36(sp)
   aab84:	dd800815 	stw	r22,32(sp)
   aab88:	dd400715 	stw	r21,28(sp)
   aab8c:	dd000615 	stw	r20,24(sp)
   aab90:	dc800415 	stw	r18,16(sp)
   aab94:	dc400315 	stw	r17,12(sp)
   aab98:	2027883a 	mov	r19,r4
   aab9c:	2821883a 	mov	r16,r5
   aaba0:	3800461e 	bne	r7,zero,aacbc <__udivdi3+0x150>
   aaba4:	3023883a 	mov	r17,r6
   aaba8:	2025883a 	mov	r18,r4
   aabac:	2980572e 	bgeu	r5,r6,aad0c <__udivdi3+0x1a0>
   aabb0:	00bfffd4 	movui	r2,65535
   aabb4:	282d883a 	mov	r22,r5
   aabb8:	1180b236 	bltu	r2,r6,aae84 <__udivdi3+0x318>
   aabbc:	00803fc4 	movi	r2,255
   aabc0:	1185803a 	cmpltu	r2,r2,r6
   aabc4:	100490fa 	slli	r2,r2,3
   aabc8:	3086d83a 	srl	r3,r6,r2
   aabcc:	010002f4 	movhi	r4,11
   aabd0:	21057104 	addi	r4,r4,5572
   aabd4:	20c7883a 	add	r3,r4,r3
   aabd8:	18c00003 	ldbu	r3,0(r3)
   aabdc:	1885883a 	add	r2,r3,r2
   aabe0:	00c00804 	movi	r3,32
   aabe4:	1887c83a 	sub	r3,r3,r2
   aabe8:	18000526 	beq	r3,zero,aac00 <__udivdi3+0x94>
   aabec:	80e0983a 	sll	r16,r16,r3
   aabf0:	9884d83a 	srl	r2,r19,r2
   aabf4:	30e2983a 	sll	r17,r6,r3
   aabf8:	98e4983a 	sll	r18,r19,r3
   aabfc:	142cb03a 	or	r22,r2,r16
   aac00:	882ad43a 	srli	r21,r17,16
   aac04:	b009883a 	mov	r4,r22
   aac08:	8d3fffcc 	andi	r20,r17,65535
   aac0c:	a80b883a 	mov	r5,r21
   aac10:	00ab8880 	call	ab888 <__umodsi3>
   aac14:	b009883a 	mov	r4,r22
   aac18:	a80b883a 	mov	r5,r21
   aac1c:	1027883a 	mov	r19,r2
   aac20:	00ab8240 	call	ab824 <__udivsi3>
   aac24:	100b883a 	mov	r5,r2
   aac28:	a009883a 	mov	r4,r20
   aac2c:	102d883a 	mov	r22,r2
   aac30:	00ab8e00 	call	ab8e0 <__mulsi3>
   aac34:	9826943a 	slli	r19,r19,16
   aac38:	9006d43a 	srli	r3,r18,16
   aac3c:	1cc6b03a 	or	r3,r3,r19
   aac40:	1880052e 	bgeu	r3,r2,aac58 <__udivdi3+0xec>
   aac44:	1c47883a 	add	r3,r3,r17
   aac48:	b13fffc4 	addi	r4,r22,-1
   aac4c:	1c400136 	bltu	r3,r17,aac54 <__udivdi3+0xe8>
   aac50:	18814236 	bltu	r3,r2,ab15c <__udivdi3+0x5f0>
   aac54:	202d883a 	mov	r22,r4
   aac58:	18a1c83a 	sub	r16,r3,r2
   aac5c:	8009883a 	mov	r4,r16
   aac60:	a80b883a 	mov	r5,r21
   aac64:	00ab8880 	call	ab888 <__umodsi3>
   aac68:	1027883a 	mov	r19,r2
   aac6c:	8009883a 	mov	r4,r16
   aac70:	a80b883a 	mov	r5,r21
   aac74:	9826943a 	slli	r19,r19,16
   aac78:	00ab8240 	call	ab824 <__udivsi3>
   aac7c:	100b883a 	mov	r5,r2
   aac80:	a009883a 	mov	r4,r20
   aac84:	94bfffcc 	andi	r18,r18,65535
   aac88:	1021883a 	mov	r16,r2
   aac8c:	94e4b03a 	or	r18,r18,r19
   aac90:	00ab8e00 	call	ab8e0 <__mulsi3>
   aac94:	9080052e 	bgeu	r18,r2,aacac <__udivdi3+0x140>
   aac98:	8ca5883a 	add	r18,r17,r18
   aac9c:	80ffffc4 	addi	r3,r16,-1
   aaca0:	94410c36 	bltu	r18,r17,ab0d4 <__udivdi3+0x568>
   aaca4:	90810b2e 	bgeu	r18,r2,ab0d4 <__udivdi3+0x568>
   aaca8:	843fff84 	addi	r16,r16,-2
   aacac:	b004943a 	slli	r2,r22,16
   aacb0:	0007883a 	mov	r3,zero
   aacb4:	1404b03a 	or	r2,r2,r16
   aacb8:	00005e06 	br	aae34 <__udivdi3+0x2c8>
   aacbc:	29c05b36 	bltu	r5,r7,aae2c <__udivdi3+0x2c0>
   aacc0:	00bfffd4 	movui	r2,65535
   aacc4:	11c0672e 	bgeu	r2,r7,aae64 <__udivdi3+0x2f8>
   aacc8:	00804034 	movhi	r2,256
   aaccc:	10bfffc4 	addi	r2,r2,-1
   aacd0:	11c10a36 	bltu	r2,r7,ab0fc <__udivdi3+0x590>
   aacd4:	00800404 	movi	r2,16
   aacd8:	3886d83a 	srl	r3,r7,r2
   aacdc:	010002f4 	movhi	r4,11
   aace0:	21057104 	addi	r4,r4,5572
   aace4:	20c7883a 	add	r3,r4,r3
   aace8:	18c00003 	ldbu	r3,0(r3)
   aacec:	05c00804 	movi	r23,32
   aacf0:	1885883a 	add	r2,r3,r2
   aacf4:	b8afc83a 	sub	r23,r23,r2
   aacf8:	b800671e 	bne	r23,zero,aae98 <__udivdi3+0x32c>
   aacfc:	3c010536 	bltu	r7,r16,ab114 <__udivdi3+0x5a8>
   aad00:	9985403a 	cmpgeu	r2,r19,r6
   aad04:	0007883a 	mov	r3,zero
   aad08:	00004a06 	br	aae34 <__udivdi3+0x2c8>
   aad0c:	3000041e 	bne	r6,zero,aad20 <__udivdi3+0x1b4>
   aad10:	000b883a 	mov	r5,zero
   aad14:	01000044 	movi	r4,1
   aad18:	00ab8240 	call	ab824 <__udivsi3>
   aad1c:	1023883a 	mov	r17,r2
   aad20:	00bfffd4 	movui	r2,65535
   aad24:	1440532e 	bgeu	r2,r17,aae74 <__udivdi3+0x308>
   aad28:	00804034 	movhi	r2,256
   aad2c:	10bfffc4 	addi	r2,r2,-1
   aad30:	1440f436 	bltu	r2,r17,ab104 <__udivdi3+0x598>
   aad34:	00800404 	movi	r2,16
   aad38:	8886d83a 	srl	r3,r17,r2
   aad3c:	010002f4 	movhi	r4,11
   aad40:	21057104 	addi	r4,r4,5572
   aad44:	20c7883a 	add	r3,r4,r3
   aad48:	18c00003 	ldbu	r3,0(r3)
   aad4c:	1885883a 	add	r2,r3,r2
   aad50:	00c00804 	movi	r3,32
   aad54:	1887c83a 	sub	r3,r3,r2
   aad58:	1800a51e 	bne	r3,zero,aaff0 <__udivdi3+0x484>
   aad5c:	882ad43a 	srli	r21,r17,16
   aad60:	8461c83a 	sub	r16,r16,r17
   aad64:	8d3fffcc 	andi	r20,r17,65535
   aad68:	00c00044 	movi	r3,1
   aad6c:	a80b883a 	mov	r5,r21
   aad70:	8009883a 	mov	r4,r16
   aad74:	d8c00115 	stw	r3,4(sp)
   aad78:	00ab8880 	call	ab888 <__umodsi3>
   aad7c:	a80b883a 	mov	r5,r21
   aad80:	8009883a 	mov	r4,r16
   aad84:	1027883a 	mov	r19,r2
   aad88:	00ab8240 	call	ab824 <__udivsi3>
   aad8c:	a00b883a 	mov	r5,r20
   aad90:	1009883a 	mov	r4,r2
   aad94:	102d883a 	mov	r22,r2
   aad98:	00ab8e00 	call	ab8e0 <__mulsi3>
   aad9c:	9826943a 	slli	r19,r19,16
   aada0:	900ed43a 	srli	r7,r18,16
   aada4:	d8c00117 	ldw	r3,4(sp)
   aada8:	3cceb03a 	or	r7,r7,r19
   aadac:	3880052e 	bgeu	r7,r2,aadc4 <__udivdi3+0x258>
   aadb0:	3c4f883a 	add	r7,r7,r17
   aadb4:	b13fffc4 	addi	r4,r22,-1
   aadb8:	3c400136 	bltu	r7,r17,aadc0 <__udivdi3+0x254>
   aadbc:	3880e436 	bltu	r7,r2,ab150 <__udivdi3+0x5e4>
   aadc0:	202d883a 	mov	r22,r4
   aadc4:	38a1c83a 	sub	r16,r7,r2
   aadc8:	8009883a 	mov	r4,r16
   aadcc:	a80b883a 	mov	r5,r21
   aadd0:	d8c00115 	stw	r3,4(sp)
   aadd4:	00ab8880 	call	ab888 <__umodsi3>
   aadd8:	1027883a 	mov	r19,r2
   aaddc:	8009883a 	mov	r4,r16
   aade0:	a80b883a 	mov	r5,r21
   aade4:	9826943a 	slli	r19,r19,16
   aade8:	00ab8240 	call	ab824 <__udivsi3>
   aadec:	a00b883a 	mov	r5,r20
   aadf0:	1009883a 	mov	r4,r2
   aadf4:	94bfffcc 	andi	r18,r18,65535
   aadf8:	1021883a 	mov	r16,r2
   aadfc:	94e4b03a 	or	r18,r18,r19
   aae00:	00ab8e00 	call	ab8e0 <__mulsi3>
   aae04:	d8c00117 	ldw	r3,4(sp)
   aae08:	9080052e 	bgeu	r18,r2,aae20 <__udivdi3+0x2b4>
   aae0c:	8ca5883a 	add	r18,r17,r18
   aae10:	813fffc4 	addi	r4,r16,-1
   aae14:	9440ad36 	bltu	r18,r17,ab0cc <__udivdi3+0x560>
   aae18:	9080ac2e 	bgeu	r18,r2,ab0cc <__udivdi3+0x560>
   aae1c:	843fff84 	addi	r16,r16,-2
   aae20:	b004943a 	slli	r2,r22,16
   aae24:	1404b03a 	or	r2,r2,r16
   aae28:	00000206 	br	aae34 <__udivdi3+0x2c8>
   aae2c:	0007883a 	mov	r3,zero
   aae30:	0005883a 	mov	r2,zero
   aae34:	dfc00b17 	ldw	ra,44(sp)
   aae38:	df000a17 	ldw	fp,40(sp)
   aae3c:	ddc00917 	ldw	r23,36(sp)
   aae40:	dd800817 	ldw	r22,32(sp)
   aae44:	dd400717 	ldw	r21,28(sp)
   aae48:	dd000617 	ldw	r20,24(sp)
   aae4c:	dcc00517 	ldw	r19,20(sp)
   aae50:	dc800417 	ldw	r18,16(sp)
   aae54:	dc400317 	ldw	r17,12(sp)
   aae58:	dc000217 	ldw	r16,8(sp)
   aae5c:	dec00c04 	addi	sp,sp,48
   aae60:	f800283a 	ret
   aae64:	00803fc4 	movi	r2,255
   aae68:	11c5803a 	cmpltu	r2,r2,r7
   aae6c:	100490fa 	slli	r2,r2,3
   aae70:	003f9906 	br	aacd8 <__alt_data_end+0xfffeacd8>
   aae74:	00803fc4 	movi	r2,255
   aae78:	1445803a 	cmpltu	r2,r2,r17
   aae7c:	100490fa 	slli	r2,r2,3
   aae80:	003fad06 	br	aad38 <__alt_data_end+0xfffead38>
   aae84:	00804034 	movhi	r2,256
   aae88:	10bfffc4 	addi	r2,r2,-1
   aae8c:	11809f36 	bltu	r2,r6,ab10c <__udivdi3+0x5a0>
   aae90:	00800404 	movi	r2,16
   aae94:	003f4c06 	br	aabc8 <__alt_data_end+0xfffeabc8>
   aae98:	3dce983a 	sll	r7,r7,r23
   aae9c:	30b8d83a 	srl	fp,r6,r2
   aaea0:	80a2d83a 	srl	r17,r16,r2
   aaea4:	35cc983a 	sll	r6,r6,r23
   aaea8:	3f38b03a 	or	fp,r7,fp
   aaeac:	e024d43a 	srli	r18,fp,16
   aaeb0:	9884d83a 	srl	r2,r19,r2
   aaeb4:	85e0983a 	sll	r16,r16,r23
   aaeb8:	8809883a 	mov	r4,r17
   aaebc:	900b883a 	mov	r5,r18
   aaec0:	d9800015 	stw	r6,0(sp)
   aaec4:	1420b03a 	or	r16,r2,r16
   aaec8:	00ab8880 	call	ab888 <__umodsi3>
   aaecc:	900b883a 	mov	r5,r18
   aaed0:	8809883a 	mov	r4,r17
   aaed4:	1029883a 	mov	r20,r2
   aaed8:	e5bfffcc 	andi	r22,fp,65535
   aaedc:	00ab8240 	call	ab824 <__udivsi3>
   aaee0:	100b883a 	mov	r5,r2
   aaee4:	b009883a 	mov	r4,r22
   aaee8:	102b883a 	mov	r21,r2
   aaeec:	00ab8e00 	call	ab8e0 <__mulsi3>
   aaef0:	a028943a 	slli	r20,r20,16
   aaef4:	8006d43a 	srli	r3,r16,16
   aaef8:	1d06b03a 	or	r3,r3,r20
   aaefc:	1880042e 	bgeu	r3,r2,aaf10 <__udivdi3+0x3a4>
   aaf00:	1f07883a 	add	r3,r3,fp
   aaf04:	a93fffc4 	addi	r4,r21,-1
   aaf08:	1f00892e 	bgeu	r3,fp,ab130 <__udivdi3+0x5c4>
   aaf0c:	202b883a 	mov	r21,r4
   aaf10:	18a3c83a 	sub	r17,r3,r2
   aaf14:	8809883a 	mov	r4,r17
   aaf18:	900b883a 	mov	r5,r18
   aaf1c:	00ab8880 	call	ab888 <__umodsi3>
   aaf20:	1029883a 	mov	r20,r2
   aaf24:	8809883a 	mov	r4,r17
   aaf28:	900b883a 	mov	r5,r18
   aaf2c:	a028943a 	slli	r20,r20,16
   aaf30:	00ab8240 	call	ab824 <__udivsi3>
   aaf34:	100b883a 	mov	r5,r2
   aaf38:	b009883a 	mov	r4,r22
   aaf3c:	843fffcc 	andi	r16,r16,65535
   aaf40:	1023883a 	mov	r17,r2
   aaf44:	8520b03a 	or	r16,r16,r20
   aaf48:	00ab8e00 	call	ab8e0 <__mulsi3>
   aaf4c:	8080042e 	bgeu	r16,r2,aaf60 <__udivdi3+0x3f4>
   aaf50:	8721883a 	add	r16,r16,fp
   aaf54:	88ffffc4 	addi	r3,r17,-1
   aaf58:	8700712e 	bgeu	r16,fp,ab120 <__udivdi3+0x5b4>
   aaf5c:	1823883a 	mov	r17,r3
   aaf60:	a80e943a 	slli	r7,r21,16
   aaf64:	d8c00017 	ldw	r3,0(sp)
   aaf68:	80a1c83a 	sub	r16,r16,r2
   aaf6c:	3c64b03a 	or	r18,r7,r17
   aaf70:	1d3fffcc 	andi	r20,r3,65535
   aaf74:	9022d43a 	srli	r17,r18,16
   aaf78:	95bfffcc 	andi	r22,r18,65535
   aaf7c:	a00b883a 	mov	r5,r20
   aaf80:	b009883a 	mov	r4,r22
   aaf84:	182ad43a 	srli	r21,r3,16
   aaf88:	00ab8e00 	call	ab8e0 <__mulsi3>
   aaf8c:	a00b883a 	mov	r5,r20
   aaf90:	8809883a 	mov	r4,r17
   aaf94:	1039883a 	mov	fp,r2
   aaf98:	00ab8e00 	call	ab8e0 <__mulsi3>
   aaf9c:	8809883a 	mov	r4,r17
   aafa0:	a80b883a 	mov	r5,r21
   aafa4:	1029883a 	mov	r20,r2
   aafa8:	00ab8e00 	call	ab8e0 <__mulsi3>
   aafac:	a80b883a 	mov	r5,r21
   aafb0:	b009883a 	mov	r4,r22
   aafb4:	1023883a 	mov	r17,r2
   aafb8:	00ab8e00 	call	ab8e0 <__mulsi3>
   aafbc:	e006d43a 	srli	r3,fp,16
   aafc0:	1505883a 	add	r2,r2,r20
   aafc4:	1887883a 	add	r3,r3,r2
   aafc8:	1d00022e 	bgeu	r3,r20,aafd4 <__udivdi3+0x468>
   aafcc:	00800074 	movhi	r2,1
   aafd0:	88a3883a 	add	r17,r17,r2
   aafd4:	1804d43a 	srli	r2,r3,16
   aafd8:	1463883a 	add	r17,r2,r17
   aafdc:	84404436 	bltu	r16,r17,ab0f0 <__udivdi3+0x584>
   aafe0:	84403e26 	beq	r16,r17,ab0dc <__udivdi3+0x570>
   aafe4:	9005883a 	mov	r2,r18
   aafe8:	0007883a 	mov	r3,zero
   aafec:	003f9106 	br	aae34 <__alt_data_end+0xfffeae34>
   aaff0:	88e2983a 	sll	r17,r17,r3
   aaff4:	80aed83a 	srl	r23,r16,r2
   aaff8:	80e0983a 	sll	r16,r16,r3
   aaffc:	882ad43a 	srli	r21,r17,16
   ab000:	9884d83a 	srl	r2,r19,r2
   ab004:	b809883a 	mov	r4,r23
   ab008:	a80b883a 	mov	r5,r21
   ab00c:	98e4983a 	sll	r18,r19,r3
   ab010:	142cb03a 	or	r22,r2,r16
   ab014:	00ab8880 	call	ab888 <__umodsi3>
   ab018:	b809883a 	mov	r4,r23
   ab01c:	a80b883a 	mov	r5,r21
   ab020:	1027883a 	mov	r19,r2
   ab024:	8d3fffcc 	andi	r20,r17,65535
   ab028:	00ab8240 	call	ab824 <__udivsi3>
   ab02c:	a009883a 	mov	r4,r20
   ab030:	100b883a 	mov	r5,r2
   ab034:	102f883a 	mov	r23,r2
   ab038:	00ab8e00 	call	ab8e0 <__mulsi3>
   ab03c:	9826943a 	slli	r19,r19,16
   ab040:	b008d43a 	srli	r4,r22,16
   ab044:	24c8b03a 	or	r4,r4,r19
   ab048:	2080062e 	bgeu	r4,r2,ab064 <__udivdi3+0x4f8>
   ab04c:	2449883a 	add	r4,r4,r17
   ab050:	b8ffffc4 	addi	r3,r23,-1
   ab054:	24403c36 	bltu	r4,r17,ab148 <__udivdi3+0x5dc>
   ab058:	20803b2e 	bgeu	r4,r2,ab148 <__udivdi3+0x5dc>
   ab05c:	bdffff84 	addi	r23,r23,-2
   ab060:	2449883a 	add	r4,r4,r17
   ab064:	20a1c83a 	sub	r16,r4,r2
   ab068:	a80b883a 	mov	r5,r21
   ab06c:	8009883a 	mov	r4,r16
   ab070:	00ab8880 	call	ab888 <__umodsi3>
   ab074:	a80b883a 	mov	r5,r21
   ab078:	8009883a 	mov	r4,r16
   ab07c:	1027883a 	mov	r19,r2
   ab080:	00ab8240 	call	ab824 <__udivsi3>
   ab084:	a009883a 	mov	r4,r20
   ab088:	100b883a 	mov	r5,r2
   ab08c:	9826943a 	slli	r19,r19,16
   ab090:	1039883a 	mov	fp,r2
   ab094:	00ab8e00 	call	ab8e0 <__mulsi3>
   ab098:	b13fffcc 	andi	r4,r22,65535
   ab09c:	24c8b03a 	or	r4,r4,r19
   ab0a0:	2080062e 	bgeu	r4,r2,ab0bc <__udivdi3+0x550>
   ab0a4:	2449883a 	add	r4,r4,r17
   ab0a8:	e0ffffc4 	addi	r3,fp,-1
   ab0ac:	24402436 	bltu	r4,r17,ab140 <__udivdi3+0x5d4>
   ab0b0:	2080232e 	bgeu	r4,r2,ab140 <__udivdi3+0x5d4>
   ab0b4:	e73fff84 	addi	fp,fp,-2
   ab0b8:	2449883a 	add	r4,r4,r17
   ab0bc:	b82e943a 	slli	r23,r23,16
   ab0c0:	20a1c83a 	sub	r16,r4,r2
   ab0c4:	bf06b03a 	or	r3,r23,fp
   ab0c8:	003f2806 	br	aad6c <__alt_data_end+0xfffead6c>
   ab0cc:	2021883a 	mov	r16,r4
   ab0d0:	003f5306 	br	aae20 <__alt_data_end+0xfffeae20>
   ab0d4:	1821883a 	mov	r16,r3
   ab0d8:	003ef406 	br	aacac <__alt_data_end+0xfffeacac>
   ab0dc:	1806943a 	slli	r3,r3,16
   ab0e0:	9de6983a 	sll	r19,r19,r23
   ab0e4:	e73fffcc 	andi	fp,fp,65535
   ab0e8:	1f07883a 	add	r3,r3,fp
   ab0ec:	98ffbd2e 	bgeu	r19,r3,aafe4 <__alt_data_end+0xfffeafe4>
   ab0f0:	90bfffc4 	addi	r2,r18,-1
   ab0f4:	0007883a 	mov	r3,zero
   ab0f8:	003f4e06 	br	aae34 <__alt_data_end+0xfffeae34>
   ab0fc:	00800604 	movi	r2,24
   ab100:	003ef506 	br	aacd8 <__alt_data_end+0xfffeacd8>
   ab104:	00800604 	movi	r2,24
   ab108:	003f0b06 	br	aad38 <__alt_data_end+0xfffead38>
   ab10c:	00800604 	movi	r2,24
   ab110:	003ead06 	br	aabc8 <__alt_data_end+0xfffeabc8>
   ab114:	0007883a 	mov	r3,zero
   ab118:	00800044 	movi	r2,1
   ab11c:	003f4506 	br	aae34 <__alt_data_end+0xfffeae34>
   ab120:	80bf8e2e 	bgeu	r16,r2,aaf5c <__alt_data_end+0xfffeaf5c>
   ab124:	8c7fff84 	addi	r17,r17,-2
   ab128:	8721883a 	add	r16,r16,fp
   ab12c:	003f8c06 	br	aaf60 <__alt_data_end+0xfffeaf60>
   ab130:	18bf762e 	bgeu	r3,r2,aaf0c <__alt_data_end+0xfffeaf0c>
   ab134:	ad7fff84 	addi	r21,r21,-2
   ab138:	1f07883a 	add	r3,r3,fp
   ab13c:	003f7406 	br	aaf10 <__alt_data_end+0xfffeaf10>
   ab140:	1839883a 	mov	fp,r3
   ab144:	003fdd06 	br	ab0bc <__alt_data_end+0xfffeb0bc>
   ab148:	182f883a 	mov	r23,r3
   ab14c:	003fc506 	br	ab064 <__alt_data_end+0xfffeb064>
   ab150:	b5bfff84 	addi	r22,r22,-2
   ab154:	3c4f883a 	add	r7,r7,r17
   ab158:	003f1a06 	br	aadc4 <__alt_data_end+0xfffeadc4>
   ab15c:	b5bfff84 	addi	r22,r22,-2
   ab160:	1c47883a 	add	r3,r3,r17
   ab164:	003ebc06 	br	aac58 <__alt_data_end+0xfffeac58>

000ab168 <__umoddi3>:
   ab168:	defff304 	addi	sp,sp,-52
   ab16c:	df000b15 	stw	fp,44(sp)
   ab170:	dc400415 	stw	r17,16(sp)
   ab174:	dc000315 	stw	r16,12(sp)
   ab178:	dfc00c15 	stw	ra,48(sp)
   ab17c:	ddc00a15 	stw	r23,40(sp)
   ab180:	dd800915 	stw	r22,36(sp)
   ab184:	dd400815 	stw	r21,32(sp)
   ab188:	dd000715 	stw	r20,28(sp)
   ab18c:	dcc00615 	stw	r19,24(sp)
   ab190:	dc800515 	stw	r18,20(sp)
   ab194:	2021883a 	mov	r16,r4
   ab198:	2823883a 	mov	r17,r5
   ab19c:	2839883a 	mov	fp,r5
   ab1a0:	3800401e 	bne	r7,zero,ab2a4 <__umoddi3+0x13c>
   ab1a4:	3027883a 	mov	r19,r6
   ab1a8:	2029883a 	mov	r20,r4
   ab1ac:	2980552e 	bgeu	r5,r6,ab304 <__umoddi3+0x19c>
   ab1b0:	00bfffd4 	movui	r2,65535
   ab1b4:	1180a236 	bltu	r2,r6,ab440 <__umoddi3+0x2d8>
   ab1b8:	01003fc4 	movi	r4,255
   ab1bc:	2189803a 	cmpltu	r4,r4,r6
   ab1c0:	200890fa 	slli	r4,r4,3
   ab1c4:	3104d83a 	srl	r2,r6,r4
   ab1c8:	00c002f4 	movhi	r3,11
   ab1cc:	18c57104 	addi	r3,r3,5572
   ab1d0:	1885883a 	add	r2,r3,r2
   ab1d4:	10c00003 	ldbu	r3,0(r2)
   ab1d8:	00800804 	movi	r2,32
   ab1dc:	1909883a 	add	r4,r3,r4
   ab1e0:	1125c83a 	sub	r18,r2,r4
   ab1e4:	90000526 	beq	r18,zero,ab1fc <__umoddi3+0x94>
   ab1e8:	8ca2983a 	sll	r17,r17,r18
   ab1ec:	8108d83a 	srl	r4,r16,r4
   ab1f0:	34a6983a 	sll	r19,r6,r18
   ab1f4:	84a8983a 	sll	r20,r16,r18
   ab1f8:	2478b03a 	or	fp,r4,r17
   ab1fc:	982cd43a 	srli	r22,r19,16
   ab200:	e009883a 	mov	r4,fp
   ab204:	9dffffcc 	andi	r23,r19,65535
   ab208:	b00b883a 	mov	r5,r22
   ab20c:	00ab8880 	call	ab888 <__umodsi3>
   ab210:	b00b883a 	mov	r5,r22
   ab214:	e009883a 	mov	r4,fp
   ab218:	102b883a 	mov	r21,r2
   ab21c:	00ab8240 	call	ab824 <__udivsi3>
   ab220:	100b883a 	mov	r5,r2
   ab224:	b809883a 	mov	r4,r23
   ab228:	00ab8e00 	call	ab8e0 <__mulsi3>
   ab22c:	a82a943a 	slli	r21,r21,16
   ab230:	a006d43a 	srli	r3,r20,16
   ab234:	1d46b03a 	or	r3,r3,r21
   ab238:	1880032e 	bgeu	r3,r2,ab248 <__umoddi3+0xe0>
   ab23c:	1cc7883a 	add	r3,r3,r19
   ab240:	1cc00136 	bltu	r3,r19,ab248 <__umoddi3+0xe0>
   ab244:	18813136 	bltu	r3,r2,ab70c <__umoddi3+0x5a4>
   ab248:	18a1c83a 	sub	r16,r3,r2
   ab24c:	b00b883a 	mov	r5,r22
   ab250:	8009883a 	mov	r4,r16
   ab254:	00ab8880 	call	ab888 <__umodsi3>
   ab258:	b00b883a 	mov	r5,r22
   ab25c:	8009883a 	mov	r4,r16
   ab260:	1023883a 	mov	r17,r2
   ab264:	00ab8240 	call	ab824 <__udivsi3>
   ab268:	100b883a 	mov	r5,r2
   ab26c:	b809883a 	mov	r4,r23
   ab270:	8822943a 	slli	r17,r17,16
   ab274:	00ab8e00 	call	ab8e0 <__mulsi3>
   ab278:	a0ffffcc 	andi	r3,r20,65535
   ab27c:	1c46b03a 	or	r3,r3,r17
   ab280:	1880042e 	bgeu	r3,r2,ab294 <__umoddi3+0x12c>
   ab284:	1cc7883a 	add	r3,r3,r19
   ab288:	1cc00236 	bltu	r3,r19,ab294 <__umoddi3+0x12c>
   ab28c:	1880012e 	bgeu	r3,r2,ab294 <__umoddi3+0x12c>
   ab290:	1cc7883a 	add	r3,r3,r19
   ab294:	1885c83a 	sub	r2,r3,r2
   ab298:	1484d83a 	srl	r2,r2,r18
   ab29c:	0007883a 	mov	r3,zero
   ab2a0:	00005306 	br	ab3f0 <__umoddi3+0x288>
   ab2a4:	29c05036 	bltu	r5,r7,ab3e8 <__umoddi3+0x280>
   ab2a8:	00bfffd4 	movui	r2,65535
   ab2ac:	11c05c2e 	bgeu	r2,r7,ab420 <__umoddi3+0x2b8>
   ab2b0:	00804034 	movhi	r2,256
   ab2b4:	10bfffc4 	addi	r2,r2,-1
   ab2b8:	11c10636 	bltu	r2,r7,ab6d4 <__umoddi3+0x56c>
   ab2bc:	01000404 	movi	r4,16
   ab2c0:	3904d83a 	srl	r2,r7,r4
   ab2c4:	00c002f4 	movhi	r3,11
   ab2c8:	18c57104 	addi	r3,r3,5572
   ab2cc:	1885883a 	add	r2,r3,r2
   ab2d0:	14c00003 	ldbu	r19,0(r2)
   ab2d4:	00c00804 	movi	r3,32
   ab2d8:	9927883a 	add	r19,r19,r4
   ab2dc:	1ce9c83a 	sub	r20,r3,r19
   ab2e0:	a0005c1e 	bne	r20,zero,ab454 <__umoddi3+0x2ec>
   ab2e4:	3c400136 	bltu	r7,r17,ab2ec <__umoddi3+0x184>
   ab2e8:	81810a36 	bltu	r16,r6,ab714 <__umoddi3+0x5ac>
   ab2ec:	8185c83a 	sub	r2,r16,r6
   ab2f0:	89e3c83a 	sub	r17,r17,r7
   ab2f4:	8089803a 	cmpltu	r4,r16,r2
   ab2f8:	8939c83a 	sub	fp,r17,r4
   ab2fc:	e007883a 	mov	r3,fp
   ab300:	00003b06 	br	ab3f0 <__umoddi3+0x288>
   ab304:	3000041e 	bne	r6,zero,ab318 <__umoddi3+0x1b0>
   ab308:	000b883a 	mov	r5,zero
   ab30c:	01000044 	movi	r4,1
   ab310:	00ab8240 	call	ab824 <__udivsi3>
   ab314:	1027883a 	mov	r19,r2
   ab318:	00bfffd4 	movui	r2,65535
   ab31c:	14c0442e 	bgeu	r2,r19,ab430 <__umoddi3+0x2c8>
   ab320:	00804034 	movhi	r2,256
   ab324:	10bfffc4 	addi	r2,r2,-1
   ab328:	14c0ec36 	bltu	r2,r19,ab6dc <__umoddi3+0x574>
   ab32c:	00800404 	movi	r2,16
   ab330:	9886d83a 	srl	r3,r19,r2
   ab334:	010002f4 	movhi	r4,11
   ab338:	21057104 	addi	r4,r4,5572
   ab33c:	20c7883a 	add	r3,r4,r3
   ab340:	18c00003 	ldbu	r3,0(r3)
   ab344:	1887883a 	add	r3,r3,r2
   ab348:	00800804 	movi	r2,32
   ab34c:	10e5c83a 	sub	r18,r2,r3
   ab350:	9000ab1e 	bne	r18,zero,ab600 <__umoddi3+0x498>
   ab354:	982cd43a 	srli	r22,r19,16
   ab358:	8ce3c83a 	sub	r17,r17,r19
   ab35c:	9dffffcc 	andi	r23,r19,65535
   ab360:	b00b883a 	mov	r5,r22
   ab364:	8809883a 	mov	r4,r17
   ab368:	00ab8880 	call	ab888 <__umodsi3>
   ab36c:	b00b883a 	mov	r5,r22
   ab370:	8809883a 	mov	r4,r17
   ab374:	102b883a 	mov	r21,r2
   ab378:	00ab8240 	call	ab824 <__udivsi3>
   ab37c:	b80b883a 	mov	r5,r23
   ab380:	1009883a 	mov	r4,r2
   ab384:	00ab8e00 	call	ab8e0 <__mulsi3>
   ab388:	a82a943a 	slli	r21,r21,16
   ab38c:	a006d43a 	srli	r3,r20,16
   ab390:	1d46b03a 	or	r3,r3,r21
   ab394:	1880042e 	bgeu	r3,r2,ab3a8 <__umoddi3+0x240>
   ab398:	1cc7883a 	add	r3,r3,r19
   ab39c:	1cc00236 	bltu	r3,r19,ab3a8 <__umoddi3+0x240>
   ab3a0:	1880012e 	bgeu	r3,r2,ab3a8 <__umoddi3+0x240>
   ab3a4:	1cc7883a 	add	r3,r3,r19
   ab3a8:	18a1c83a 	sub	r16,r3,r2
   ab3ac:	b00b883a 	mov	r5,r22
   ab3b0:	8009883a 	mov	r4,r16
   ab3b4:	00ab8880 	call	ab888 <__umodsi3>
   ab3b8:	1023883a 	mov	r17,r2
   ab3bc:	b00b883a 	mov	r5,r22
   ab3c0:	8009883a 	mov	r4,r16
   ab3c4:	00ab8240 	call	ab824 <__udivsi3>
   ab3c8:	8822943a 	slli	r17,r17,16
   ab3cc:	b80b883a 	mov	r5,r23
   ab3d0:	1009883a 	mov	r4,r2
   ab3d4:	00ab8e00 	call	ab8e0 <__mulsi3>
   ab3d8:	a53fffcc 	andi	r20,r20,65535
   ab3dc:	a446b03a 	or	r3,r20,r17
   ab3e0:	18bfac2e 	bgeu	r3,r2,ab294 <__alt_data_end+0xfffeb294>
   ab3e4:	003fa706 	br	ab284 <__alt_data_end+0xfffeb284>
   ab3e8:	2005883a 	mov	r2,r4
   ab3ec:	2807883a 	mov	r3,r5
   ab3f0:	dfc00c17 	ldw	ra,48(sp)
   ab3f4:	df000b17 	ldw	fp,44(sp)
   ab3f8:	ddc00a17 	ldw	r23,40(sp)
   ab3fc:	dd800917 	ldw	r22,36(sp)
   ab400:	dd400817 	ldw	r21,32(sp)
   ab404:	dd000717 	ldw	r20,28(sp)
   ab408:	dcc00617 	ldw	r19,24(sp)
   ab40c:	dc800517 	ldw	r18,20(sp)
   ab410:	dc400417 	ldw	r17,16(sp)
   ab414:	dc000317 	ldw	r16,12(sp)
   ab418:	dec00d04 	addi	sp,sp,52
   ab41c:	f800283a 	ret
   ab420:	04c03fc4 	movi	r19,255
   ab424:	99c9803a 	cmpltu	r4,r19,r7
   ab428:	200890fa 	slli	r4,r4,3
   ab42c:	003fa406 	br	ab2c0 <__alt_data_end+0xfffeb2c0>
   ab430:	00803fc4 	movi	r2,255
   ab434:	14c5803a 	cmpltu	r2,r2,r19
   ab438:	100490fa 	slli	r2,r2,3
   ab43c:	003fbc06 	br	ab330 <__alt_data_end+0xfffeb330>
   ab440:	00804034 	movhi	r2,256
   ab444:	10bfffc4 	addi	r2,r2,-1
   ab448:	1180a636 	bltu	r2,r6,ab6e4 <__umoddi3+0x57c>
   ab44c:	01000404 	movi	r4,16
   ab450:	003f5c06 	br	ab1c4 <__alt_data_end+0xfffeb1c4>
   ab454:	3d0e983a 	sll	r7,r7,r20
   ab458:	34ead83a 	srl	r21,r6,r19
   ab45c:	8cc6d83a 	srl	r3,r17,r19
   ab460:	8d10983a 	sll	r8,r17,r20
   ab464:	3d6ab03a 	or	r21,r7,r21
   ab468:	a82cd43a 	srli	r22,r21,16
   ab46c:	84e2d83a 	srl	r17,r16,r19
   ab470:	1809883a 	mov	r4,r3
   ab474:	b00b883a 	mov	r5,r22
   ab478:	8a22b03a 	or	r17,r17,r8
   ab47c:	3524983a 	sll	r18,r6,r20
   ab480:	dc400015 	stw	r17,0(sp)
   ab484:	d8c00115 	stw	r3,4(sp)
   ab488:	00ab8880 	call	ab888 <__umodsi3>
   ab48c:	d8c00117 	ldw	r3,4(sp)
   ab490:	b00b883a 	mov	r5,r22
   ab494:	1039883a 	mov	fp,r2
   ab498:	1809883a 	mov	r4,r3
   ab49c:	00ab8240 	call	ab824 <__udivsi3>
   ab4a0:	adffffcc 	andi	r23,r21,65535
   ab4a4:	100b883a 	mov	r5,r2
   ab4a8:	b809883a 	mov	r4,r23
   ab4ac:	1023883a 	mov	r17,r2
   ab4b0:	00ab8e00 	call	ab8e0 <__mulsi3>
   ab4b4:	d9400017 	ldw	r5,0(sp)
   ab4b8:	e008943a 	slli	r4,fp,16
   ab4bc:	8520983a 	sll	r16,r16,r20
   ab4c0:	2806d43a 	srli	r3,r5,16
   ab4c4:	1906b03a 	or	r3,r3,r4
   ab4c8:	1880042e 	bgeu	r3,r2,ab4dc <__umoddi3+0x374>
   ab4cc:	1d47883a 	add	r3,r3,r21
   ab4d0:	893fffc4 	addi	r4,r17,-1
   ab4d4:	1d40892e 	bgeu	r3,r21,ab6fc <__umoddi3+0x594>
   ab4d8:	2023883a 	mov	r17,r4
   ab4dc:	18b9c83a 	sub	fp,r3,r2
   ab4e0:	b00b883a 	mov	r5,r22
   ab4e4:	e009883a 	mov	r4,fp
   ab4e8:	00ab8880 	call	ab888 <__umodsi3>
   ab4ec:	b00b883a 	mov	r5,r22
   ab4f0:	e009883a 	mov	r4,fp
   ab4f4:	d8800215 	stw	r2,8(sp)
   ab4f8:	00ab8240 	call	ab824 <__udivsi3>
   ab4fc:	100b883a 	mov	r5,r2
   ab500:	b809883a 	mov	r4,r23
   ab504:	102d883a 	mov	r22,r2
   ab508:	00ab8e00 	call	ab8e0 <__mulsi3>
   ab50c:	d9800217 	ldw	r6,8(sp)
   ab510:	d8c00017 	ldw	r3,0(sp)
   ab514:	300c943a 	slli	r6,r6,16
   ab518:	1a3fffcc 	andi	r8,r3,65535
   ab51c:	4190b03a 	or	r8,r8,r6
   ab520:	4080042e 	bgeu	r8,r2,ab534 <__umoddi3+0x3cc>
   ab524:	4551883a 	add	r8,r8,r21
   ab528:	b0ffffc4 	addi	r3,r22,-1
   ab52c:	45406f2e 	bgeu	r8,r21,ab6ec <__umoddi3+0x584>
   ab530:	182d883a 	mov	r22,r3
   ab534:	880e943a 	slli	r7,r17,16
   ab538:	9006d43a 	srli	r3,r18,16
   ab53c:	91bfffcc 	andi	r6,r18,65535
   ab540:	3dacb03a 	or	r22,r7,r22
   ab544:	b02ed43a 	srli	r23,r22,16
   ab548:	b5bfffcc 	andi	r22,r22,65535
   ab54c:	300b883a 	mov	r5,r6
   ab550:	b009883a 	mov	r4,r22
   ab554:	40a3c83a 	sub	r17,r8,r2
   ab558:	d8c00115 	stw	r3,4(sp)
   ab55c:	d9800215 	stw	r6,8(sp)
   ab560:	00ab8e00 	call	ab8e0 <__mulsi3>
   ab564:	d9800217 	ldw	r6,8(sp)
   ab568:	b809883a 	mov	r4,r23
   ab56c:	1039883a 	mov	fp,r2
   ab570:	300b883a 	mov	r5,r6
   ab574:	00ab8e00 	call	ab8e0 <__mulsi3>
   ab578:	d8c00117 	ldw	r3,4(sp)
   ab57c:	b809883a 	mov	r4,r23
   ab580:	d8800215 	stw	r2,8(sp)
   ab584:	180b883a 	mov	r5,r3
   ab588:	00ab8e00 	call	ab8e0 <__mulsi3>
   ab58c:	d8c00117 	ldw	r3,4(sp)
   ab590:	b009883a 	mov	r4,r22
   ab594:	102f883a 	mov	r23,r2
   ab598:	180b883a 	mov	r5,r3
   ab59c:	00ab8e00 	call	ab8e0 <__mulsi3>
   ab5a0:	d9800217 	ldw	r6,8(sp)
   ab5a4:	e006d43a 	srli	r3,fp,16
   ab5a8:	1185883a 	add	r2,r2,r6
   ab5ac:	1885883a 	add	r2,r3,r2
   ab5b0:	1180022e 	bgeu	r2,r6,ab5bc <__umoddi3+0x454>
   ab5b4:	00c00074 	movhi	r3,1
   ab5b8:	b8ef883a 	add	r23,r23,r3
   ab5bc:	1006d43a 	srli	r3,r2,16
   ab5c0:	1004943a 	slli	r2,r2,16
   ab5c4:	e73fffcc 	andi	fp,fp,65535
   ab5c8:	1dc7883a 	add	r3,r3,r23
   ab5cc:	1739883a 	add	fp,r2,fp
   ab5d0:	88c03a36 	bltu	r17,r3,ab6bc <__umoddi3+0x554>
   ab5d4:	88c05126 	beq	r17,r3,ab71c <__umoddi3+0x5b4>
   ab5d8:	88c9c83a 	sub	r4,r17,r3
   ab5dc:	e00f883a 	mov	r7,fp
   ab5e0:	81cfc83a 	sub	r7,r16,r7
   ab5e4:	81c7803a 	cmpltu	r3,r16,r7
   ab5e8:	20c7c83a 	sub	r3,r4,r3
   ab5ec:	1cc4983a 	sll	r2,r3,r19
   ab5f0:	3d0ed83a 	srl	r7,r7,r20
   ab5f4:	1d06d83a 	srl	r3,r3,r20
   ab5f8:	11c4b03a 	or	r2,r2,r7
   ab5fc:	003f7c06 	br	ab3f0 <__alt_data_end+0xfffeb3f0>
   ab600:	9ca6983a 	sll	r19,r19,r18
   ab604:	88f8d83a 	srl	fp,r17,r3
   ab608:	80c4d83a 	srl	r2,r16,r3
   ab60c:	982cd43a 	srli	r22,r19,16
   ab610:	8ca2983a 	sll	r17,r17,r18
   ab614:	e009883a 	mov	r4,fp
   ab618:	b00b883a 	mov	r5,r22
   ab61c:	146ab03a 	or	r21,r2,r17
   ab620:	00ab8880 	call	ab888 <__umodsi3>
   ab624:	b00b883a 	mov	r5,r22
   ab628:	e009883a 	mov	r4,fp
   ab62c:	1029883a 	mov	r20,r2
   ab630:	9dffffcc 	andi	r23,r19,65535
   ab634:	00ab8240 	call	ab824 <__udivsi3>
   ab638:	b809883a 	mov	r4,r23
   ab63c:	100b883a 	mov	r5,r2
   ab640:	00ab8e00 	call	ab8e0 <__mulsi3>
   ab644:	a008943a 	slli	r4,r20,16
   ab648:	a806d43a 	srli	r3,r21,16
   ab64c:	84a8983a 	sll	r20,r16,r18
   ab650:	1906b03a 	or	r3,r3,r4
   ab654:	1880042e 	bgeu	r3,r2,ab668 <__umoddi3+0x500>
   ab658:	1cc7883a 	add	r3,r3,r19
   ab65c:	1cc00236 	bltu	r3,r19,ab668 <__umoddi3+0x500>
   ab660:	1880012e 	bgeu	r3,r2,ab668 <__umoddi3+0x500>
   ab664:	1cc7883a 	add	r3,r3,r19
   ab668:	18a3c83a 	sub	r17,r3,r2
   ab66c:	b00b883a 	mov	r5,r22
   ab670:	8809883a 	mov	r4,r17
   ab674:	00ab8880 	call	ab888 <__umodsi3>
   ab678:	b00b883a 	mov	r5,r22
   ab67c:	8809883a 	mov	r4,r17
   ab680:	1021883a 	mov	r16,r2
   ab684:	00ab8240 	call	ab824 <__udivsi3>
   ab688:	100b883a 	mov	r5,r2
   ab68c:	b809883a 	mov	r4,r23
   ab690:	8020943a 	slli	r16,r16,16
   ab694:	00ab8e00 	call	ab8e0 <__mulsi3>
   ab698:	a8ffffcc 	andi	r3,r21,65535
   ab69c:	1c06b03a 	or	r3,r3,r16
   ab6a0:	1880042e 	bgeu	r3,r2,ab6b4 <__umoddi3+0x54c>
   ab6a4:	1cc7883a 	add	r3,r3,r19
   ab6a8:	1cc00236 	bltu	r3,r19,ab6b4 <__umoddi3+0x54c>
   ab6ac:	1880012e 	bgeu	r3,r2,ab6b4 <__umoddi3+0x54c>
   ab6b0:	1cc7883a 	add	r3,r3,r19
   ab6b4:	18a3c83a 	sub	r17,r3,r2
   ab6b8:	003f2906 	br	ab360 <__alt_data_end+0xfffeb360>
   ab6bc:	e48fc83a 	sub	r7,fp,r18
   ab6c0:	1d49c83a 	sub	r4,r3,r21
   ab6c4:	e1f9803a 	cmpltu	fp,fp,r7
   ab6c8:	2739c83a 	sub	fp,r4,fp
   ab6cc:	8f09c83a 	sub	r4,r17,fp
   ab6d0:	003fc306 	br	ab5e0 <__alt_data_end+0xfffeb5e0>
   ab6d4:	01000604 	movi	r4,24
   ab6d8:	003ef906 	br	ab2c0 <__alt_data_end+0xfffeb2c0>
   ab6dc:	00800604 	movi	r2,24
   ab6e0:	003f1306 	br	ab330 <__alt_data_end+0xfffeb330>
   ab6e4:	01000604 	movi	r4,24
   ab6e8:	003eb606 	br	ab1c4 <__alt_data_end+0xfffeb1c4>
   ab6ec:	40bf902e 	bgeu	r8,r2,ab530 <__alt_data_end+0xfffeb530>
   ab6f0:	b5bfff84 	addi	r22,r22,-2
   ab6f4:	4551883a 	add	r8,r8,r21
   ab6f8:	003f8e06 	br	ab534 <__alt_data_end+0xfffeb534>
   ab6fc:	18bf762e 	bgeu	r3,r2,ab4d8 <__alt_data_end+0xfffeb4d8>
   ab700:	8c7fff84 	addi	r17,r17,-2
   ab704:	1d47883a 	add	r3,r3,r21
   ab708:	003f7406 	br	ab4dc <__alt_data_end+0xfffeb4dc>
   ab70c:	1cc7883a 	add	r3,r3,r19
   ab710:	003ecd06 	br	ab248 <__alt_data_end+0xfffeb248>
   ab714:	8005883a 	mov	r2,r16
   ab718:	003ef806 	br	ab2fc <__alt_data_end+0xfffeb2fc>
   ab71c:	873fe736 	bltu	r16,fp,ab6bc <__alt_data_end+0xfffeb6bc>
   ab720:	e00f883a 	mov	r7,fp
   ab724:	0009883a 	mov	r4,zero
   ab728:	003fad06 	br	ab5e0 <__alt_data_end+0xfffeb5e0>

000ab72c <__divsi3>:
   ab72c:	20001b16 	blt	r4,zero,ab79c <__divsi3+0x70>
   ab730:	000f883a 	mov	r7,zero
   ab734:	28001616 	blt	r5,zero,ab790 <__divsi3+0x64>
   ab738:	200d883a 	mov	r6,r4
   ab73c:	29001a2e 	bgeu	r5,r4,ab7a8 <__divsi3+0x7c>
   ab740:	00800804 	movi	r2,32
   ab744:	00c00044 	movi	r3,1
   ab748:	00000106 	br	ab750 <__divsi3+0x24>
   ab74c:	10000d26 	beq	r2,zero,ab784 <__divsi3+0x58>
   ab750:	294b883a 	add	r5,r5,r5
   ab754:	10bfffc4 	addi	r2,r2,-1
   ab758:	18c7883a 	add	r3,r3,r3
   ab75c:	293ffb36 	bltu	r5,r4,ab74c <__alt_data_end+0xfffeb74c>
   ab760:	0005883a 	mov	r2,zero
   ab764:	18000726 	beq	r3,zero,ab784 <__divsi3+0x58>
   ab768:	0005883a 	mov	r2,zero
   ab76c:	31400236 	bltu	r6,r5,ab778 <__divsi3+0x4c>
   ab770:	314dc83a 	sub	r6,r6,r5
   ab774:	10c4b03a 	or	r2,r2,r3
   ab778:	1806d07a 	srli	r3,r3,1
   ab77c:	280ad07a 	srli	r5,r5,1
   ab780:	183ffa1e 	bne	r3,zero,ab76c <__alt_data_end+0xfffeb76c>
   ab784:	38000126 	beq	r7,zero,ab78c <__divsi3+0x60>
   ab788:	0085c83a 	sub	r2,zero,r2
   ab78c:	f800283a 	ret
   ab790:	014bc83a 	sub	r5,zero,r5
   ab794:	39c0005c 	xori	r7,r7,1
   ab798:	003fe706 	br	ab738 <__alt_data_end+0xfffeb738>
   ab79c:	0109c83a 	sub	r4,zero,r4
   ab7a0:	01c00044 	movi	r7,1
   ab7a4:	003fe306 	br	ab734 <__alt_data_end+0xfffeb734>
   ab7a8:	00c00044 	movi	r3,1
   ab7ac:	003fee06 	br	ab768 <__alt_data_end+0xfffeb768>

000ab7b0 <__modsi3>:
   ab7b0:	20001716 	blt	r4,zero,ab810 <__modsi3+0x60>
   ab7b4:	000f883a 	mov	r7,zero
   ab7b8:	2005883a 	mov	r2,r4
   ab7bc:	28001216 	blt	r5,zero,ab808 <__modsi3+0x58>
   ab7c0:	2900162e 	bgeu	r5,r4,ab81c <__modsi3+0x6c>
   ab7c4:	01800804 	movi	r6,32
   ab7c8:	00c00044 	movi	r3,1
   ab7cc:	00000106 	br	ab7d4 <__modsi3+0x24>
   ab7d0:	30000a26 	beq	r6,zero,ab7fc <__modsi3+0x4c>
   ab7d4:	294b883a 	add	r5,r5,r5
   ab7d8:	31bfffc4 	addi	r6,r6,-1
   ab7dc:	18c7883a 	add	r3,r3,r3
   ab7e0:	293ffb36 	bltu	r5,r4,ab7d0 <__alt_data_end+0xfffeb7d0>
   ab7e4:	18000526 	beq	r3,zero,ab7fc <__modsi3+0x4c>
   ab7e8:	1806d07a 	srli	r3,r3,1
   ab7ec:	11400136 	bltu	r2,r5,ab7f4 <__modsi3+0x44>
   ab7f0:	1145c83a 	sub	r2,r2,r5
   ab7f4:	280ad07a 	srli	r5,r5,1
   ab7f8:	183ffb1e 	bne	r3,zero,ab7e8 <__alt_data_end+0xfffeb7e8>
   ab7fc:	38000126 	beq	r7,zero,ab804 <__modsi3+0x54>
   ab800:	0085c83a 	sub	r2,zero,r2
   ab804:	f800283a 	ret
   ab808:	014bc83a 	sub	r5,zero,r5
   ab80c:	003fec06 	br	ab7c0 <__alt_data_end+0xfffeb7c0>
   ab810:	0109c83a 	sub	r4,zero,r4
   ab814:	01c00044 	movi	r7,1
   ab818:	003fe706 	br	ab7b8 <__alt_data_end+0xfffeb7b8>
   ab81c:	00c00044 	movi	r3,1
   ab820:	003ff106 	br	ab7e8 <__alt_data_end+0xfffeb7e8>

000ab824 <__udivsi3>:
   ab824:	200d883a 	mov	r6,r4
   ab828:	2900152e 	bgeu	r5,r4,ab880 <__udivsi3+0x5c>
   ab82c:	28001416 	blt	r5,zero,ab880 <__udivsi3+0x5c>
   ab830:	00800804 	movi	r2,32
   ab834:	00c00044 	movi	r3,1
   ab838:	00000206 	br	ab844 <__udivsi3+0x20>
   ab83c:	10000e26 	beq	r2,zero,ab878 <__udivsi3+0x54>
   ab840:	28000516 	blt	r5,zero,ab858 <__udivsi3+0x34>
   ab844:	294b883a 	add	r5,r5,r5
   ab848:	10bfffc4 	addi	r2,r2,-1
   ab84c:	18c7883a 	add	r3,r3,r3
   ab850:	293ffa36 	bltu	r5,r4,ab83c <__alt_data_end+0xfffeb83c>
   ab854:	18000826 	beq	r3,zero,ab878 <__udivsi3+0x54>
   ab858:	0005883a 	mov	r2,zero
   ab85c:	31400236 	bltu	r6,r5,ab868 <__udivsi3+0x44>
   ab860:	314dc83a 	sub	r6,r6,r5
   ab864:	10c4b03a 	or	r2,r2,r3
   ab868:	1806d07a 	srli	r3,r3,1
   ab86c:	280ad07a 	srli	r5,r5,1
   ab870:	183ffa1e 	bne	r3,zero,ab85c <__alt_data_end+0xfffeb85c>
   ab874:	f800283a 	ret
   ab878:	0005883a 	mov	r2,zero
   ab87c:	f800283a 	ret
   ab880:	00c00044 	movi	r3,1
   ab884:	003ff406 	br	ab858 <__alt_data_end+0xfffeb858>

000ab888 <__umodsi3>:
   ab888:	2005883a 	mov	r2,r4
   ab88c:	2900122e 	bgeu	r5,r4,ab8d8 <__umodsi3+0x50>
   ab890:	28001116 	blt	r5,zero,ab8d8 <__umodsi3+0x50>
   ab894:	01800804 	movi	r6,32
   ab898:	00c00044 	movi	r3,1
   ab89c:	00000206 	br	ab8a8 <__umodsi3+0x20>
   ab8a0:	30000c26 	beq	r6,zero,ab8d4 <__umodsi3+0x4c>
   ab8a4:	28000516 	blt	r5,zero,ab8bc <__umodsi3+0x34>
   ab8a8:	294b883a 	add	r5,r5,r5
   ab8ac:	31bfffc4 	addi	r6,r6,-1
   ab8b0:	18c7883a 	add	r3,r3,r3
   ab8b4:	293ffa36 	bltu	r5,r4,ab8a0 <__alt_data_end+0xfffeb8a0>
   ab8b8:	18000626 	beq	r3,zero,ab8d4 <__umodsi3+0x4c>
   ab8bc:	1806d07a 	srli	r3,r3,1
   ab8c0:	11400136 	bltu	r2,r5,ab8c8 <__umodsi3+0x40>
   ab8c4:	1145c83a 	sub	r2,r2,r5
   ab8c8:	280ad07a 	srli	r5,r5,1
   ab8cc:	183ffb1e 	bne	r3,zero,ab8bc <__alt_data_end+0xfffeb8bc>
   ab8d0:	f800283a 	ret
   ab8d4:	f800283a 	ret
   ab8d8:	00c00044 	movi	r3,1
   ab8dc:	003ff706 	br	ab8bc <__alt_data_end+0xfffeb8bc>

000ab8e0 <__mulsi3>:
   ab8e0:	0005883a 	mov	r2,zero
   ab8e4:	20000726 	beq	r4,zero,ab904 <__mulsi3+0x24>
   ab8e8:	20c0004c 	andi	r3,r4,1
   ab8ec:	2008d07a 	srli	r4,r4,1
   ab8f0:	18000126 	beq	r3,zero,ab8f8 <__mulsi3+0x18>
   ab8f4:	1145883a 	add	r2,r2,r5
   ab8f8:	294b883a 	add	r5,r5,r5
   ab8fc:	203ffa1e 	bne	r4,zero,ab8e8 <__alt_data_end+0xfffeb8e8>
   ab900:	f800283a 	ret
   ab904:	f800283a 	ret

000ab908 <__adddf3>:
   ab908:	02c00434 	movhi	r11,16
   ab90c:	5affffc4 	addi	r11,r11,-1
   ab910:	2806d7fa 	srli	r3,r5,31
   ab914:	2ad4703a 	and	r10,r5,r11
   ab918:	3ad2703a 	and	r9,r7,r11
   ab91c:	3804d53a 	srli	r2,r7,20
   ab920:	3018d77a 	srli	r12,r6,29
   ab924:	280ad53a 	srli	r5,r5,20
   ab928:	501490fa 	slli	r10,r10,3
   ab92c:	2010d77a 	srli	r8,r4,29
   ab930:	481290fa 	slli	r9,r9,3
   ab934:	380ed7fa 	srli	r7,r7,31
   ab938:	defffb04 	addi	sp,sp,-20
   ab93c:	dc800215 	stw	r18,8(sp)
   ab940:	dc400115 	stw	r17,4(sp)
   ab944:	dc000015 	stw	r16,0(sp)
   ab948:	dfc00415 	stw	ra,16(sp)
   ab94c:	dcc00315 	stw	r19,12(sp)
   ab950:	1c803fcc 	andi	r18,r3,255
   ab954:	2c01ffcc 	andi	r16,r5,2047
   ab958:	5210b03a 	or	r8,r10,r8
   ab95c:	202290fa 	slli	r17,r4,3
   ab960:	1081ffcc 	andi	r2,r2,2047
   ab964:	4b12b03a 	or	r9,r9,r12
   ab968:	300c90fa 	slli	r6,r6,3
   ab96c:	91c07526 	beq	r18,r7,abb44 <__adddf3+0x23c>
   ab970:	8087c83a 	sub	r3,r16,r2
   ab974:	00c0ab0e 	bge	zero,r3,abc24 <__adddf3+0x31c>
   ab978:	10002a1e 	bne	r2,zero,aba24 <__adddf3+0x11c>
   ab97c:	4984b03a 	or	r2,r9,r6
   ab980:	1000961e 	bne	r2,zero,abbdc <__adddf3+0x2d4>
   ab984:	888001cc 	andi	r2,r17,7
   ab988:	10000726 	beq	r2,zero,ab9a8 <__adddf3+0xa0>
   ab98c:	888003cc 	andi	r2,r17,15
   ab990:	00c00104 	movi	r3,4
   ab994:	10c00426 	beq	r2,r3,ab9a8 <__adddf3+0xa0>
   ab998:	88c7883a 	add	r3,r17,r3
   ab99c:	1c63803a 	cmpltu	r17,r3,r17
   ab9a0:	4451883a 	add	r8,r8,r17
   ab9a4:	1823883a 	mov	r17,r3
   ab9a8:	4080202c 	andhi	r2,r8,128
   ab9ac:	10005926 	beq	r2,zero,abb14 <__adddf3+0x20c>
   ab9b0:	84000044 	addi	r16,r16,1
   ab9b4:	0081ffc4 	movi	r2,2047
   ab9b8:	8080ba26 	beq	r16,r2,abca4 <__adddf3+0x39c>
   ab9bc:	00bfe034 	movhi	r2,65408
   ab9c0:	10bfffc4 	addi	r2,r2,-1
   ab9c4:	4090703a 	and	r8,r8,r2
   ab9c8:	4004977a 	slli	r2,r8,29
   ab9cc:	4010927a 	slli	r8,r8,9
   ab9d0:	8822d0fa 	srli	r17,r17,3
   ab9d4:	8401ffcc 	andi	r16,r16,2047
   ab9d8:	4010d33a 	srli	r8,r8,12
   ab9dc:	9007883a 	mov	r3,r18
   ab9e0:	1444b03a 	or	r2,r2,r17
   ab9e4:	8401ffcc 	andi	r16,r16,2047
   ab9e8:	8020953a 	slli	r16,r16,20
   ab9ec:	18c03fcc 	andi	r3,r3,255
   ab9f0:	01000434 	movhi	r4,16
   ab9f4:	213fffc4 	addi	r4,r4,-1
   ab9f8:	180697fa 	slli	r3,r3,31
   ab9fc:	4110703a 	and	r8,r8,r4
   aba00:	4410b03a 	or	r8,r8,r16
   aba04:	40c6b03a 	or	r3,r8,r3
   aba08:	dfc00417 	ldw	ra,16(sp)
   aba0c:	dcc00317 	ldw	r19,12(sp)
   aba10:	dc800217 	ldw	r18,8(sp)
   aba14:	dc400117 	ldw	r17,4(sp)
   aba18:	dc000017 	ldw	r16,0(sp)
   aba1c:	dec00504 	addi	sp,sp,20
   aba20:	f800283a 	ret
   aba24:	0081ffc4 	movi	r2,2047
   aba28:	80bfd626 	beq	r16,r2,ab984 <__alt_data_end+0xfffeb984>
   aba2c:	4a402034 	orhi	r9,r9,128
   aba30:	00800e04 	movi	r2,56
   aba34:	10c09f16 	blt	r2,r3,abcb4 <__adddf3+0x3ac>
   aba38:	008007c4 	movi	r2,31
   aba3c:	10c0c216 	blt	r2,r3,abd48 <__adddf3+0x440>
   aba40:	00800804 	movi	r2,32
   aba44:	10c5c83a 	sub	r2,r2,r3
   aba48:	488a983a 	sll	r5,r9,r2
   aba4c:	30c8d83a 	srl	r4,r6,r3
   aba50:	3084983a 	sll	r2,r6,r2
   aba54:	48c6d83a 	srl	r3,r9,r3
   aba58:	290cb03a 	or	r6,r5,r4
   aba5c:	1004c03a 	cmpne	r2,r2,zero
   aba60:	308cb03a 	or	r6,r6,r2
   aba64:	898dc83a 	sub	r6,r17,r6
   aba68:	89a3803a 	cmpltu	r17,r17,r6
   aba6c:	40d1c83a 	sub	r8,r8,r3
   aba70:	4451c83a 	sub	r8,r8,r17
   aba74:	3023883a 	mov	r17,r6
   aba78:	4080202c 	andhi	r2,r8,128
   aba7c:	10002326 	beq	r2,zero,abb0c <__adddf3+0x204>
   aba80:	04c02034 	movhi	r19,128
   aba84:	9cffffc4 	addi	r19,r19,-1
   aba88:	44e6703a 	and	r19,r8,r19
   aba8c:	98007626 	beq	r19,zero,abc68 <__adddf3+0x360>
   aba90:	9809883a 	mov	r4,r19
   aba94:	00ae1480 	call	ae148 <__clzsi2>
   aba98:	10fffe04 	addi	r3,r2,-8
   aba9c:	010007c4 	movi	r4,31
   abaa0:	20c07716 	blt	r4,r3,abc80 <__adddf3+0x378>
   abaa4:	00800804 	movi	r2,32
   abaa8:	10c5c83a 	sub	r2,r2,r3
   abaac:	8884d83a 	srl	r2,r17,r2
   abab0:	98d0983a 	sll	r8,r19,r3
   abab4:	88e2983a 	sll	r17,r17,r3
   abab8:	1204b03a 	or	r2,r2,r8
   ababc:	1c007416 	blt	r3,r16,abc90 <__adddf3+0x388>
   abac0:	1c21c83a 	sub	r16,r3,r16
   abac4:	82000044 	addi	r8,r16,1
   abac8:	00c007c4 	movi	r3,31
   abacc:	1a009116 	blt	r3,r8,abd14 <__adddf3+0x40c>
   abad0:	00c00804 	movi	r3,32
   abad4:	1a07c83a 	sub	r3,r3,r8
   abad8:	8a08d83a 	srl	r4,r17,r8
   abadc:	88e2983a 	sll	r17,r17,r3
   abae0:	10c6983a 	sll	r3,r2,r3
   abae4:	1210d83a 	srl	r8,r2,r8
   abae8:	8804c03a 	cmpne	r2,r17,zero
   abaec:	1906b03a 	or	r3,r3,r4
   abaf0:	18a2b03a 	or	r17,r3,r2
   abaf4:	0021883a 	mov	r16,zero
   abaf8:	003fa206 	br	ab984 <__alt_data_end+0xfffeb984>
   abafc:	1890b03a 	or	r8,r3,r2
   abb00:	40017d26 	beq	r8,zero,ac0f8 <__adddf3+0x7f0>
   abb04:	1011883a 	mov	r8,r2
   abb08:	1823883a 	mov	r17,r3
   abb0c:	888001cc 	andi	r2,r17,7
   abb10:	103f9e1e 	bne	r2,zero,ab98c <__alt_data_end+0xfffeb98c>
   abb14:	4004977a 	slli	r2,r8,29
   abb18:	8822d0fa 	srli	r17,r17,3
   abb1c:	4010d0fa 	srli	r8,r8,3
   abb20:	9007883a 	mov	r3,r18
   abb24:	1444b03a 	or	r2,r2,r17
   abb28:	0101ffc4 	movi	r4,2047
   abb2c:	81002426 	beq	r16,r4,abbc0 <__adddf3+0x2b8>
   abb30:	8120703a 	and	r16,r16,r4
   abb34:	01000434 	movhi	r4,16
   abb38:	213fffc4 	addi	r4,r4,-1
   abb3c:	4110703a 	and	r8,r8,r4
   abb40:	003fa806 	br	ab9e4 <__alt_data_end+0xfffeb9e4>
   abb44:	8089c83a 	sub	r4,r16,r2
   abb48:	01005e0e 	bge	zero,r4,abcc4 <__adddf3+0x3bc>
   abb4c:	10002b26 	beq	r2,zero,abbfc <__adddf3+0x2f4>
   abb50:	0081ffc4 	movi	r2,2047
   abb54:	80bf8b26 	beq	r16,r2,ab984 <__alt_data_end+0xfffeb984>
   abb58:	4a402034 	orhi	r9,r9,128
   abb5c:	00800e04 	movi	r2,56
   abb60:	1100a40e 	bge	r2,r4,abdf4 <__adddf3+0x4ec>
   abb64:	498cb03a 	or	r6,r9,r6
   abb68:	300ac03a 	cmpne	r5,r6,zero
   abb6c:	0013883a 	mov	r9,zero
   abb70:	2c4b883a 	add	r5,r5,r17
   abb74:	2c63803a 	cmpltu	r17,r5,r17
   abb78:	4a11883a 	add	r8,r9,r8
   abb7c:	8a11883a 	add	r8,r17,r8
   abb80:	2823883a 	mov	r17,r5
   abb84:	4080202c 	andhi	r2,r8,128
   abb88:	103fe026 	beq	r2,zero,abb0c <__alt_data_end+0xfffebb0c>
   abb8c:	84000044 	addi	r16,r16,1
   abb90:	0081ffc4 	movi	r2,2047
   abb94:	8080d226 	beq	r16,r2,abee0 <__adddf3+0x5d8>
   abb98:	00bfe034 	movhi	r2,65408
   abb9c:	10bfffc4 	addi	r2,r2,-1
   abba0:	4090703a 	and	r8,r8,r2
   abba4:	880ad07a 	srli	r5,r17,1
   abba8:	400897fa 	slli	r4,r8,31
   abbac:	88c0004c 	andi	r3,r17,1
   abbb0:	28e2b03a 	or	r17,r5,r3
   abbb4:	4010d07a 	srli	r8,r8,1
   abbb8:	2462b03a 	or	r17,r4,r17
   abbbc:	003f7106 	br	ab984 <__alt_data_end+0xfffeb984>
   abbc0:	4088b03a 	or	r4,r8,r2
   abbc4:	20014526 	beq	r4,zero,ac0dc <__adddf3+0x7d4>
   abbc8:	01000434 	movhi	r4,16
   abbcc:	42000234 	orhi	r8,r8,8
   abbd0:	213fffc4 	addi	r4,r4,-1
   abbd4:	4110703a 	and	r8,r8,r4
   abbd8:	003f8206 	br	ab9e4 <__alt_data_end+0xfffeb9e4>
   abbdc:	18ffffc4 	addi	r3,r3,-1
   abbe0:	1800491e 	bne	r3,zero,abd08 <__adddf3+0x400>
   abbe4:	898bc83a 	sub	r5,r17,r6
   abbe8:	8963803a 	cmpltu	r17,r17,r5
   abbec:	4251c83a 	sub	r8,r8,r9
   abbf0:	4451c83a 	sub	r8,r8,r17
   abbf4:	2823883a 	mov	r17,r5
   abbf8:	003f9f06 	br	aba78 <__alt_data_end+0xfffeba78>
   abbfc:	4984b03a 	or	r2,r9,r6
   abc00:	103f6026 	beq	r2,zero,ab984 <__alt_data_end+0xfffeb984>
   abc04:	213fffc4 	addi	r4,r4,-1
   abc08:	2000931e 	bne	r4,zero,abe58 <__adddf3+0x550>
   abc0c:	898d883a 	add	r6,r17,r6
   abc10:	3463803a 	cmpltu	r17,r6,r17
   abc14:	4251883a 	add	r8,r8,r9
   abc18:	8a11883a 	add	r8,r17,r8
   abc1c:	3023883a 	mov	r17,r6
   abc20:	003fd806 	br	abb84 <__alt_data_end+0xfffebb84>
   abc24:	1800541e 	bne	r3,zero,abd78 <__adddf3+0x470>
   abc28:	80800044 	addi	r2,r16,1
   abc2c:	1081ffcc 	andi	r2,r2,2047
   abc30:	00c00044 	movi	r3,1
   abc34:	1880a00e 	bge	r3,r2,abeb8 <__adddf3+0x5b0>
   abc38:	8989c83a 	sub	r4,r17,r6
   abc3c:	8905803a 	cmpltu	r2,r17,r4
   abc40:	4267c83a 	sub	r19,r8,r9
   abc44:	98a7c83a 	sub	r19,r19,r2
   abc48:	9880202c 	andhi	r2,r19,128
   abc4c:	10006326 	beq	r2,zero,abddc <__adddf3+0x4d4>
   abc50:	3463c83a 	sub	r17,r6,r17
   abc54:	4a07c83a 	sub	r3,r9,r8
   abc58:	344d803a 	cmpltu	r6,r6,r17
   abc5c:	19a7c83a 	sub	r19,r3,r6
   abc60:	3825883a 	mov	r18,r7
   abc64:	983f8a1e 	bne	r19,zero,aba90 <__alt_data_end+0xfffeba90>
   abc68:	8809883a 	mov	r4,r17
   abc6c:	00ae1480 	call	ae148 <__clzsi2>
   abc70:	10800804 	addi	r2,r2,32
   abc74:	10fffe04 	addi	r3,r2,-8
   abc78:	010007c4 	movi	r4,31
   abc7c:	20ff890e 	bge	r4,r3,abaa4 <__alt_data_end+0xfffebaa4>
   abc80:	10bff604 	addi	r2,r2,-40
   abc84:	8884983a 	sll	r2,r17,r2
   abc88:	0023883a 	mov	r17,zero
   abc8c:	1c3f8c0e 	bge	r3,r16,abac0 <__alt_data_end+0xfffebac0>
   abc90:	023fe034 	movhi	r8,65408
   abc94:	423fffc4 	addi	r8,r8,-1
   abc98:	80e1c83a 	sub	r16,r16,r3
   abc9c:	1210703a 	and	r8,r2,r8
   abca0:	003f3806 	br	ab984 <__alt_data_end+0xfffeb984>
   abca4:	9007883a 	mov	r3,r18
   abca8:	0011883a 	mov	r8,zero
   abcac:	0005883a 	mov	r2,zero
   abcb0:	003f4c06 	br	ab9e4 <__alt_data_end+0xfffeb9e4>
   abcb4:	498cb03a 	or	r6,r9,r6
   abcb8:	300cc03a 	cmpne	r6,r6,zero
   abcbc:	0007883a 	mov	r3,zero
   abcc0:	003f6806 	br	aba64 <__alt_data_end+0xfffeba64>
   abcc4:	20009c1e 	bne	r4,zero,abf38 <__adddf3+0x630>
   abcc8:	80800044 	addi	r2,r16,1
   abccc:	1141ffcc 	andi	r5,r2,2047
   abcd0:	01000044 	movi	r4,1
   abcd4:	2140670e 	bge	r4,r5,abe74 <__adddf3+0x56c>
   abcd8:	0101ffc4 	movi	r4,2047
   abcdc:	11007f26 	beq	r2,r4,abedc <__adddf3+0x5d4>
   abce0:	898d883a 	add	r6,r17,r6
   abce4:	4247883a 	add	r3,r8,r9
   abce8:	3451803a 	cmpltu	r8,r6,r17
   abcec:	40d1883a 	add	r8,r8,r3
   abcf0:	402297fa 	slli	r17,r8,31
   abcf4:	300cd07a 	srli	r6,r6,1
   abcf8:	4010d07a 	srli	r8,r8,1
   abcfc:	1021883a 	mov	r16,r2
   abd00:	89a2b03a 	or	r17,r17,r6
   abd04:	003f1f06 	br	ab984 <__alt_data_end+0xfffeb984>
   abd08:	0081ffc4 	movi	r2,2047
   abd0c:	80bf481e 	bne	r16,r2,aba30 <__alt_data_end+0xfffeba30>
   abd10:	003f1c06 	br	ab984 <__alt_data_end+0xfffeb984>
   abd14:	843ff844 	addi	r16,r16,-31
   abd18:	01000804 	movi	r4,32
   abd1c:	1406d83a 	srl	r3,r2,r16
   abd20:	41005026 	beq	r8,r4,abe64 <__adddf3+0x55c>
   abd24:	01001004 	movi	r4,64
   abd28:	2211c83a 	sub	r8,r4,r8
   abd2c:	1204983a 	sll	r2,r2,r8
   abd30:	88a2b03a 	or	r17,r17,r2
   abd34:	8822c03a 	cmpne	r17,r17,zero
   abd38:	1c62b03a 	or	r17,r3,r17
   abd3c:	0011883a 	mov	r8,zero
   abd40:	0021883a 	mov	r16,zero
   abd44:	003f7106 	br	abb0c <__alt_data_end+0xfffebb0c>
   abd48:	193ff804 	addi	r4,r3,-32
   abd4c:	00800804 	movi	r2,32
   abd50:	4908d83a 	srl	r4,r9,r4
   abd54:	18804526 	beq	r3,r2,abe6c <__adddf3+0x564>
   abd58:	00801004 	movi	r2,64
   abd5c:	10c5c83a 	sub	r2,r2,r3
   abd60:	4886983a 	sll	r3,r9,r2
   abd64:	198cb03a 	or	r6,r3,r6
   abd68:	300cc03a 	cmpne	r6,r6,zero
   abd6c:	218cb03a 	or	r6,r4,r6
   abd70:	0007883a 	mov	r3,zero
   abd74:	003f3b06 	br	aba64 <__alt_data_end+0xfffeba64>
   abd78:	80002a26 	beq	r16,zero,abe24 <__adddf3+0x51c>
   abd7c:	0101ffc4 	movi	r4,2047
   abd80:	11006826 	beq	r2,r4,abf24 <__adddf3+0x61c>
   abd84:	00c7c83a 	sub	r3,zero,r3
   abd88:	42002034 	orhi	r8,r8,128
   abd8c:	01000e04 	movi	r4,56
   abd90:	20c07c16 	blt	r4,r3,abf84 <__adddf3+0x67c>
   abd94:	010007c4 	movi	r4,31
   abd98:	20c0da16 	blt	r4,r3,ac104 <__adddf3+0x7fc>
   abd9c:	01000804 	movi	r4,32
   abda0:	20c9c83a 	sub	r4,r4,r3
   abda4:	4114983a 	sll	r10,r8,r4
   abda8:	88cad83a 	srl	r5,r17,r3
   abdac:	8908983a 	sll	r4,r17,r4
   abdb0:	40c6d83a 	srl	r3,r8,r3
   abdb4:	5162b03a 	or	r17,r10,r5
   abdb8:	2008c03a 	cmpne	r4,r4,zero
   abdbc:	8922b03a 	or	r17,r17,r4
   abdc0:	3463c83a 	sub	r17,r6,r17
   abdc4:	48c7c83a 	sub	r3,r9,r3
   abdc8:	344d803a 	cmpltu	r6,r6,r17
   abdcc:	1991c83a 	sub	r8,r3,r6
   abdd0:	1021883a 	mov	r16,r2
   abdd4:	3825883a 	mov	r18,r7
   abdd8:	003f2706 	br	aba78 <__alt_data_end+0xfffeba78>
   abddc:	24d0b03a 	or	r8,r4,r19
   abde0:	40001b1e 	bne	r8,zero,abe50 <__adddf3+0x548>
   abde4:	0005883a 	mov	r2,zero
   abde8:	0007883a 	mov	r3,zero
   abdec:	0021883a 	mov	r16,zero
   abdf0:	003f4d06 	br	abb28 <__alt_data_end+0xfffebb28>
   abdf4:	008007c4 	movi	r2,31
   abdf8:	11003c16 	blt	r2,r4,abeec <__adddf3+0x5e4>
   abdfc:	00800804 	movi	r2,32
   abe00:	1105c83a 	sub	r2,r2,r4
   abe04:	488e983a 	sll	r7,r9,r2
   abe08:	310ad83a 	srl	r5,r6,r4
   abe0c:	3084983a 	sll	r2,r6,r2
   abe10:	4912d83a 	srl	r9,r9,r4
   abe14:	394ab03a 	or	r5,r7,r5
   abe18:	1004c03a 	cmpne	r2,r2,zero
   abe1c:	288ab03a 	or	r5,r5,r2
   abe20:	003f5306 	br	abb70 <__alt_data_end+0xfffebb70>
   abe24:	4448b03a 	or	r4,r8,r17
   abe28:	20003e26 	beq	r4,zero,abf24 <__adddf3+0x61c>
   abe2c:	00c6303a 	nor	r3,zero,r3
   abe30:	18003a1e 	bne	r3,zero,abf1c <__adddf3+0x614>
   abe34:	3463c83a 	sub	r17,r6,r17
   abe38:	4a07c83a 	sub	r3,r9,r8
   abe3c:	344d803a 	cmpltu	r6,r6,r17
   abe40:	1991c83a 	sub	r8,r3,r6
   abe44:	1021883a 	mov	r16,r2
   abe48:	3825883a 	mov	r18,r7
   abe4c:	003f0a06 	br	aba78 <__alt_data_end+0xfffeba78>
   abe50:	2023883a 	mov	r17,r4
   abe54:	003f0d06 	br	aba8c <__alt_data_end+0xfffeba8c>
   abe58:	0081ffc4 	movi	r2,2047
   abe5c:	80bf3f1e 	bne	r16,r2,abb5c <__alt_data_end+0xfffebb5c>
   abe60:	003ec806 	br	ab984 <__alt_data_end+0xfffeb984>
   abe64:	0005883a 	mov	r2,zero
   abe68:	003fb106 	br	abd30 <__alt_data_end+0xfffebd30>
   abe6c:	0007883a 	mov	r3,zero
   abe70:	003fbc06 	br	abd64 <__alt_data_end+0xfffebd64>
   abe74:	4444b03a 	or	r2,r8,r17
   abe78:	8000871e 	bne	r16,zero,ac098 <__adddf3+0x790>
   abe7c:	1000ba26 	beq	r2,zero,ac168 <__adddf3+0x860>
   abe80:	4984b03a 	or	r2,r9,r6
   abe84:	103ebf26 	beq	r2,zero,ab984 <__alt_data_end+0xfffeb984>
   abe88:	8985883a 	add	r2,r17,r6
   abe8c:	4247883a 	add	r3,r8,r9
   abe90:	1451803a 	cmpltu	r8,r2,r17
   abe94:	40d1883a 	add	r8,r8,r3
   abe98:	40c0202c 	andhi	r3,r8,128
   abe9c:	1023883a 	mov	r17,r2
   abea0:	183f1a26 	beq	r3,zero,abb0c <__alt_data_end+0xfffebb0c>
   abea4:	00bfe034 	movhi	r2,65408
   abea8:	10bfffc4 	addi	r2,r2,-1
   abeac:	2021883a 	mov	r16,r4
   abeb0:	4090703a 	and	r8,r8,r2
   abeb4:	003eb306 	br	ab984 <__alt_data_end+0xfffeb984>
   abeb8:	4444b03a 	or	r2,r8,r17
   abebc:	8000291e 	bne	r16,zero,abf64 <__adddf3+0x65c>
   abec0:	10004b1e 	bne	r2,zero,abff0 <__adddf3+0x6e8>
   abec4:	4990b03a 	or	r8,r9,r6
   abec8:	40008b26 	beq	r8,zero,ac0f8 <__adddf3+0x7f0>
   abecc:	4811883a 	mov	r8,r9
   abed0:	3023883a 	mov	r17,r6
   abed4:	3825883a 	mov	r18,r7
   abed8:	003eaa06 	br	ab984 <__alt_data_end+0xfffeb984>
   abedc:	1021883a 	mov	r16,r2
   abee0:	0011883a 	mov	r8,zero
   abee4:	0005883a 	mov	r2,zero
   abee8:	003f0f06 	br	abb28 <__alt_data_end+0xfffebb28>
   abeec:	217ff804 	addi	r5,r4,-32
   abef0:	00800804 	movi	r2,32
   abef4:	494ad83a 	srl	r5,r9,r5
   abef8:	20807d26 	beq	r4,r2,ac0f0 <__adddf3+0x7e8>
   abefc:	00801004 	movi	r2,64
   abf00:	1109c83a 	sub	r4,r2,r4
   abf04:	4912983a 	sll	r9,r9,r4
   abf08:	498cb03a 	or	r6,r9,r6
   abf0c:	300cc03a 	cmpne	r6,r6,zero
   abf10:	298ab03a 	or	r5,r5,r6
   abf14:	0013883a 	mov	r9,zero
   abf18:	003f1506 	br	abb70 <__alt_data_end+0xfffebb70>
   abf1c:	0101ffc4 	movi	r4,2047
   abf20:	113f9a1e 	bne	r2,r4,abd8c <__alt_data_end+0xfffebd8c>
   abf24:	4811883a 	mov	r8,r9
   abf28:	3023883a 	mov	r17,r6
   abf2c:	1021883a 	mov	r16,r2
   abf30:	3825883a 	mov	r18,r7
   abf34:	003e9306 	br	ab984 <__alt_data_end+0xfffeb984>
   abf38:	8000161e 	bne	r16,zero,abf94 <__adddf3+0x68c>
   abf3c:	444ab03a 	or	r5,r8,r17
   abf40:	28005126 	beq	r5,zero,ac088 <__adddf3+0x780>
   abf44:	0108303a 	nor	r4,zero,r4
   abf48:	20004d1e 	bne	r4,zero,ac080 <__adddf3+0x778>
   abf4c:	89a3883a 	add	r17,r17,r6
   abf50:	4253883a 	add	r9,r8,r9
   abf54:	898d803a 	cmpltu	r6,r17,r6
   abf58:	3251883a 	add	r8,r6,r9
   abf5c:	1021883a 	mov	r16,r2
   abf60:	003f0806 	br	abb84 <__alt_data_end+0xfffebb84>
   abf64:	1000301e 	bne	r2,zero,ac028 <__adddf3+0x720>
   abf68:	4984b03a 	or	r2,r9,r6
   abf6c:	10007126 	beq	r2,zero,ac134 <__adddf3+0x82c>
   abf70:	4811883a 	mov	r8,r9
   abf74:	3023883a 	mov	r17,r6
   abf78:	3825883a 	mov	r18,r7
   abf7c:	0401ffc4 	movi	r16,2047
   abf80:	003e8006 	br	ab984 <__alt_data_end+0xfffeb984>
   abf84:	4462b03a 	or	r17,r8,r17
   abf88:	8822c03a 	cmpne	r17,r17,zero
   abf8c:	0007883a 	mov	r3,zero
   abf90:	003f8b06 	br	abdc0 <__alt_data_end+0xfffebdc0>
   abf94:	0141ffc4 	movi	r5,2047
   abf98:	11403b26 	beq	r2,r5,ac088 <__adddf3+0x780>
   abf9c:	0109c83a 	sub	r4,zero,r4
   abfa0:	42002034 	orhi	r8,r8,128
   abfa4:	01400e04 	movi	r5,56
   abfa8:	29006716 	blt	r5,r4,ac148 <__adddf3+0x840>
   abfac:	014007c4 	movi	r5,31
   abfb0:	29007016 	blt	r5,r4,ac174 <__adddf3+0x86c>
   abfb4:	01400804 	movi	r5,32
   abfb8:	290bc83a 	sub	r5,r5,r4
   abfbc:	4154983a 	sll	r10,r8,r5
   abfc0:	890ed83a 	srl	r7,r17,r4
   abfc4:	894a983a 	sll	r5,r17,r5
   abfc8:	4108d83a 	srl	r4,r8,r4
   abfcc:	51e2b03a 	or	r17,r10,r7
   abfd0:	280ac03a 	cmpne	r5,r5,zero
   abfd4:	8962b03a 	or	r17,r17,r5
   abfd8:	89a3883a 	add	r17,r17,r6
   abfdc:	2253883a 	add	r9,r4,r9
   abfe0:	898d803a 	cmpltu	r6,r17,r6
   abfe4:	3251883a 	add	r8,r6,r9
   abfe8:	1021883a 	mov	r16,r2
   abfec:	003ee506 	br	abb84 <__alt_data_end+0xfffebb84>
   abff0:	4984b03a 	or	r2,r9,r6
   abff4:	103e6326 	beq	r2,zero,ab984 <__alt_data_end+0xfffeb984>
   abff8:	8987c83a 	sub	r3,r17,r6
   abffc:	88c9803a 	cmpltu	r4,r17,r3
   ac000:	4245c83a 	sub	r2,r8,r9
   ac004:	1105c83a 	sub	r2,r2,r4
   ac008:	1100202c 	andhi	r4,r2,128
   ac00c:	203ebb26 	beq	r4,zero,abafc <__alt_data_end+0xfffebafc>
   ac010:	3463c83a 	sub	r17,r6,r17
   ac014:	4a07c83a 	sub	r3,r9,r8
   ac018:	344d803a 	cmpltu	r6,r6,r17
   ac01c:	1991c83a 	sub	r8,r3,r6
   ac020:	3825883a 	mov	r18,r7
   ac024:	003e5706 	br	ab984 <__alt_data_end+0xfffeb984>
   ac028:	4984b03a 	or	r2,r9,r6
   ac02c:	10002e26 	beq	r2,zero,ac0e8 <__adddf3+0x7e0>
   ac030:	4004d0fa 	srli	r2,r8,3
   ac034:	8822d0fa 	srli	r17,r17,3
   ac038:	4010977a 	slli	r8,r8,29
   ac03c:	10c0022c 	andhi	r3,r2,8
   ac040:	4462b03a 	or	r17,r8,r17
   ac044:	18000826 	beq	r3,zero,ac068 <__adddf3+0x760>
   ac048:	4808d0fa 	srli	r4,r9,3
   ac04c:	20c0022c 	andhi	r3,r4,8
   ac050:	1800051e 	bne	r3,zero,ac068 <__adddf3+0x760>
   ac054:	300cd0fa 	srli	r6,r6,3
   ac058:	4806977a 	slli	r3,r9,29
   ac05c:	2005883a 	mov	r2,r4
   ac060:	3825883a 	mov	r18,r7
   ac064:	19a2b03a 	or	r17,r3,r6
   ac068:	8810d77a 	srli	r8,r17,29
   ac06c:	100490fa 	slli	r2,r2,3
   ac070:	882290fa 	slli	r17,r17,3
   ac074:	0401ffc4 	movi	r16,2047
   ac078:	4090b03a 	or	r8,r8,r2
   ac07c:	003e4106 	br	ab984 <__alt_data_end+0xfffeb984>
   ac080:	0141ffc4 	movi	r5,2047
   ac084:	117fc71e 	bne	r2,r5,abfa4 <__alt_data_end+0xfffebfa4>
   ac088:	4811883a 	mov	r8,r9
   ac08c:	3023883a 	mov	r17,r6
   ac090:	1021883a 	mov	r16,r2
   ac094:	003e3b06 	br	ab984 <__alt_data_end+0xfffeb984>
   ac098:	10002f26 	beq	r2,zero,ac158 <__adddf3+0x850>
   ac09c:	4984b03a 	or	r2,r9,r6
   ac0a0:	10001126 	beq	r2,zero,ac0e8 <__adddf3+0x7e0>
   ac0a4:	4004d0fa 	srli	r2,r8,3
   ac0a8:	8822d0fa 	srli	r17,r17,3
   ac0ac:	4010977a 	slli	r8,r8,29
   ac0b0:	10c0022c 	andhi	r3,r2,8
   ac0b4:	4462b03a 	or	r17,r8,r17
   ac0b8:	183feb26 	beq	r3,zero,ac068 <__alt_data_end+0xfffec068>
   ac0bc:	4808d0fa 	srli	r4,r9,3
   ac0c0:	20c0022c 	andhi	r3,r4,8
   ac0c4:	183fe81e 	bne	r3,zero,ac068 <__alt_data_end+0xfffec068>
   ac0c8:	300cd0fa 	srli	r6,r6,3
   ac0cc:	4806977a 	slli	r3,r9,29
   ac0d0:	2005883a 	mov	r2,r4
   ac0d4:	19a2b03a 	or	r17,r3,r6
   ac0d8:	003fe306 	br	ac068 <__alt_data_end+0xfffec068>
   ac0dc:	0011883a 	mov	r8,zero
   ac0e0:	0005883a 	mov	r2,zero
   ac0e4:	003e3f06 	br	ab9e4 <__alt_data_end+0xfffeb9e4>
   ac0e8:	0401ffc4 	movi	r16,2047
   ac0ec:	003e2506 	br	ab984 <__alt_data_end+0xfffeb984>
   ac0f0:	0013883a 	mov	r9,zero
   ac0f4:	003f8406 	br	abf08 <__alt_data_end+0xfffebf08>
   ac0f8:	0005883a 	mov	r2,zero
   ac0fc:	0007883a 	mov	r3,zero
   ac100:	003e8906 	br	abb28 <__alt_data_end+0xfffebb28>
   ac104:	197ff804 	addi	r5,r3,-32
   ac108:	01000804 	movi	r4,32
   ac10c:	414ad83a 	srl	r5,r8,r5
   ac110:	19002426 	beq	r3,r4,ac1a4 <__adddf3+0x89c>
   ac114:	01001004 	movi	r4,64
   ac118:	20c7c83a 	sub	r3,r4,r3
   ac11c:	40c6983a 	sll	r3,r8,r3
   ac120:	1c46b03a 	or	r3,r3,r17
   ac124:	1806c03a 	cmpne	r3,r3,zero
   ac128:	28e2b03a 	or	r17,r5,r3
   ac12c:	0007883a 	mov	r3,zero
   ac130:	003f2306 	br	abdc0 <__alt_data_end+0xfffebdc0>
   ac134:	0007883a 	mov	r3,zero
   ac138:	5811883a 	mov	r8,r11
   ac13c:	00bfffc4 	movi	r2,-1
   ac140:	0401ffc4 	movi	r16,2047
   ac144:	003e7806 	br	abb28 <__alt_data_end+0xfffebb28>
   ac148:	4462b03a 	or	r17,r8,r17
   ac14c:	8822c03a 	cmpne	r17,r17,zero
   ac150:	0009883a 	mov	r4,zero
   ac154:	003fa006 	br	abfd8 <__alt_data_end+0xfffebfd8>
   ac158:	4811883a 	mov	r8,r9
   ac15c:	3023883a 	mov	r17,r6
   ac160:	0401ffc4 	movi	r16,2047
   ac164:	003e0706 	br	ab984 <__alt_data_end+0xfffeb984>
   ac168:	4811883a 	mov	r8,r9
   ac16c:	3023883a 	mov	r17,r6
   ac170:	003e0406 	br	ab984 <__alt_data_end+0xfffeb984>
   ac174:	21fff804 	addi	r7,r4,-32
   ac178:	01400804 	movi	r5,32
   ac17c:	41ced83a 	srl	r7,r8,r7
   ac180:	21400a26 	beq	r4,r5,ac1ac <__adddf3+0x8a4>
   ac184:	01401004 	movi	r5,64
   ac188:	2909c83a 	sub	r4,r5,r4
   ac18c:	4108983a 	sll	r4,r8,r4
   ac190:	2448b03a 	or	r4,r4,r17
   ac194:	2008c03a 	cmpne	r4,r4,zero
   ac198:	3922b03a 	or	r17,r7,r4
   ac19c:	0009883a 	mov	r4,zero
   ac1a0:	003f8d06 	br	abfd8 <__alt_data_end+0xfffebfd8>
   ac1a4:	0007883a 	mov	r3,zero
   ac1a8:	003fdd06 	br	ac120 <__alt_data_end+0xfffec120>
   ac1ac:	0009883a 	mov	r4,zero
   ac1b0:	003ff706 	br	ac190 <__alt_data_end+0xfffec190>

000ac1b4 <__divdf3>:
   ac1b4:	defff004 	addi	sp,sp,-64
   ac1b8:	dc800815 	stw	r18,32(sp)
   ac1bc:	2824d53a 	srli	r18,r5,20
   ac1c0:	dd800c15 	stw	r22,48(sp)
   ac1c4:	282cd7fa 	srli	r22,r5,31
   ac1c8:	dc000615 	stw	r16,24(sp)
   ac1cc:	04000434 	movhi	r16,16
   ac1d0:	843fffc4 	addi	r16,r16,-1
   ac1d4:	dfc00f15 	stw	ra,60(sp)
   ac1d8:	df000e15 	stw	fp,56(sp)
   ac1dc:	ddc00d15 	stw	r23,52(sp)
   ac1e0:	dd400b15 	stw	r21,44(sp)
   ac1e4:	dd000a15 	stw	r20,40(sp)
   ac1e8:	dcc00915 	stw	r19,36(sp)
   ac1ec:	dc400715 	stw	r17,28(sp)
   ac1f0:	9481ffcc 	andi	r18,r18,2047
   ac1f4:	2c20703a 	and	r16,r5,r16
   ac1f8:	b2003fcc 	andi	r8,r22,255
   ac1fc:	90006126 	beq	r18,zero,ac384 <__divdf3+0x1d0>
   ac200:	0081ffc4 	movi	r2,2047
   ac204:	202b883a 	mov	r21,r4
   ac208:	90803726 	beq	r18,r2,ac2e8 <__divdf3+0x134>
   ac20c:	80800434 	orhi	r2,r16,16
   ac210:	100490fa 	slli	r2,r2,3
   ac214:	2020d77a 	srli	r16,r4,29
   ac218:	202a90fa 	slli	r21,r4,3
   ac21c:	94bf0044 	addi	r18,r18,-1023
   ac220:	80a0b03a 	or	r16,r16,r2
   ac224:	0013883a 	mov	r9,zero
   ac228:	000b883a 	mov	r5,zero
   ac22c:	3806d53a 	srli	r3,r7,20
   ac230:	382ed7fa 	srli	r23,r7,31
   ac234:	04400434 	movhi	r17,16
   ac238:	8c7fffc4 	addi	r17,r17,-1
   ac23c:	18c1ffcc 	andi	r3,r3,2047
   ac240:	3029883a 	mov	r20,r6
   ac244:	3c62703a 	and	r17,r7,r17
   ac248:	bf003fcc 	andi	fp,r23,255
   ac24c:	18006e26 	beq	r3,zero,ac408 <__divdf3+0x254>
   ac250:	0081ffc4 	movi	r2,2047
   ac254:	18806626 	beq	r3,r2,ac3f0 <__divdf3+0x23c>
   ac258:	88800434 	orhi	r2,r17,16
   ac25c:	100490fa 	slli	r2,r2,3
   ac260:	3022d77a 	srli	r17,r6,29
   ac264:	302890fa 	slli	r20,r6,3
   ac268:	18ff0044 	addi	r3,r3,-1023
   ac26c:	88a2b03a 	or	r17,r17,r2
   ac270:	000f883a 	mov	r7,zero
   ac274:	b5e6f03a 	xor	r19,r22,r23
   ac278:	3a4cb03a 	or	r6,r7,r9
   ac27c:	008003c4 	movi	r2,15
   ac280:	9809883a 	mov	r4,r19
   ac284:	90c7c83a 	sub	r3,r18,r3
   ac288:	9cc03fcc 	andi	r19,r19,255
   ac28c:	11809636 	bltu	r2,r6,ac4e8 <__divdf3+0x334>
   ac290:	300c90ba 	slli	r6,r6,2
   ac294:	008002f4 	movhi	r2,11
   ac298:	10b0aa04 	addi	r2,r2,-15704
   ac29c:	308d883a 	add	r6,r6,r2
   ac2a0:	30800017 	ldw	r2,0(r6)
   ac2a4:	1000683a 	jmp	r2
   ac2a8:	000ac4e8 	cmpgeui	zero,zero,11027
   ac2ac:	000ac320 	cmpeqi	zero,zero,11020
   ac2b0:	000ac4d8 	cmpnei	zero,zero,11027
   ac2b4:	000ac314 	movui	zero,11020
   ac2b8:	000ac4d8 	cmpnei	zero,zero,11027
   ac2bc:	000ac4ac 	andhi	zero,zero,11026
   ac2c0:	000ac4d8 	cmpnei	zero,zero,11027
   ac2c4:	000ac314 	movui	zero,11020
   ac2c8:	000ac320 	cmpeqi	zero,zero,11020
   ac2cc:	000ac320 	cmpeqi	zero,zero,11020
   ac2d0:	000ac4ac 	andhi	zero,zero,11026
   ac2d4:	000ac314 	movui	zero,11020
   ac2d8:	000ac304 	movi	zero,11020
   ac2dc:	000ac304 	movi	zero,11020
   ac2e0:	000ac304 	movi	zero,11020
   ac2e4:	000ac870 	cmpltui	zero,zero,11041
   ac2e8:	2404b03a 	or	r2,r4,r16
   ac2ec:	10006c1e 	bne	r2,zero,ac4a0 <__divdf3+0x2ec>
   ac2f0:	02400204 	movi	r9,8
   ac2f4:	0021883a 	mov	r16,zero
   ac2f8:	002b883a 	mov	r21,zero
   ac2fc:	01400084 	movi	r5,2
   ac300:	003fca06 	br	ac22c <__alt_data_end+0xfffec22c>
   ac304:	8023883a 	mov	r17,r16
   ac308:	a829883a 	mov	r20,r21
   ac30c:	4039883a 	mov	fp,r8
   ac310:	280f883a 	mov	r7,r5
   ac314:	00800084 	movi	r2,2
   ac318:	3881601e 	bne	r7,r2,ac89c <__divdf3+0x6e8>
   ac31c:	e027883a 	mov	r19,fp
   ac320:	9900004c 	andi	r4,r19,1
   ac324:	0081ffc4 	movi	r2,2047
   ac328:	0021883a 	mov	r16,zero
   ac32c:	002b883a 	mov	r21,zero
   ac330:	1004953a 	slli	r2,r2,20
   ac334:	20c03fcc 	andi	r3,r4,255
   ac338:	01400434 	movhi	r5,16
   ac33c:	297fffc4 	addi	r5,r5,-1
   ac340:	180697fa 	slli	r3,r3,31
   ac344:	8160703a 	and	r16,r16,r5
   ac348:	80a0b03a 	or	r16,r16,r2
   ac34c:	80c6b03a 	or	r3,r16,r3
   ac350:	a805883a 	mov	r2,r21
   ac354:	dfc00f17 	ldw	ra,60(sp)
   ac358:	df000e17 	ldw	fp,56(sp)
   ac35c:	ddc00d17 	ldw	r23,52(sp)
   ac360:	dd800c17 	ldw	r22,48(sp)
   ac364:	dd400b17 	ldw	r21,44(sp)
   ac368:	dd000a17 	ldw	r20,40(sp)
   ac36c:	dcc00917 	ldw	r19,36(sp)
   ac370:	dc800817 	ldw	r18,32(sp)
   ac374:	dc400717 	ldw	r17,28(sp)
   ac378:	dc000617 	ldw	r16,24(sp)
   ac37c:	dec01004 	addi	sp,sp,64
   ac380:	f800283a 	ret
   ac384:	2404b03a 	or	r2,r4,r16
   ac388:	2023883a 	mov	r17,r4
   ac38c:	10003f26 	beq	r2,zero,ac48c <__divdf3+0x2d8>
   ac390:	80015e26 	beq	r16,zero,ac90c <__divdf3+0x758>
   ac394:	8009883a 	mov	r4,r16
   ac398:	d9800215 	stw	r6,8(sp)
   ac39c:	d9c00515 	stw	r7,20(sp)
   ac3a0:	da000415 	stw	r8,16(sp)
   ac3a4:	00ae1480 	call	ae148 <__clzsi2>
   ac3a8:	d9800217 	ldw	r6,8(sp)
   ac3ac:	d9c00517 	ldw	r7,20(sp)
   ac3b0:	da000417 	ldw	r8,16(sp)
   ac3b4:	113ffd44 	addi	r4,r2,-11
   ac3b8:	00c00704 	movi	r3,28
   ac3bc:	19014f16 	blt	r3,r4,ac8fc <__divdf3+0x748>
   ac3c0:	00c00744 	movi	r3,29
   ac3c4:	157ffe04 	addi	r21,r2,-8
   ac3c8:	1907c83a 	sub	r3,r3,r4
   ac3cc:	8560983a 	sll	r16,r16,r21
   ac3d0:	88c6d83a 	srl	r3,r17,r3
   ac3d4:	8d6a983a 	sll	r21,r17,r21
   ac3d8:	1c20b03a 	or	r16,r3,r16
   ac3dc:	1080fcc4 	addi	r2,r2,1011
   ac3e0:	00a5c83a 	sub	r18,zero,r2
   ac3e4:	0013883a 	mov	r9,zero
   ac3e8:	000b883a 	mov	r5,zero
   ac3ec:	003f8f06 	br	ac22c <__alt_data_end+0xfffec22c>
   ac3f0:	3444b03a 	or	r2,r6,r17
   ac3f4:	1000231e 	bne	r2,zero,ac484 <__divdf3+0x2d0>
   ac3f8:	0023883a 	mov	r17,zero
   ac3fc:	0029883a 	mov	r20,zero
   ac400:	01c00084 	movi	r7,2
   ac404:	003f9b06 	br	ac274 <__alt_data_end+0xfffec274>
   ac408:	3444b03a 	or	r2,r6,r17
   ac40c:	10001926 	beq	r2,zero,ac474 <__divdf3+0x2c0>
   ac410:	88014b26 	beq	r17,zero,ac940 <__divdf3+0x78c>
   ac414:	8809883a 	mov	r4,r17
   ac418:	d9400115 	stw	r5,4(sp)
   ac41c:	d9800215 	stw	r6,8(sp)
   ac420:	da000415 	stw	r8,16(sp)
   ac424:	da400315 	stw	r9,12(sp)
   ac428:	00ae1480 	call	ae148 <__clzsi2>
   ac42c:	d9400117 	ldw	r5,4(sp)
   ac430:	d9800217 	ldw	r6,8(sp)
   ac434:	da000417 	ldw	r8,16(sp)
   ac438:	da400317 	ldw	r9,12(sp)
   ac43c:	113ffd44 	addi	r4,r2,-11
   ac440:	00c00704 	movi	r3,28
   ac444:	19013a16 	blt	r3,r4,ac930 <__divdf3+0x77c>
   ac448:	00c00744 	movi	r3,29
   ac44c:	153ffe04 	addi	r20,r2,-8
   ac450:	1907c83a 	sub	r3,r3,r4
   ac454:	8d22983a 	sll	r17,r17,r20
   ac458:	30c6d83a 	srl	r3,r6,r3
   ac45c:	3528983a 	sll	r20,r6,r20
   ac460:	1c62b03a 	or	r17,r3,r17
   ac464:	1080fcc4 	addi	r2,r2,1011
   ac468:	0087c83a 	sub	r3,zero,r2
   ac46c:	000f883a 	mov	r7,zero
   ac470:	003f8006 	br	ac274 <__alt_data_end+0xfffec274>
   ac474:	0023883a 	mov	r17,zero
   ac478:	0029883a 	mov	r20,zero
   ac47c:	01c00044 	movi	r7,1
   ac480:	003f7c06 	br	ac274 <__alt_data_end+0xfffec274>
   ac484:	01c000c4 	movi	r7,3
   ac488:	003f7a06 	br	ac274 <__alt_data_end+0xfffec274>
   ac48c:	02400104 	movi	r9,4
   ac490:	0021883a 	mov	r16,zero
   ac494:	002b883a 	mov	r21,zero
   ac498:	01400044 	movi	r5,1
   ac49c:	003f6306 	br	ac22c <__alt_data_end+0xfffec22c>
   ac4a0:	02400304 	movi	r9,12
   ac4a4:	014000c4 	movi	r5,3
   ac4a8:	003f6006 	br	ac22c <__alt_data_end+0xfffec22c>
   ac4ac:	04000434 	movhi	r16,16
   ac4b0:	0009883a 	mov	r4,zero
   ac4b4:	843fffc4 	addi	r16,r16,-1
   ac4b8:	057fffc4 	movi	r21,-1
   ac4bc:	0081ffc4 	movi	r2,2047
   ac4c0:	003f9b06 	br	ac330 <__alt_data_end+0xfffec330>
   ac4c4:	00c00044 	movi	r3,1
   ac4c8:	1887c83a 	sub	r3,r3,r2
   ac4cc:	01000e04 	movi	r4,56
   ac4d0:	20c1530e 	bge	r4,r3,aca20 <__divdf3+0x86c>
   ac4d4:	9900004c 	andi	r4,r19,1
   ac4d8:	0005883a 	mov	r2,zero
   ac4dc:	0021883a 	mov	r16,zero
   ac4e0:	002b883a 	mov	r21,zero
   ac4e4:	003f9206 	br	ac330 <__alt_data_end+0xfffec330>
   ac4e8:	8c012e36 	bltu	r17,r16,ac9a4 <__divdf3+0x7f0>
   ac4ec:	84412c26 	beq	r16,r17,ac9a0 <__divdf3+0x7ec>
   ac4f0:	a82f883a 	mov	r23,r21
   ac4f4:	18ffffc4 	addi	r3,r3,-1
   ac4f8:	002b883a 	mov	r21,zero
   ac4fc:	a004d63a 	srli	r2,r20,24
   ac500:	8822923a 	slli	r17,r17,8
   ac504:	a028923a 	slli	r20,r20,8
   ac508:	8009883a 	mov	r4,r16
   ac50c:	88acb03a 	or	r22,r17,r2
   ac510:	dd000015 	stw	r20,0(sp)
   ac514:	b028d43a 	srli	r20,r22,16
   ac518:	d8c00215 	stw	r3,8(sp)
   ac51c:	b4bfffcc 	andi	r18,r22,65535
   ac520:	a00b883a 	mov	r5,r20
   ac524:	00ab8240 	call	ab824 <__udivsi3>
   ac528:	100b883a 	mov	r5,r2
   ac52c:	9009883a 	mov	r4,r18
   ac530:	1023883a 	mov	r17,r2
   ac534:	00ab8e00 	call	ab8e0 <__mulsi3>
   ac538:	8009883a 	mov	r4,r16
   ac53c:	a00b883a 	mov	r5,r20
   ac540:	1039883a 	mov	fp,r2
   ac544:	00ab8880 	call	ab888 <__umodsi3>
   ac548:	1004943a 	slli	r2,r2,16
   ac54c:	b808d43a 	srli	r4,r23,16
   ac550:	d8c00217 	ldw	r3,8(sp)
   ac554:	2084b03a 	or	r2,r4,r2
   ac558:	1700062e 	bgeu	r2,fp,ac574 <__divdf3+0x3c0>
   ac55c:	1585883a 	add	r2,r2,r22
   ac560:	893fffc4 	addi	r4,r17,-1
   ac564:	15811d36 	bltu	r2,r22,ac9dc <__divdf3+0x828>
   ac568:	17011c2e 	bgeu	r2,fp,ac9dc <__divdf3+0x828>
   ac56c:	8c7fff84 	addi	r17,r17,-2
   ac570:	1585883a 	add	r2,r2,r22
   ac574:	1739c83a 	sub	fp,r2,fp
   ac578:	a00b883a 	mov	r5,r20
   ac57c:	e009883a 	mov	r4,fp
   ac580:	d8c00215 	stw	r3,8(sp)
   ac584:	00ab8240 	call	ab824 <__udivsi3>
   ac588:	100b883a 	mov	r5,r2
   ac58c:	9009883a 	mov	r4,r18
   ac590:	1021883a 	mov	r16,r2
   ac594:	00ab8e00 	call	ab8e0 <__mulsi3>
   ac598:	a00b883a 	mov	r5,r20
   ac59c:	e009883a 	mov	r4,fp
   ac5a0:	d8800415 	stw	r2,16(sp)
   ac5a4:	00ab8880 	call	ab888 <__umodsi3>
   ac5a8:	1004943a 	slli	r2,r2,16
   ac5ac:	da000417 	ldw	r8,16(sp)
   ac5b0:	bdffffcc 	andi	r23,r23,65535
   ac5b4:	b884b03a 	or	r2,r23,r2
   ac5b8:	d8c00217 	ldw	r3,8(sp)
   ac5bc:	1200062e 	bgeu	r2,r8,ac5d8 <__divdf3+0x424>
   ac5c0:	1585883a 	add	r2,r2,r22
   ac5c4:	813fffc4 	addi	r4,r16,-1
   ac5c8:	15810236 	bltu	r2,r22,ac9d4 <__divdf3+0x820>
   ac5cc:	1201012e 	bgeu	r2,r8,ac9d4 <__divdf3+0x820>
   ac5d0:	843fff84 	addi	r16,r16,-2
   ac5d4:	1585883a 	add	r2,r2,r22
   ac5d8:	8822943a 	slli	r17,r17,16
   ac5dc:	d9800017 	ldw	r6,0(sp)
   ac5e0:	1211c83a 	sub	r8,r2,r8
   ac5e4:	8c22b03a 	or	r17,r17,r16
   ac5e8:	373fffcc 	andi	fp,r6,65535
   ac5ec:	8abfffcc 	andi	r10,r17,65535
   ac5f0:	8820d43a 	srli	r16,r17,16
   ac5f4:	5009883a 	mov	r4,r10
   ac5f8:	e00b883a 	mov	r5,fp
   ac5fc:	302ed43a 	srli	r23,r6,16
   ac600:	d8c00215 	stw	r3,8(sp)
   ac604:	da000415 	stw	r8,16(sp)
   ac608:	da800115 	stw	r10,4(sp)
   ac60c:	00ab8e00 	call	ab8e0 <__mulsi3>
   ac610:	800b883a 	mov	r5,r16
   ac614:	e009883a 	mov	r4,fp
   ac618:	d8800515 	stw	r2,20(sp)
   ac61c:	00ab8e00 	call	ab8e0 <__mulsi3>
   ac620:	8009883a 	mov	r4,r16
   ac624:	b80b883a 	mov	r5,r23
   ac628:	d8800315 	stw	r2,12(sp)
   ac62c:	00ab8e00 	call	ab8e0 <__mulsi3>
   ac630:	da800117 	ldw	r10,4(sp)
   ac634:	b80b883a 	mov	r5,r23
   ac638:	1021883a 	mov	r16,r2
   ac63c:	5009883a 	mov	r4,r10
   ac640:	00ab8e00 	call	ab8e0 <__mulsi3>
   ac644:	d9c00517 	ldw	r7,20(sp)
   ac648:	da400317 	ldw	r9,12(sp)
   ac64c:	d8c00217 	ldw	r3,8(sp)
   ac650:	3808d43a 	srli	r4,r7,16
   ac654:	1245883a 	add	r2,r2,r9
   ac658:	da000417 	ldw	r8,16(sp)
   ac65c:	2085883a 	add	r2,r4,r2
   ac660:	1240022e 	bgeu	r2,r9,ac66c <__divdf3+0x4b8>
   ac664:	01000074 	movhi	r4,1
   ac668:	8121883a 	add	r16,r16,r4
   ac66c:	1008d43a 	srli	r4,r2,16
   ac670:	1004943a 	slli	r2,r2,16
   ac674:	39ffffcc 	andi	r7,r7,65535
   ac678:	2409883a 	add	r4,r4,r16
   ac67c:	11c5883a 	add	r2,r2,r7
   ac680:	4100bb36 	bltu	r8,r4,ac970 <__divdf3+0x7bc>
   ac684:	4100d726 	beq	r8,r4,ac9e4 <__divdf3+0x830>
   ac688:	4109c83a 	sub	r4,r8,r4
   ac68c:	a8a1c83a 	sub	r16,r21,r2
   ac690:	ac2b803a 	cmpltu	r21,r21,r16
   ac694:	256bc83a 	sub	r21,r4,r21
   ac698:	b540d926 	beq	r22,r21,aca00 <__divdf3+0x84c>
   ac69c:	a00b883a 	mov	r5,r20
   ac6a0:	a809883a 	mov	r4,r21
   ac6a4:	d8c00215 	stw	r3,8(sp)
   ac6a8:	00ab8240 	call	ab824 <__udivsi3>
   ac6ac:	100b883a 	mov	r5,r2
   ac6b0:	9009883a 	mov	r4,r18
   ac6b4:	d8800515 	stw	r2,20(sp)
   ac6b8:	00ab8e00 	call	ab8e0 <__mulsi3>
   ac6bc:	a809883a 	mov	r4,r21
   ac6c0:	a00b883a 	mov	r5,r20
   ac6c4:	d8800415 	stw	r2,16(sp)
   ac6c8:	00ab8880 	call	ab888 <__umodsi3>
   ac6cc:	1004943a 	slli	r2,r2,16
   ac6d0:	8008d43a 	srli	r4,r16,16
   ac6d4:	da000417 	ldw	r8,16(sp)
   ac6d8:	d8c00217 	ldw	r3,8(sp)
   ac6dc:	2084b03a 	or	r2,r4,r2
   ac6e0:	d9c00517 	ldw	r7,20(sp)
   ac6e4:	1200062e 	bgeu	r2,r8,ac700 <__divdf3+0x54c>
   ac6e8:	1585883a 	add	r2,r2,r22
   ac6ec:	393fffc4 	addi	r4,r7,-1
   ac6f0:	1580c536 	bltu	r2,r22,aca08 <__divdf3+0x854>
   ac6f4:	1200c42e 	bgeu	r2,r8,aca08 <__divdf3+0x854>
   ac6f8:	39ffff84 	addi	r7,r7,-2
   ac6fc:	1585883a 	add	r2,r2,r22
   ac700:	122bc83a 	sub	r21,r2,r8
   ac704:	a00b883a 	mov	r5,r20
   ac708:	a809883a 	mov	r4,r21
   ac70c:	d8c00215 	stw	r3,8(sp)
   ac710:	d9c00515 	stw	r7,20(sp)
   ac714:	00ab8240 	call	ab824 <__udivsi3>
   ac718:	9009883a 	mov	r4,r18
   ac71c:	100b883a 	mov	r5,r2
   ac720:	d8800415 	stw	r2,16(sp)
   ac724:	00ab8e00 	call	ab8e0 <__mulsi3>
   ac728:	a809883a 	mov	r4,r21
   ac72c:	a00b883a 	mov	r5,r20
   ac730:	1025883a 	mov	r18,r2
   ac734:	00ab8880 	call	ab888 <__umodsi3>
   ac738:	1004943a 	slli	r2,r2,16
   ac73c:	813fffcc 	andi	r4,r16,65535
   ac740:	d8c00217 	ldw	r3,8(sp)
   ac744:	20a0b03a 	or	r16,r4,r2
   ac748:	d9c00517 	ldw	r7,20(sp)
   ac74c:	da000417 	ldw	r8,16(sp)
   ac750:	8480062e 	bgeu	r16,r18,ac76c <__divdf3+0x5b8>
   ac754:	85a1883a 	add	r16,r16,r22
   ac758:	40bfffc4 	addi	r2,r8,-1
   ac75c:	8580ac36 	bltu	r16,r22,aca10 <__divdf3+0x85c>
   ac760:	8480ab2e 	bgeu	r16,r18,aca10 <__divdf3+0x85c>
   ac764:	423fff84 	addi	r8,r8,-2
   ac768:	85a1883a 	add	r16,r16,r22
   ac76c:	3804943a 	slli	r2,r7,16
   ac770:	84a1c83a 	sub	r16,r16,r18
   ac774:	e009883a 	mov	r4,fp
   ac778:	1228b03a 	or	r20,r2,r8
   ac77c:	a1ffffcc 	andi	r7,r20,65535
   ac780:	a024d43a 	srli	r18,r20,16
   ac784:	380b883a 	mov	r5,r7
   ac788:	d8c00215 	stw	r3,8(sp)
   ac78c:	d9c00515 	stw	r7,20(sp)
   ac790:	00ab8e00 	call	ab8e0 <__mulsi3>
   ac794:	900b883a 	mov	r5,r18
   ac798:	e009883a 	mov	r4,fp
   ac79c:	102b883a 	mov	r21,r2
   ac7a0:	00ab8e00 	call	ab8e0 <__mulsi3>
   ac7a4:	900b883a 	mov	r5,r18
   ac7a8:	b809883a 	mov	r4,r23
   ac7ac:	1039883a 	mov	fp,r2
   ac7b0:	00ab8e00 	call	ab8e0 <__mulsi3>
   ac7b4:	d9c00517 	ldw	r7,20(sp)
   ac7b8:	b80b883a 	mov	r5,r23
   ac7bc:	1025883a 	mov	r18,r2
   ac7c0:	3809883a 	mov	r4,r7
   ac7c4:	00ab8e00 	call	ab8e0 <__mulsi3>
   ac7c8:	a808d43a 	srli	r4,r21,16
   ac7cc:	1705883a 	add	r2,r2,fp
   ac7d0:	d8c00217 	ldw	r3,8(sp)
   ac7d4:	2085883a 	add	r2,r4,r2
   ac7d8:	1700022e 	bgeu	r2,fp,ac7e4 <__divdf3+0x630>
   ac7dc:	01000074 	movhi	r4,1
   ac7e0:	9125883a 	add	r18,r18,r4
   ac7e4:	1008d43a 	srli	r4,r2,16
   ac7e8:	1004943a 	slli	r2,r2,16
   ac7ec:	ad7fffcc 	andi	r21,r21,65535
   ac7f0:	2489883a 	add	r4,r4,r18
   ac7f4:	1545883a 	add	r2,r2,r21
   ac7f8:	81003836 	bltu	r16,r4,ac8dc <__divdf3+0x728>
   ac7fc:	81003626 	beq	r16,r4,ac8d8 <__divdf3+0x724>
   ac800:	a5000054 	ori	r20,r20,1
   ac804:	1880ffc4 	addi	r2,r3,1023
   ac808:	00bf2e0e 	bge	zero,r2,ac4c4 <__alt_data_end+0xfffec4c4>
   ac80c:	a10001cc 	andi	r4,r20,7
   ac810:	20000726 	beq	r4,zero,ac830 <__divdf3+0x67c>
   ac814:	a10003cc 	andi	r4,r20,15
   ac818:	01400104 	movi	r5,4
   ac81c:	21400426 	beq	r4,r5,ac830 <__divdf3+0x67c>
   ac820:	a149883a 	add	r4,r20,r5
   ac824:	2529803a 	cmpltu	r20,r4,r20
   ac828:	8d23883a 	add	r17,r17,r20
   ac82c:	2029883a 	mov	r20,r4
   ac830:	8900402c 	andhi	r4,r17,256
   ac834:	20000426 	beq	r4,zero,ac848 <__divdf3+0x694>
   ac838:	18810004 	addi	r2,r3,1024
   ac83c:	00ffc034 	movhi	r3,65280
   ac840:	18ffffc4 	addi	r3,r3,-1
   ac844:	88e2703a 	and	r17,r17,r3
   ac848:	00c1ff84 	movi	r3,2046
   ac84c:	18beb416 	blt	r3,r2,ac320 <__alt_data_end+0xfffec320>
   ac850:	a028d0fa 	srli	r20,r20,3
   ac854:	882a977a 	slli	r21,r17,29
   ac858:	8820927a 	slli	r16,r17,9
   ac85c:	1081ffcc 	andi	r2,r2,2047
   ac860:	ad2ab03a 	or	r21,r21,r20
   ac864:	8020d33a 	srli	r16,r16,12
   ac868:	9900004c 	andi	r4,r19,1
   ac86c:	003eb006 	br	ac330 <__alt_data_end+0xfffec330>
   ac870:	8080022c 	andhi	r2,r16,8
   ac874:	10001226 	beq	r2,zero,ac8c0 <__divdf3+0x70c>
   ac878:	8880022c 	andhi	r2,r17,8
   ac87c:	1000101e 	bne	r2,zero,ac8c0 <__divdf3+0x70c>
   ac880:	00800434 	movhi	r2,16
   ac884:	8c000234 	orhi	r16,r17,8
   ac888:	10bfffc4 	addi	r2,r2,-1
   ac88c:	b809883a 	mov	r4,r23
   ac890:	80a0703a 	and	r16,r16,r2
   ac894:	a02b883a 	mov	r21,r20
   ac898:	003f0806 	br	ac4bc <__alt_data_end+0xfffec4bc>
   ac89c:	008000c4 	movi	r2,3
   ac8a0:	3880b126 	beq	r7,r2,acb68 <__divdf3+0x9b4>
   ac8a4:	00800044 	movi	r2,1
   ac8a8:	38805b1e 	bne	r7,r2,aca18 <__divdf3+0x864>
   ac8ac:	e009883a 	mov	r4,fp
   ac8b0:	0005883a 	mov	r2,zero
   ac8b4:	0021883a 	mov	r16,zero
   ac8b8:	002b883a 	mov	r21,zero
   ac8bc:	003e9c06 	br	ac330 <__alt_data_end+0xfffec330>
   ac8c0:	00800434 	movhi	r2,16
   ac8c4:	84000234 	orhi	r16,r16,8
   ac8c8:	10bfffc4 	addi	r2,r2,-1
   ac8cc:	b009883a 	mov	r4,r22
   ac8d0:	80a0703a 	and	r16,r16,r2
   ac8d4:	003ef906 	br	ac4bc <__alt_data_end+0xfffec4bc>
   ac8d8:	103fca26 	beq	r2,zero,ac804 <__alt_data_end+0xfffec804>
   ac8dc:	b421883a 	add	r16,r22,r16
   ac8e0:	a17fffc4 	addi	r5,r20,-1
   ac8e4:	8580422e 	bgeu	r16,r22,ac9f0 <__divdf3+0x83c>
   ac8e8:	2829883a 	mov	r20,r5
   ac8ec:	813fc41e 	bne	r16,r4,ac800 <__alt_data_end+0xfffec800>
   ac8f0:	d9800017 	ldw	r6,0(sp)
   ac8f4:	30bfc21e 	bne	r6,r2,ac800 <__alt_data_end+0xfffec800>
   ac8f8:	003fc206 	br	ac804 <__alt_data_end+0xfffec804>
   ac8fc:	143ff604 	addi	r16,r2,-40
   ac900:	8c20983a 	sll	r16,r17,r16
   ac904:	002b883a 	mov	r21,zero
   ac908:	003eb406 	br	ac3dc <__alt_data_end+0xfffec3dc>
   ac90c:	d9800215 	stw	r6,8(sp)
   ac910:	d9c00515 	stw	r7,20(sp)
   ac914:	da000415 	stw	r8,16(sp)
   ac918:	00ae1480 	call	ae148 <__clzsi2>
   ac91c:	10800804 	addi	r2,r2,32
   ac920:	da000417 	ldw	r8,16(sp)
   ac924:	d9c00517 	ldw	r7,20(sp)
   ac928:	d9800217 	ldw	r6,8(sp)
   ac92c:	003ea106 	br	ac3b4 <__alt_data_end+0xfffec3b4>
   ac930:	147ff604 	addi	r17,r2,-40
   ac934:	3462983a 	sll	r17,r6,r17
   ac938:	0029883a 	mov	r20,zero
   ac93c:	003ec906 	br	ac464 <__alt_data_end+0xfffec464>
   ac940:	3009883a 	mov	r4,r6
   ac944:	d9400115 	stw	r5,4(sp)
   ac948:	d9800215 	stw	r6,8(sp)
   ac94c:	da000415 	stw	r8,16(sp)
   ac950:	da400315 	stw	r9,12(sp)
   ac954:	00ae1480 	call	ae148 <__clzsi2>
   ac958:	10800804 	addi	r2,r2,32
   ac95c:	da400317 	ldw	r9,12(sp)
   ac960:	da000417 	ldw	r8,16(sp)
   ac964:	d9800217 	ldw	r6,8(sp)
   ac968:	d9400117 	ldw	r5,4(sp)
   ac96c:	003eb306 	br	ac43c <__alt_data_end+0xfffec43c>
   ac970:	d9800017 	ldw	r6,0(sp)
   ac974:	a9ab883a 	add	r21,r21,r6
   ac978:	a98b803a 	cmpltu	r5,r21,r6
   ac97c:	2d8b883a 	add	r5,r5,r22
   ac980:	2a11883a 	add	r8,r5,r8
   ac984:	897fffc4 	addi	r5,r17,-1
   ac988:	b2000c2e 	bgeu	r22,r8,ac9bc <__divdf3+0x808>
   ac98c:	41003f36 	bltu	r8,r4,aca8c <__divdf3+0x8d8>
   ac990:	22006c26 	beq	r4,r8,acb44 <__divdf3+0x990>
   ac994:	4109c83a 	sub	r4,r8,r4
   ac998:	2823883a 	mov	r17,r5
   ac99c:	003f3b06 	br	ac68c <__alt_data_end+0xfffec68c>
   ac9a0:	ad3ed336 	bltu	r21,r20,ac4f0 <__alt_data_end+0xfffec4f0>
   ac9a4:	a804d07a 	srli	r2,r21,1
   ac9a8:	802e97fa 	slli	r23,r16,31
   ac9ac:	a82a97fa 	slli	r21,r21,31
   ac9b0:	8020d07a 	srli	r16,r16,1
   ac9b4:	b8aeb03a 	or	r23,r23,r2
   ac9b8:	003ed006 	br	ac4fc <__alt_data_end+0xfffec4fc>
   ac9bc:	b23ff51e 	bne	r22,r8,ac994 <__alt_data_end+0xfffec994>
   ac9c0:	d9800017 	ldw	r6,0(sp)
   ac9c4:	a9bff12e 	bgeu	r21,r6,ac98c <__alt_data_end+0xfffec98c>
   ac9c8:	b109c83a 	sub	r4,r22,r4
   ac9cc:	2823883a 	mov	r17,r5
   ac9d0:	003f2e06 	br	ac68c <__alt_data_end+0xfffec68c>
   ac9d4:	2021883a 	mov	r16,r4
   ac9d8:	003eff06 	br	ac5d8 <__alt_data_end+0xfffec5d8>
   ac9dc:	2023883a 	mov	r17,r4
   ac9e0:	003ee406 	br	ac574 <__alt_data_end+0xfffec574>
   ac9e4:	a8bfe236 	bltu	r21,r2,ac970 <__alt_data_end+0xfffec970>
   ac9e8:	0009883a 	mov	r4,zero
   ac9ec:	003f2706 	br	ac68c <__alt_data_end+0xfffec68c>
   ac9f0:	81002d36 	bltu	r16,r4,acaa8 <__divdf3+0x8f4>
   ac9f4:	24005626 	beq	r4,r16,acb50 <__divdf3+0x99c>
   ac9f8:	2829883a 	mov	r20,r5
   ac9fc:	003f8006 	br	ac800 <__alt_data_end+0xfffec800>
   aca00:	053fffc4 	movi	r20,-1
   aca04:	003f7f06 	br	ac804 <__alt_data_end+0xfffec804>
   aca08:	200f883a 	mov	r7,r4
   aca0c:	003f3c06 	br	ac700 <__alt_data_end+0xfffec700>
   aca10:	1011883a 	mov	r8,r2
   aca14:	003f5506 	br	ac76c <__alt_data_end+0xfffec76c>
   aca18:	e027883a 	mov	r19,fp
   aca1c:	003f7906 	br	ac804 <__alt_data_end+0xfffec804>
   aca20:	010007c4 	movi	r4,31
   aca24:	20c02816 	blt	r4,r3,acac8 <__divdf3+0x914>
   aca28:	00800804 	movi	r2,32
   aca2c:	10c5c83a 	sub	r2,r2,r3
   aca30:	888a983a 	sll	r5,r17,r2
   aca34:	a0c8d83a 	srl	r4,r20,r3
   aca38:	a084983a 	sll	r2,r20,r2
   aca3c:	88e2d83a 	srl	r17,r17,r3
   aca40:	2906b03a 	or	r3,r5,r4
   aca44:	1004c03a 	cmpne	r2,r2,zero
   aca48:	1886b03a 	or	r3,r3,r2
   aca4c:	188001cc 	andi	r2,r3,7
   aca50:	10000726 	beq	r2,zero,aca70 <__divdf3+0x8bc>
   aca54:	188003cc 	andi	r2,r3,15
   aca58:	01000104 	movi	r4,4
   aca5c:	11000426 	beq	r2,r4,aca70 <__divdf3+0x8bc>
   aca60:	1805883a 	mov	r2,r3
   aca64:	10c00104 	addi	r3,r2,4
   aca68:	1885803a 	cmpltu	r2,r3,r2
   aca6c:	88a3883a 	add	r17,r17,r2
   aca70:	8880202c 	andhi	r2,r17,128
   aca74:	10002926 	beq	r2,zero,acb1c <__divdf3+0x968>
   aca78:	9900004c 	andi	r4,r19,1
   aca7c:	00800044 	movi	r2,1
   aca80:	0021883a 	mov	r16,zero
   aca84:	002b883a 	mov	r21,zero
   aca88:	003e2906 	br	ac330 <__alt_data_end+0xfffec330>
   aca8c:	d9800017 	ldw	r6,0(sp)
   aca90:	8c7fff84 	addi	r17,r17,-2
   aca94:	a9ab883a 	add	r21,r21,r6
   aca98:	a98b803a 	cmpltu	r5,r21,r6
   aca9c:	2d8b883a 	add	r5,r5,r22
   acaa0:	2a11883a 	add	r8,r5,r8
   acaa4:	003ef806 	br	ac688 <__alt_data_end+0xfffec688>
   acaa8:	d9800017 	ldw	r6,0(sp)
   acaac:	318f883a 	add	r7,r6,r6
   acab0:	398b803a 	cmpltu	r5,r7,r6
   acab4:	2d8d883a 	add	r6,r5,r22
   acab8:	81a1883a 	add	r16,r16,r6
   acabc:	a17fff84 	addi	r5,r20,-2
   acac0:	d9c00015 	stw	r7,0(sp)
   acac4:	003f8806 	br	ac8e8 <__alt_data_end+0xfffec8e8>
   acac8:	013ff844 	movi	r4,-31
   acacc:	2085c83a 	sub	r2,r4,r2
   acad0:	8888d83a 	srl	r4,r17,r2
   acad4:	00800804 	movi	r2,32
   acad8:	18802126 	beq	r3,r2,acb60 <__divdf3+0x9ac>
   acadc:	04001004 	movi	r16,64
   acae0:	80c7c83a 	sub	r3,r16,r3
   acae4:	88e0983a 	sll	r16,r17,r3
   acae8:	8504b03a 	or	r2,r16,r20
   acaec:	1004c03a 	cmpne	r2,r2,zero
   acaf0:	2084b03a 	or	r2,r4,r2
   acaf4:	144001cc 	andi	r17,r2,7
   acaf8:	88000d1e 	bne	r17,zero,acb30 <__divdf3+0x97c>
   acafc:	0021883a 	mov	r16,zero
   acb00:	102ad0fa 	srli	r21,r2,3
   acb04:	9900004c 	andi	r4,r19,1
   acb08:	0005883a 	mov	r2,zero
   acb0c:	ac6ab03a 	or	r21,r21,r17
   acb10:	003e0706 	br	ac330 <__alt_data_end+0xfffec330>
   acb14:	1007883a 	mov	r3,r2
   acb18:	0023883a 	mov	r17,zero
   acb1c:	8820927a 	slli	r16,r17,9
   acb20:	1805883a 	mov	r2,r3
   acb24:	8822977a 	slli	r17,r17,29
   acb28:	8020d33a 	srli	r16,r16,12
   acb2c:	003ff406 	br	acb00 <__alt_data_end+0xfffecb00>
   acb30:	10c003cc 	andi	r3,r2,15
   acb34:	01000104 	movi	r4,4
   acb38:	193ff626 	beq	r3,r4,acb14 <__alt_data_end+0xfffecb14>
   acb3c:	0023883a 	mov	r17,zero
   acb40:	003fc806 	br	aca64 <__alt_data_end+0xfffeca64>
   acb44:	a8bfd136 	bltu	r21,r2,aca8c <__alt_data_end+0xfffeca8c>
   acb48:	2823883a 	mov	r17,r5
   acb4c:	003fa606 	br	ac9e8 <__alt_data_end+0xfffec9e8>
   acb50:	d9800017 	ldw	r6,0(sp)
   acb54:	30bfd436 	bltu	r6,r2,acaa8 <__alt_data_end+0xfffecaa8>
   acb58:	2829883a 	mov	r20,r5
   acb5c:	003f6406 	br	ac8f0 <__alt_data_end+0xfffec8f0>
   acb60:	0021883a 	mov	r16,zero
   acb64:	003fe006 	br	acae8 <__alt_data_end+0xfffecae8>
   acb68:	00800434 	movhi	r2,16
   acb6c:	8c000234 	orhi	r16,r17,8
   acb70:	10bfffc4 	addi	r2,r2,-1
   acb74:	e009883a 	mov	r4,fp
   acb78:	80a0703a 	and	r16,r16,r2
   acb7c:	a02b883a 	mov	r21,r20
   acb80:	003e4e06 	br	ac4bc <__alt_data_end+0xfffec4bc>

000acb84 <__eqdf2>:
   acb84:	2804d53a 	srli	r2,r5,20
   acb88:	3806d53a 	srli	r3,r7,20
   acb8c:	02000434 	movhi	r8,16
   acb90:	423fffc4 	addi	r8,r8,-1
   acb94:	1081ffcc 	andi	r2,r2,2047
   acb98:	0281ffc4 	movi	r10,2047
   acb9c:	2a12703a 	and	r9,r5,r8
   acba0:	18c1ffcc 	andi	r3,r3,2047
   acba4:	3a10703a 	and	r8,r7,r8
   acba8:	280ad7fa 	srli	r5,r5,31
   acbac:	380ed7fa 	srli	r7,r7,31
   acbb0:	12801026 	beq	r2,r10,acbf4 <__eqdf2+0x70>
   acbb4:	0281ffc4 	movi	r10,2047
   acbb8:	1a800a26 	beq	r3,r10,acbe4 <__eqdf2+0x60>
   acbbc:	10c00226 	beq	r2,r3,acbc8 <__eqdf2+0x44>
   acbc0:	00800044 	movi	r2,1
   acbc4:	f800283a 	ret
   acbc8:	4a3ffd1e 	bne	r9,r8,acbc0 <__alt_data_end+0xfffecbc0>
   acbcc:	21bffc1e 	bne	r4,r6,acbc0 <__alt_data_end+0xfffecbc0>
   acbd0:	29c00c26 	beq	r5,r7,acc04 <__eqdf2+0x80>
   acbd4:	103ffa1e 	bne	r2,zero,acbc0 <__alt_data_end+0xfffecbc0>
   acbd8:	2244b03a 	or	r2,r4,r9
   acbdc:	1004c03a 	cmpne	r2,r2,zero
   acbe0:	f800283a 	ret
   acbe4:	3214b03a 	or	r10,r6,r8
   acbe8:	503ff426 	beq	r10,zero,acbbc <__alt_data_end+0xfffecbbc>
   acbec:	00800044 	movi	r2,1
   acbf0:	f800283a 	ret
   acbf4:	2254b03a 	or	r10,r4,r9
   acbf8:	503fee26 	beq	r10,zero,acbb4 <__alt_data_end+0xfffecbb4>
   acbfc:	00800044 	movi	r2,1
   acc00:	f800283a 	ret
   acc04:	0005883a 	mov	r2,zero
   acc08:	f800283a 	ret

000acc0c <__gedf2>:
   acc0c:	2804d53a 	srli	r2,r5,20
   acc10:	3806d53a 	srli	r3,r7,20
   acc14:	02000434 	movhi	r8,16
   acc18:	423fffc4 	addi	r8,r8,-1
   acc1c:	1081ffcc 	andi	r2,r2,2047
   acc20:	0241ffc4 	movi	r9,2047
   acc24:	2a14703a 	and	r10,r5,r8
   acc28:	18c1ffcc 	andi	r3,r3,2047
   acc2c:	3a10703a 	and	r8,r7,r8
   acc30:	280ad7fa 	srli	r5,r5,31
   acc34:	380ed7fa 	srli	r7,r7,31
   acc38:	12401d26 	beq	r2,r9,accb0 <__gedf2+0xa4>
   acc3c:	0241ffc4 	movi	r9,2047
   acc40:	1a401226 	beq	r3,r9,acc8c <__gedf2+0x80>
   acc44:	1000081e 	bne	r2,zero,acc68 <__gedf2+0x5c>
   acc48:	2296b03a 	or	r11,r4,r10
   acc4c:	5813003a 	cmpeq	r9,r11,zero
   acc50:	1800091e 	bne	r3,zero,acc78 <__gedf2+0x6c>
   acc54:	3218b03a 	or	r12,r6,r8
   acc58:	6000071e 	bne	r12,zero,acc78 <__gedf2+0x6c>
   acc5c:	0005883a 	mov	r2,zero
   acc60:	5800101e 	bne	r11,zero,acca4 <__gedf2+0x98>
   acc64:	f800283a 	ret
   acc68:	18000c1e 	bne	r3,zero,acc9c <__gedf2+0x90>
   acc6c:	3212b03a 	or	r9,r6,r8
   acc70:	48000c26 	beq	r9,zero,acca4 <__gedf2+0x98>
   acc74:	0013883a 	mov	r9,zero
   acc78:	39c03fcc 	andi	r7,r7,255
   acc7c:	48000826 	beq	r9,zero,acca0 <__gedf2+0x94>
   acc80:	38000926 	beq	r7,zero,acca8 <__gedf2+0x9c>
   acc84:	00800044 	movi	r2,1
   acc88:	f800283a 	ret
   acc8c:	3212b03a 	or	r9,r6,r8
   acc90:	483fec26 	beq	r9,zero,acc44 <__alt_data_end+0xfffecc44>
   acc94:	00bfff84 	movi	r2,-2
   acc98:	f800283a 	ret
   acc9c:	39c03fcc 	andi	r7,r7,255
   acca0:	29c00626 	beq	r5,r7,accbc <__gedf2+0xb0>
   acca4:	283ff726 	beq	r5,zero,acc84 <__alt_data_end+0xfffecc84>
   acca8:	00bfffc4 	movi	r2,-1
   accac:	f800283a 	ret
   accb0:	2292b03a 	or	r9,r4,r10
   accb4:	483fe126 	beq	r9,zero,acc3c <__alt_data_end+0xfffecc3c>
   accb8:	003ff606 	br	acc94 <__alt_data_end+0xfffecc94>
   accbc:	18bff916 	blt	r3,r2,acca4 <__alt_data_end+0xfffecca4>
   accc0:	10c00316 	blt	r2,r3,accd0 <__gedf2+0xc4>
   accc4:	42bff736 	bltu	r8,r10,acca4 <__alt_data_end+0xfffecca4>
   accc8:	52000326 	beq	r10,r8,accd8 <__gedf2+0xcc>
   acccc:	5200042e 	bgeu	r10,r8,acce0 <__gedf2+0xd4>
   accd0:	283fec1e 	bne	r5,zero,acc84 <__alt_data_end+0xfffecc84>
   accd4:	003ff406 	br	acca8 <__alt_data_end+0xfffecca8>
   accd8:	313ff236 	bltu	r6,r4,acca4 <__alt_data_end+0xfffecca4>
   accdc:	21bffc36 	bltu	r4,r6,accd0 <__alt_data_end+0xfffeccd0>
   acce0:	0005883a 	mov	r2,zero
   acce4:	f800283a 	ret

000acce8 <__ledf2>:
   acce8:	2804d53a 	srli	r2,r5,20
   accec:	3810d53a 	srli	r8,r7,20
   accf0:	00c00434 	movhi	r3,16
   accf4:	18ffffc4 	addi	r3,r3,-1
   accf8:	1081ffcc 	andi	r2,r2,2047
   accfc:	0241ffc4 	movi	r9,2047
   acd00:	28d4703a 	and	r10,r5,r3
   acd04:	4201ffcc 	andi	r8,r8,2047
   acd08:	38c6703a 	and	r3,r7,r3
   acd0c:	280ad7fa 	srli	r5,r5,31
   acd10:	380ed7fa 	srli	r7,r7,31
   acd14:	12401f26 	beq	r2,r9,acd94 <__ledf2+0xac>
   acd18:	0241ffc4 	movi	r9,2047
   acd1c:	42401426 	beq	r8,r9,acd70 <__ledf2+0x88>
   acd20:	1000091e 	bne	r2,zero,acd48 <__ledf2+0x60>
   acd24:	2296b03a 	or	r11,r4,r10
   acd28:	5813003a 	cmpeq	r9,r11,zero
   acd2c:	29403fcc 	andi	r5,r5,255
   acd30:	40000a1e 	bne	r8,zero,acd5c <__ledf2+0x74>
   acd34:	30d8b03a 	or	r12,r6,r3
   acd38:	6000081e 	bne	r12,zero,acd5c <__ledf2+0x74>
   acd3c:	0005883a 	mov	r2,zero
   acd40:	5800111e 	bne	r11,zero,acd88 <__ledf2+0xa0>
   acd44:	f800283a 	ret
   acd48:	29403fcc 	andi	r5,r5,255
   acd4c:	40000c1e 	bne	r8,zero,acd80 <__ledf2+0x98>
   acd50:	30d2b03a 	or	r9,r6,r3
   acd54:	48000c26 	beq	r9,zero,acd88 <__ledf2+0xa0>
   acd58:	0013883a 	mov	r9,zero
   acd5c:	39c03fcc 	andi	r7,r7,255
   acd60:	48000826 	beq	r9,zero,acd84 <__ledf2+0x9c>
   acd64:	38001126 	beq	r7,zero,acdac <__ledf2+0xc4>
   acd68:	00800044 	movi	r2,1
   acd6c:	f800283a 	ret
   acd70:	30d2b03a 	or	r9,r6,r3
   acd74:	483fea26 	beq	r9,zero,acd20 <__alt_data_end+0xfffecd20>
   acd78:	00800084 	movi	r2,2
   acd7c:	f800283a 	ret
   acd80:	39c03fcc 	andi	r7,r7,255
   acd84:	39400726 	beq	r7,r5,acda4 <__ledf2+0xbc>
   acd88:	2800081e 	bne	r5,zero,acdac <__ledf2+0xc4>
   acd8c:	00800044 	movi	r2,1
   acd90:	f800283a 	ret
   acd94:	2292b03a 	or	r9,r4,r10
   acd98:	483fdf26 	beq	r9,zero,acd18 <__alt_data_end+0xfffecd18>
   acd9c:	00800084 	movi	r2,2
   acda0:	f800283a 	ret
   acda4:	4080030e 	bge	r8,r2,acdb4 <__ledf2+0xcc>
   acda8:	383fef26 	beq	r7,zero,acd68 <__alt_data_end+0xfffecd68>
   acdac:	00bfffc4 	movi	r2,-1
   acdb0:	f800283a 	ret
   acdb4:	123feb16 	blt	r2,r8,acd64 <__alt_data_end+0xfffecd64>
   acdb8:	1abff336 	bltu	r3,r10,acd88 <__alt_data_end+0xfffecd88>
   acdbc:	50c00326 	beq	r10,r3,acdcc <__ledf2+0xe4>
   acdc0:	50c0042e 	bgeu	r10,r3,acdd4 <__ledf2+0xec>
   acdc4:	283fe81e 	bne	r5,zero,acd68 <__alt_data_end+0xfffecd68>
   acdc8:	003ff806 	br	acdac <__alt_data_end+0xfffecdac>
   acdcc:	313fee36 	bltu	r6,r4,acd88 <__alt_data_end+0xfffecd88>
   acdd0:	21bffc36 	bltu	r4,r6,acdc4 <__alt_data_end+0xfffecdc4>
   acdd4:	0005883a 	mov	r2,zero
   acdd8:	f800283a 	ret

000acddc <__muldf3>:
   acddc:	deffee04 	addi	sp,sp,-72
   acde0:	dd000c15 	stw	r20,48(sp)
   acde4:	2828d53a 	srli	r20,r5,20
   acde8:	ddc00f15 	stw	r23,60(sp)
   acdec:	282ed7fa 	srli	r23,r5,31
   acdf0:	dc000815 	stw	r16,32(sp)
   acdf4:	04000434 	movhi	r16,16
   acdf8:	dcc00b15 	stw	r19,44(sp)
   acdfc:	843fffc4 	addi	r16,r16,-1
   ace00:	dfc01115 	stw	ra,68(sp)
   ace04:	df001015 	stw	fp,64(sp)
   ace08:	dd800e15 	stw	r22,56(sp)
   ace0c:	dd400d15 	stw	r21,52(sp)
   ace10:	dc800a15 	stw	r18,40(sp)
   ace14:	dc400915 	stw	r17,36(sp)
   ace18:	a501ffcc 	andi	r20,r20,2047
   ace1c:	2c20703a 	and	r16,r5,r16
   ace20:	b827883a 	mov	r19,r23
   ace24:	ba403fcc 	andi	r9,r23,255
   ace28:	a0006026 	beq	r20,zero,acfac <__muldf3+0x1d0>
   ace2c:	0081ffc4 	movi	r2,2047
   ace30:	202d883a 	mov	r22,r4
   ace34:	a0803626 	beq	r20,r2,acf10 <__muldf3+0x134>
   ace38:	84000434 	orhi	r16,r16,16
   ace3c:	200ad77a 	srli	r5,r4,29
   ace40:	800490fa 	slli	r2,r16,3
   ace44:	202c90fa 	slli	r22,r4,3
   ace48:	a53f0044 	addi	r20,r20,-1023
   ace4c:	28a0b03a 	or	r16,r5,r2
   ace50:	002b883a 	mov	r21,zero
   ace54:	000b883a 	mov	r5,zero
   ace58:	3804d53a 	srli	r2,r7,20
   ace5c:	3838d7fa 	srli	fp,r7,31
   ace60:	04400434 	movhi	r17,16
   ace64:	8c7fffc4 	addi	r17,r17,-1
   ace68:	1081ffcc 	andi	r2,r2,2047
   ace6c:	3025883a 	mov	r18,r6
   ace70:	3c62703a 	and	r17,r7,r17
   ace74:	e2803fcc 	andi	r10,fp,255
   ace78:	10006d26 	beq	r2,zero,ad030 <__muldf3+0x254>
   ace7c:	00c1ffc4 	movi	r3,2047
   ace80:	10c06526 	beq	r2,r3,ad018 <__muldf3+0x23c>
   ace84:	8c400434 	orhi	r17,r17,16
   ace88:	300ed77a 	srli	r7,r6,29
   ace8c:	880690fa 	slli	r3,r17,3
   ace90:	302490fa 	slli	r18,r6,3
   ace94:	10bf0044 	addi	r2,r2,-1023
   ace98:	38e2b03a 	or	r17,r7,r3
   ace9c:	000f883a 	mov	r7,zero
   acea0:	a087883a 	add	r3,r20,r2
   acea4:	010003c4 	movi	r4,15
   acea8:	3d44b03a 	or	r2,r7,r21
   aceac:	e5ccf03a 	xor	r6,fp,r23
   aceb0:	1a000044 	addi	r8,r3,1
   aceb4:	20809b36 	bltu	r4,r2,ad124 <__muldf3+0x348>
   aceb8:	100490ba 	slli	r2,r2,2
   acebc:	010002f4 	movhi	r4,11
   acec0:	2133b404 	addi	r4,r4,-12592
   acec4:	1105883a 	add	r2,r2,r4
   acec8:	10800017 	ldw	r2,0(r2)
   acecc:	1000683a 	jmp	r2
   aced0:	000ad124 	muli	zero,zero,11076
   aced4:	000acf30 	cmpltui	zero,zero,11068
   aced8:	000acf30 	cmpltui	zero,zero,11068
   acedc:	000acf2c 	andhi	zero,zero,11068
   acee0:	000ad100 	call	ad10 <__alt_mem_sdram_controller+0xad10>
   acee4:	000ad100 	call	ad10 <__alt_mem_sdram_controller+0xad10>
   acee8:	000ad0e8 	cmpgeui	zero,zero,11075
   aceec:	000acf2c 	andhi	zero,zero,11068
   acef0:	000ad100 	call	ad10 <__alt_mem_sdram_controller+0xad10>
   acef4:	000ad0e8 	cmpgeui	zero,zero,11075
   acef8:	000ad100 	call	ad10 <__alt_mem_sdram_controller+0xad10>
   acefc:	000acf2c 	andhi	zero,zero,11068
   acf00:	000ad110 	cmplti	zero,zero,11076
   acf04:	000ad110 	cmplti	zero,zero,11076
   acf08:	000ad110 	cmplti	zero,zero,11076
   acf0c:	000ad470 	cmpltui	zero,zero,11089
   acf10:	2404b03a 	or	r2,r4,r16
   acf14:	1000711e 	bne	r2,zero,ad0dc <__muldf3+0x300>
   acf18:	05400204 	movi	r21,8
   acf1c:	0021883a 	mov	r16,zero
   acf20:	002d883a 	mov	r22,zero
   acf24:	01400084 	movi	r5,2
   acf28:	003fcb06 	br	ace58 <__alt_data_end+0xfffece58>
   acf2c:	500d883a 	mov	r6,r10
   acf30:	00800084 	movi	r2,2
   acf34:	38805926 	beq	r7,r2,ad09c <__muldf3+0x2c0>
   acf38:	008000c4 	movi	r2,3
   acf3c:	3881bb26 	beq	r7,r2,ad62c <__muldf3+0x850>
   acf40:	00800044 	movi	r2,1
   acf44:	3881961e 	bne	r7,r2,ad5a0 <__muldf3+0x7c4>
   acf48:	3027883a 	mov	r19,r6
   acf4c:	0005883a 	mov	r2,zero
   acf50:	0021883a 	mov	r16,zero
   acf54:	002d883a 	mov	r22,zero
   acf58:	1004953a 	slli	r2,r2,20
   acf5c:	98c03fcc 	andi	r3,r19,255
   acf60:	04400434 	movhi	r17,16
   acf64:	8c7fffc4 	addi	r17,r17,-1
   acf68:	180697fa 	slli	r3,r3,31
   acf6c:	8460703a 	and	r16,r16,r17
   acf70:	80a0b03a 	or	r16,r16,r2
   acf74:	80c6b03a 	or	r3,r16,r3
   acf78:	b005883a 	mov	r2,r22
   acf7c:	dfc01117 	ldw	ra,68(sp)
   acf80:	df001017 	ldw	fp,64(sp)
   acf84:	ddc00f17 	ldw	r23,60(sp)
   acf88:	dd800e17 	ldw	r22,56(sp)
   acf8c:	dd400d17 	ldw	r21,52(sp)
   acf90:	dd000c17 	ldw	r20,48(sp)
   acf94:	dcc00b17 	ldw	r19,44(sp)
   acf98:	dc800a17 	ldw	r18,40(sp)
   acf9c:	dc400917 	ldw	r17,36(sp)
   acfa0:	dc000817 	ldw	r16,32(sp)
   acfa4:	dec01204 	addi	sp,sp,72
   acfa8:	f800283a 	ret
   acfac:	2404b03a 	or	r2,r4,r16
   acfb0:	202b883a 	mov	r21,r4
   acfb4:	10004426 	beq	r2,zero,ad0c8 <__muldf3+0x2ec>
   acfb8:	80015126 	beq	r16,zero,ad500 <__muldf3+0x724>
   acfbc:	8009883a 	mov	r4,r16
   acfc0:	d9800715 	stw	r6,28(sp)
   acfc4:	d9c00215 	stw	r7,8(sp)
   acfc8:	da400415 	stw	r9,16(sp)
   acfcc:	00ae1480 	call	ae148 <__clzsi2>
   acfd0:	d9800717 	ldw	r6,28(sp)
   acfd4:	d9c00217 	ldw	r7,8(sp)
   acfd8:	da400417 	ldw	r9,16(sp)
   acfdc:	113ffd44 	addi	r4,r2,-11
   acfe0:	00c00704 	movi	r3,28
   acfe4:	19014216 	blt	r3,r4,ad4f0 <__muldf3+0x714>
   acfe8:	00c00744 	movi	r3,29
   acfec:	15bffe04 	addi	r22,r2,-8
   acff0:	1907c83a 	sub	r3,r3,r4
   acff4:	85a0983a 	sll	r16,r16,r22
   acff8:	a8c6d83a 	srl	r3,r21,r3
   acffc:	adac983a 	sll	r22,r21,r22
   ad000:	1c20b03a 	or	r16,r3,r16
   ad004:	1080fcc4 	addi	r2,r2,1011
   ad008:	00a9c83a 	sub	r20,zero,r2
   ad00c:	002b883a 	mov	r21,zero
   ad010:	000b883a 	mov	r5,zero
   ad014:	003f9006 	br	ace58 <__alt_data_end+0xfffece58>
   ad018:	3446b03a 	or	r3,r6,r17
   ad01c:	1800281e 	bne	r3,zero,ad0c0 <__muldf3+0x2e4>
   ad020:	0023883a 	mov	r17,zero
   ad024:	0025883a 	mov	r18,zero
   ad028:	01c00084 	movi	r7,2
   ad02c:	003f9c06 	br	acea0 <__alt_data_end+0xfffecea0>
   ad030:	3446b03a 	or	r3,r6,r17
   ad034:	18001e26 	beq	r3,zero,ad0b0 <__muldf3+0x2d4>
   ad038:	88012126 	beq	r17,zero,ad4c0 <__muldf3+0x6e4>
   ad03c:	8809883a 	mov	r4,r17
   ad040:	d9400215 	stw	r5,8(sp)
   ad044:	d9800715 	stw	r6,28(sp)
   ad048:	da400415 	stw	r9,16(sp)
   ad04c:	da800315 	stw	r10,12(sp)
   ad050:	00ae1480 	call	ae148 <__clzsi2>
   ad054:	d9400217 	ldw	r5,8(sp)
   ad058:	d9800717 	ldw	r6,28(sp)
   ad05c:	da400417 	ldw	r9,16(sp)
   ad060:	da800317 	ldw	r10,12(sp)
   ad064:	113ffd44 	addi	r4,r2,-11
   ad068:	00c00704 	movi	r3,28
   ad06c:	19011016 	blt	r3,r4,ad4b0 <__muldf3+0x6d4>
   ad070:	00c00744 	movi	r3,29
   ad074:	14bffe04 	addi	r18,r2,-8
   ad078:	1907c83a 	sub	r3,r3,r4
   ad07c:	8ca2983a 	sll	r17,r17,r18
   ad080:	30c6d83a 	srl	r3,r6,r3
   ad084:	34a4983a 	sll	r18,r6,r18
   ad088:	1c62b03a 	or	r17,r3,r17
   ad08c:	1080fcc4 	addi	r2,r2,1011
   ad090:	0085c83a 	sub	r2,zero,r2
   ad094:	000f883a 	mov	r7,zero
   ad098:	003f8106 	br	acea0 <__alt_data_end+0xfffecea0>
   ad09c:	3027883a 	mov	r19,r6
   ad0a0:	0081ffc4 	movi	r2,2047
   ad0a4:	0021883a 	mov	r16,zero
   ad0a8:	002d883a 	mov	r22,zero
   ad0ac:	003faa06 	br	acf58 <__alt_data_end+0xfffecf58>
   ad0b0:	0023883a 	mov	r17,zero
   ad0b4:	0025883a 	mov	r18,zero
   ad0b8:	01c00044 	movi	r7,1
   ad0bc:	003f7806 	br	acea0 <__alt_data_end+0xfffecea0>
   ad0c0:	01c000c4 	movi	r7,3
   ad0c4:	003f7606 	br	acea0 <__alt_data_end+0xfffecea0>
   ad0c8:	05400104 	movi	r21,4
   ad0cc:	0021883a 	mov	r16,zero
   ad0d0:	002d883a 	mov	r22,zero
   ad0d4:	01400044 	movi	r5,1
   ad0d8:	003f5f06 	br	ace58 <__alt_data_end+0xfffece58>
   ad0dc:	05400304 	movi	r21,12
   ad0e0:	014000c4 	movi	r5,3
   ad0e4:	003f5c06 	br	ace58 <__alt_data_end+0xfffece58>
   ad0e8:	04000434 	movhi	r16,16
   ad0ec:	0027883a 	mov	r19,zero
   ad0f0:	843fffc4 	addi	r16,r16,-1
   ad0f4:	05bfffc4 	movi	r22,-1
   ad0f8:	0081ffc4 	movi	r2,2047
   ad0fc:	003f9606 	br	acf58 <__alt_data_end+0xfffecf58>
   ad100:	8023883a 	mov	r17,r16
   ad104:	b025883a 	mov	r18,r22
   ad108:	280f883a 	mov	r7,r5
   ad10c:	003f8806 	br	acf30 <__alt_data_end+0xfffecf30>
   ad110:	8023883a 	mov	r17,r16
   ad114:	b025883a 	mov	r18,r22
   ad118:	480d883a 	mov	r6,r9
   ad11c:	280f883a 	mov	r7,r5
   ad120:	003f8306 	br	acf30 <__alt_data_end+0xfffecf30>
   ad124:	b026d43a 	srli	r19,r22,16
   ad128:	902ed43a 	srli	r23,r18,16
   ad12c:	b5bfffcc 	andi	r22,r22,65535
   ad130:	94bfffcc 	andi	r18,r18,65535
   ad134:	b00b883a 	mov	r5,r22
   ad138:	9009883a 	mov	r4,r18
   ad13c:	d8c00515 	stw	r3,20(sp)
   ad140:	d9800715 	stw	r6,28(sp)
   ad144:	da000615 	stw	r8,24(sp)
   ad148:	00ab8e00 	call	ab8e0 <__mulsi3>
   ad14c:	980b883a 	mov	r5,r19
   ad150:	9009883a 	mov	r4,r18
   ad154:	1029883a 	mov	r20,r2
   ad158:	00ab8e00 	call	ab8e0 <__mulsi3>
   ad15c:	b80b883a 	mov	r5,r23
   ad160:	9809883a 	mov	r4,r19
   ad164:	102b883a 	mov	r21,r2
   ad168:	00ab8e00 	call	ab8e0 <__mulsi3>
   ad16c:	b809883a 	mov	r4,r23
   ad170:	b00b883a 	mov	r5,r22
   ad174:	1039883a 	mov	fp,r2
   ad178:	00ab8e00 	call	ab8e0 <__mulsi3>
   ad17c:	a008d43a 	srli	r4,r20,16
   ad180:	1545883a 	add	r2,r2,r21
   ad184:	d8c00517 	ldw	r3,20(sp)
   ad188:	2085883a 	add	r2,r4,r2
   ad18c:	d9800717 	ldw	r6,28(sp)
   ad190:	da000617 	ldw	r8,24(sp)
   ad194:	1540022e 	bgeu	r2,r21,ad1a0 <__muldf3+0x3c4>
   ad198:	01000074 	movhi	r4,1
   ad19c:	e139883a 	add	fp,fp,r4
   ad1a0:	100e943a 	slli	r7,r2,16
   ad1a4:	1004d43a 	srli	r2,r2,16
   ad1a8:	882ad43a 	srli	r21,r17,16
   ad1ac:	a53fffcc 	andi	r20,r20,65535
   ad1b0:	8c7fffcc 	andi	r17,r17,65535
   ad1b4:	3d29883a 	add	r20,r7,r20
   ad1b8:	b00b883a 	mov	r5,r22
   ad1bc:	8809883a 	mov	r4,r17
   ad1c0:	d8c00515 	stw	r3,20(sp)
   ad1c4:	d9800715 	stw	r6,28(sp)
   ad1c8:	da000615 	stw	r8,24(sp)
   ad1cc:	dd000115 	stw	r20,4(sp)
   ad1d0:	d8800015 	stw	r2,0(sp)
   ad1d4:	00ab8e00 	call	ab8e0 <__mulsi3>
   ad1d8:	980b883a 	mov	r5,r19
   ad1dc:	8809883a 	mov	r4,r17
   ad1e0:	d8800215 	stw	r2,8(sp)
   ad1e4:	00ab8e00 	call	ab8e0 <__mulsi3>
   ad1e8:	9809883a 	mov	r4,r19
   ad1ec:	a80b883a 	mov	r5,r21
   ad1f0:	1029883a 	mov	r20,r2
   ad1f4:	00ab8e00 	call	ab8e0 <__mulsi3>
   ad1f8:	b00b883a 	mov	r5,r22
   ad1fc:	a809883a 	mov	r4,r21
   ad200:	d8800415 	stw	r2,16(sp)
   ad204:	00ab8e00 	call	ab8e0 <__mulsi3>
   ad208:	d9c00217 	ldw	r7,8(sp)
   ad20c:	1505883a 	add	r2,r2,r20
   ad210:	d8c00517 	ldw	r3,20(sp)
   ad214:	3826d43a 	srli	r19,r7,16
   ad218:	d9800717 	ldw	r6,28(sp)
   ad21c:	da000617 	ldw	r8,24(sp)
   ad220:	9885883a 	add	r2,r19,r2
   ad224:	da400417 	ldw	r9,16(sp)
   ad228:	1500022e 	bgeu	r2,r20,ad234 <__muldf3+0x458>
   ad22c:	01000074 	movhi	r4,1
   ad230:	4913883a 	add	r9,r9,r4
   ad234:	1028d43a 	srli	r20,r2,16
   ad238:	1004943a 	slli	r2,r2,16
   ad23c:	802cd43a 	srli	r22,r16,16
   ad240:	843fffcc 	andi	r16,r16,65535
   ad244:	3cffffcc 	andi	r19,r7,65535
   ad248:	9009883a 	mov	r4,r18
   ad24c:	800b883a 	mov	r5,r16
   ad250:	a269883a 	add	r20,r20,r9
   ad254:	d8c00515 	stw	r3,20(sp)
   ad258:	d9800715 	stw	r6,28(sp)
   ad25c:	da000615 	stw	r8,24(sp)
   ad260:	14e7883a 	add	r19,r2,r19
   ad264:	00ab8e00 	call	ab8e0 <__mulsi3>
   ad268:	9009883a 	mov	r4,r18
   ad26c:	b00b883a 	mov	r5,r22
   ad270:	d8800315 	stw	r2,12(sp)
   ad274:	00ab8e00 	call	ab8e0 <__mulsi3>
   ad278:	b809883a 	mov	r4,r23
   ad27c:	b00b883a 	mov	r5,r22
   ad280:	d8800215 	stw	r2,8(sp)
   ad284:	00ab8e00 	call	ab8e0 <__mulsi3>
   ad288:	b80b883a 	mov	r5,r23
   ad28c:	8009883a 	mov	r4,r16
   ad290:	d8800415 	stw	r2,16(sp)
   ad294:	00ab8e00 	call	ab8e0 <__mulsi3>
   ad298:	da800317 	ldw	r10,12(sp)
   ad29c:	d9c00217 	ldw	r7,8(sp)
   ad2a0:	d9000017 	ldw	r4,0(sp)
   ad2a4:	502ed43a 	srli	r23,r10,16
   ad2a8:	11c5883a 	add	r2,r2,r7
   ad2ac:	24e5883a 	add	r18,r4,r19
   ad2b0:	b885883a 	add	r2,r23,r2
   ad2b4:	d8c00517 	ldw	r3,20(sp)
   ad2b8:	d9800717 	ldw	r6,28(sp)
   ad2bc:	da000617 	ldw	r8,24(sp)
   ad2c0:	da400417 	ldw	r9,16(sp)
   ad2c4:	11c0022e 	bgeu	r2,r7,ad2d0 <__muldf3+0x4f4>
   ad2c8:	01000074 	movhi	r4,1
   ad2cc:	4913883a 	add	r9,r9,r4
   ad2d0:	100ed43a 	srli	r7,r2,16
   ad2d4:	1004943a 	slli	r2,r2,16
   ad2d8:	55ffffcc 	andi	r23,r10,65535
   ad2dc:	3a53883a 	add	r9,r7,r9
   ad2e0:	8809883a 	mov	r4,r17
   ad2e4:	800b883a 	mov	r5,r16
   ad2e8:	d8c00515 	stw	r3,20(sp)
   ad2ec:	d9800715 	stw	r6,28(sp)
   ad2f0:	da000615 	stw	r8,24(sp)
   ad2f4:	da400415 	stw	r9,16(sp)
   ad2f8:	15ef883a 	add	r23,r2,r23
   ad2fc:	00ab8e00 	call	ab8e0 <__mulsi3>
   ad300:	8809883a 	mov	r4,r17
   ad304:	b00b883a 	mov	r5,r22
   ad308:	d8800215 	stw	r2,8(sp)
   ad30c:	00ab8e00 	call	ab8e0 <__mulsi3>
   ad310:	b00b883a 	mov	r5,r22
   ad314:	a809883a 	mov	r4,r21
   ad318:	d8800315 	stw	r2,12(sp)
   ad31c:	00ab8e00 	call	ab8e0 <__mulsi3>
   ad320:	8009883a 	mov	r4,r16
   ad324:	a80b883a 	mov	r5,r21
   ad328:	1023883a 	mov	r17,r2
   ad32c:	00ab8e00 	call	ab8e0 <__mulsi3>
   ad330:	d9c00217 	ldw	r7,8(sp)
   ad334:	da800317 	ldw	r10,12(sp)
   ad338:	d8c00517 	ldw	r3,20(sp)
   ad33c:	3808d43a 	srli	r4,r7,16
   ad340:	1285883a 	add	r2,r2,r10
   ad344:	d9800717 	ldw	r6,28(sp)
   ad348:	2085883a 	add	r2,r4,r2
   ad34c:	da000617 	ldw	r8,24(sp)
   ad350:	da400417 	ldw	r9,16(sp)
   ad354:	1280022e 	bgeu	r2,r10,ad360 <__muldf3+0x584>
   ad358:	01000074 	movhi	r4,1
   ad35c:	8923883a 	add	r17,r17,r4
   ad360:	1008943a 	slli	r4,r2,16
   ad364:	39ffffcc 	andi	r7,r7,65535
   ad368:	e4b9883a 	add	fp,fp,r18
   ad36c:	21cf883a 	add	r7,r4,r7
   ad370:	e4e7803a 	cmpltu	r19,fp,r19
   ad374:	3d0f883a 	add	r7,r7,r20
   ad378:	bf39883a 	add	fp,r23,fp
   ad37c:	99c9883a 	add	r4,r19,r7
   ad380:	e5ef803a 	cmpltu	r23,fp,r23
   ad384:	490b883a 	add	r5,r9,r4
   ad388:	1004d43a 	srli	r2,r2,16
   ad38c:	b965883a 	add	r18,r23,r5
   ad390:	24c9803a 	cmpltu	r4,r4,r19
   ad394:	3d29803a 	cmpltu	r20,r7,r20
   ad398:	a128b03a 	or	r20,r20,r4
   ad39c:	95ef803a 	cmpltu	r23,r18,r23
   ad3a0:	2a53803a 	cmpltu	r9,r5,r9
   ad3a4:	a0a9883a 	add	r20,r20,r2
   ad3a8:	4deeb03a 	or	r23,r9,r23
   ad3ac:	a5ef883a 	add	r23,r20,r23
   ad3b0:	bc63883a 	add	r17,r23,r17
   ad3b4:	e004927a 	slli	r2,fp,9
   ad3b8:	d9000117 	ldw	r4,4(sp)
   ad3bc:	882e927a 	slli	r23,r17,9
   ad3c0:	9022d5fa 	srli	r17,r18,23
   ad3c4:	e038d5fa 	srli	fp,fp,23
   ad3c8:	1104b03a 	or	r2,r2,r4
   ad3cc:	9024927a 	slli	r18,r18,9
   ad3d0:	1004c03a 	cmpne	r2,r2,zero
   ad3d4:	bc62b03a 	or	r17,r23,r17
   ad3d8:	1738b03a 	or	fp,r2,fp
   ad3dc:	8880402c 	andhi	r2,r17,256
   ad3e0:	e4a4b03a 	or	r18,fp,r18
   ad3e4:	10000726 	beq	r2,zero,ad404 <__muldf3+0x628>
   ad3e8:	9006d07a 	srli	r3,r18,1
   ad3ec:	880497fa 	slli	r2,r17,31
   ad3f0:	9480004c 	andi	r18,r18,1
   ad3f4:	8822d07a 	srli	r17,r17,1
   ad3f8:	1ca4b03a 	or	r18,r3,r18
   ad3fc:	14a4b03a 	or	r18,r2,r18
   ad400:	4007883a 	mov	r3,r8
   ad404:	1880ffc4 	addi	r2,r3,1023
   ad408:	0080460e 	bge	zero,r2,ad524 <__muldf3+0x748>
   ad40c:	910001cc 	andi	r4,r18,7
   ad410:	20000726 	beq	r4,zero,ad430 <__muldf3+0x654>
   ad414:	910003cc 	andi	r4,r18,15
   ad418:	01400104 	movi	r5,4
   ad41c:	21400426 	beq	r4,r5,ad430 <__muldf3+0x654>
   ad420:	9149883a 	add	r4,r18,r5
   ad424:	24a5803a 	cmpltu	r18,r4,r18
   ad428:	8ca3883a 	add	r17,r17,r18
   ad42c:	2025883a 	mov	r18,r4
   ad430:	8900402c 	andhi	r4,r17,256
   ad434:	20000426 	beq	r4,zero,ad448 <__muldf3+0x66c>
   ad438:	18810004 	addi	r2,r3,1024
   ad43c:	00ffc034 	movhi	r3,65280
   ad440:	18ffffc4 	addi	r3,r3,-1
   ad444:	88e2703a 	and	r17,r17,r3
   ad448:	00c1ff84 	movi	r3,2046
   ad44c:	18bf1316 	blt	r3,r2,ad09c <__alt_data_end+0xfffed09c>
   ad450:	882c977a 	slli	r22,r17,29
   ad454:	9024d0fa 	srli	r18,r18,3
   ad458:	8822927a 	slli	r17,r17,9
   ad45c:	1081ffcc 	andi	r2,r2,2047
   ad460:	b4acb03a 	or	r22,r22,r18
   ad464:	8820d33a 	srli	r16,r17,12
   ad468:	3027883a 	mov	r19,r6
   ad46c:	003eba06 	br	acf58 <__alt_data_end+0xfffecf58>
   ad470:	8080022c 	andhi	r2,r16,8
   ad474:	10000926 	beq	r2,zero,ad49c <__muldf3+0x6c0>
   ad478:	8880022c 	andhi	r2,r17,8
   ad47c:	1000071e 	bne	r2,zero,ad49c <__muldf3+0x6c0>
   ad480:	00800434 	movhi	r2,16
   ad484:	8c000234 	orhi	r16,r17,8
   ad488:	10bfffc4 	addi	r2,r2,-1
   ad48c:	e027883a 	mov	r19,fp
   ad490:	80a0703a 	and	r16,r16,r2
   ad494:	902d883a 	mov	r22,r18
   ad498:	003f1706 	br	ad0f8 <__alt_data_end+0xfffed0f8>
   ad49c:	00800434 	movhi	r2,16
   ad4a0:	84000234 	orhi	r16,r16,8
   ad4a4:	10bfffc4 	addi	r2,r2,-1
   ad4a8:	80a0703a 	and	r16,r16,r2
   ad4ac:	003f1206 	br	ad0f8 <__alt_data_end+0xfffed0f8>
   ad4b0:	147ff604 	addi	r17,r2,-40
   ad4b4:	3462983a 	sll	r17,r6,r17
   ad4b8:	0025883a 	mov	r18,zero
   ad4bc:	003ef306 	br	ad08c <__alt_data_end+0xfffed08c>
   ad4c0:	3009883a 	mov	r4,r6
   ad4c4:	d9400215 	stw	r5,8(sp)
   ad4c8:	d9800715 	stw	r6,28(sp)
   ad4cc:	da400415 	stw	r9,16(sp)
   ad4d0:	da800315 	stw	r10,12(sp)
   ad4d4:	00ae1480 	call	ae148 <__clzsi2>
   ad4d8:	10800804 	addi	r2,r2,32
   ad4dc:	da800317 	ldw	r10,12(sp)
   ad4e0:	da400417 	ldw	r9,16(sp)
   ad4e4:	d9800717 	ldw	r6,28(sp)
   ad4e8:	d9400217 	ldw	r5,8(sp)
   ad4ec:	003edd06 	br	ad064 <__alt_data_end+0xfffed064>
   ad4f0:	143ff604 	addi	r16,r2,-40
   ad4f4:	ac20983a 	sll	r16,r21,r16
   ad4f8:	002d883a 	mov	r22,zero
   ad4fc:	003ec106 	br	ad004 <__alt_data_end+0xfffed004>
   ad500:	d9800715 	stw	r6,28(sp)
   ad504:	d9c00215 	stw	r7,8(sp)
   ad508:	da400415 	stw	r9,16(sp)
   ad50c:	00ae1480 	call	ae148 <__clzsi2>
   ad510:	10800804 	addi	r2,r2,32
   ad514:	da400417 	ldw	r9,16(sp)
   ad518:	d9c00217 	ldw	r7,8(sp)
   ad51c:	d9800717 	ldw	r6,28(sp)
   ad520:	003eae06 	br	acfdc <__alt_data_end+0xfffecfdc>
   ad524:	00c00044 	movi	r3,1
   ad528:	1887c83a 	sub	r3,r3,r2
   ad52c:	01000e04 	movi	r4,56
   ad530:	20fe8516 	blt	r4,r3,acf48 <__alt_data_end+0xfffecf48>
   ad534:	010007c4 	movi	r4,31
   ad538:	20c01b16 	blt	r4,r3,ad5a8 <__muldf3+0x7cc>
   ad53c:	00800804 	movi	r2,32
   ad540:	10c5c83a 	sub	r2,r2,r3
   ad544:	888a983a 	sll	r5,r17,r2
   ad548:	90c8d83a 	srl	r4,r18,r3
   ad54c:	9084983a 	sll	r2,r18,r2
   ad550:	88e2d83a 	srl	r17,r17,r3
   ad554:	2906b03a 	or	r3,r5,r4
   ad558:	1004c03a 	cmpne	r2,r2,zero
   ad55c:	1886b03a 	or	r3,r3,r2
   ad560:	188001cc 	andi	r2,r3,7
   ad564:	10000726 	beq	r2,zero,ad584 <__muldf3+0x7a8>
   ad568:	188003cc 	andi	r2,r3,15
   ad56c:	01000104 	movi	r4,4
   ad570:	11000426 	beq	r2,r4,ad584 <__muldf3+0x7a8>
   ad574:	1805883a 	mov	r2,r3
   ad578:	10c00104 	addi	r3,r2,4
   ad57c:	1885803a 	cmpltu	r2,r3,r2
   ad580:	88a3883a 	add	r17,r17,r2
   ad584:	8880202c 	andhi	r2,r17,128
   ad588:	10001c26 	beq	r2,zero,ad5fc <__muldf3+0x820>
   ad58c:	3027883a 	mov	r19,r6
   ad590:	00800044 	movi	r2,1
   ad594:	0021883a 	mov	r16,zero
   ad598:	002d883a 	mov	r22,zero
   ad59c:	003e6e06 	br	acf58 <__alt_data_end+0xfffecf58>
   ad5a0:	4007883a 	mov	r3,r8
   ad5a4:	003f9706 	br	ad404 <__alt_data_end+0xfffed404>
   ad5a8:	017ff844 	movi	r5,-31
   ad5ac:	2885c83a 	sub	r2,r5,r2
   ad5b0:	888ad83a 	srl	r5,r17,r2
   ad5b4:	00800804 	movi	r2,32
   ad5b8:	18801a26 	beq	r3,r2,ad624 <__muldf3+0x848>
   ad5bc:	01001004 	movi	r4,64
   ad5c0:	20c7c83a 	sub	r3,r4,r3
   ad5c4:	88e2983a 	sll	r17,r17,r3
   ad5c8:	8ca4b03a 	or	r18,r17,r18
   ad5cc:	9004c03a 	cmpne	r2,r18,zero
   ad5d0:	2884b03a 	or	r2,r5,r2
   ad5d4:	144001cc 	andi	r17,r2,7
   ad5d8:	88000d1e 	bne	r17,zero,ad610 <__muldf3+0x834>
   ad5dc:	0021883a 	mov	r16,zero
   ad5e0:	102cd0fa 	srli	r22,r2,3
   ad5e4:	3027883a 	mov	r19,r6
   ad5e8:	0005883a 	mov	r2,zero
   ad5ec:	b46cb03a 	or	r22,r22,r17
   ad5f0:	003e5906 	br	acf58 <__alt_data_end+0xfffecf58>
   ad5f4:	1007883a 	mov	r3,r2
   ad5f8:	0023883a 	mov	r17,zero
   ad5fc:	8820927a 	slli	r16,r17,9
   ad600:	1805883a 	mov	r2,r3
   ad604:	8822977a 	slli	r17,r17,29
   ad608:	8020d33a 	srli	r16,r16,12
   ad60c:	003ff406 	br	ad5e0 <__alt_data_end+0xfffed5e0>
   ad610:	10c003cc 	andi	r3,r2,15
   ad614:	01000104 	movi	r4,4
   ad618:	193ff626 	beq	r3,r4,ad5f4 <__alt_data_end+0xfffed5f4>
   ad61c:	0023883a 	mov	r17,zero
   ad620:	003fd506 	br	ad578 <__alt_data_end+0xfffed578>
   ad624:	0023883a 	mov	r17,zero
   ad628:	003fe706 	br	ad5c8 <__alt_data_end+0xfffed5c8>
   ad62c:	00800434 	movhi	r2,16
   ad630:	8c000234 	orhi	r16,r17,8
   ad634:	10bfffc4 	addi	r2,r2,-1
   ad638:	3027883a 	mov	r19,r6
   ad63c:	80a0703a 	and	r16,r16,r2
   ad640:	902d883a 	mov	r22,r18
   ad644:	003eac06 	br	ad0f8 <__alt_data_end+0xfffed0f8>

000ad648 <__subdf3>:
   ad648:	02000434 	movhi	r8,16
   ad64c:	423fffc4 	addi	r8,r8,-1
   ad650:	defffb04 	addi	sp,sp,-20
   ad654:	2a14703a 	and	r10,r5,r8
   ad658:	3812d53a 	srli	r9,r7,20
   ad65c:	3a10703a 	and	r8,r7,r8
   ad660:	2006d77a 	srli	r3,r4,29
   ad664:	3004d77a 	srli	r2,r6,29
   ad668:	dc000015 	stw	r16,0(sp)
   ad66c:	501490fa 	slli	r10,r10,3
   ad670:	2820d53a 	srli	r16,r5,20
   ad674:	401090fa 	slli	r8,r8,3
   ad678:	dc800215 	stw	r18,8(sp)
   ad67c:	dc400115 	stw	r17,4(sp)
   ad680:	dfc00415 	stw	ra,16(sp)
   ad684:	202290fa 	slli	r17,r4,3
   ad688:	dcc00315 	stw	r19,12(sp)
   ad68c:	4a41ffcc 	andi	r9,r9,2047
   ad690:	0101ffc4 	movi	r4,2047
   ad694:	2824d7fa 	srli	r18,r5,31
   ad698:	8401ffcc 	andi	r16,r16,2047
   ad69c:	50c6b03a 	or	r3,r10,r3
   ad6a0:	380ed7fa 	srli	r7,r7,31
   ad6a4:	408ab03a 	or	r5,r8,r2
   ad6a8:	300c90fa 	slli	r6,r6,3
   ad6ac:	49009626 	beq	r9,r4,ad908 <__subdf3+0x2c0>
   ad6b0:	39c0005c 	xori	r7,r7,1
   ad6b4:	8245c83a 	sub	r2,r16,r9
   ad6b8:	3c807426 	beq	r7,r18,ad88c <__subdf3+0x244>
   ad6bc:	0080af0e 	bge	zero,r2,ad97c <__subdf3+0x334>
   ad6c0:	48002a1e 	bne	r9,zero,ad76c <__subdf3+0x124>
   ad6c4:	2988b03a 	or	r4,r5,r6
   ad6c8:	20009a1e 	bne	r4,zero,ad934 <__subdf3+0x2ec>
   ad6cc:	888001cc 	andi	r2,r17,7
   ad6d0:	10000726 	beq	r2,zero,ad6f0 <__subdf3+0xa8>
   ad6d4:	888003cc 	andi	r2,r17,15
   ad6d8:	01000104 	movi	r4,4
   ad6dc:	11000426 	beq	r2,r4,ad6f0 <__subdf3+0xa8>
   ad6e0:	890b883a 	add	r5,r17,r4
   ad6e4:	2c63803a 	cmpltu	r17,r5,r17
   ad6e8:	1c47883a 	add	r3,r3,r17
   ad6ec:	2823883a 	mov	r17,r5
   ad6f0:	1880202c 	andhi	r2,r3,128
   ad6f4:	10005926 	beq	r2,zero,ad85c <__subdf3+0x214>
   ad6f8:	84000044 	addi	r16,r16,1
   ad6fc:	0081ffc4 	movi	r2,2047
   ad700:	8080be26 	beq	r16,r2,ad9fc <__subdf3+0x3b4>
   ad704:	017fe034 	movhi	r5,65408
   ad708:	297fffc4 	addi	r5,r5,-1
   ad70c:	1946703a 	and	r3,r3,r5
   ad710:	1804977a 	slli	r2,r3,29
   ad714:	1806927a 	slli	r3,r3,9
   ad718:	8822d0fa 	srli	r17,r17,3
   ad71c:	8401ffcc 	andi	r16,r16,2047
   ad720:	180ad33a 	srli	r5,r3,12
   ad724:	9100004c 	andi	r4,r18,1
   ad728:	1444b03a 	or	r2,r2,r17
   ad72c:	80c1ffcc 	andi	r3,r16,2047
   ad730:	1820953a 	slli	r16,r3,20
   ad734:	20c03fcc 	andi	r3,r4,255
   ad738:	180897fa 	slli	r4,r3,31
   ad73c:	00c00434 	movhi	r3,16
   ad740:	18ffffc4 	addi	r3,r3,-1
   ad744:	28c6703a 	and	r3,r5,r3
   ad748:	1c06b03a 	or	r3,r3,r16
   ad74c:	1906b03a 	or	r3,r3,r4
   ad750:	dfc00417 	ldw	ra,16(sp)
   ad754:	dcc00317 	ldw	r19,12(sp)
   ad758:	dc800217 	ldw	r18,8(sp)
   ad75c:	dc400117 	ldw	r17,4(sp)
   ad760:	dc000017 	ldw	r16,0(sp)
   ad764:	dec00504 	addi	sp,sp,20
   ad768:	f800283a 	ret
   ad76c:	0101ffc4 	movi	r4,2047
   ad770:	813fd626 	beq	r16,r4,ad6cc <__alt_data_end+0xfffed6cc>
   ad774:	29402034 	orhi	r5,r5,128
   ad778:	01000e04 	movi	r4,56
   ad77c:	2080a316 	blt	r4,r2,ada0c <__subdf3+0x3c4>
   ad780:	010007c4 	movi	r4,31
   ad784:	2080c616 	blt	r4,r2,adaa0 <__subdf3+0x458>
   ad788:	01000804 	movi	r4,32
   ad78c:	2089c83a 	sub	r4,r4,r2
   ad790:	2910983a 	sll	r8,r5,r4
   ad794:	308ed83a 	srl	r7,r6,r2
   ad798:	3108983a 	sll	r4,r6,r4
   ad79c:	2884d83a 	srl	r2,r5,r2
   ad7a0:	41ccb03a 	or	r6,r8,r7
   ad7a4:	2008c03a 	cmpne	r4,r4,zero
   ad7a8:	310cb03a 	or	r6,r6,r4
   ad7ac:	898dc83a 	sub	r6,r17,r6
   ad7b0:	89a3803a 	cmpltu	r17,r17,r6
   ad7b4:	1887c83a 	sub	r3,r3,r2
   ad7b8:	1c47c83a 	sub	r3,r3,r17
   ad7bc:	3023883a 	mov	r17,r6
   ad7c0:	1880202c 	andhi	r2,r3,128
   ad7c4:	10002326 	beq	r2,zero,ad854 <__subdf3+0x20c>
   ad7c8:	04c02034 	movhi	r19,128
   ad7cc:	9cffffc4 	addi	r19,r19,-1
   ad7d0:	1ce6703a 	and	r19,r3,r19
   ad7d4:	98007a26 	beq	r19,zero,ad9c0 <__subdf3+0x378>
   ad7d8:	9809883a 	mov	r4,r19
   ad7dc:	00ae1480 	call	ae148 <__clzsi2>
   ad7e0:	113ffe04 	addi	r4,r2,-8
   ad7e4:	00c007c4 	movi	r3,31
   ad7e8:	19007b16 	blt	r3,r4,ad9d8 <__subdf3+0x390>
   ad7ec:	00800804 	movi	r2,32
   ad7f0:	1105c83a 	sub	r2,r2,r4
   ad7f4:	8884d83a 	srl	r2,r17,r2
   ad7f8:	9906983a 	sll	r3,r19,r4
   ad7fc:	8922983a 	sll	r17,r17,r4
   ad800:	10c4b03a 	or	r2,r2,r3
   ad804:	24007816 	blt	r4,r16,ad9e8 <__subdf3+0x3a0>
   ad808:	2421c83a 	sub	r16,r4,r16
   ad80c:	80c00044 	addi	r3,r16,1
   ad810:	010007c4 	movi	r4,31
   ad814:	20c09516 	blt	r4,r3,ada6c <__subdf3+0x424>
   ad818:	01400804 	movi	r5,32
   ad81c:	28cbc83a 	sub	r5,r5,r3
   ad820:	88c8d83a 	srl	r4,r17,r3
   ad824:	8962983a 	sll	r17,r17,r5
   ad828:	114a983a 	sll	r5,r2,r5
   ad82c:	10c6d83a 	srl	r3,r2,r3
   ad830:	8804c03a 	cmpne	r2,r17,zero
   ad834:	290ab03a 	or	r5,r5,r4
   ad838:	28a2b03a 	or	r17,r5,r2
   ad83c:	0021883a 	mov	r16,zero
   ad840:	003fa206 	br	ad6cc <__alt_data_end+0xfffed6cc>
   ad844:	2090b03a 	or	r8,r4,r2
   ad848:	40018e26 	beq	r8,zero,ade84 <__subdf3+0x83c>
   ad84c:	1007883a 	mov	r3,r2
   ad850:	2023883a 	mov	r17,r4
   ad854:	888001cc 	andi	r2,r17,7
   ad858:	103f9e1e 	bne	r2,zero,ad6d4 <__alt_data_end+0xfffed6d4>
   ad85c:	1804977a 	slli	r2,r3,29
   ad860:	8822d0fa 	srli	r17,r17,3
   ad864:	1810d0fa 	srli	r8,r3,3
   ad868:	9100004c 	andi	r4,r18,1
   ad86c:	1444b03a 	or	r2,r2,r17
   ad870:	00c1ffc4 	movi	r3,2047
   ad874:	80c02826 	beq	r16,r3,ad918 <__subdf3+0x2d0>
   ad878:	01400434 	movhi	r5,16
   ad87c:	297fffc4 	addi	r5,r5,-1
   ad880:	80e0703a 	and	r16,r16,r3
   ad884:	414a703a 	and	r5,r8,r5
   ad888:	003fa806 	br	ad72c <__alt_data_end+0xfffed72c>
   ad88c:	0080630e 	bge	zero,r2,ada1c <__subdf3+0x3d4>
   ad890:	48003026 	beq	r9,zero,ad954 <__subdf3+0x30c>
   ad894:	0101ffc4 	movi	r4,2047
   ad898:	813f8c26 	beq	r16,r4,ad6cc <__alt_data_end+0xfffed6cc>
   ad89c:	29402034 	orhi	r5,r5,128
   ad8a0:	01000e04 	movi	r4,56
   ad8a4:	2080a90e 	bge	r4,r2,adb4c <__subdf3+0x504>
   ad8a8:	298cb03a 	or	r6,r5,r6
   ad8ac:	3012c03a 	cmpne	r9,r6,zero
   ad8b0:	0005883a 	mov	r2,zero
   ad8b4:	4c53883a 	add	r9,r9,r17
   ad8b8:	4c63803a 	cmpltu	r17,r9,r17
   ad8bc:	10c7883a 	add	r3,r2,r3
   ad8c0:	88c7883a 	add	r3,r17,r3
   ad8c4:	4823883a 	mov	r17,r9
   ad8c8:	1880202c 	andhi	r2,r3,128
   ad8cc:	1000d026 	beq	r2,zero,adc10 <__subdf3+0x5c8>
   ad8d0:	84000044 	addi	r16,r16,1
   ad8d4:	0081ffc4 	movi	r2,2047
   ad8d8:	8080fe26 	beq	r16,r2,adcd4 <__subdf3+0x68c>
   ad8dc:	00bfe034 	movhi	r2,65408
   ad8e0:	10bfffc4 	addi	r2,r2,-1
   ad8e4:	1886703a 	and	r3,r3,r2
   ad8e8:	880ad07a 	srli	r5,r17,1
   ad8ec:	180497fa 	slli	r2,r3,31
   ad8f0:	8900004c 	andi	r4,r17,1
   ad8f4:	2922b03a 	or	r17,r5,r4
   ad8f8:	1806d07a 	srli	r3,r3,1
   ad8fc:	1462b03a 	or	r17,r2,r17
   ad900:	3825883a 	mov	r18,r7
   ad904:	003f7106 	br	ad6cc <__alt_data_end+0xfffed6cc>
   ad908:	2984b03a 	or	r2,r5,r6
   ad90c:	103f6826 	beq	r2,zero,ad6b0 <__alt_data_end+0xfffed6b0>
   ad910:	39c03fcc 	andi	r7,r7,255
   ad914:	003f6706 	br	ad6b4 <__alt_data_end+0xfffed6b4>
   ad918:	4086b03a 	or	r3,r8,r2
   ad91c:	18015226 	beq	r3,zero,ade68 <__subdf3+0x820>
   ad920:	00c00434 	movhi	r3,16
   ad924:	41400234 	orhi	r5,r8,8
   ad928:	18ffffc4 	addi	r3,r3,-1
   ad92c:	28ca703a 	and	r5,r5,r3
   ad930:	003f7e06 	br	ad72c <__alt_data_end+0xfffed72c>
   ad934:	10bfffc4 	addi	r2,r2,-1
   ad938:	1000491e 	bne	r2,zero,ada60 <__subdf3+0x418>
   ad93c:	898fc83a 	sub	r7,r17,r6
   ad940:	89e3803a 	cmpltu	r17,r17,r7
   ad944:	1947c83a 	sub	r3,r3,r5
   ad948:	1c47c83a 	sub	r3,r3,r17
   ad94c:	3823883a 	mov	r17,r7
   ad950:	003f9b06 	br	ad7c0 <__alt_data_end+0xfffed7c0>
   ad954:	2988b03a 	or	r4,r5,r6
   ad958:	203f5c26 	beq	r4,zero,ad6cc <__alt_data_end+0xfffed6cc>
   ad95c:	10bfffc4 	addi	r2,r2,-1
   ad960:	1000931e 	bne	r2,zero,adbb0 <__subdf3+0x568>
   ad964:	898d883a 	add	r6,r17,r6
   ad968:	3463803a 	cmpltu	r17,r6,r17
   ad96c:	1947883a 	add	r3,r3,r5
   ad970:	88c7883a 	add	r3,r17,r3
   ad974:	3023883a 	mov	r17,r6
   ad978:	003fd306 	br	ad8c8 <__alt_data_end+0xfffed8c8>
   ad97c:	1000541e 	bne	r2,zero,adad0 <__subdf3+0x488>
   ad980:	80800044 	addi	r2,r16,1
   ad984:	1081ffcc 	andi	r2,r2,2047
   ad988:	01000044 	movi	r4,1
   ad98c:	2080a20e 	bge	r4,r2,adc18 <__subdf3+0x5d0>
   ad990:	8989c83a 	sub	r4,r17,r6
   ad994:	8905803a 	cmpltu	r2,r17,r4
   ad998:	1967c83a 	sub	r19,r3,r5
   ad99c:	98a7c83a 	sub	r19,r19,r2
   ad9a0:	9880202c 	andhi	r2,r19,128
   ad9a4:	10006326 	beq	r2,zero,adb34 <__subdf3+0x4ec>
   ad9a8:	3463c83a 	sub	r17,r6,r17
   ad9ac:	28c7c83a 	sub	r3,r5,r3
   ad9b0:	344d803a 	cmpltu	r6,r6,r17
   ad9b4:	19a7c83a 	sub	r19,r3,r6
   ad9b8:	3825883a 	mov	r18,r7
   ad9bc:	983f861e 	bne	r19,zero,ad7d8 <__alt_data_end+0xfffed7d8>
   ad9c0:	8809883a 	mov	r4,r17
   ad9c4:	00ae1480 	call	ae148 <__clzsi2>
   ad9c8:	10800804 	addi	r2,r2,32
   ad9cc:	113ffe04 	addi	r4,r2,-8
   ad9d0:	00c007c4 	movi	r3,31
   ad9d4:	193f850e 	bge	r3,r4,ad7ec <__alt_data_end+0xfffed7ec>
   ad9d8:	10bff604 	addi	r2,r2,-40
   ad9dc:	8884983a 	sll	r2,r17,r2
   ad9e0:	0023883a 	mov	r17,zero
   ad9e4:	243f880e 	bge	r4,r16,ad808 <__alt_data_end+0xfffed808>
   ad9e8:	00ffe034 	movhi	r3,65408
   ad9ec:	18ffffc4 	addi	r3,r3,-1
   ad9f0:	8121c83a 	sub	r16,r16,r4
   ad9f4:	10c6703a 	and	r3,r2,r3
   ad9f8:	003f3406 	br	ad6cc <__alt_data_end+0xfffed6cc>
   ad9fc:	9100004c 	andi	r4,r18,1
   ada00:	000b883a 	mov	r5,zero
   ada04:	0005883a 	mov	r2,zero
   ada08:	003f4806 	br	ad72c <__alt_data_end+0xfffed72c>
   ada0c:	298cb03a 	or	r6,r5,r6
   ada10:	300cc03a 	cmpne	r6,r6,zero
   ada14:	0005883a 	mov	r2,zero
   ada18:	003f6406 	br	ad7ac <__alt_data_end+0xfffed7ac>
   ada1c:	10009a1e 	bne	r2,zero,adc88 <__subdf3+0x640>
   ada20:	82400044 	addi	r9,r16,1
   ada24:	4881ffcc 	andi	r2,r9,2047
   ada28:	02800044 	movi	r10,1
   ada2c:	5080670e 	bge	r10,r2,adbcc <__subdf3+0x584>
   ada30:	0081ffc4 	movi	r2,2047
   ada34:	4880af26 	beq	r9,r2,adcf4 <__subdf3+0x6ac>
   ada38:	898d883a 	add	r6,r17,r6
   ada3c:	1945883a 	add	r2,r3,r5
   ada40:	3447803a 	cmpltu	r3,r6,r17
   ada44:	1887883a 	add	r3,r3,r2
   ada48:	182297fa 	slli	r17,r3,31
   ada4c:	300cd07a 	srli	r6,r6,1
   ada50:	1806d07a 	srli	r3,r3,1
   ada54:	4821883a 	mov	r16,r9
   ada58:	89a2b03a 	or	r17,r17,r6
   ada5c:	003f1b06 	br	ad6cc <__alt_data_end+0xfffed6cc>
   ada60:	0101ffc4 	movi	r4,2047
   ada64:	813f441e 	bne	r16,r4,ad778 <__alt_data_end+0xfffed778>
   ada68:	003f1806 	br	ad6cc <__alt_data_end+0xfffed6cc>
   ada6c:	843ff844 	addi	r16,r16,-31
   ada70:	01400804 	movi	r5,32
   ada74:	1408d83a 	srl	r4,r2,r16
   ada78:	19405026 	beq	r3,r5,adbbc <__subdf3+0x574>
   ada7c:	01401004 	movi	r5,64
   ada80:	28c7c83a 	sub	r3,r5,r3
   ada84:	10c4983a 	sll	r2,r2,r3
   ada88:	88a2b03a 	or	r17,r17,r2
   ada8c:	8822c03a 	cmpne	r17,r17,zero
   ada90:	2462b03a 	or	r17,r4,r17
   ada94:	0007883a 	mov	r3,zero
   ada98:	0021883a 	mov	r16,zero
   ada9c:	003f6d06 	br	ad854 <__alt_data_end+0xfffed854>
   adaa0:	11fff804 	addi	r7,r2,-32
   adaa4:	01000804 	movi	r4,32
   adaa8:	29ced83a 	srl	r7,r5,r7
   adaac:	11004526 	beq	r2,r4,adbc4 <__subdf3+0x57c>
   adab0:	01001004 	movi	r4,64
   adab4:	2089c83a 	sub	r4,r4,r2
   adab8:	2904983a 	sll	r2,r5,r4
   adabc:	118cb03a 	or	r6,r2,r6
   adac0:	300cc03a 	cmpne	r6,r6,zero
   adac4:	398cb03a 	or	r6,r7,r6
   adac8:	0005883a 	mov	r2,zero
   adacc:	003f3706 	br	ad7ac <__alt_data_end+0xfffed7ac>
   adad0:	80002a26 	beq	r16,zero,adb7c <__subdf3+0x534>
   adad4:	0101ffc4 	movi	r4,2047
   adad8:	49006626 	beq	r9,r4,adc74 <__subdf3+0x62c>
   adadc:	0085c83a 	sub	r2,zero,r2
   adae0:	18c02034 	orhi	r3,r3,128
   adae4:	01000e04 	movi	r4,56
   adae8:	20807e16 	blt	r4,r2,adce4 <__subdf3+0x69c>
   adaec:	010007c4 	movi	r4,31
   adaf0:	2080e716 	blt	r4,r2,ade90 <__subdf3+0x848>
   adaf4:	01000804 	movi	r4,32
   adaf8:	2089c83a 	sub	r4,r4,r2
   adafc:	1914983a 	sll	r10,r3,r4
   adb00:	8890d83a 	srl	r8,r17,r2
   adb04:	8908983a 	sll	r4,r17,r4
   adb08:	1884d83a 	srl	r2,r3,r2
   adb0c:	5222b03a 	or	r17,r10,r8
   adb10:	2006c03a 	cmpne	r3,r4,zero
   adb14:	88e2b03a 	or	r17,r17,r3
   adb18:	3463c83a 	sub	r17,r6,r17
   adb1c:	2885c83a 	sub	r2,r5,r2
   adb20:	344d803a 	cmpltu	r6,r6,r17
   adb24:	1187c83a 	sub	r3,r2,r6
   adb28:	4821883a 	mov	r16,r9
   adb2c:	3825883a 	mov	r18,r7
   adb30:	003f2306 	br	ad7c0 <__alt_data_end+0xfffed7c0>
   adb34:	24d0b03a 	or	r8,r4,r19
   adb38:	40001b1e 	bne	r8,zero,adba8 <__subdf3+0x560>
   adb3c:	0005883a 	mov	r2,zero
   adb40:	0009883a 	mov	r4,zero
   adb44:	0021883a 	mov	r16,zero
   adb48:	003f4906 	br	ad870 <__alt_data_end+0xfffed870>
   adb4c:	010007c4 	movi	r4,31
   adb50:	20803a16 	blt	r4,r2,adc3c <__subdf3+0x5f4>
   adb54:	01000804 	movi	r4,32
   adb58:	2089c83a 	sub	r4,r4,r2
   adb5c:	2912983a 	sll	r9,r5,r4
   adb60:	3090d83a 	srl	r8,r6,r2
   adb64:	3108983a 	sll	r4,r6,r4
   adb68:	2884d83a 	srl	r2,r5,r2
   adb6c:	4a12b03a 	or	r9,r9,r8
   adb70:	2008c03a 	cmpne	r4,r4,zero
   adb74:	4912b03a 	or	r9,r9,r4
   adb78:	003f4e06 	br	ad8b4 <__alt_data_end+0xfffed8b4>
   adb7c:	1c48b03a 	or	r4,r3,r17
   adb80:	20003c26 	beq	r4,zero,adc74 <__subdf3+0x62c>
   adb84:	0084303a 	nor	r2,zero,r2
   adb88:	1000381e 	bne	r2,zero,adc6c <__subdf3+0x624>
   adb8c:	3463c83a 	sub	r17,r6,r17
   adb90:	28c5c83a 	sub	r2,r5,r3
   adb94:	344d803a 	cmpltu	r6,r6,r17
   adb98:	1187c83a 	sub	r3,r2,r6
   adb9c:	4821883a 	mov	r16,r9
   adba0:	3825883a 	mov	r18,r7
   adba4:	003f0606 	br	ad7c0 <__alt_data_end+0xfffed7c0>
   adba8:	2023883a 	mov	r17,r4
   adbac:	003f0906 	br	ad7d4 <__alt_data_end+0xfffed7d4>
   adbb0:	0101ffc4 	movi	r4,2047
   adbb4:	813f3a1e 	bne	r16,r4,ad8a0 <__alt_data_end+0xfffed8a0>
   adbb8:	003ec406 	br	ad6cc <__alt_data_end+0xfffed6cc>
   adbbc:	0005883a 	mov	r2,zero
   adbc0:	003fb106 	br	ada88 <__alt_data_end+0xfffeda88>
   adbc4:	0005883a 	mov	r2,zero
   adbc8:	003fbc06 	br	adabc <__alt_data_end+0xfffedabc>
   adbcc:	1c44b03a 	or	r2,r3,r17
   adbd0:	80008e1e 	bne	r16,zero,ade0c <__subdf3+0x7c4>
   adbd4:	1000c826 	beq	r2,zero,adef8 <__subdf3+0x8b0>
   adbd8:	2984b03a 	or	r2,r5,r6
   adbdc:	103ebb26 	beq	r2,zero,ad6cc <__alt_data_end+0xfffed6cc>
   adbe0:	8989883a 	add	r4,r17,r6
   adbe4:	1945883a 	add	r2,r3,r5
   adbe8:	2447803a 	cmpltu	r3,r4,r17
   adbec:	1887883a 	add	r3,r3,r2
   adbf0:	1880202c 	andhi	r2,r3,128
   adbf4:	2023883a 	mov	r17,r4
   adbf8:	103f1626 	beq	r2,zero,ad854 <__alt_data_end+0xfffed854>
   adbfc:	00bfe034 	movhi	r2,65408
   adc00:	10bfffc4 	addi	r2,r2,-1
   adc04:	5021883a 	mov	r16,r10
   adc08:	1886703a 	and	r3,r3,r2
   adc0c:	003eaf06 	br	ad6cc <__alt_data_end+0xfffed6cc>
   adc10:	3825883a 	mov	r18,r7
   adc14:	003f0f06 	br	ad854 <__alt_data_end+0xfffed854>
   adc18:	1c44b03a 	or	r2,r3,r17
   adc1c:	8000251e 	bne	r16,zero,adcb4 <__subdf3+0x66c>
   adc20:	1000661e 	bne	r2,zero,addbc <__subdf3+0x774>
   adc24:	2990b03a 	or	r8,r5,r6
   adc28:	40009626 	beq	r8,zero,ade84 <__subdf3+0x83c>
   adc2c:	2807883a 	mov	r3,r5
   adc30:	3023883a 	mov	r17,r6
   adc34:	3825883a 	mov	r18,r7
   adc38:	003ea406 	br	ad6cc <__alt_data_end+0xfffed6cc>
   adc3c:	127ff804 	addi	r9,r2,-32
   adc40:	01000804 	movi	r4,32
   adc44:	2a52d83a 	srl	r9,r5,r9
   adc48:	11008c26 	beq	r2,r4,ade7c <__subdf3+0x834>
   adc4c:	01001004 	movi	r4,64
   adc50:	2085c83a 	sub	r2,r4,r2
   adc54:	2884983a 	sll	r2,r5,r2
   adc58:	118cb03a 	or	r6,r2,r6
   adc5c:	300cc03a 	cmpne	r6,r6,zero
   adc60:	4992b03a 	or	r9,r9,r6
   adc64:	0005883a 	mov	r2,zero
   adc68:	003f1206 	br	ad8b4 <__alt_data_end+0xfffed8b4>
   adc6c:	0101ffc4 	movi	r4,2047
   adc70:	493f9c1e 	bne	r9,r4,adae4 <__alt_data_end+0xfffedae4>
   adc74:	2807883a 	mov	r3,r5
   adc78:	3023883a 	mov	r17,r6
   adc7c:	4821883a 	mov	r16,r9
   adc80:	3825883a 	mov	r18,r7
   adc84:	003e9106 	br	ad6cc <__alt_data_end+0xfffed6cc>
   adc88:	80001f1e 	bne	r16,zero,add08 <__subdf3+0x6c0>
   adc8c:	1c48b03a 	or	r4,r3,r17
   adc90:	20005a26 	beq	r4,zero,addfc <__subdf3+0x7b4>
   adc94:	0084303a 	nor	r2,zero,r2
   adc98:	1000561e 	bne	r2,zero,addf4 <__subdf3+0x7ac>
   adc9c:	89a3883a 	add	r17,r17,r6
   adca0:	1945883a 	add	r2,r3,r5
   adca4:	898d803a 	cmpltu	r6,r17,r6
   adca8:	3087883a 	add	r3,r6,r2
   adcac:	4821883a 	mov	r16,r9
   adcb0:	003f0506 	br	ad8c8 <__alt_data_end+0xfffed8c8>
   adcb4:	10002b1e 	bne	r2,zero,add64 <__subdf3+0x71c>
   adcb8:	2984b03a 	or	r2,r5,r6
   adcbc:	10008026 	beq	r2,zero,adec0 <__subdf3+0x878>
   adcc0:	2807883a 	mov	r3,r5
   adcc4:	3023883a 	mov	r17,r6
   adcc8:	3825883a 	mov	r18,r7
   adccc:	0401ffc4 	movi	r16,2047
   adcd0:	003e7e06 	br	ad6cc <__alt_data_end+0xfffed6cc>
   adcd4:	3809883a 	mov	r4,r7
   adcd8:	0011883a 	mov	r8,zero
   adcdc:	0005883a 	mov	r2,zero
   adce0:	003ee306 	br	ad870 <__alt_data_end+0xfffed870>
   adce4:	1c62b03a 	or	r17,r3,r17
   adce8:	8822c03a 	cmpne	r17,r17,zero
   adcec:	0005883a 	mov	r2,zero
   adcf0:	003f8906 	br	adb18 <__alt_data_end+0xfffedb18>
   adcf4:	3809883a 	mov	r4,r7
   adcf8:	4821883a 	mov	r16,r9
   adcfc:	0011883a 	mov	r8,zero
   add00:	0005883a 	mov	r2,zero
   add04:	003eda06 	br	ad870 <__alt_data_end+0xfffed870>
   add08:	0101ffc4 	movi	r4,2047
   add0c:	49003b26 	beq	r9,r4,addfc <__subdf3+0x7b4>
   add10:	0085c83a 	sub	r2,zero,r2
   add14:	18c02034 	orhi	r3,r3,128
   add18:	01000e04 	movi	r4,56
   add1c:	20806e16 	blt	r4,r2,aded8 <__subdf3+0x890>
   add20:	010007c4 	movi	r4,31
   add24:	20807716 	blt	r4,r2,adf04 <__subdf3+0x8bc>
   add28:	01000804 	movi	r4,32
   add2c:	2089c83a 	sub	r4,r4,r2
   add30:	1914983a 	sll	r10,r3,r4
   add34:	8890d83a 	srl	r8,r17,r2
   add38:	8908983a 	sll	r4,r17,r4
   add3c:	1884d83a 	srl	r2,r3,r2
   add40:	5222b03a 	or	r17,r10,r8
   add44:	2006c03a 	cmpne	r3,r4,zero
   add48:	88e2b03a 	or	r17,r17,r3
   add4c:	89a3883a 	add	r17,r17,r6
   add50:	1145883a 	add	r2,r2,r5
   add54:	898d803a 	cmpltu	r6,r17,r6
   add58:	3087883a 	add	r3,r6,r2
   add5c:	4821883a 	mov	r16,r9
   add60:	003ed906 	br	ad8c8 <__alt_data_end+0xfffed8c8>
   add64:	2984b03a 	or	r2,r5,r6
   add68:	10004226 	beq	r2,zero,ade74 <__subdf3+0x82c>
   add6c:	1808d0fa 	srli	r4,r3,3
   add70:	8822d0fa 	srli	r17,r17,3
   add74:	1806977a 	slli	r3,r3,29
   add78:	2080022c 	andhi	r2,r4,8
   add7c:	1c62b03a 	or	r17,r3,r17
   add80:	10000826 	beq	r2,zero,adda4 <__subdf3+0x75c>
   add84:	2812d0fa 	srli	r9,r5,3
   add88:	4880022c 	andhi	r2,r9,8
   add8c:	1000051e 	bne	r2,zero,adda4 <__subdf3+0x75c>
   add90:	300cd0fa 	srli	r6,r6,3
   add94:	2804977a 	slli	r2,r5,29
   add98:	4809883a 	mov	r4,r9
   add9c:	3825883a 	mov	r18,r7
   adda0:	11a2b03a 	or	r17,r2,r6
   adda4:	8806d77a 	srli	r3,r17,29
   adda8:	200890fa 	slli	r4,r4,3
   addac:	882290fa 	slli	r17,r17,3
   addb0:	0401ffc4 	movi	r16,2047
   addb4:	1906b03a 	or	r3,r3,r4
   addb8:	003e4406 	br	ad6cc <__alt_data_end+0xfffed6cc>
   addbc:	2984b03a 	or	r2,r5,r6
   addc0:	103e4226 	beq	r2,zero,ad6cc <__alt_data_end+0xfffed6cc>
   addc4:	8989c83a 	sub	r4,r17,r6
   addc8:	8911803a 	cmpltu	r8,r17,r4
   addcc:	1945c83a 	sub	r2,r3,r5
   addd0:	1205c83a 	sub	r2,r2,r8
   addd4:	1200202c 	andhi	r8,r2,128
   addd8:	403e9a26 	beq	r8,zero,ad844 <__alt_data_end+0xfffed844>
   adddc:	3463c83a 	sub	r17,r6,r17
   adde0:	28c5c83a 	sub	r2,r5,r3
   adde4:	344d803a 	cmpltu	r6,r6,r17
   adde8:	1187c83a 	sub	r3,r2,r6
   addec:	3825883a 	mov	r18,r7
   addf0:	003e3606 	br	ad6cc <__alt_data_end+0xfffed6cc>
   addf4:	0101ffc4 	movi	r4,2047
   addf8:	493fc71e 	bne	r9,r4,add18 <__alt_data_end+0xfffedd18>
   addfc:	2807883a 	mov	r3,r5
   ade00:	3023883a 	mov	r17,r6
   ade04:	4821883a 	mov	r16,r9
   ade08:	003e3006 	br	ad6cc <__alt_data_end+0xfffed6cc>
   ade0c:	10003626 	beq	r2,zero,adee8 <__subdf3+0x8a0>
   ade10:	2984b03a 	or	r2,r5,r6
   ade14:	10001726 	beq	r2,zero,ade74 <__subdf3+0x82c>
   ade18:	1808d0fa 	srli	r4,r3,3
   ade1c:	8822d0fa 	srli	r17,r17,3
   ade20:	1806977a 	slli	r3,r3,29
   ade24:	2080022c 	andhi	r2,r4,8
   ade28:	1c62b03a 	or	r17,r3,r17
   ade2c:	10000726 	beq	r2,zero,ade4c <__subdf3+0x804>
   ade30:	2812d0fa 	srli	r9,r5,3
   ade34:	4880022c 	andhi	r2,r9,8
   ade38:	1000041e 	bne	r2,zero,ade4c <__subdf3+0x804>
   ade3c:	300cd0fa 	srli	r6,r6,3
   ade40:	2804977a 	slli	r2,r5,29
   ade44:	4809883a 	mov	r4,r9
   ade48:	11a2b03a 	or	r17,r2,r6
   ade4c:	8806d77a 	srli	r3,r17,29
   ade50:	200890fa 	slli	r4,r4,3
   ade54:	882290fa 	slli	r17,r17,3
   ade58:	3825883a 	mov	r18,r7
   ade5c:	1906b03a 	or	r3,r3,r4
   ade60:	0401ffc4 	movi	r16,2047
   ade64:	003e1906 	br	ad6cc <__alt_data_end+0xfffed6cc>
   ade68:	000b883a 	mov	r5,zero
   ade6c:	0005883a 	mov	r2,zero
   ade70:	003e2e06 	br	ad72c <__alt_data_end+0xfffed72c>
   ade74:	0401ffc4 	movi	r16,2047
   ade78:	003e1406 	br	ad6cc <__alt_data_end+0xfffed6cc>
   ade7c:	0005883a 	mov	r2,zero
   ade80:	003f7506 	br	adc58 <__alt_data_end+0xfffedc58>
   ade84:	0005883a 	mov	r2,zero
   ade88:	0009883a 	mov	r4,zero
   ade8c:	003e7806 	br	ad870 <__alt_data_end+0xfffed870>
   ade90:	123ff804 	addi	r8,r2,-32
   ade94:	01000804 	movi	r4,32
   ade98:	1a10d83a 	srl	r8,r3,r8
   ade9c:	11002526 	beq	r2,r4,adf34 <__subdf3+0x8ec>
   adea0:	01001004 	movi	r4,64
   adea4:	2085c83a 	sub	r2,r4,r2
   adea8:	1884983a 	sll	r2,r3,r2
   adeac:	1444b03a 	or	r2,r2,r17
   adeb0:	1004c03a 	cmpne	r2,r2,zero
   adeb4:	40a2b03a 	or	r17,r8,r2
   adeb8:	0005883a 	mov	r2,zero
   adebc:	003f1606 	br	adb18 <__alt_data_end+0xfffedb18>
   adec0:	02000434 	movhi	r8,16
   adec4:	0009883a 	mov	r4,zero
   adec8:	423fffc4 	addi	r8,r8,-1
   adecc:	00bfffc4 	movi	r2,-1
   aded0:	0401ffc4 	movi	r16,2047
   aded4:	003e6606 	br	ad870 <__alt_data_end+0xfffed870>
   aded8:	1c62b03a 	or	r17,r3,r17
   adedc:	8822c03a 	cmpne	r17,r17,zero
   adee0:	0005883a 	mov	r2,zero
   adee4:	003f9906 	br	add4c <__alt_data_end+0xfffedd4c>
   adee8:	2807883a 	mov	r3,r5
   adeec:	3023883a 	mov	r17,r6
   adef0:	0401ffc4 	movi	r16,2047
   adef4:	003df506 	br	ad6cc <__alt_data_end+0xfffed6cc>
   adef8:	2807883a 	mov	r3,r5
   adefc:	3023883a 	mov	r17,r6
   adf00:	003df206 	br	ad6cc <__alt_data_end+0xfffed6cc>
   adf04:	123ff804 	addi	r8,r2,-32
   adf08:	01000804 	movi	r4,32
   adf0c:	1a10d83a 	srl	r8,r3,r8
   adf10:	11000a26 	beq	r2,r4,adf3c <__subdf3+0x8f4>
   adf14:	01001004 	movi	r4,64
   adf18:	2085c83a 	sub	r2,r4,r2
   adf1c:	1884983a 	sll	r2,r3,r2
   adf20:	1444b03a 	or	r2,r2,r17
   adf24:	1004c03a 	cmpne	r2,r2,zero
   adf28:	40a2b03a 	or	r17,r8,r2
   adf2c:	0005883a 	mov	r2,zero
   adf30:	003f8606 	br	add4c <__alt_data_end+0xfffedd4c>
   adf34:	0005883a 	mov	r2,zero
   adf38:	003fdc06 	br	adeac <__alt_data_end+0xfffedeac>
   adf3c:	0005883a 	mov	r2,zero
   adf40:	003ff706 	br	adf20 <__alt_data_end+0xfffedf20>

000adf44 <__fixdfsi>:
   adf44:	280cd53a 	srli	r6,r5,20
   adf48:	00c00434 	movhi	r3,16
   adf4c:	18ffffc4 	addi	r3,r3,-1
   adf50:	3181ffcc 	andi	r6,r6,2047
   adf54:	01c0ff84 	movi	r7,1022
   adf58:	28c6703a 	and	r3,r5,r3
   adf5c:	280ad7fa 	srli	r5,r5,31
   adf60:	3980120e 	bge	r7,r6,adfac <__fixdfsi+0x68>
   adf64:	00810744 	movi	r2,1053
   adf68:	11800c16 	blt	r2,r6,adf9c <__fixdfsi+0x58>
   adf6c:	00810cc4 	movi	r2,1075
   adf70:	1185c83a 	sub	r2,r2,r6
   adf74:	01c007c4 	movi	r7,31
   adf78:	18c00434 	orhi	r3,r3,16
   adf7c:	38800d16 	blt	r7,r2,adfb4 <__fixdfsi+0x70>
   adf80:	31befb44 	addi	r6,r6,-1043
   adf84:	2084d83a 	srl	r2,r4,r2
   adf88:	1986983a 	sll	r3,r3,r6
   adf8c:	1884b03a 	or	r2,r3,r2
   adf90:	28000726 	beq	r5,zero,adfb0 <__fixdfsi+0x6c>
   adf94:	0085c83a 	sub	r2,zero,r2
   adf98:	f800283a 	ret
   adf9c:	00a00034 	movhi	r2,32768
   adfa0:	10bfffc4 	addi	r2,r2,-1
   adfa4:	2885883a 	add	r2,r5,r2
   adfa8:	f800283a 	ret
   adfac:	0005883a 	mov	r2,zero
   adfb0:	f800283a 	ret
   adfb4:	008104c4 	movi	r2,1043
   adfb8:	1185c83a 	sub	r2,r2,r6
   adfbc:	1884d83a 	srl	r2,r3,r2
   adfc0:	003ff306 	br	adf90 <__alt_data_end+0xfffedf90>

000adfc4 <__floatsidf>:
   adfc4:	defffd04 	addi	sp,sp,-12
   adfc8:	dfc00215 	stw	ra,8(sp)
   adfcc:	dc400115 	stw	r17,4(sp)
   adfd0:	dc000015 	stw	r16,0(sp)
   adfd4:	20002b26 	beq	r4,zero,ae084 <__floatsidf+0xc0>
   adfd8:	2023883a 	mov	r17,r4
   adfdc:	2020d7fa 	srli	r16,r4,31
   adfe0:	20002d16 	blt	r4,zero,ae098 <__floatsidf+0xd4>
   adfe4:	8809883a 	mov	r4,r17
   adfe8:	00ae1480 	call	ae148 <__clzsi2>
   adfec:	01410784 	movi	r5,1054
   adff0:	288bc83a 	sub	r5,r5,r2
   adff4:	01010cc4 	movi	r4,1075
   adff8:	2149c83a 	sub	r4,r4,r5
   adffc:	00c007c4 	movi	r3,31
   ae000:	1900160e 	bge	r3,r4,ae05c <__floatsidf+0x98>
   ae004:	00c104c4 	movi	r3,1043
   ae008:	1947c83a 	sub	r3,r3,r5
   ae00c:	88c6983a 	sll	r3,r17,r3
   ae010:	00800434 	movhi	r2,16
   ae014:	10bfffc4 	addi	r2,r2,-1
   ae018:	1886703a 	and	r3,r3,r2
   ae01c:	2941ffcc 	andi	r5,r5,2047
   ae020:	800d883a 	mov	r6,r16
   ae024:	0005883a 	mov	r2,zero
   ae028:	280a953a 	slli	r5,r5,20
   ae02c:	31803fcc 	andi	r6,r6,255
   ae030:	01000434 	movhi	r4,16
   ae034:	300c97fa 	slli	r6,r6,31
   ae038:	213fffc4 	addi	r4,r4,-1
   ae03c:	1906703a 	and	r3,r3,r4
   ae040:	1946b03a 	or	r3,r3,r5
   ae044:	1986b03a 	or	r3,r3,r6
   ae048:	dfc00217 	ldw	ra,8(sp)
   ae04c:	dc400117 	ldw	r17,4(sp)
   ae050:	dc000017 	ldw	r16,0(sp)
   ae054:	dec00304 	addi	sp,sp,12
   ae058:	f800283a 	ret
   ae05c:	00c002c4 	movi	r3,11
   ae060:	1887c83a 	sub	r3,r3,r2
   ae064:	88c6d83a 	srl	r3,r17,r3
   ae068:	8904983a 	sll	r2,r17,r4
   ae06c:	01000434 	movhi	r4,16
   ae070:	213fffc4 	addi	r4,r4,-1
   ae074:	2941ffcc 	andi	r5,r5,2047
   ae078:	1906703a 	and	r3,r3,r4
   ae07c:	800d883a 	mov	r6,r16
   ae080:	003fe906 	br	ae028 <__alt_data_end+0xfffee028>
   ae084:	000d883a 	mov	r6,zero
   ae088:	000b883a 	mov	r5,zero
   ae08c:	0007883a 	mov	r3,zero
   ae090:	0005883a 	mov	r2,zero
   ae094:	003fe406 	br	ae028 <__alt_data_end+0xfffee028>
   ae098:	0123c83a 	sub	r17,zero,r4
   ae09c:	003fd106 	br	adfe4 <__alt_data_end+0xfffedfe4>

000ae0a0 <__floatunsidf>:
   ae0a0:	defffe04 	addi	sp,sp,-8
   ae0a4:	dc000015 	stw	r16,0(sp)
   ae0a8:	dfc00115 	stw	ra,4(sp)
   ae0ac:	2021883a 	mov	r16,r4
   ae0b0:	20002226 	beq	r4,zero,ae13c <__floatunsidf+0x9c>
   ae0b4:	00ae1480 	call	ae148 <__clzsi2>
   ae0b8:	01010784 	movi	r4,1054
   ae0bc:	2089c83a 	sub	r4,r4,r2
   ae0c0:	01810cc4 	movi	r6,1075
   ae0c4:	310dc83a 	sub	r6,r6,r4
   ae0c8:	00c007c4 	movi	r3,31
   ae0cc:	1980120e 	bge	r3,r6,ae118 <__floatunsidf+0x78>
   ae0d0:	00c104c4 	movi	r3,1043
   ae0d4:	1907c83a 	sub	r3,r3,r4
   ae0d8:	80ca983a 	sll	r5,r16,r3
   ae0dc:	00800434 	movhi	r2,16
   ae0e0:	10bfffc4 	addi	r2,r2,-1
   ae0e4:	2101ffcc 	andi	r4,r4,2047
   ae0e8:	0021883a 	mov	r16,zero
   ae0ec:	288a703a 	and	r5,r5,r2
   ae0f0:	2008953a 	slli	r4,r4,20
   ae0f4:	00c00434 	movhi	r3,16
   ae0f8:	18ffffc4 	addi	r3,r3,-1
   ae0fc:	28c6703a 	and	r3,r5,r3
   ae100:	8005883a 	mov	r2,r16
   ae104:	1906b03a 	or	r3,r3,r4
   ae108:	dfc00117 	ldw	ra,4(sp)
   ae10c:	dc000017 	ldw	r16,0(sp)
   ae110:	dec00204 	addi	sp,sp,8
   ae114:	f800283a 	ret
   ae118:	00c002c4 	movi	r3,11
   ae11c:	188bc83a 	sub	r5,r3,r2
   ae120:	814ad83a 	srl	r5,r16,r5
   ae124:	00c00434 	movhi	r3,16
   ae128:	18ffffc4 	addi	r3,r3,-1
   ae12c:	81a0983a 	sll	r16,r16,r6
   ae130:	2101ffcc 	andi	r4,r4,2047
   ae134:	28ca703a 	and	r5,r5,r3
   ae138:	003fed06 	br	ae0f0 <__alt_data_end+0xfffee0f0>
   ae13c:	0009883a 	mov	r4,zero
   ae140:	000b883a 	mov	r5,zero
   ae144:	003fea06 	br	ae0f0 <__alt_data_end+0xfffee0f0>

000ae148 <__clzsi2>:
   ae148:	00bfffd4 	movui	r2,65535
   ae14c:	11000536 	bltu	r2,r4,ae164 <__clzsi2+0x1c>
   ae150:	00803fc4 	movi	r2,255
   ae154:	11000f36 	bltu	r2,r4,ae194 <__clzsi2+0x4c>
   ae158:	00800804 	movi	r2,32
   ae15c:	0007883a 	mov	r3,zero
   ae160:	00000506 	br	ae178 <__clzsi2+0x30>
   ae164:	00804034 	movhi	r2,256
   ae168:	10bfffc4 	addi	r2,r2,-1
   ae16c:	11000c2e 	bgeu	r2,r4,ae1a0 <__clzsi2+0x58>
   ae170:	00800204 	movi	r2,8
   ae174:	00c00604 	movi	r3,24
   ae178:	20c8d83a 	srl	r4,r4,r3
   ae17c:	00c002f4 	movhi	r3,11
   ae180:	18c57104 	addi	r3,r3,5572
   ae184:	1909883a 	add	r4,r3,r4
   ae188:	20c00003 	ldbu	r3,0(r4)
   ae18c:	10c5c83a 	sub	r2,r2,r3
   ae190:	f800283a 	ret
   ae194:	00800604 	movi	r2,24
   ae198:	00c00204 	movi	r3,8
   ae19c:	003ff606 	br	ae178 <__alt_data_end+0xfffee178>
   ae1a0:	00800404 	movi	r2,16
   ae1a4:	1007883a 	mov	r3,r2
   ae1a8:	003ff306 	br	ae178 <__alt_data_end+0xfffee178>

000ae1ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   ae1ac:	defffe04 	addi	sp,sp,-8
   ae1b0:	dfc00115 	stw	ra,4(sp)
   ae1b4:	df000015 	stw	fp,0(sp)
   ae1b8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   ae1bc:	d0a00b17 	ldw	r2,-32724(gp)
   ae1c0:	10000326 	beq	r2,zero,ae1d0 <alt_get_errno+0x24>
   ae1c4:	d0a00b17 	ldw	r2,-32724(gp)
   ae1c8:	103ee83a 	callr	r2
   ae1cc:	00000106 	br	ae1d4 <alt_get_errno+0x28>
   ae1d0:	d0a71904 	addi	r2,gp,-25500
}
   ae1d4:	e037883a 	mov	sp,fp
   ae1d8:	dfc00117 	ldw	ra,4(sp)
   ae1dc:	df000017 	ldw	fp,0(sp)
   ae1e0:	dec00204 	addi	sp,sp,8
   ae1e4:	f800283a 	ret

000ae1e8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   ae1e8:	defffb04 	addi	sp,sp,-20
   ae1ec:	dfc00415 	stw	ra,16(sp)
   ae1f0:	df000315 	stw	fp,12(sp)
   ae1f4:	df000304 	addi	fp,sp,12
   ae1f8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   ae1fc:	e0bfff17 	ldw	r2,-4(fp)
   ae200:	10000816 	blt	r2,zero,ae224 <close+0x3c>
   ae204:	01400304 	movi	r5,12
   ae208:	e13fff17 	ldw	r4,-4(fp)
   ae20c:	00ab8e00 	call	ab8e0 <__mulsi3>
   ae210:	1007883a 	mov	r3,r2
   ae214:	008002f4 	movhi	r2,11
   ae218:	10881204 	addi	r2,r2,8264
   ae21c:	1885883a 	add	r2,r3,r2
   ae220:	00000106 	br	ae228 <close+0x40>
   ae224:	0005883a 	mov	r2,zero
   ae228:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   ae22c:	e0bffd17 	ldw	r2,-12(fp)
   ae230:	10001926 	beq	r2,zero,ae298 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   ae234:	e0bffd17 	ldw	r2,-12(fp)
   ae238:	10800017 	ldw	r2,0(r2)
   ae23c:	10800417 	ldw	r2,16(r2)
   ae240:	10000626 	beq	r2,zero,ae25c <close+0x74>
   ae244:	e0bffd17 	ldw	r2,-12(fp)
   ae248:	10800017 	ldw	r2,0(r2)
   ae24c:	10800417 	ldw	r2,16(r2)
   ae250:	e13ffd17 	ldw	r4,-12(fp)
   ae254:	103ee83a 	callr	r2
   ae258:	00000106 	br	ae260 <close+0x78>
   ae25c:	0005883a 	mov	r2,zero
   ae260:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   ae264:	e13fff17 	ldw	r4,-4(fp)
   ae268:	00aeb540 	call	aeb54 <alt_release_fd>
    if (rval < 0)
   ae26c:	e0bffe17 	ldw	r2,-8(fp)
   ae270:	1000070e 	bge	r2,zero,ae290 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   ae274:	00ae1ac0 	call	ae1ac <alt_get_errno>
   ae278:	1007883a 	mov	r3,r2
   ae27c:	e0bffe17 	ldw	r2,-8(fp)
   ae280:	0085c83a 	sub	r2,zero,r2
   ae284:	18800015 	stw	r2,0(r3)
      return -1;
   ae288:	00bfffc4 	movi	r2,-1
   ae28c:	00000706 	br	ae2ac <close+0xc4>
    }
    return 0;
   ae290:	0005883a 	mov	r2,zero
   ae294:	00000506 	br	ae2ac <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   ae298:	00ae1ac0 	call	ae1ac <alt_get_errno>
   ae29c:	1007883a 	mov	r3,r2
   ae2a0:	00801444 	movi	r2,81
   ae2a4:	18800015 	stw	r2,0(r3)
    return -1;
   ae2a8:	00bfffc4 	movi	r2,-1
  }
}
   ae2ac:	e037883a 	mov	sp,fp
   ae2b0:	dfc00117 	ldw	ra,4(sp)
   ae2b4:	df000017 	ldw	fp,0(sp)
   ae2b8:	dec00204 	addi	sp,sp,8
   ae2bc:	f800283a 	ret

000ae2c0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   ae2c0:	defffc04 	addi	sp,sp,-16
   ae2c4:	df000315 	stw	fp,12(sp)
   ae2c8:	df000304 	addi	fp,sp,12
   ae2cc:	e13ffd15 	stw	r4,-12(fp)
   ae2d0:	e17ffe15 	stw	r5,-8(fp)
   ae2d4:	e1bfff15 	stw	r6,-4(fp)
  return len;
   ae2d8:	e0bfff17 	ldw	r2,-4(fp)
}
   ae2dc:	e037883a 	mov	sp,fp
   ae2e0:	df000017 	ldw	fp,0(sp)
   ae2e4:	dec00104 	addi	sp,sp,4
   ae2e8:	f800283a 	ret

000ae2ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   ae2ec:	defffe04 	addi	sp,sp,-8
   ae2f0:	dfc00115 	stw	ra,4(sp)
   ae2f4:	df000015 	stw	fp,0(sp)
   ae2f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   ae2fc:	d0a00b17 	ldw	r2,-32724(gp)
   ae300:	10000326 	beq	r2,zero,ae310 <alt_get_errno+0x24>
   ae304:	d0a00b17 	ldw	r2,-32724(gp)
   ae308:	103ee83a 	callr	r2
   ae30c:	00000106 	br	ae314 <alt_get_errno+0x28>
   ae310:	d0a71904 	addi	r2,gp,-25500
}
   ae314:	e037883a 	mov	sp,fp
   ae318:	dfc00117 	ldw	ra,4(sp)
   ae31c:	df000017 	ldw	fp,0(sp)
   ae320:	dec00204 	addi	sp,sp,8
   ae324:	f800283a 	ret

000ae328 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   ae328:	defffb04 	addi	sp,sp,-20
   ae32c:	dfc00415 	stw	ra,16(sp)
   ae330:	df000315 	stw	fp,12(sp)
   ae334:	df000304 	addi	fp,sp,12
   ae338:	e13ffe15 	stw	r4,-8(fp)
   ae33c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   ae340:	e0bffe17 	ldw	r2,-8(fp)
   ae344:	10000816 	blt	r2,zero,ae368 <fstat+0x40>
   ae348:	01400304 	movi	r5,12
   ae34c:	e13ffe17 	ldw	r4,-8(fp)
   ae350:	00ab8e00 	call	ab8e0 <__mulsi3>
   ae354:	1007883a 	mov	r3,r2
   ae358:	008002f4 	movhi	r2,11
   ae35c:	10881204 	addi	r2,r2,8264
   ae360:	1885883a 	add	r2,r3,r2
   ae364:	00000106 	br	ae36c <fstat+0x44>
   ae368:	0005883a 	mov	r2,zero
   ae36c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   ae370:	e0bffd17 	ldw	r2,-12(fp)
   ae374:	10001026 	beq	r2,zero,ae3b8 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   ae378:	e0bffd17 	ldw	r2,-12(fp)
   ae37c:	10800017 	ldw	r2,0(r2)
   ae380:	10800817 	ldw	r2,32(r2)
   ae384:	10000726 	beq	r2,zero,ae3a4 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   ae388:	e0bffd17 	ldw	r2,-12(fp)
   ae38c:	10800017 	ldw	r2,0(r2)
   ae390:	10800817 	ldw	r2,32(r2)
   ae394:	e17fff17 	ldw	r5,-4(fp)
   ae398:	e13ffd17 	ldw	r4,-12(fp)
   ae39c:	103ee83a 	callr	r2
   ae3a0:	00000a06 	br	ae3cc <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   ae3a4:	e0bfff17 	ldw	r2,-4(fp)
   ae3a8:	00c80004 	movi	r3,8192
   ae3ac:	10c00115 	stw	r3,4(r2)
      return 0;
   ae3b0:	0005883a 	mov	r2,zero
   ae3b4:	00000506 	br	ae3cc <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   ae3b8:	00ae2ec0 	call	ae2ec <alt_get_errno>
   ae3bc:	1007883a 	mov	r3,r2
   ae3c0:	00801444 	movi	r2,81
   ae3c4:	18800015 	stw	r2,0(r3)
    return -1;
   ae3c8:	00bfffc4 	movi	r2,-1
  }
}
   ae3cc:	e037883a 	mov	sp,fp
   ae3d0:	dfc00117 	ldw	ra,4(sp)
   ae3d4:	df000017 	ldw	fp,0(sp)
   ae3d8:	dec00204 	addi	sp,sp,8
   ae3dc:	f800283a 	ret

000ae3e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   ae3e0:	defffe04 	addi	sp,sp,-8
   ae3e4:	dfc00115 	stw	ra,4(sp)
   ae3e8:	df000015 	stw	fp,0(sp)
   ae3ec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   ae3f0:	d0a00b17 	ldw	r2,-32724(gp)
   ae3f4:	10000326 	beq	r2,zero,ae404 <alt_get_errno+0x24>
   ae3f8:	d0a00b17 	ldw	r2,-32724(gp)
   ae3fc:	103ee83a 	callr	r2
   ae400:	00000106 	br	ae408 <alt_get_errno+0x28>
   ae404:	d0a71904 	addi	r2,gp,-25500
}
   ae408:	e037883a 	mov	sp,fp
   ae40c:	dfc00117 	ldw	ra,4(sp)
   ae410:	df000017 	ldw	fp,0(sp)
   ae414:	dec00204 	addi	sp,sp,8
   ae418:	f800283a 	ret

000ae41c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   ae41c:	deffed04 	addi	sp,sp,-76
   ae420:	dfc01215 	stw	ra,72(sp)
   ae424:	df001115 	stw	fp,68(sp)
   ae428:	df001104 	addi	fp,sp,68
   ae42c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   ae430:	e0bfff17 	ldw	r2,-4(fp)
   ae434:	10000816 	blt	r2,zero,ae458 <isatty+0x3c>
   ae438:	01400304 	movi	r5,12
   ae43c:	e13fff17 	ldw	r4,-4(fp)
   ae440:	00ab8e00 	call	ab8e0 <__mulsi3>
   ae444:	1007883a 	mov	r3,r2
   ae448:	008002f4 	movhi	r2,11
   ae44c:	10881204 	addi	r2,r2,8264
   ae450:	1885883a 	add	r2,r3,r2
   ae454:	00000106 	br	ae45c <isatty+0x40>
   ae458:	0005883a 	mov	r2,zero
   ae45c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   ae460:	e0bfef17 	ldw	r2,-68(fp)
   ae464:	10000e26 	beq	r2,zero,ae4a0 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   ae468:	e0bfef17 	ldw	r2,-68(fp)
   ae46c:	10800017 	ldw	r2,0(r2)
   ae470:	10800817 	ldw	r2,32(r2)
   ae474:	1000021e 	bne	r2,zero,ae480 <isatty+0x64>
    {
      return 1;
   ae478:	00800044 	movi	r2,1
   ae47c:	00000d06 	br	ae4b4 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   ae480:	e0bff004 	addi	r2,fp,-64
   ae484:	100b883a 	mov	r5,r2
   ae488:	e13fff17 	ldw	r4,-4(fp)
   ae48c:	00ae3280 	call	ae328 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   ae490:	e0bff117 	ldw	r2,-60(fp)
   ae494:	10880020 	cmpeqi	r2,r2,8192
   ae498:	10803fcc 	andi	r2,r2,255
   ae49c:	00000506 	br	ae4b4 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   ae4a0:	00ae3e00 	call	ae3e0 <alt_get_errno>
   ae4a4:	1007883a 	mov	r3,r2
   ae4a8:	00801444 	movi	r2,81
   ae4ac:	18800015 	stw	r2,0(r3)
    return 0;
   ae4b0:	0005883a 	mov	r2,zero
  }
}
   ae4b4:	e037883a 	mov	sp,fp
   ae4b8:	dfc00117 	ldw	ra,4(sp)
   ae4bc:	df000017 	ldw	fp,0(sp)
   ae4c0:	dec00204 	addi	sp,sp,8
   ae4c4:	f800283a 	ret

000ae4c8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   ae4c8:	defffc04 	addi	sp,sp,-16
   ae4cc:	df000315 	stw	fp,12(sp)
   ae4d0:	df000304 	addi	fp,sp,12
   ae4d4:	e13ffd15 	stw	r4,-12(fp)
   ae4d8:	e17ffe15 	stw	r5,-8(fp)
   ae4dc:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   ae4e0:	e0fffe17 	ldw	r3,-8(fp)
   ae4e4:	e0bffd17 	ldw	r2,-12(fp)
   ae4e8:	18800c26 	beq	r3,r2,ae51c <alt_load_section+0x54>
  {
    while( to != end )
   ae4ec:	00000806 	br	ae510 <alt_load_section+0x48>
    {
      *to++ = *from++;
   ae4f0:	e0bffe17 	ldw	r2,-8(fp)
   ae4f4:	10c00104 	addi	r3,r2,4
   ae4f8:	e0fffe15 	stw	r3,-8(fp)
   ae4fc:	e0fffd17 	ldw	r3,-12(fp)
   ae500:	19000104 	addi	r4,r3,4
   ae504:	e13ffd15 	stw	r4,-12(fp)
   ae508:	18c00017 	ldw	r3,0(r3)
   ae50c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   ae510:	e0fffe17 	ldw	r3,-8(fp)
   ae514:	e0bfff17 	ldw	r2,-4(fp)
   ae518:	18bff51e 	bne	r3,r2,ae4f0 <__alt_data_end+0xfffee4f0>
    {
      *to++ = *from++;
    }
  }
}
   ae51c:	0001883a 	nop
   ae520:	e037883a 	mov	sp,fp
   ae524:	df000017 	ldw	fp,0(sp)
   ae528:	dec00104 	addi	sp,sp,4
   ae52c:	f800283a 	ret

000ae530 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   ae530:	defffe04 	addi	sp,sp,-8
   ae534:	dfc00115 	stw	ra,4(sp)
   ae538:	df000015 	stw	fp,0(sp)
   ae53c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   ae540:	018002f4 	movhi	r6,11
   ae544:	318cb604 	addi	r6,r6,13016
   ae548:	014002f4 	movhi	r5,11
   ae54c:	2945c104 	addi	r5,r5,5892
   ae550:	010002f4 	movhi	r4,11
   ae554:	210cb604 	addi	r4,r4,13016
   ae558:	00ae4c80 	call	ae4c8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   ae55c:	018002b4 	movhi	r6,10
   ae560:	31808c04 	addi	r6,r6,560
   ae564:	014002b4 	movhi	r5,10
   ae568:	29400804 	addi	r5,r5,32
   ae56c:	010002b4 	movhi	r4,10
   ae570:	21000804 	addi	r4,r4,32
   ae574:	00ae4c80 	call	ae4c8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   ae578:	018002f4 	movhi	r6,11
   ae57c:	3185c104 	addi	r6,r6,5892
   ae580:	014002f4 	movhi	r5,11
   ae584:	2944db04 	addi	r5,r5,4972
   ae588:	010002f4 	movhi	r4,11
   ae58c:	2104db04 	addi	r4,r4,4972
   ae590:	00ae4c80 	call	ae4c8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   ae594:	00b04b80 	call	b04b8 <alt_dcache_flush_all>
  alt_icache_flush_all();
   ae598:	00b09540 	call	b0954 <alt_icache_flush_all>
}
   ae59c:	0001883a 	nop
   ae5a0:	e037883a 	mov	sp,fp
   ae5a4:	dfc00117 	ldw	ra,4(sp)
   ae5a8:	df000017 	ldw	fp,0(sp)
   ae5ac:	dec00204 	addi	sp,sp,8
   ae5b0:	f800283a 	ret

000ae5b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   ae5b4:	defffe04 	addi	sp,sp,-8
   ae5b8:	dfc00115 	stw	ra,4(sp)
   ae5bc:	df000015 	stw	fp,0(sp)
   ae5c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   ae5c4:	d0a00b17 	ldw	r2,-32724(gp)
   ae5c8:	10000326 	beq	r2,zero,ae5d8 <alt_get_errno+0x24>
   ae5cc:	d0a00b17 	ldw	r2,-32724(gp)
   ae5d0:	103ee83a 	callr	r2
   ae5d4:	00000106 	br	ae5dc <alt_get_errno+0x28>
   ae5d8:	d0a71904 	addi	r2,gp,-25500
}
   ae5dc:	e037883a 	mov	sp,fp
   ae5e0:	dfc00117 	ldw	ra,4(sp)
   ae5e4:	df000017 	ldw	fp,0(sp)
   ae5e8:	dec00204 	addi	sp,sp,8
   ae5ec:	f800283a 	ret

000ae5f0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   ae5f0:	defff904 	addi	sp,sp,-28
   ae5f4:	dfc00615 	stw	ra,24(sp)
   ae5f8:	df000515 	stw	fp,20(sp)
   ae5fc:	df000504 	addi	fp,sp,20
   ae600:	e13ffd15 	stw	r4,-12(fp)
   ae604:	e17ffe15 	stw	r5,-8(fp)
   ae608:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   ae60c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   ae610:	e0bffd17 	ldw	r2,-12(fp)
   ae614:	10000816 	blt	r2,zero,ae638 <lseek+0x48>
   ae618:	01400304 	movi	r5,12
   ae61c:	e13ffd17 	ldw	r4,-12(fp)
   ae620:	00ab8e00 	call	ab8e0 <__mulsi3>
   ae624:	1007883a 	mov	r3,r2
   ae628:	008002f4 	movhi	r2,11
   ae62c:	10881204 	addi	r2,r2,8264
   ae630:	1885883a 	add	r2,r3,r2
   ae634:	00000106 	br	ae63c <lseek+0x4c>
   ae638:	0005883a 	mov	r2,zero
   ae63c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   ae640:	e0bffc17 	ldw	r2,-16(fp)
   ae644:	10001026 	beq	r2,zero,ae688 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   ae648:	e0bffc17 	ldw	r2,-16(fp)
   ae64c:	10800017 	ldw	r2,0(r2)
   ae650:	10800717 	ldw	r2,28(r2)
   ae654:	10000926 	beq	r2,zero,ae67c <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   ae658:	e0bffc17 	ldw	r2,-16(fp)
   ae65c:	10800017 	ldw	r2,0(r2)
   ae660:	10800717 	ldw	r2,28(r2)
   ae664:	e1bfff17 	ldw	r6,-4(fp)
   ae668:	e17ffe17 	ldw	r5,-8(fp)
   ae66c:	e13ffc17 	ldw	r4,-16(fp)
   ae670:	103ee83a 	callr	r2
   ae674:	e0bffb15 	stw	r2,-20(fp)
   ae678:	00000506 	br	ae690 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   ae67c:	00bfde84 	movi	r2,-134
   ae680:	e0bffb15 	stw	r2,-20(fp)
   ae684:	00000206 	br	ae690 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   ae688:	00bfebc4 	movi	r2,-81
   ae68c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   ae690:	e0bffb17 	ldw	r2,-20(fp)
   ae694:	1000070e 	bge	r2,zero,ae6b4 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   ae698:	00ae5b40 	call	ae5b4 <alt_get_errno>
   ae69c:	1007883a 	mov	r3,r2
   ae6a0:	e0bffb17 	ldw	r2,-20(fp)
   ae6a4:	0085c83a 	sub	r2,zero,r2
   ae6a8:	18800015 	stw	r2,0(r3)
    rc = -1;
   ae6ac:	00bfffc4 	movi	r2,-1
   ae6b0:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   ae6b4:	e0bffb17 	ldw	r2,-20(fp)
}
   ae6b8:	e037883a 	mov	sp,fp
   ae6bc:	dfc00117 	ldw	ra,4(sp)
   ae6c0:	df000017 	ldw	fp,0(sp)
   ae6c4:	dec00204 	addi	sp,sp,8
   ae6c8:	f800283a 	ret

000ae6cc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   ae6cc:	defffd04 	addi	sp,sp,-12
   ae6d0:	dfc00215 	stw	ra,8(sp)
   ae6d4:	df000115 	stw	fp,4(sp)
   ae6d8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   ae6dc:	0009883a 	mov	r4,zero
   ae6e0:	00aedf80 	call	aedf8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   ae6e4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   ae6e8:	00aee300 	call	aee30 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   ae6ec:	018002f4 	movhi	r6,11
   ae6f0:	3185b404 	addi	r6,r6,5840
   ae6f4:	014002f4 	movhi	r5,11
   ae6f8:	2945b404 	addi	r5,r5,5840
   ae6fc:	010002f4 	movhi	r4,11
   ae700:	2105b404 	addi	r4,r4,5840
   ae704:	00b0cf80 	call	b0cf8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   ae708:	00b05b80 	call	b05b8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   ae70c:	010002f4 	movhi	r4,11
   ae710:	21018604 	addi	r4,r4,1560
   ae714:	00b0fd80 	call	b0fd8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   ae718:	d0a72017 	ldw	r2,-25472(gp)
   ae71c:	d0e72117 	ldw	r3,-25468(gp)
   ae720:	d1272217 	ldw	r4,-25464(gp)
   ae724:	200d883a 	mov	r6,r4
   ae728:	180b883a 	mov	r5,r3
   ae72c:	1009883a 	mov	r4,r2
   ae730:	00a026c0 	call	a026c <main>
   ae734:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   ae738:	01000044 	movi	r4,1
   ae73c:	00ae1e80 	call	ae1e8 <close>
  exit (result);
   ae740:	e13fff17 	ldw	r4,-4(fp)
   ae744:	00b0fec0 	call	b0fec <exit>

000ae748 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   ae748:	defffe04 	addi	sp,sp,-8
   ae74c:	df000115 	stw	fp,4(sp)
   ae750:	df000104 	addi	fp,sp,4
   ae754:	e13fff15 	stw	r4,-4(fp)
}
   ae758:	0001883a 	nop
   ae75c:	e037883a 	mov	sp,fp
   ae760:	df000017 	ldw	fp,0(sp)
   ae764:	dec00104 	addi	sp,sp,4
   ae768:	f800283a 	ret

000ae76c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   ae76c:	defffe04 	addi	sp,sp,-8
   ae770:	df000115 	stw	fp,4(sp)
   ae774:	df000104 	addi	fp,sp,4
   ae778:	e13fff15 	stw	r4,-4(fp)
}
   ae77c:	0001883a 	nop
   ae780:	e037883a 	mov	sp,fp
   ae784:	df000017 	ldw	fp,0(sp)
   ae788:	dec00104 	addi	sp,sp,4
   ae78c:	f800283a 	ret

000ae790 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   ae790:	defffe04 	addi	sp,sp,-8
   ae794:	dfc00115 	stw	ra,4(sp)
   ae798:	df000015 	stw	fp,0(sp)
   ae79c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   ae7a0:	d0a00b17 	ldw	r2,-32724(gp)
   ae7a4:	10000326 	beq	r2,zero,ae7b4 <alt_get_errno+0x24>
   ae7a8:	d0a00b17 	ldw	r2,-32724(gp)
   ae7ac:	103ee83a 	callr	r2
   ae7b0:	00000106 	br	ae7b8 <alt_get_errno+0x28>
   ae7b4:	d0a71904 	addi	r2,gp,-25500
}
   ae7b8:	e037883a 	mov	sp,fp
   ae7bc:	dfc00117 	ldw	ra,4(sp)
   ae7c0:	df000017 	ldw	fp,0(sp)
   ae7c4:	dec00204 	addi	sp,sp,8
   ae7c8:	f800283a 	ret

000ae7cc <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   ae7cc:	defffb04 	addi	sp,sp,-20
   ae7d0:	dfc00415 	stw	ra,16(sp)
   ae7d4:	df000315 	stw	fp,12(sp)
   ae7d8:	dc000215 	stw	r16,8(sp)
   ae7dc:	df000304 	addi	fp,sp,12
   ae7e0:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   ae7e4:	e0bffe17 	ldw	r2,-8(fp)
   ae7e8:	10800217 	ldw	r2,8(r2)
   ae7ec:	10d00034 	orhi	r3,r2,16384
   ae7f0:	e0bffe17 	ldw	r2,-8(fp)
   ae7f4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   ae7f8:	e03ffd15 	stw	zero,-12(fp)
   ae7fc:	00002306 	br	ae88c <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   ae800:	040002f4 	movhi	r16,11
   ae804:	84081204 	addi	r16,r16,8264
   ae808:	e0bffd17 	ldw	r2,-12(fp)
   ae80c:	01400304 	movi	r5,12
   ae810:	1009883a 	mov	r4,r2
   ae814:	00ab8e00 	call	ab8e0 <__mulsi3>
   ae818:	8085883a 	add	r2,r16,r2
   ae81c:	10c00017 	ldw	r3,0(r2)
   ae820:	e0bffe17 	ldw	r2,-8(fp)
   ae824:	10800017 	ldw	r2,0(r2)
   ae828:	1880151e 	bne	r3,r2,ae880 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   ae82c:	040002f4 	movhi	r16,11
   ae830:	84081204 	addi	r16,r16,8264
   ae834:	e0bffd17 	ldw	r2,-12(fp)
   ae838:	01400304 	movi	r5,12
   ae83c:	1009883a 	mov	r4,r2
   ae840:	00ab8e00 	call	ab8e0 <__mulsi3>
   ae844:	8085883a 	add	r2,r16,r2
   ae848:	10800204 	addi	r2,r2,8
   ae84c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   ae850:	10000b0e 	bge	r2,zero,ae880 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   ae854:	01400304 	movi	r5,12
   ae858:	e13ffd17 	ldw	r4,-12(fp)
   ae85c:	00ab8e00 	call	ab8e0 <__mulsi3>
   ae860:	1007883a 	mov	r3,r2
   ae864:	008002f4 	movhi	r2,11
   ae868:	10881204 	addi	r2,r2,8264
   ae86c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   ae870:	e0bffe17 	ldw	r2,-8(fp)
   ae874:	18800226 	beq	r3,r2,ae880 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   ae878:	00bffcc4 	movi	r2,-13
   ae87c:	00000806 	br	ae8a0 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   ae880:	e0bffd17 	ldw	r2,-12(fp)
   ae884:	10800044 	addi	r2,r2,1
   ae888:	e0bffd15 	stw	r2,-12(fp)
   ae88c:	d0a00a17 	ldw	r2,-32728(gp)
   ae890:	1007883a 	mov	r3,r2
   ae894:	e0bffd17 	ldw	r2,-12(fp)
   ae898:	18bfd92e 	bgeu	r3,r2,ae800 <__alt_data_end+0xfffee800>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   ae89c:	0005883a 	mov	r2,zero
}
   ae8a0:	e6ffff04 	addi	sp,fp,-4
   ae8a4:	dfc00217 	ldw	ra,8(sp)
   ae8a8:	df000117 	ldw	fp,4(sp)
   ae8ac:	dc000017 	ldw	r16,0(sp)
   ae8b0:	dec00304 	addi	sp,sp,12
   ae8b4:	f800283a 	ret

000ae8b8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   ae8b8:	defff604 	addi	sp,sp,-40
   ae8bc:	dfc00915 	stw	ra,36(sp)
   ae8c0:	df000815 	stw	fp,32(sp)
   ae8c4:	df000804 	addi	fp,sp,32
   ae8c8:	e13ffd15 	stw	r4,-12(fp)
   ae8cc:	e17ffe15 	stw	r5,-8(fp)
   ae8d0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   ae8d4:	00bfffc4 	movi	r2,-1
   ae8d8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   ae8dc:	00bffb44 	movi	r2,-19
   ae8e0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   ae8e4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   ae8e8:	d1600804 	addi	r5,gp,-32736
   ae8ec:	e13ffd17 	ldw	r4,-12(fp)
   ae8f0:	00b06780 	call	b0678 <alt_find_dev>
   ae8f4:	e0bff815 	stw	r2,-32(fp)
   ae8f8:	e0bff817 	ldw	r2,-32(fp)
   ae8fc:	1000051e 	bne	r2,zero,ae914 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   ae900:	e13ffd17 	ldw	r4,-12(fp)
   ae904:	00b07080 	call	b0708 <alt_find_file>
   ae908:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   ae90c:	00800044 	movi	r2,1
   ae910:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   ae914:	e0bff817 	ldw	r2,-32(fp)
   ae918:	10002b26 	beq	r2,zero,ae9c8 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   ae91c:	e13ff817 	ldw	r4,-32(fp)
   ae920:	00b08900 	call	b0890 <alt_get_fd>
   ae924:	e0bff915 	stw	r2,-28(fp)
   ae928:	e0bff917 	ldw	r2,-28(fp)
   ae92c:	1000030e 	bge	r2,zero,ae93c <open+0x84>
    {
      status = index;
   ae930:	e0bff917 	ldw	r2,-28(fp)
   ae934:	e0bffa15 	stw	r2,-24(fp)
   ae938:	00002506 	br	ae9d0 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   ae93c:	01400304 	movi	r5,12
   ae940:	e13ff917 	ldw	r4,-28(fp)
   ae944:	00ab8e00 	call	ab8e0 <__mulsi3>
   ae948:	1007883a 	mov	r3,r2
   ae94c:	008002f4 	movhi	r2,11
   ae950:	10881204 	addi	r2,r2,8264
   ae954:	1885883a 	add	r2,r3,r2
   ae958:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   ae95c:	e0fffe17 	ldw	r3,-8(fp)
   ae960:	00900034 	movhi	r2,16384
   ae964:	10bfffc4 	addi	r2,r2,-1
   ae968:	1886703a 	and	r3,r3,r2
   ae96c:	e0bffc17 	ldw	r2,-16(fp)
   ae970:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   ae974:	e0bffb17 	ldw	r2,-20(fp)
   ae978:	1000051e 	bne	r2,zero,ae990 <open+0xd8>
   ae97c:	e13ffc17 	ldw	r4,-16(fp)
   ae980:	00ae7cc0 	call	ae7cc <alt_file_locked>
   ae984:	e0bffa15 	stw	r2,-24(fp)
   ae988:	e0bffa17 	ldw	r2,-24(fp)
   ae98c:	10001016 	blt	r2,zero,ae9d0 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   ae990:	e0bff817 	ldw	r2,-32(fp)
   ae994:	10800317 	ldw	r2,12(r2)
   ae998:	10000826 	beq	r2,zero,ae9bc <open+0x104>
   ae99c:	e0bff817 	ldw	r2,-32(fp)
   ae9a0:	10800317 	ldw	r2,12(r2)
   ae9a4:	e1ffff17 	ldw	r7,-4(fp)
   ae9a8:	e1bffe17 	ldw	r6,-8(fp)
   ae9ac:	e17ffd17 	ldw	r5,-12(fp)
   ae9b0:	e13ffc17 	ldw	r4,-16(fp)
   ae9b4:	103ee83a 	callr	r2
   ae9b8:	00000106 	br	ae9c0 <open+0x108>
   ae9bc:	0005883a 	mov	r2,zero
   ae9c0:	e0bffa15 	stw	r2,-24(fp)
   ae9c4:	00000206 	br	ae9d0 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   ae9c8:	00bffb44 	movi	r2,-19
   ae9cc:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   ae9d0:	e0bffa17 	ldw	r2,-24(fp)
   ae9d4:	1000090e 	bge	r2,zero,ae9fc <open+0x144>
  {
    alt_release_fd (index);  
   ae9d8:	e13ff917 	ldw	r4,-28(fp)
   ae9dc:	00aeb540 	call	aeb54 <alt_release_fd>
    ALT_ERRNO = -status;
   ae9e0:	00ae7900 	call	ae790 <alt_get_errno>
   ae9e4:	1007883a 	mov	r3,r2
   ae9e8:	e0bffa17 	ldw	r2,-24(fp)
   ae9ec:	0085c83a 	sub	r2,zero,r2
   ae9f0:	18800015 	stw	r2,0(r3)
    return -1;
   ae9f4:	00bfffc4 	movi	r2,-1
   ae9f8:	00000106 	br	aea00 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   ae9fc:	e0bff917 	ldw	r2,-28(fp)
}
   aea00:	e037883a 	mov	sp,fp
   aea04:	dfc00117 	ldw	ra,4(sp)
   aea08:	df000017 	ldw	fp,0(sp)
   aea0c:	dec00204 	addi	sp,sp,8
   aea10:	f800283a 	ret

000aea14 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   aea14:	defffe04 	addi	sp,sp,-8
   aea18:	dfc00115 	stw	ra,4(sp)
   aea1c:	df000015 	stw	fp,0(sp)
   aea20:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   aea24:	d0a00b17 	ldw	r2,-32724(gp)
   aea28:	10000326 	beq	r2,zero,aea38 <alt_get_errno+0x24>
   aea2c:	d0a00b17 	ldw	r2,-32724(gp)
   aea30:	103ee83a 	callr	r2
   aea34:	00000106 	br	aea3c <alt_get_errno+0x28>
   aea38:	d0a71904 	addi	r2,gp,-25500
}
   aea3c:	e037883a 	mov	sp,fp
   aea40:	dfc00117 	ldw	ra,4(sp)
   aea44:	df000017 	ldw	fp,0(sp)
   aea48:	dec00204 	addi	sp,sp,8
   aea4c:	f800283a 	ret

000aea50 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   aea50:	defff904 	addi	sp,sp,-28
   aea54:	dfc00615 	stw	ra,24(sp)
   aea58:	df000515 	stw	fp,20(sp)
   aea5c:	df000504 	addi	fp,sp,20
   aea60:	e13ffd15 	stw	r4,-12(fp)
   aea64:	e17ffe15 	stw	r5,-8(fp)
   aea68:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   aea6c:	e0bffd17 	ldw	r2,-12(fp)
   aea70:	10000816 	blt	r2,zero,aea94 <read+0x44>
   aea74:	01400304 	movi	r5,12
   aea78:	e13ffd17 	ldw	r4,-12(fp)
   aea7c:	00ab8e00 	call	ab8e0 <__mulsi3>
   aea80:	1007883a 	mov	r3,r2
   aea84:	008002f4 	movhi	r2,11
   aea88:	10881204 	addi	r2,r2,8264
   aea8c:	1885883a 	add	r2,r3,r2
   aea90:	00000106 	br	aea98 <read+0x48>
   aea94:	0005883a 	mov	r2,zero
   aea98:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   aea9c:	e0bffb17 	ldw	r2,-20(fp)
   aeaa0:	10002226 	beq	r2,zero,aeb2c <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   aeaa4:	e0bffb17 	ldw	r2,-20(fp)
   aeaa8:	10800217 	ldw	r2,8(r2)
   aeaac:	108000cc 	andi	r2,r2,3
   aeab0:	10800060 	cmpeqi	r2,r2,1
   aeab4:	1000181e 	bne	r2,zero,aeb18 <read+0xc8>
        (fd->dev->read))
   aeab8:	e0bffb17 	ldw	r2,-20(fp)
   aeabc:	10800017 	ldw	r2,0(r2)
   aeac0:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   aeac4:	10001426 	beq	r2,zero,aeb18 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   aeac8:	e0bffb17 	ldw	r2,-20(fp)
   aeacc:	10800017 	ldw	r2,0(r2)
   aead0:	10800517 	ldw	r2,20(r2)
   aead4:	e0ffff17 	ldw	r3,-4(fp)
   aead8:	180d883a 	mov	r6,r3
   aeadc:	e17ffe17 	ldw	r5,-8(fp)
   aeae0:	e13ffb17 	ldw	r4,-20(fp)
   aeae4:	103ee83a 	callr	r2
   aeae8:	e0bffc15 	stw	r2,-16(fp)
   aeaec:	e0bffc17 	ldw	r2,-16(fp)
   aeaf0:	1000070e 	bge	r2,zero,aeb10 <read+0xc0>
        {
          ALT_ERRNO = -rval;
   aeaf4:	00aea140 	call	aea14 <alt_get_errno>
   aeaf8:	1007883a 	mov	r3,r2
   aeafc:	e0bffc17 	ldw	r2,-16(fp)
   aeb00:	0085c83a 	sub	r2,zero,r2
   aeb04:	18800015 	stw	r2,0(r3)
          return -1;
   aeb08:	00bfffc4 	movi	r2,-1
   aeb0c:	00000c06 	br	aeb40 <read+0xf0>
        }
        return rval;
   aeb10:	e0bffc17 	ldw	r2,-16(fp)
   aeb14:	00000a06 	br	aeb40 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   aeb18:	00aea140 	call	aea14 <alt_get_errno>
   aeb1c:	1007883a 	mov	r3,r2
   aeb20:	00800344 	movi	r2,13
   aeb24:	18800015 	stw	r2,0(r3)
   aeb28:	00000406 	br	aeb3c <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   aeb2c:	00aea140 	call	aea14 <alt_get_errno>
   aeb30:	1007883a 	mov	r3,r2
   aeb34:	00801444 	movi	r2,81
   aeb38:	18800015 	stw	r2,0(r3)
  }
  return -1;
   aeb3c:	00bfffc4 	movi	r2,-1
}
   aeb40:	e037883a 	mov	sp,fp
   aeb44:	dfc00117 	ldw	ra,4(sp)
   aeb48:	df000017 	ldw	fp,0(sp)
   aeb4c:	dec00204 	addi	sp,sp,8
   aeb50:	f800283a 	ret

000aeb54 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   aeb54:	defffc04 	addi	sp,sp,-16
   aeb58:	dfc00315 	stw	ra,12(sp)
   aeb5c:	df000215 	stw	fp,8(sp)
   aeb60:	dc000115 	stw	r16,4(sp)
   aeb64:	df000204 	addi	fp,sp,8
   aeb68:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   aeb6c:	e0bffe17 	ldw	r2,-8(fp)
   aeb70:	108000d0 	cmplti	r2,r2,3
   aeb74:	1000111e 	bne	r2,zero,aebbc <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   aeb78:	040002f4 	movhi	r16,11
   aeb7c:	84081204 	addi	r16,r16,8264
   aeb80:	e0bffe17 	ldw	r2,-8(fp)
   aeb84:	01400304 	movi	r5,12
   aeb88:	1009883a 	mov	r4,r2
   aeb8c:	00ab8e00 	call	ab8e0 <__mulsi3>
   aeb90:	8085883a 	add	r2,r16,r2
   aeb94:	10800204 	addi	r2,r2,8
   aeb98:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   aeb9c:	040002f4 	movhi	r16,11
   aeba0:	84081204 	addi	r16,r16,8264
   aeba4:	e0bffe17 	ldw	r2,-8(fp)
   aeba8:	01400304 	movi	r5,12
   aebac:	1009883a 	mov	r4,r2
   aebb0:	00ab8e00 	call	ab8e0 <__mulsi3>
   aebb4:	8085883a 	add	r2,r16,r2
   aebb8:	10000015 	stw	zero,0(r2)
  }
}
   aebbc:	0001883a 	nop
   aebc0:	e6ffff04 	addi	sp,fp,-4
   aebc4:	dfc00217 	ldw	ra,8(sp)
   aebc8:	df000117 	ldw	fp,4(sp)
   aebcc:	dc000017 	ldw	r16,0(sp)
   aebd0:	dec00304 	addi	sp,sp,12
   aebd4:	f800283a 	ret

000aebd8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   aebd8:	defff904 	addi	sp,sp,-28
   aebdc:	df000615 	stw	fp,24(sp)
   aebe0:	df000604 	addi	fp,sp,24
   aebe4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   aebe8:	0005303a 	rdctl	r2,status
   aebec:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   aebf0:	e0fffe17 	ldw	r3,-8(fp)
   aebf4:	00bfff84 	movi	r2,-2
   aebf8:	1884703a 	and	r2,r3,r2
   aebfc:	1001703a 	wrctl	status,r2
  
  return context;
   aec00:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   aec04:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   aec08:	d0a00c17 	ldw	r2,-32720(gp)
   aec0c:	10c000c4 	addi	r3,r2,3
   aec10:	00bfff04 	movi	r2,-4
   aec14:	1884703a 	and	r2,r3,r2
   aec18:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   aec1c:	d0e00c17 	ldw	r3,-32720(gp)
   aec20:	e0bfff17 	ldw	r2,-4(fp)
   aec24:	1887883a 	add	r3,r3,r2
   aec28:	00800334 	movhi	r2,12
   aec2c:	10800004 	addi	r2,r2,0
   aec30:	10c0062e 	bgeu	r2,r3,aec4c <sbrk+0x74>
   aec34:	e0bffb17 	ldw	r2,-20(fp)
   aec38:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   aec3c:	e0bffa17 	ldw	r2,-24(fp)
   aec40:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   aec44:	00bfffc4 	movi	r2,-1
   aec48:	00000b06 	br	aec78 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   aec4c:	d0a00c17 	ldw	r2,-32720(gp)
   aec50:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   aec54:	d0e00c17 	ldw	r3,-32720(gp)
   aec58:	e0bfff17 	ldw	r2,-4(fp)
   aec5c:	1885883a 	add	r2,r3,r2
   aec60:	d0a00c15 	stw	r2,-32720(gp)
   aec64:	e0bffb17 	ldw	r2,-20(fp)
   aec68:	e0bffc15 	stw	r2,-16(fp)
   aec6c:	e0bffc17 	ldw	r2,-16(fp)
   aec70:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   aec74:	e0bffd17 	ldw	r2,-12(fp)
} 
   aec78:	e037883a 	mov	sp,fp
   aec7c:	df000017 	ldw	fp,0(sp)
   aec80:	dec00104 	addi	sp,sp,4
   aec84:	f800283a 	ret

000aec88 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   aec88:	defffe04 	addi	sp,sp,-8
   aec8c:	dfc00115 	stw	ra,4(sp)
   aec90:	df000015 	stw	fp,0(sp)
   aec94:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   aec98:	d0a00b17 	ldw	r2,-32724(gp)
   aec9c:	10000326 	beq	r2,zero,aecac <alt_get_errno+0x24>
   aeca0:	d0a00b17 	ldw	r2,-32724(gp)
   aeca4:	103ee83a 	callr	r2
   aeca8:	00000106 	br	aecb0 <alt_get_errno+0x28>
   aecac:	d0a71904 	addi	r2,gp,-25500
}
   aecb0:	e037883a 	mov	sp,fp
   aecb4:	dfc00117 	ldw	ra,4(sp)
   aecb8:	df000017 	ldw	fp,0(sp)
   aecbc:	dec00204 	addi	sp,sp,8
   aecc0:	f800283a 	ret

000aecc4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   aecc4:	defff904 	addi	sp,sp,-28
   aecc8:	dfc00615 	stw	ra,24(sp)
   aeccc:	df000515 	stw	fp,20(sp)
   aecd0:	df000504 	addi	fp,sp,20
   aecd4:	e13ffd15 	stw	r4,-12(fp)
   aecd8:	e17ffe15 	stw	r5,-8(fp)
   aecdc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   aece0:	e0bffd17 	ldw	r2,-12(fp)
   aece4:	10000816 	blt	r2,zero,aed08 <write+0x44>
   aece8:	01400304 	movi	r5,12
   aecec:	e13ffd17 	ldw	r4,-12(fp)
   aecf0:	00ab8e00 	call	ab8e0 <__mulsi3>
   aecf4:	1007883a 	mov	r3,r2
   aecf8:	008002f4 	movhi	r2,11
   aecfc:	10881204 	addi	r2,r2,8264
   aed00:	1885883a 	add	r2,r3,r2
   aed04:	00000106 	br	aed0c <write+0x48>
   aed08:	0005883a 	mov	r2,zero
   aed0c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   aed10:	e0bffb17 	ldw	r2,-20(fp)
   aed14:	10002126 	beq	r2,zero,aed9c <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   aed18:	e0bffb17 	ldw	r2,-20(fp)
   aed1c:	10800217 	ldw	r2,8(r2)
   aed20:	108000cc 	andi	r2,r2,3
   aed24:	10001826 	beq	r2,zero,aed88 <write+0xc4>
   aed28:	e0bffb17 	ldw	r2,-20(fp)
   aed2c:	10800017 	ldw	r2,0(r2)
   aed30:	10800617 	ldw	r2,24(r2)
   aed34:	10001426 	beq	r2,zero,aed88 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   aed38:	e0bffb17 	ldw	r2,-20(fp)
   aed3c:	10800017 	ldw	r2,0(r2)
   aed40:	10800617 	ldw	r2,24(r2)
   aed44:	e0ffff17 	ldw	r3,-4(fp)
   aed48:	180d883a 	mov	r6,r3
   aed4c:	e17ffe17 	ldw	r5,-8(fp)
   aed50:	e13ffb17 	ldw	r4,-20(fp)
   aed54:	103ee83a 	callr	r2
   aed58:	e0bffc15 	stw	r2,-16(fp)
   aed5c:	e0bffc17 	ldw	r2,-16(fp)
   aed60:	1000070e 	bge	r2,zero,aed80 <write+0xbc>
      {
        ALT_ERRNO = -rval;
   aed64:	00aec880 	call	aec88 <alt_get_errno>
   aed68:	1007883a 	mov	r3,r2
   aed6c:	e0bffc17 	ldw	r2,-16(fp)
   aed70:	0085c83a 	sub	r2,zero,r2
   aed74:	18800015 	stw	r2,0(r3)
        return -1;
   aed78:	00bfffc4 	movi	r2,-1
   aed7c:	00000c06 	br	aedb0 <write+0xec>
      }
      return rval;
   aed80:	e0bffc17 	ldw	r2,-16(fp)
   aed84:	00000a06 	br	aedb0 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   aed88:	00aec880 	call	aec88 <alt_get_errno>
   aed8c:	1007883a 	mov	r3,r2
   aed90:	00800344 	movi	r2,13
   aed94:	18800015 	stw	r2,0(r3)
   aed98:	00000406 	br	aedac <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   aed9c:	00aec880 	call	aec88 <alt_get_errno>
   aeda0:	1007883a 	mov	r3,r2
   aeda4:	00801444 	movi	r2,81
   aeda8:	18800015 	stw	r2,0(r3)
  }
  return -1;
   aedac:	00bfffc4 	movi	r2,-1
}
   aedb0:	e037883a 	mov	sp,fp
   aedb4:	dfc00117 	ldw	ra,4(sp)
   aedb8:	df000017 	ldw	fp,0(sp)
   aedbc:	dec00204 	addi	sp,sp,8
   aedc0:	f800283a 	ret

000aedc4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   aedc4:	defffd04 	addi	sp,sp,-12
   aedc8:	dfc00215 	stw	ra,8(sp)
   aedcc:	df000115 	stw	fp,4(sp)
   aedd0:	df000104 	addi	fp,sp,4
   aedd4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   aedd8:	d1600804 	addi	r5,gp,-32736
   aeddc:	e13fff17 	ldw	r4,-4(fp)
   aede0:	00b05140 	call	b0514 <alt_dev_llist_insert>
}
   aede4:	e037883a 	mov	sp,fp
   aede8:	dfc00117 	ldw	ra,4(sp)
   aedec:	df000017 	ldw	fp,0(sp)
   aedf0:	dec00204 	addi	sp,sp,8
   aedf4:	f800283a 	ret

000aedf8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   aedf8:	defffd04 	addi	sp,sp,-12
   aedfc:	dfc00215 	stw	ra,8(sp)
   aee00:	df000115 	stw	fp,4(sp)
   aee04:	df000104 	addi	fp,sp,4
   aee08:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU_1F, cpu_1f);
   aee0c:	00b0f180 	call	b0f18 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   aee10:	00800044 	movi	r2,1
   aee14:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   aee18:	0001883a 	nop
   aee1c:	e037883a 	mov	sp,fp
   aee20:	dfc00117 	ldw	ra,4(sp)
   aee24:	df000017 	ldw	fp,0(sp)
   aee28:	dec00204 	addi	sp,sp,8
   aee2c:	f800283a 	ret

000aee30 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   aee30:	defffe04 	addi	sp,sp,-8
   aee34:	dfc00115 	stw	ra,4(sp)
   aee38:	df000015 	stw	fp,0(sp)
   aee3c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_1F, timer_1f);
   aee40:	01c0fa04 	movi	r7,1000
   aee44:	01800044 	movi	r6,1
   aee48:	000b883a 	mov	r5,zero
   aee4c:	01020034 	movhi	r4,2048
   aee50:	21040804 	addi	r4,r4,4128
   aee54:	00afe8c0 	call	afe8c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_FIFO_INIT ( FIFO_1E, fifo_1e);
   aee58:	0001883a 	nop
    ALTERA_AVALON_FIFO_INIT ( FIFO_Q_6, fifo_q_6);
   aee5c:	0001883a 	nop
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_1F, jtag_uart_1f);
   aee60:	01800404 	movi	r6,16
   aee64:	000b883a 	mov	r5,zero
   aee68:	010002f4 	movhi	r4,11
   aee6c:	21087c04 	addi	r4,r4,8688
   aee70:	00af5100 	call	af510 <altera_avalon_jtag_uart_init>
   aee74:	010002f4 	movhi	r4,11
   aee78:	21087204 	addi	r4,r4,8648
   aee7c:	00aedc40 	call	aedc4 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_1F, sysid_1f);
   aee80:	0001883a 	nop
    ALTERA_HOSTFS_INIT ( ALTERA_HOSTFS, altera_hostfs);
   aee84:	010002f4 	movhi	r4,11
   aee88:	210c8a04 	addi	r4,r4,12840
   aee8c:	00b08100 	call	b0810 <alt_fs_reg>
}
   aee90:	0001883a 	nop
   aee94:	e037883a 	mov	sp,fp
   aee98:	dfc00117 	ldw	ra,4(sp)
   aee9c:	df000017 	ldw	fp,0(sp)
   aeea0:	dec00204 	addi	sp,sp,8
   aeea4:	f800283a 	ret

000aeea8 <altera_avalon_fifo_init>:



int altera_avalon_fifo_init(alt_u32 address, alt_u32 ienable,
                            alt_u32 emptymark, alt_u32 fullmark)
{
   aeea8:	defffa04 	addi	sp,sp,-24
   aeeac:	dfc00515 	stw	ra,20(sp)
   aeeb0:	df000415 	stw	fp,16(sp)
   aeeb4:	df000404 	addi	fp,sp,16
   aeeb8:	e13ffc15 	stw	r4,-16(fp)
   aeebc:	e17ffd15 	stw	r5,-12(fp)
   aeec0:	e1bffe15 	stw	r6,-8(fp)
   aeec4:	e1ffff15 	stw	r7,-4(fp)
    if(altera_avalon_fifo_clear_event(address, ALTERA_AVALON_FIFO_EVENT_ALL) != ALTERA_AVALON_FIFO_OK)
   aeec8:	01400fc4 	movi	r5,63
   aeecc:	e13ffc17 	ldw	r4,-16(fp)
   aeed0:	00af0740 	call	af074 <altera_avalon_fifo_clear_event>
   aeed4:	10000226 	beq	r2,zero,aeee0 <altera_avalon_fifo_init+0x38>
    {
        return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
   aeed8:	00bfffc4 	movi	r2,-1
   aeedc:	00001306 	br	aef2c <altera_avalon_fifo_init+0x84>
    }

    if( altera_avalon_fifo_write_ienable(address, ienable) != ALTERA_AVALON_FIFO_OK)
   aeee0:	e17ffd17 	ldw	r5,-12(fp)
   aeee4:	e13ffc17 	ldw	r4,-16(fp)
   aeee8:	00af0d40 	call	af0d4 <altera_avalon_fifo_write_ienable>
   aeeec:	10000226 	beq	r2,zero,aeef8 <altera_avalon_fifo_init+0x50>
    {
         return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
   aeef0:	00bfff84 	movi	r2,-2
   aeef4:	00000d06 	br	aef2c <altera_avalon_fifo_init+0x84>
    }

    if( altera_avalon_fifo_write_almostfull(address, fullmark) != ALTERA_AVALON_FIFO_OK)
   aeef8:	e17fff17 	ldw	r5,-4(fp)
   aeefc:	e13ffc17 	ldw	r4,-16(fp)
   aef00:	00af1300 	call	af130 <altera_avalon_fifo_write_almostfull>
   aef04:	10000226 	beq	r2,zero,aef10 <altera_avalon_fifo_init+0x68>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   aef08:	00bfff44 	movi	r2,-3
   aef0c:	00000706 	br	aef2c <altera_avalon_fifo_init+0x84>
    }
  
    if( altera_avalon_fifo_write_almostempty(address, emptymark) != ALTERA_AVALON_FIFO_OK)
   aef10:	e17ffe17 	ldw	r5,-8(fp)
   aef14:	e13ffc17 	ldw	r4,-16(fp)
   aef18:	00af18c0 	call	af18c <altera_avalon_fifo_write_almostempty>
   aef1c:	10000226 	beq	r2,zero,aef28 <altera_avalon_fifo_init+0x80>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   aef20:	00bfff44 	movi	r2,-3
   aef24:	00000106 	br	aef2c <altera_avalon_fifo_init+0x84>
    }

    return ALTERA_AVALON_FIFO_OK;
   aef28:	0005883a 	mov	r2,zero
}
   aef2c:	e037883a 	mov	sp,fp
   aef30:	dfc00117 	ldw	ra,4(sp)
   aef34:	df000017 	ldw	fp,0(sp)
   aef38:	dec00204 	addi	sp,sp,8
   aef3c:	f800283a 	ret

000aef40 <altera_avalon_fifo_read_status>:

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
   aef40:	defffd04 	addi	sp,sp,-12
   aef44:	df000215 	stw	fp,8(sp)
   aef48:	df000204 	addi	fp,sp,8
   aef4c:	e13ffe15 	stw	r4,-8(fp)
   aef50:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
   aef54:	e0bffe17 	ldw	r2,-8(fp)
   aef58:	10800104 	addi	r2,r2,4
   aef5c:	10800037 	ldwio	r2,0(r2)
   aef60:	1007883a 	mov	r3,r2
   aef64:	e0bfff17 	ldw	r2,-4(fp)
   aef68:	1884703a 	and	r2,r3,r2
}
   aef6c:	e037883a 	mov	sp,fp
   aef70:	df000017 	ldw	fp,0(sp)
   aef74:	dec00104 	addi	sp,sp,4
   aef78:	f800283a 	ret

000aef7c <altera_avalon_fifo_read_ienable>:

int altera_avalon_fifo_read_ienable(alt_u32 address, alt_u32 mask)
{
   aef7c:	defffd04 	addi	sp,sp,-12
   aef80:	df000215 	stw	fp,8(sp)
   aef84:	df000204 	addi	fp,sp,8
   aef88:	e13ffe15 	stw	r4,-8(fp)
   aef8c:	e17fff15 	stw	r5,-4(fp)
	
    return (IORD_ALTERA_AVALON_FIFO_IENABLE(address) & mask);
   aef90:	e0bffe17 	ldw	r2,-8(fp)
   aef94:	10800304 	addi	r2,r2,12
   aef98:	10800037 	ldwio	r2,0(r2)
   aef9c:	1007883a 	mov	r3,r2
   aefa0:	e0bfff17 	ldw	r2,-4(fp)
   aefa4:	1884703a 	and	r2,r3,r2
}
   aefa8:	e037883a 	mov	sp,fp
   aefac:	df000017 	ldw	fp,0(sp)
   aefb0:	dec00104 	addi	sp,sp,4
   aefb4:	f800283a 	ret

000aefb8 <altera_avalon_fifo_read_almostfull>:

int altera_avalon_fifo_read_almostfull(alt_u32 address)
{
   aefb8:	defffe04 	addi	sp,sp,-8
   aefbc:	df000115 	stw	fp,4(sp)
   aefc0:	df000104 	addi	fp,sp,4
   aefc4:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address);
   aefc8:	e0bfff17 	ldw	r2,-4(fp)
   aefcc:	10800404 	addi	r2,r2,16
   aefd0:	10800037 	ldwio	r2,0(r2)
}
   aefd4:	e037883a 	mov	sp,fp
   aefd8:	df000017 	ldw	fp,0(sp)
   aefdc:	dec00104 	addi	sp,sp,4
   aefe0:	f800283a 	ret

000aefe4 <altera_avalon_fifo_read_almostempty>:

int altera_avalon_fifo_read_almostempty(alt_u32 address)
{
   aefe4:	defffe04 	addi	sp,sp,-8
   aefe8:	df000115 	stw	fp,4(sp)
   aefec:	df000104 	addi	fp,sp,4
   aeff0:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address);
   aeff4:	e0bfff17 	ldw	r2,-4(fp)
   aeff8:	10800504 	addi	r2,r2,20
   aeffc:	10800037 	ldwio	r2,0(r2)
}
   af000:	e037883a 	mov	sp,fp
   af004:	df000017 	ldw	fp,0(sp)
   af008:	dec00104 	addi	sp,sp,4
   af00c:	f800283a 	ret

000af010 <altera_avalon_fifo_read_event>:

int altera_avalon_fifo_read_event(alt_u32 address, alt_u32 mask)
{
   af010:	defffd04 	addi	sp,sp,-12
   af014:	df000215 	stw	fp,8(sp)
   af018:	df000204 	addi	fp,sp,8
   af01c:	e13ffe15 	stw	r4,-8(fp)
   af020:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask);
   af024:	e0bffe17 	ldw	r2,-8(fp)
   af028:	10800204 	addi	r2,r2,8
   af02c:	10800037 	ldwio	r2,0(r2)
   af030:	1007883a 	mov	r3,r2
   af034:	e0bfff17 	ldw	r2,-4(fp)
   af038:	1884703a 	and	r2,r3,r2
}
   af03c:	e037883a 	mov	sp,fp
   af040:	df000017 	ldw	fp,0(sp)
   af044:	dec00104 	addi	sp,sp,4
   af048:	f800283a 	ret

000af04c <altera_avalon_fifo_read_level>:

int altera_avalon_fifo_read_level(alt_u32 address)
{
   af04c:	defffe04 	addi	sp,sp,-8
   af050:	df000115 	stw	fp,4(sp)
   af054:	df000104 	addi	fp,sp,4
   af058:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_LEVEL(address);
   af05c:	e0bfff17 	ldw	r2,-4(fp)
   af060:	10800037 	ldwio	r2,0(r2)
}
   af064:	e037883a 	mov	sp,fp
   af068:	df000017 	ldw	fp,0(sp)
   af06c:	dec00104 	addi	sp,sp,4
   af070:	f800283a 	ret

000af074 <altera_avalon_fifo_clear_event>:

int altera_avalon_fifo_clear_event(alt_u32 address, alt_u32 mask)
{
   af074:	defffd04 	addi	sp,sp,-12
   af078:	df000215 	stw	fp,8(sp)
   af07c:	df000204 	addi	fp,sp,8
   af080:	e13ffe15 	stw	r4,-8(fp)
   af084:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_EVENT(address, mask);
   af088:	e0bffe17 	ldw	r2,-8(fp)
   af08c:	10800204 	addi	r2,r2,8
   af090:	1007883a 	mov	r3,r2
   af094:	e0bfff17 	ldw	r2,-4(fp)
   af098:	18800035 	stwio	r2,0(r3)
    if((IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask) == 0)
   af09c:	e0bffe17 	ldw	r2,-8(fp)
   af0a0:	10800204 	addi	r2,r2,8
   af0a4:	10800037 	ldwio	r2,0(r2)
   af0a8:	1007883a 	mov	r3,r2
   af0ac:	e0bfff17 	ldw	r2,-4(fp)
   af0b0:	1884703a 	and	r2,r3,r2
   af0b4:	1000021e 	bne	r2,zero,af0c0 <altera_avalon_fifo_clear_event+0x4c>
        return ALTERA_AVALON_FIFO_OK;
   af0b8:	0005883a 	mov	r2,zero
   af0bc:	00000106 	br	af0c4 <altera_avalon_fifo_clear_event+0x50>
    else
    return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
   af0c0:	00bfffc4 	movi	r2,-1
}
   af0c4:	e037883a 	mov	sp,fp
   af0c8:	df000017 	ldw	fp,0(sp)
   af0cc:	dec00104 	addi	sp,sp,4
   af0d0:	f800283a 	ret

000af0d4 <altera_avalon_fifo_write_ienable>:

int altera_avalon_fifo_write_ienable(alt_u32 address, alt_u32 mask)
{
   af0d4:	defffd04 	addi	sp,sp,-12
   af0d8:	df000215 	stw	fp,8(sp)
   af0dc:	df000204 	addi	fp,sp,8
   af0e0:	e13ffe15 	stw	r4,-8(fp)
   af0e4:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_IENABLE(address, mask);
   af0e8:	e0bffe17 	ldw	r2,-8(fp)
   af0ec:	10800304 	addi	r2,r2,12
   af0f0:	1007883a 	mov	r3,r2
   af0f4:	e0bfff17 	ldw	r2,-4(fp)
   af0f8:	18800035 	stwio	r2,0(r3)
    if(IORD_ALTERA_AVALON_FIFO_IENABLE(address) == mask)
   af0fc:	e0bffe17 	ldw	r2,-8(fp)
   af100:	10800304 	addi	r2,r2,12
   af104:	10800037 	ldwio	r2,0(r2)
   af108:	1007883a 	mov	r3,r2
   af10c:	e0bfff17 	ldw	r2,-4(fp)
   af110:	1880021e 	bne	r3,r2,af11c <altera_avalon_fifo_write_ienable+0x48>
        return ALTERA_AVALON_FIFO_OK;
   af114:	0005883a 	mov	r2,zero
   af118:	00000106 	br	af120 <altera_avalon_fifo_write_ienable+0x4c>
    else
        return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
   af11c:	00bfff84 	movi	r2,-2
}
   af120:	e037883a 	mov	sp,fp
   af124:	df000017 	ldw	fp,0(sp)
   af128:	dec00104 	addi	sp,sp,4
   af12c:	f800283a 	ret

000af130 <altera_avalon_fifo_write_almostfull>:

int altera_avalon_fifo_write_almostfull(alt_u32 address, alt_u32 data)
{
   af130:	defffd04 	addi	sp,sp,-12
   af134:	df000215 	stw	fp,8(sp)
   af138:	df000204 	addi	fp,sp,8
   af13c:	e13ffe15 	stw	r4,-8(fp)
   af140:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTFULL(address, data);
   af144:	e0bffe17 	ldw	r2,-8(fp)
   af148:	10800404 	addi	r2,r2,16
   af14c:	1007883a 	mov	r3,r2
   af150:	e0bfff17 	ldw	r2,-4(fp)
   af154:	18800035 	stwio	r2,0(r3)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address) == data)
   af158:	e0bffe17 	ldw	r2,-8(fp)
   af15c:	10800404 	addi	r2,r2,16
   af160:	10800037 	ldwio	r2,0(r2)
   af164:	1007883a 	mov	r3,r2
   af168:	e0bfff17 	ldw	r2,-4(fp)
   af16c:	1880021e 	bne	r3,r2,af178 <altera_avalon_fifo_write_almostfull+0x48>
        return ALTERA_AVALON_FIFO_OK;
   af170:	0005883a 	mov	r2,zero
   af174:	00000106 	br	af17c <altera_avalon_fifo_write_almostfull+0x4c>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   af178:	00bfff44 	movi	r2,-3
}
   af17c:	e037883a 	mov	sp,fp
   af180:	df000017 	ldw	fp,0(sp)
   af184:	dec00104 	addi	sp,sp,4
   af188:	f800283a 	ret

000af18c <altera_avalon_fifo_write_almostempty>:

int altera_avalon_fifo_write_almostempty(alt_u32 address, alt_u32 data)
{
   af18c:	defffd04 	addi	sp,sp,-12
   af190:	df000215 	stw	fp,8(sp)
   af194:	df000204 	addi	fp,sp,8
   af198:	e13ffe15 	stw	r4,-8(fp)
   af19c:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address, data);
   af1a0:	e0bffe17 	ldw	r2,-8(fp)
   af1a4:	10800504 	addi	r2,r2,20
   af1a8:	1007883a 	mov	r3,r2
   af1ac:	e0bfff17 	ldw	r2,-4(fp)
   af1b0:	18800035 	stwio	r2,0(r3)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address) == data)
   af1b4:	e0bffe17 	ldw	r2,-8(fp)
   af1b8:	10800504 	addi	r2,r2,20
   af1bc:	10800037 	ldwio	r2,0(r2)
   af1c0:	1007883a 	mov	r3,r2
   af1c4:	e0bfff17 	ldw	r2,-4(fp)
   af1c8:	1880021e 	bne	r3,r2,af1d4 <altera_avalon_fifo_write_almostempty+0x48>
        return ALTERA_AVALON_FIFO_OK;
   af1cc:	0005883a 	mov	r2,zero
   af1d0:	00000106 	br	af1d8 <altera_avalon_fifo_write_almostempty+0x4c>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   af1d4:	00bfff44 	movi	r2,-3
}
   af1d8:	e037883a 	mov	sp,fp
   af1dc:	df000017 	ldw	fp,0(sp)
   af1e0:	dec00104 	addi	sp,sp,4
   af1e4:	f800283a 	ret

000af1e8 <altera_avalon_fifo_write_fifo>:

int altera_avalon_fifo_write_fifo(alt_u32 write_address,
                                  alt_u32 ctrl_address,
                                  alt_u32 data)
{
   af1e8:	defffb04 	addi	sp,sp,-20
   af1ec:	dfc00415 	stw	ra,16(sp)
   af1f0:	df000315 	stw	fp,12(sp)
   af1f4:	df000304 	addi	fp,sp,12
   af1f8:	e13ffd15 	stw	r4,-12(fp)
   af1fc:	e17ffe15 	stw	r5,-8(fp)
   af200:	e1bfff15 	stw	r6,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
   af204:	01400044 	movi	r5,1
   af208:	e13ffe17 	ldw	r4,-8(fp)
   af20c:	00aef400 	call	aef40 <altera_avalon_fifo_read_status>
   af210:	1000051e 	bne	r2,zero,af228 <altera_avalon_fifo_write_fifo+0x40>
    {
        IOWR_ALTERA_AVALON_FIFO_DATA(write_address, data);
   af214:	e0bffd17 	ldw	r2,-12(fp)
   af218:	e0ffff17 	ldw	r3,-4(fp)
   af21c:	10c00035 	stwio	r3,0(r2)
        return ALTERA_AVALON_FIFO_OK;
   af220:	0005883a 	mov	r2,zero
   af224:	00000106 	br	af22c <altera_avalon_fifo_write_fifo+0x44>
    }
    else
    {
        return ALTERA_AVALON_FIFO_FULL;
   af228:	00bfff04 	movi	r2,-4
    }
}
   af22c:	e037883a 	mov	sp,fp
   af230:	dfc00117 	ldw	ra,4(sp)
   af234:	df000017 	ldw	fp,0(sp)
   af238:	dec00204 	addi	sp,sp,8
   af23c:	f800283a 	ret

000af240 <altera_avalon_read_fifo>:

int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)
{
   af240:	defffa04 	addi	sp,sp,-24
   af244:	dfc00515 	stw	ra,20(sp)
   af248:	df000415 	stw	fp,16(sp)
   af24c:	df000404 	addi	fp,sp,16
   af250:	e13ffd15 	stw	r4,-12(fp)
   af254:	e17ffe15 	stw	r5,-8(fp)
   af258:	e1bfff15 	stw	r6,-4(fp)
    int return_val = 0;
   af25c:	e03ffc15 	stw	zero,-16(fp)
    *data = 0;
   af260:	e0bfff17 	ldw	r2,-4(fp)
   af264:	10000015 	stw	zero,0(r2)
    
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
   af268:	01400084 	movi	r5,2
   af26c:	e13ffe17 	ldw	r4,-8(fp)
   af270:	00aef400 	call	aef40 <altera_avalon_fifo_read_status>
   af274:	1000071e 	bne	r2,zero,af294 <altera_avalon_read_fifo+0x54>
    {
        return_val = altera_avalon_fifo_read_level(ctrl_address);
   af278:	e13ffe17 	ldw	r4,-8(fp)
   af27c:	00af04c0 	call	af04c <altera_avalon_fifo_read_level>
   af280:	e0bffc15 	stw	r2,-16(fp)
        *data = IORD_ALTERA_AVALON_FIFO_DATA(read_address);
   af284:	e0bffd17 	ldw	r2,-12(fp)
   af288:	10c00037 	ldwio	r3,0(r2)
   af28c:	e0bfff17 	ldw	r2,-4(fp)
   af290:	10c00015 	stw	r3,0(r2)
    
    }
    return return_val;
   af294:	e0bffc17 	ldw	r2,-16(fp)
}
   af298:	e037883a 	mov	sp,fp
   af29c:	dfc00117 	ldw	ra,4(sp)
   af2a0:	df000017 	ldw	fp,0(sp)
   af2a4:	dec00204 	addi	sp,sp,8
   af2a8:	f800283a 	ret

000af2ac <altera_avalon_fifo_read_fifo>:

int altera_avalon_fifo_read_fifo(alt_u32 read_address, alt_u32 ctrl_address)
{
   af2ac:	defffc04 	addi	sp,sp,-16
   af2b0:	dfc00315 	stw	ra,12(sp)
   af2b4:	df000215 	stw	fp,8(sp)
   af2b8:	df000204 	addi	fp,sp,8
   af2bc:	e13ffe15 	stw	r4,-8(fp)
   af2c0:	e17fff15 	stw	r5,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
   af2c4:	01400084 	movi	r5,2
   af2c8:	e13fff17 	ldw	r4,-4(fp)
   af2cc:	00aef400 	call	aef40 <altera_avalon_fifo_read_status>
   af2d0:	1000031e 	bne	r2,zero,af2e0 <altera_avalon_fifo_read_fifo+0x34>
    {
        return IORD_ALTERA_AVALON_FIFO_DATA(read_address);
   af2d4:	e0bffe17 	ldw	r2,-8(fp)
   af2d8:	10800037 	ldwio	r2,0(r2)
   af2dc:	00000106 	br	af2e4 <altera_avalon_fifo_read_fifo+0x38>
    }
    return 0;
   af2e0:	0005883a 	mov	r2,zero
}
   af2e4:	e037883a 	mov	sp,fp
   af2e8:	dfc00117 	ldw	ra,4(sp)
   af2ec:	df000017 	ldw	fp,0(sp)
   af2f0:	dec00204 	addi	sp,sp,8
   af2f4:	f800283a 	ret

000af2f8 <altera_avalon_fifo_write_other_info>:

int altera_avalon_fifo_write_other_info(alt_u32 write_address,
					alt_u32 ctrl_address,
					alt_u32 data)
{
   af2f8:	defffb04 	addi	sp,sp,-20
   af2fc:	dfc00415 	stw	ra,16(sp)
   af300:	df000315 	stw	fp,12(sp)
   af304:	df000304 	addi	fp,sp,12
   af308:	e13ffd15 	stw	r4,-12(fp)
   af30c:	e17ffe15 	stw	r5,-8(fp)
   af310:	e1bfff15 	stw	r6,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
   af314:	01400044 	movi	r5,1
   af318:	e13ffe17 	ldw	r4,-8(fp)
   af31c:	00aef400 	call	aef40 <altera_avalon_fifo_read_status>
   af320:	1000071e 	bne	r2,zero,af340 <altera_avalon_fifo_write_other_info+0x48>
    {
	IOWR_ALTERA_AVALON_FIFO_OTHER_INFO(write_address, data);
   af324:	e0bffd17 	ldw	r2,-12(fp)
   af328:	10800104 	addi	r2,r2,4
   af32c:	1007883a 	mov	r3,r2
   af330:	e0bfff17 	ldw	r2,-4(fp)
   af334:	18800035 	stwio	r2,0(r3)
	return ALTERA_AVALON_FIFO_OK;
   af338:	0005883a 	mov	r2,zero
   af33c:	00000106 	br	af344 <altera_avalon_fifo_write_other_info+0x4c>
    }
    else
    {
	return ALTERA_AVALON_FIFO_FULL;
   af340:	00bfff04 	movi	r2,-4
    }
}
   af344:	e037883a 	mov	sp,fp
   af348:	dfc00117 	ldw	ra,4(sp)
   af34c:	df000017 	ldw	fp,0(sp)
   af350:	dec00204 	addi	sp,sp,8
   af354:	f800283a 	ret

000af358 <altera_avalon_fifo_read_other_info>:

int altera_avalon_fifo_read_other_info(alt_u32 read_address)
{
   af358:	defffe04 	addi	sp,sp,-8
   af35c:	df000115 	stw	fp,4(sp)
   af360:	df000104 	addi	fp,sp,4
   af364:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_OTHER_INFO(read_address);
   af368:	e0bfff17 	ldw	r2,-4(fp)
   af36c:	10800104 	addi	r2,r2,4
   af370:	10800037 	ldwio	r2,0(r2)
}
   af374:	e037883a 	mov	sp,fp
   af378:	df000017 	ldw	fp,0(sp)
   af37c:	dec00104 	addi	sp,sp,4
   af380:	f800283a 	ret

000af384 <altera_avalon_fifo_read_backpressure>:

int altera_avalon_fifo_read_backpressure (alt_u32 read_address){
   af384:	defffe04 	addi	sp,sp,-8
   af388:	df000115 	stw	fp,4(sp)
   af38c:	df000104 	addi	fp,sp,4
   af390:	e13fff15 	stw	r4,-4(fp)
    // Read data from FIFO directly. If FIFO is empty and backpressure is supported, this call is backpressure.
    return IORD_ALTERA_AVALON_FIFO_DATA(read_address);  
   af394:	e0bfff17 	ldw	r2,-4(fp)
   af398:	10800037 	ldwio	r2,0(r2)
}
   af39c:	e037883a 	mov	sp,fp
   af3a0:	df000017 	ldw	fp,0(sp)
   af3a4:	dec00104 	addi	sp,sp,4
   af3a8:	f800283a 	ret

000af3ac <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   af3ac:	defffa04 	addi	sp,sp,-24
   af3b0:	dfc00515 	stw	ra,20(sp)
   af3b4:	df000415 	stw	fp,16(sp)
   af3b8:	df000404 	addi	fp,sp,16
   af3bc:	e13ffd15 	stw	r4,-12(fp)
   af3c0:	e17ffe15 	stw	r5,-8(fp)
   af3c4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   af3c8:	e0bffd17 	ldw	r2,-12(fp)
   af3cc:	10800017 	ldw	r2,0(r2)
   af3d0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   af3d4:	e0bffc17 	ldw	r2,-16(fp)
   af3d8:	10c00a04 	addi	r3,r2,40
   af3dc:	e0bffd17 	ldw	r2,-12(fp)
   af3e0:	10800217 	ldw	r2,8(r2)
   af3e4:	100f883a 	mov	r7,r2
   af3e8:	e1bfff17 	ldw	r6,-4(fp)
   af3ec:	e17ffe17 	ldw	r5,-8(fp)
   af3f0:	1809883a 	mov	r4,r3
   af3f4:	00af9d40 	call	af9d4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   af3f8:	e037883a 	mov	sp,fp
   af3fc:	dfc00117 	ldw	ra,4(sp)
   af400:	df000017 	ldw	fp,0(sp)
   af404:	dec00204 	addi	sp,sp,8
   af408:	f800283a 	ret

000af40c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   af40c:	defffa04 	addi	sp,sp,-24
   af410:	dfc00515 	stw	ra,20(sp)
   af414:	df000415 	stw	fp,16(sp)
   af418:	df000404 	addi	fp,sp,16
   af41c:	e13ffd15 	stw	r4,-12(fp)
   af420:	e17ffe15 	stw	r5,-8(fp)
   af424:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   af428:	e0bffd17 	ldw	r2,-12(fp)
   af42c:	10800017 	ldw	r2,0(r2)
   af430:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   af434:	e0bffc17 	ldw	r2,-16(fp)
   af438:	10c00a04 	addi	r3,r2,40
   af43c:	e0bffd17 	ldw	r2,-12(fp)
   af440:	10800217 	ldw	r2,8(r2)
   af444:	100f883a 	mov	r7,r2
   af448:	e1bfff17 	ldw	r6,-4(fp)
   af44c:	e17ffe17 	ldw	r5,-8(fp)
   af450:	1809883a 	mov	r4,r3
   af454:	00afbf00 	call	afbf0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   af458:	e037883a 	mov	sp,fp
   af45c:	dfc00117 	ldw	ra,4(sp)
   af460:	df000017 	ldw	fp,0(sp)
   af464:	dec00204 	addi	sp,sp,8
   af468:	f800283a 	ret

000af46c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   af46c:	defffc04 	addi	sp,sp,-16
   af470:	dfc00315 	stw	ra,12(sp)
   af474:	df000215 	stw	fp,8(sp)
   af478:	df000204 	addi	fp,sp,8
   af47c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   af480:	e0bfff17 	ldw	r2,-4(fp)
   af484:	10800017 	ldw	r2,0(r2)
   af488:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   af48c:	e0bffe17 	ldw	r2,-8(fp)
   af490:	10c00a04 	addi	r3,r2,40
   af494:	e0bfff17 	ldw	r2,-4(fp)
   af498:	10800217 	ldw	r2,8(r2)
   af49c:	100b883a 	mov	r5,r2
   af4a0:	1809883a 	mov	r4,r3
   af4a4:	00af87c0 	call	af87c <altera_avalon_jtag_uart_close>
}
   af4a8:	e037883a 	mov	sp,fp
   af4ac:	dfc00117 	ldw	ra,4(sp)
   af4b0:	df000017 	ldw	fp,0(sp)
   af4b4:	dec00204 	addi	sp,sp,8
   af4b8:	f800283a 	ret

000af4bc <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   af4bc:	defffa04 	addi	sp,sp,-24
   af4c0:	dfc00515 	stw	ra,20(sp)
   af4c4:	df000415 	stw	fp,16(sp)
   af4c8:	df000404 	addi	fp,sp,16
   af4cc:	e13ffd15 	stw	r4,-12(fp)
   af4d0:	e17ffe15 	stw	r5,-8(fp)
   af4d4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   af4d8:	e0bffd17 	ldw	r2,-12(fp)
   af4dc:	10800017 	ldw	r2,0(r2)
   af4e0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   af4e4:	e0bffc17 	ldw	r2,-16(fp)
   af4e8:	10800a04 	addi	r2,r2,40
   af4ec:	e1bfff17 	ldw	r6,-4(fp)
   af4f0:	e17ffe17 	ldw	r5,-8(fp)
   af4f4:	1009883a 	mov	r4,r2
   af4f8:	00af8e40 	call	af8e4 <altera_avalon_jtag_uart_ioctl>
}
   af4fc:	e037883a 	mov	sp,fp
   af500:	dfc00117 	ldw	ra,4(sp)
   af504:	df000017 	ldw	fp,0(sp)
   af508:	dec00204 	addi	sp,sp,8
   af50c:	f800283a 	ret

000af510 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   af510:	defffa04 	addi	sp,sp,-24
   af514:	dfc00515 	stw	ra,20(sp)
   af518:	df000415 	stw	fp,16(sp)
   af51c:	df000404 	addi	fp,sp,16
   af520:	e13ffd15 	stw	r4,-12(fp)
   af524:	e17ffe15 	stw	r5,-8(fp)
   af528:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   af52c:	e0bffd17 	ldw	r2,-12(fp)
   af530:	00c00044 	movi	r3,1
   af534:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   af538:	e0bffd17 	ldw	r2,-12(fp)
   af53c:	10800017 	ldw	r2,0(r2)
   af540:	10800104 	addi	r2,r2,4
   af544:	1007883a 	mov	r3,r2
   af548:	e0bffd17 	ldw	r2,-12(fp)
   af54c:	10800817 	ldw	r2,32(r2)
   af550:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   af554:	e0bffe17 	ldw	r2,-8(fp)
   af558:	e0ffff17 	ldw	r3,-4(fp)
   af55c:	d8000015 	stw	zero,0(sp)
   af560:	e1fffd17 	ldw	r7,-12(fp)
   af564:	018002f4 	movhi	r6,11
   af568:	31bd7404 	addi	r6,r6,-2608
   af56c:	180b883a 	mov	r5,r3
   af570:	1009883a 	mov	r4,r2
   af574:	00b09740 	call	b0974 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   af578:	e0bffd17 	ldw	r2,-12(fp)
   af57c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   af580:	e0bffd17 	ldw	r2,-12(fp)
   af584:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   af588:	d0e72417 	ldw	r3,-25456(gp)
   af58c:	e1fffd17 	ldw	r7,-12(fp)
   af590:	018002f4 	movhi	r6,11
   af594:	31bdf704 	addi	r6,r6,-2084
   af598:	180b883a 	mov	r5,r3
   af59c:	1009883a 	mov	r4,r2
   af5a0:	00b038c0 	call	b038c <alt_alarm_start>
   af5a4:	1000040e 	bge	r2,zero,af5b8 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   af5a8:	e0fffd17 	ldw	r3,-12(fp)
   af5ac:	00a00034 	movhi	r2,32768
   af5b0:	10bfffc4 	addi	r2,r2,-1
   af5b4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   af5b8:	0001883a 	nop
   af5bc:	e037883a 	mov	sp,fp
   af5c0:	dfc00117 	ldw	ra,4(sp)
   af5c4:	df000017 	ldw	fp,0(sp)
   af5c8:	dec00204 	addi	sp,sp,8
   af5cc:	f800283a 	ret

000af5d0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   af5d0:	defff804 	addi	sp,sp,-32
   af5d4:	df000715 	stw	fp,28(sp)
   af5d8:	df000704 	addi	fp,sp,28
   af5dc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   af5e0:	e0bfff17 	ldw	r2,-4(fp)
   af5e4:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   af5e8:	e0bffb17 	ldw	r2,-20(fp)
   af5ec:	10800017 	ldw	r2,0(r2)
   af5f0:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   af5f4:	e0bffc17 	ldw	r2,-16(fp)
   af5f8:	10800104 	addi	r2,r2,4
   af5fc:	10800037 	ldwio	r2,0(r2)
   af600:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   af604:	e0bffd17 	ldw	r2,-12(fp)
   af608:	1080c00c 	andi	r2,r2,768
   af60c:	10006d26 	beq	r2,zero,af7c4 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   af610:	e0bffd17 	ldw	r2,-12(fp)
   af614:	1080400c 	andi	r2,r2,256
   af618:	10003526 	beq	r2,zero,af6f0 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   af61c:	00800074 	movhi	r2,1
   af620:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   af624:	e0bffb17 	ldw	r2,-20(fp)
   af628:	10800a17 	ldw	r2,40(r2)
   af62c:	10800044 	addi	r2,r2,1
   af630:	1081ffcc 	andi	r2,r2,2047
   af634:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   af638:	e0bffb17 	ldw	r2,-20(fp)
   af63c:	10c00b17 	ldw	r3,44(r2)
   af640:	e0bffe17 	ldw	r2,-8(fp)
   af644:	18801526 	beq	r3,r2,af69c <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   af648:	e0bffc17 	ldw	r2,-16(fp)
   af64c:	10800037 	ldwio	r2,0(r2)
   af650:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   af654:	e0bff917 	ldw	r2,-28(fp)
   af658:	10a0000c 	andi	r2,r2,32768
   af65c:	10001126 	beq	r2,zero,af6a4 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   af660:	e0bffb17 	ldw	r2,-20(fp)
   af664:	10800a17 	ldw	r2,40(r2)
   af668:	e0fff917 	ldw	r3,-28(fp)
   af66c:	1809883a 	mov	r4,r3
   af670:	e0fffb17 	ldw	r3,-20(fp)
   af674:	1885883a 	add	r2,r3,r2
   af678:	10800e04 	addi	r2,r2,56
   af67c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   af680:	e0bffb17 	ldw	r2,-20(fp)
   af684:	10800a17 	ldw	r2,40(r2)
   af688:	10800044 	addi	r2,r2,1
   af68c:	10c1ffcc 	andi	r3,r2,2047
   af690:	e0bffb17 	ldw	r2,-20(fp)
   af694:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   af698:	003fe206 	br	af624 <__alt_data_end+0xfffef624>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   af69c:	0001883a 	nop
   af6a0:	00000106 	br	af6a8 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   af6a4:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   af6a8:	e0bff917 	ldw	r2,-28(fp)
   af6ac:	10bfffec 	andhi	r2,r2,65535
   af6b0:	10000f26 	beq	r2,zero,af6f0 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   af6b4:	e0bffb17 	ldw	r2,-20(fp)
   af6b8:	10c00817 	ldw	r3,32(r2)
   af6bc:	00bfff84 	movi	r2,-2
   af6c0:	1886703a 	and	r3,r3,r2
   af6c4:	e0bffb17 	ldw	r2,-20(fp)
   af6c8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   af6cc:	e0bffc17 	ldw	r2,-16(fp)
   af6d0:	10800104 	addi	r2,r2,4
   af6d4:	1007883a 	mov	r3,r2
   af6d8:	e0bffb17 	ldw	r2,-20(fp)
   af6dc:	10800817 	ldw	r2,32(r2)
   af6e0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   af6e4:	e0bffc17 	ldw	r2,-16(fp)
   af6e8:	10800104 	addi	r2,r2,4
   af6ec:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   af6f0:	e0bffd17 	ldw	r2,-12(fp)
   af6f4:	1080800c 	andi	r2,r2,512
   af6f8:	103fbe26 	beq	r2,zero,af5f4 <__alt_data_end+0xfffef5f4>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   af6fc:	e0bffd17 	ldw	r2,-12(fp)
   af700:	1004d43a 	srli	r2,r2,16
   af704:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   af708:	00001406 	br	af75c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   af70c:	e0bffc17 	ldw	r2,-16(fp)
   af710:	e0fffb17 	ldw	r3,-20(fp)
   af714:	18c00d17 	ldw	r3,52(r3)
   af718:	e13ffb17 	ldw	r4,-20(fp)
   af71c:	20c7883a 	add	r3,r4,r3
   af720:	18c20e04 	addi	r3,r3,2104
   af724:	18c00003 	ldbu	r3,0(r3)
   af728:	18c03fcc 	andi	r3,r3,255
   af72c:	18c0201c 	xori	r3,r3,128
   af730:	18ffe004 	addi	r3,r3,-128
   af734:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   af738:	e0bffb17 	ldw	r2,-20(fp)
   af73c:	10800d17 	ldw	r2,52(r2)
   af740:	10800044 	addi	r2,r2,1
   af744:	10c1ffcc 	andi	r3,r2,2047
   af748:	e0bffb17 	ldw	r2,-20(fp)
   af74c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   af750:	e0bffa17 	ldw	r2,-24(fp)
   af754:	10bfffc4 	addi	r2,r2,-1
   af758:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   af75c:	e0bffa17 	ldw	r2,-24(fp)
   af760:	10000526 	beq	r2,zero,af778 <altera_avalon_jtag_uart_irq+0x1a8>
   af764:	e0bffb17 	ldw	r2,-20(fp)
   af768:	10c00d17 	ldw	r3,52(r2)
   af76c:	e0bffb17 	ldw	r2,-20(fp)
   af770:	10800c17 	ldw	r2,48(r2)
   af774:	18bfe51e 	bne	r3,r2,af70c <__alt_data_end+0xfffef70c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   af778:	e0bffa17 	ldw	r2,-24(fp)
   af77c:	103f9d26 	beq	r2,zero,af5f4 <__alt_data_end+0xfffef5f4>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   af780:	e0bffb17 	ldw	r2,-20(fp)
   af784:	10c00817 	ldw	r3,32(r2)
   af788:	00bfff44 	movi	r2,-3
   af78c:	1886703a 	and	r3,r3,r2
   af790:	e0bffb17 	ldw	r2,-20(fp)
   af794:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   af798:	e0bffb17 	ldw	r2,-20(fp)
   af79c:	10800017 	ldw	r2,0(r2)
   af7a0:	10800104 	addi	r2,r2,4
   af7a4:	1007883a 	mov	r3,r2
   af7a8:	e0bffb17 	ldw	r2,-20(fp)
   af7ac:	10800817 	ldw	r2,32(r2)
   af7b0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   af7b4:	e0bffc17 	ldw	r2,-16(fp)
   af7b8:	10800104 	addi	r2,r2,4
   af7bc:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   af7c0:	003f8c06 	br	af5f4 <__alt_data_end+0xfffef5f4>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   af7c4:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   af7c8:	0001883a 	nop
   af7cc:	e037883a 	mov	sp,fp
   af7d0:	df000017 	ldw	fp,0(sp)
   af7d4:	dec00104 	addi	sp,sp,4
   af7d8:	f800283a 	ret

000af7dc <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   af7dc:	defff804 	addi	sp,sp,-32
   af7e0:	df000715 	stw	fp,28(sp)
   af7e4:	df000704 	addi	fp,sp,28
   af7e8:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   af7ec:	e0bffb17 	ldw	r2,-20(fp)
   af7f0:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   af7f4:	e0bff917 	ldw	r2,-28(fp)
   af7f8:	10800017 	ldw	r2,0(r2)
   af7fc:	10800104 	addi	r2,r2,4
   af800:	10800037 	ldwio	r2,0(r2)
   af804:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   af808:	e0bffa17 	ldw	r2,-24(fp)
   af80c:	1081000c 	andi	r2,r2,1024
   af810:	10000b26 	beq	r2,zero,af840 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   af814:	e0bff917 	ldw	r2,-28(fp)
   af818:	10800017 	ldw	r2,0(r2)
   af81c:	10800104 	addi	r2,r2,4
   af820:	1007883a 	mov	r3,r2
   af824:	e0bff917 	ldw	r2,-28(fp)
   af828:	10800817 	ldw	r2,32(r2)
   af82c:	10810014 	ori	r2,r2,1024
   af830:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   af834:	e0bff917 	ldw	r2,-28(fp)
   af838:	10000915 	stw	zero,36(r2)
   af83c:	00000a06 	br	af868 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   af840:	e0bff917 	ldw	r2,-28(fp)
   af844:	10c00917 	ldw	r3,36(r2)
   af848:	00a00034 	movhi	r2,32768
   af84c:	10bfff04 	addi	r2,r2,-4
   af850:	10c00536 	bltu	r2,r3,af868 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   af854:	e0bff917 	ldw	r2,-28(fp)
   af858:	10800917 	ldw	r2,36(r2)
   af85c:	10c00044 	addi	r3,r2,1
   af860:	e0bff917 	ldw	r2,-28(fp)
   af864:	10c00915 	stw	r3,36(r2)
   af868:	d0a72417 	ldw	r2,-25456(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   af86c:	e037883a 	mov	sp,fp
   af870:	df000017 	ldw	fp,0(sp)
   af874:	dec00104 	addi	sp,sp,4
   af878:	f800283a 	ret

000af87c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   af87c:	defffd04 	addi	sp,sp,-12
   af880:	df000215 	stw	fp,8(sp)
   af884:	df000204 	addi	fp,sp,8
   af888:	e13ffe15 	stw	r4,-8(fp)
   af88c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   af890:	00000506 	br	af8a8 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   af894:	e0bfff17 	ldw	r2,-4(fp)
   af898:	1090000c 	andi	r2,r2,16384
   af89c:	10000226 	beq	r2,zero,af8a8 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   af8a0:	00bffd44 	movi	r2,-11
   af8a4:	00000b06 	br	af8d4 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   af8a8:	e0bffe17 	ldw	r2,-8(fp)
   af8ac:	10c00d17 	ldw	r3,52(r2)
   af8b0:	e0bffe17 	ldw	r2,-8(fp)
   af8b4:	10800c17 	ldw	r2,48(r2)
   af8b8:	18800526 	beq	r3,r2,af8d0 <altera_avalon_jtag_uart_close+0x54>
   af8bc:	e0bffe17 	ldw	r2,-8(fp)
   af8c0:	10c00917 	ldw	r3,36(r2)
   af8c4:	e0bffe17 	ldw	r2,-8(fp)
   af8c8:	10800117 	ldw	r2,4(r2)
   af8cc:	18bff136 	bltu	r3,r2,af894 <__alt_data_end+0xfffef894>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   af8d0:	0005883a 	mov	r2,zero
}
   af8d4:	e037883a 	mov	sp,fp
   af8d8:	df000017 	ldw	fp,0(sp)
   af8dc:	dec00104 	addi	sp,sp,4
   af8e0:	f800283a 	ret

000af8e4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   af8e4:	defffa04 	addi	sp,sp,-24
   af8e8:	df000515 	stw	fp,20(sp)
   af8ec:	df000504 	addi	fp,sp,20
   af8f0:	e13ffd15 	stw	r4,-12(fp)
   af8f4:	e17ffe15 	stw	r5,-8(fp)
   af8f8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   af8fc:	00bff9c4 	movi	r2,-25
   af900:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   af904:	e0bffe17 	ldw	r2,-8(fp)
   af908:	10da8060 	cmpeqi	r3,r2,27137
   af90c:	1800031e 	bne	r3,zero,af91c <altera_avalon_jtag_uart_ioctl+0x38>
   af910:	109a80a0 	cmpeqi	r2,r2,27138
   af914:	1000181e 	bne	r2,zero,af978 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   af918:	00002906 	br	af9c0 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   af91c:	e0bffd17 	ldw	r2,-12(fp)
   af920:	10c00117 	ldw	r3,4(r2)
   af924:	00a00034 	movhi	r2,32768
   af928:	10bfffc4 	addi	r2,r2,-1
   af92c:	18802126 	beq	r3,r2,af9b4 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   af930:	e0bfff17 	ldw	r2,-4(fp)
   af934:	10800017 	ldw	r2,0(r2)
   af938:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   af93c:	e0bffc17 	ldw	r2,-16(fp)
   af940:	10800090 	cmplti	r2,r2,2
   af944:	1000061e 	bne	r2,zero,af960 <altera_avalon_jtag_uart_ioctl+0x7c>
   af948:	e0fffc17 	ldw	r3,-16(fp)
   af94c:	00a00034 	movhi	r2,32768
   af950:	10bfffc4 	addi	r2,r2,-1
   af954:	18800226 	beq	r3,r2,af960 <altera_avalon_jtag_uart_ioctl+0x7c>
   af958:	e0bffc17 	ldw	r2,-16(fp)
   af95c:	00000206 	br	af968 <altera_avalon_jtag_uart_ioctl+0x84>
   af960:	00a00034 	movhi	r2,32768
   af964:	10bfff84 	addi	r2,r2,-2
   af968:	e0fffd17 	ldw	r3,-12(fp)
   af96c:	18800115 	stw	r2,4(r3)
      rc = 0;
   af970:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   af974:	00000f06 	br	af9b4 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   af978:	e0bffd17 	ldw	r2,-12(fp)
   af97c:	10c00117 	ldw	r3,4(r2)
   af980:	00a00034 	movhi	r2,32768
   af984:	10bfffc4 	addi	r2,r2,-1
   af988:	18800c26 	beq	r3,r2,af9bc <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   af98c:	e0bffd17 	ldw	r2,-12(fp)
   af990:	10c00917 	ldw	r3,36(r2)
   af994:	e0bffd17 	ldw	r2,-12(fp)
   af998:	10800117 	ldw	r2,4(r2)
   af99c:	1885803a 	cmpltu	r2,r3,r2
   af9a0:	10c03fcc 	andi	r3,r2,255
   af9a4:	e0bfff17 	ldw	r2,-4(fp)
   af9a8:	10c00015 	stw	r3,0(r2)
      rc = 0;
   af9ac:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   af9b0:	00000206 	br	af9bc <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   af9b4:	0001883a 	nop
   af9b8:	00000106 	br	af9c0 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   af9bc:	0001883a 	nop

  default:
    break;
  }

  return rc;
   af9c0:	e0bffb17 	ldw	r2,-20(fp)
}
   af9c4:	e037883a 	mov	sp,fp
   af9c8:	df000017 	ldw	fp,0(sp)
   af9cc:	dec00104 	addi	sp,sp,4
   af9d0:	f800283a 	ret

000af9d4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   af9d4:	defff304 	addi	sp,sp,-52
   af9d8:	dfc00c15 	stw	ra,48(sp)
   af9dc:	df000b15 	stw	fp,44(sp)
   af9e0:	df000b04 	addi	fp,sp,44
   af9e4:	e13ffc15 	stw	r4,-16(fp)
   af9e8:	e17ffd15 	stw	r5,-12(fp)
   af9ec:	e1bffe15 	stw	r6,-8(fp)
   af9f0:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   af9f4:	e0bffd17 	ldw	r2,-12(fp)
   af9f8:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   af9fc:	00004706 	br	afb1c <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   afa00:	e0bffc17 	ldw	r2,-16(fp)
   afa04:	10800a17 	ldw	r2,40(r2)
   afa08:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   afa0c:	e0bffc17 	ldw	r2,-16(fp)
   afa10:	10800b17 	ldw	r2,44(r2)
   afa14:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   afa18:	e0fff717 	ldw	r3,-36(fp)
   afa1c:	e0bff817 	ldw	r2,-32(fp)
   afa20:	18800536 	bltu	r3,r2,afa38 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   afa24:	e0fff717 	ldw	r3,-36(fp)
   afa28:	e0bff817 	ldw	r2,-32(fp)
   afa2c:	1885c83a 	sub	r2,r3,r2
   afa30:	e0bff615 	stw	r2,-40(fp)
   afa34:	00000406 	br	afa48 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   afa38:	00c20004 	movi	r3,2048
   afa3c:	e0bff817 	ldw	r2,-32(fp)
   afa40:	1885c83a 	sub	r2,r3,r2
   afa44:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   afa48:	e0bff617 	ldw	r2,-40(fp)
   afa4c:	10001e26 	beq	r2,zero,afac8 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   afa50:	e0fffe17 	ldw	r3,-8(fp)
   afa54:	e0bff617 	ldw	r2,-40(fp)
   afa58:	1880022e 	bgeu	r3,r2,afa64 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   afa5c:	e0bffe17 	ldw	r2,-8(fp)
   afa60:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   afa64:	e0bffc17 	ldw	r2,-16(fp)
   afa68:	10c00e04 	addi	r3,r2,56
   afa6c:	e0bff817 	ldw	r2,-32(fp)
   afa70:	1885883a 	add	r2,r3,r2
   afa74:	e1bff617 	ldw	r6,-40(fp)
   afa78:	100b883a 	mov	r5,r2
   afa7c:	e13ff517 	ldw	r4,-44(fp)
   afa80:	00a75380 	call	a7538 <memcpy>
      ptr   += n;
   afa84:	e0fff517 	ldw	r3,-44(fp)
   afa88:	e0bff617 	ldw	r2,-40(fp)
   afa8c:	1885883a 	add	r2,r3,r2
   afa90:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   afa94:	e0fffe17 	ldw	r3,-8(fp)
   afa98:	e0bff617 	ldw	r2,-40(fp)
   afa9c:	1885c83a 	sub	r2,r3,r2
   afaa0:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   afaa4:	e0fff817 	ldw	r3,-32(fp)
   afaa8:	e0bff617 	ldw	r2,-40(fp)
   afaac:	1885883a 	add	r2,r3,r2
   afab0:	10c1ffcc 	andi	r3,r2,2047
   afab4:	e0bffc17 	ldw	r2,-16(fp)
   afab8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   afabc:	e0bffe17 	ldw	r2,-8(fp)
   afac0:	00bfcf16 	blt	zero,r2,afa00 <__alt_data_end+0xfffefa00>
   afac4:	00000106 	br	afacc <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   afac8:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   afacc:	e0fff517 	ldw	r3,-44(fp)
   afad0:	e0bffd17 	ldw	r2,-12(fp)
   afad4:	1880141e 	bne	r3,r2,afb28 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   afad8:	e0bfff17 	ldw	r2,-4(fp)
   afadc:	1090000c 	andi	r2,r2,16384
   afae0:	1000131e 	bne	r2,zero,afb30 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   afae4:	0001883a 	nop
   afae8:	e0bffc17 	ldw	r2,-16(fp)
   afaec:	10c00a17 	ldw	r3,40(r2)
   afaf0:	e0bff717 	ldw	r2,-36(fp)
   afaf4:	1880051e 	bne	r3,r2,afb0c <altera_avalon_jtag_uart_read+0x138>
   afaf8:	e0bffc17 	ldw	r2,-16(fp)
   afafc:	10c00917 	ldw	r3,36(r2)
   afb00:	e0bffc17 	ldw	r2,-16(fp)
   afb04:	10800117 	ldw	r2,4(r2)
   afb08:	18bff736 	bltu	r3,r2,afae8 <__alt_data_end+0xfffefae8>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   afb0c:	e0bffc17 	ldw	r2,-16(fp)
   afb10:	10c00a17 	ldw	r3,40(r2)
   afb14:	e0bff717 	ldw	r2,-36(fp)
   afb18:	18800726 	beq	r3,r2,afb38 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   afb1c:	e0bffe17 	ldw	r2,-8(fp)
   afb20:	00bfb716 	blt	zero,r2,afa00 <__alt_data_end+0xfffefa00>
   afb24:	00000506 	br	afb3c <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   afb28:	0001883a 	nop
   afb2c:	00000306 	br	afb3c <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   afb30:	0001883a 	nop
   afb34:	00000106 	br	afb3c <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   afb38:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   afb3c:	e0fff517 	ldw	r3,-44(fp)
   afb40:	e0bffd17 	ldw	r2,-12(fp)
   afb44:	18801826 	beq	r3,r2,afba8 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   afb48:	0005303a 	rdctl	r2,status
   afb4c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   afb50:	e0fffb17 	ldw	r3,-20(fp)
   afb54:	00bfff84 	movi	r2,-2
   afb58:	1884703a 	and	r2,r3,r2
   afb5c:	1001703a 	wrctl	status,r2
  
  return context;
   afb60:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   afb64:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   afb68:	e0bffc17 	ldw	r2,-16(fp)
   afb6c:	10800817 	ldw	r2,32(r2)
   afb70:	10c00054 	ori	r3,r2,1
   afb74:	e0bffc17 	ldw	r2,-16(fp)
   afb78:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   afb7c:	e0bffc17 	ldw	r2,-16(fp)
   afb80:	10800017 	ldw	r2,0(r2)
   afb84:	10800104 	addi	r2,r2,4
   afb88:	1007883a 	mov	r3,r2
   afb8c:	e0bffc17 	ldw	r2,-16(fp)
   afb90:	10800817 	ldw	r2,32(r2)
   afb94:	18800035 	stwio	r2,0(r3)
   afb98:	e0bffa17 	ldw	r2,-24(fp)
   afb9c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   afba0:	e0bff917 	ldw	r2,-28(fp)
   afba4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   afba8:	e0fff517 	ldw	r3,-44(fp)
   afbac:	e0bffd17 	ldw	r2,-12(fp)
   afbb0:	18800426 	beq	r3,r2,afbc4 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   afbb4:	e0fff517 	ldw	r3,-44(fp)
   afbb8:	e0bffd17 	ldw	r2,-12(fp)
   afbbc:	1885c83a 	sub	r2,r3,r2
   afbc0:	00000606 	br	afbdc <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   afbc4:	e0bfff17 	ldw	r2,-4(fp)
   afbc8:	1090000c 	andi	r2,r2,16384
   afbcc:	10000226 	beq	r2,zero,afbd8 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   afbd0:	00bffd44 	movi	r2,-11
   afbd4:	00000106 	br	afbdc <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   afbd8:	00bffec4 	movi	r2,-5
}
   afbdc:	e037883a 	mov	sp,fp
   afbe0:	dfc00117 	ldw	ra,4(sp)
   afbe4:	df000017 	ldw	fp,0(sp)
   afbe8:	dec00204 	addi	sp,sp,8
   afbec:	f800283a 	ret

000afbf0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   afbf0:	defff304 	addi	sp,sp,-52
   afbf4:	dfc00c15 	stw	ra,48(sp)
   afbf8:	df000b15 	stw	fp,44(sp)
   afbfc:	df000b04 	addi	fp,sp,44
   afc00:	e13ffc15 	stw	r4,-16(fp)
   afc04:	e17ffd15 	stw	r5,-12(fp)
   afc08:	e1bffe15 	stw	r6,-8(fp)
   afc0c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   afc10:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   afc14:	e0bffd17 	ldw	r2,-12(fp)
   afc18:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   afc1c:	00003706 	br	afcfc <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   afc20:	e0bffc17 	ldw	r2,-16(fp)
   afc24:	10800c17 	ldw	r2,48(r2)
   afc28:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   afc2c:	e0bffc17 	ldw	r2,-16(fp)
   afc30:	10800d17 	ldw	r2,52(r2)
   afc34:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   afc38:	e0fff917 	ldw	r3,-28(fp)
   afc3c:	e0bff517 	ldw	r2,-44(fp)
   afc40:	1880062e 	bgeu	r3,r2,afc5c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   afc44:	e0fff517 	ldw	r3,-44(fp)
   afc48:	e0bff917 	ldw	r2,-28(fp)
   afc4c:	1885c83a 	sub	r2,r3,r2
   afc50:	10bfffc4 	addi	r2,r2,-1
   afc54:	e0bff615 	stw	r2,-40(fp)
   afc58:	00000b06 	br	afc88 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   afc5c:	e0bff517 	ldw	r2,-44(fp)
   afc60:	10000526 	beq	r2,zero,afc78 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   afc64:	00c20004 	movi	r3,2048
   afc68:	e0bff917 	ldw	r2,-28(fp)
   afc6c:	1885c83a 	sub	r2,r3,r2
   afc70:	e0bff615 	stw	r2,-40(fp)
   afc74:	00000406 	br	afc88 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   afc78:	00c1ffc4 	movi	r3,2047
   afc7c:	e0bff917 	ldw	r2,-28(fp)
   afc80:	1885c83a 	sub	r2,r3,r2
   afc84:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   afc88:	e0bff617 	ldw	r2,-40(fp)
   afc8c:	10001e26 	beq	r2,zero,afd08 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   afc90:	e0fffe17 	ldw	r3,-8(fp)
   afc94:	e0bff617 	ldw	r2,-40(fp)
   afc98:	1880022e 	bgeu	r3,r2,afca4 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   afc9c:	e0bffe17 	ldw	r2,-8(fp)
   afca0:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   afca4:	e0bffc17 	ldw	r2,-16(fp)
   afca8:	10c20e04 	addi	r3,r2,2104
   afcac:	e0bff917 	ldw	r2,-28(fp)
   afcb0:	1885883a 	add	r2,r3,r2
   afcb4:	e1bff617 	ldw	r6,-40(fp)
   afcb8:	e17ffd17 	ldw	r5,-12(fp)
   afcbc:	1009883a 	mov	r4,r2
   afcc0:	00a75380 	call	a7538 <memcpy>
      ptr   += n;
   afcc4:	e0fffd17 	ldw	r3,-12(fp)
   afcc8:	e0bff617 	ldw	r2,-40(fp)
   afccc:	1885883a 	add	r2,r3,r2
   afcd0:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   afcd4:	e0fffe17 	ldw	r3,-8(fp)
   afcd8:	e0bff617 	ldw	r2,-40(fp)
   afcdc:	1885c83a 	sub	r2,r3,r2
   afce0:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   afce4:	e0fff917 	ldw	r3,-28(fp)
   afce8:	e0bff617 	ldw	r2,-40(fp)
   afcec:	1885883a 	add	r2,r3,r2
   afcf0:	10c1ffcc 	andi	r3,r2,2047
   afcf4:	e0bffc17 	ldw	r2,-16(fp)
   afcf8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   afcfc:	e0bffe17 	ldw	r2,-8(fp)
   afd00:	00bfc716 	blt	zero,r2,afc20 <__alt_data_end+0xfffefc20>
   afd04:	00000106 	br	afd0c <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   afd08:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   afd0c:	0005303a 	rdctl	r2,status
   afd10:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   afd14:	e0fffb17 	ldw	r3,-20(fp)
   afd18:	00bfff84 	movi	r2,-2
   afd1c:	1884703a 	and	r2,r3,r2
   afd20:	1001703a 	wrctl	status,r2
  
  return context;
   afd24:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   afd28:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   afd2c:	e0bffc17 	ldw	r2,-16(fp)
   afd30:	10800817 	ldw	r2,32(r2)
   afd34:	10c00094 	ori	r3,r2,2
   afd38:	e0bffc17 	ldw	r2,-16(fp)
   afd3c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   afd40:	e0bffc17 	ldw	r2,-16(fp)
   afd44:	10800017 	ldw	r2,0(r2)
   afd48:	10800104 	addi	r2,r2,4
   afd4c:	1007883a 	mov	r3,r2
   afd50:	e0bffc17 	ldw	r2,-16(fp)
   afd54:	10800817 	ldw	r2,32(r2)
   afd58:	18800035 	stwio	r2,0(r3)
   afd5c:	e0bffa17 	ldw	r2,-24(fp)
   afd60:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   afd64:	e0bff817 	ldw	r2,-32(fp)
   afd68:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   afd6c:	e0bffe17 	ldw	r2,-8(fp)
   afd70:	0080100e 	bge	zero,r2,afdb4 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   afd74:	e0bfff17 	ldw	r2,-4(fp)
   afd78:	1090000c 	andi	r2,r2,16384
   afd7c:	1000101e 	bne	r2,zero,afdc0 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   afd80:	0001883a 	nop
   afd84:	e0bffc17 	ldw	r2,-16(fp)
   afd88:	10c00d17 	ldw	r3,52(r2)
   afd8c:	e0bff517 	ldw	r2,-44(fp)
   afd90:	1880051e 	bne	r3,r2,afda8 <altera_avalon_jtag_uart_write+0x1b8>
   afd94:	e0bffc17 	ldw	r2,-16(fp)
   afd98:	10c00917 	ldw	r3,36(r2)
   afd9c:	e0bffc17 	ldw	r2,-16(fp)
   afda0:	10800117 	ldw	r2,4(r2)
   afda4:	18bff736 	bltu	r3,r2,afd84 <__alt_data_end+0xfffefd84>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   afda8:	e0bffc17 	ldw	r2,-16(fp)
   afdac:	10800917 	ldw	r2,36(r2)
   afdb0:	1000051e 	bne	r2,zero,afdc8 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   afdb4:	e0bffe17 	ldw	r2,-8(fp)
   afdb8:	00bfd016 	blt	zero,r2,afcfc <__alt_data_end+0xfffefcfc>
   afdbc:	00000306 	br	afdcc <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   afdc0:	0001883a 	nop
   afdc4:	00000106 	br	afdcc <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   afdc8:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   afdcc:	e0fffd17 	ldw	r3,-12(fp)
   afdd0:	e0bff717 	ldw	r2,-36(fp)
   afdd4:	18800426 	beq	r3,r2,afde8 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   afdd8:	e0fffd17 	ldw	r3,-12(fp)
   afddc:	e0bff717 	ldw	r2,-36(fp)
   afde0:	1885c83a 	sub	r2,r3,r2
   afde4:	00000606 	br	afe00 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   afde8:	e0bfff17 	ldw	r2,-4(fp)
   afdec:	1090000c 	andi	r2,r2,16384
   afdf0:	10000226 	beq	r2,zero,afdfc <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   afdf4:	00bffd44 	movi	r2,-11
   afdf8:	00000106 	br	afe00 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   afdfc:	00bffec4 	movi	r2,-5
}
   afe00:	e037883a 	mov	sp,fp
   afe04:	dfc00117 	ldw	ra,4(sp)
   afe08:	df000017 	ldw	fp,0(sp)
   afe0c:	dec00204 	addi	sp,sp,8
   afe10:	f800283a 	ret

000afe14 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   afe14:	defffa04 	addi	sp,sp,-24
   afe18:	dfc00515 	stw	ra,20(sp)
   afe1c:	df000415 	stw	fp,16(sp)
   afe20:	df000404 	addi	fp,sp,16
   afe24:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   afe28:	0007883a 	mov	r3,zero
   afe2c:	e0bfff17 	ldw	r2,-4(fp)
   afe30:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   afe34:	e0bfff17 	ldw	r2,-4(fp)
   afe38:	10800104 	addi	r2,r2,4
   afe3c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   afe40:	0005303a 	rdctl	r2,status
   afe44:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   afe48:	e0fffd17 	ldw	r3,-12(fp)
   afe4c:	00bfff84 	movi	r2,-2
   afe50:	1884703a 	and	r2,r3,r2
   afe54:	1001703a 	wrctl	status,r2
  
  return context;
   afe58:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   afe5c:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   afe60:	00b0e100 	call	b0e10 <alt_tick>
   afe64:	e0bffc17 	ldw	r2,-16(fp)
   afe68:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   afe6c:	e0bffe17 	ldw	r2,-8(fp)
   afe70:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   afe74:	0001883a 	nop
   afe78:	e037883a 	mov	sp,fp
   afe7c:	dfc00117 	ldw	ra,4(sp)
   afe80:	df000017 	ldw	fp,0(sp)
   afe84:	dec00204 	addi	sp,sp,8
   afe88:	f800283a 	ret

000afe8c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   afe8c:	defff804 	addi	sp,sp,-32
   afe90:	dfc00715 	stw	ra,28(sp)
   afe94:	df000615 	stw	fp,24(sp)
   afe98:	df000604 	addi	fp,sp,24
   afe9c:	e13ffc15 	stw	r4,-16(fp)
   afea0:	e17ffd15 	stw	r5,-12(fp)
   afea4:	e1bffe15 	stw	r6,-8(fp)
   afea8:	e1ffff15 	stw	r7,-4(fp)
   afeac:	e0bfff17 	ldw	r2,-4(fp)
   afeb0:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   afeb4:	d0a72417 	ldw	r2,-25456(gp)
   afeb8:	1000021e 	bne	r2,zero,afec4 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   afebc:	e0bffb17 	ldw	r2,-20(fp)
   afec0:	d0a72415 	stw	r2,-25456(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   afec4:	e0bffc17 	ldw	r2,-16(fp)
   afec8:	10800104 	addi	r2,r2,4
   afecc:	00c001c4 	movi	r3,7
   afed0:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   afed4:	d8000015 	stw	zero,0(sp)
   afed8:	e1fffc17 	ldw	r7,-16(fp)
   afedc:	018002f4 	movhi	r6,11
   afee0:	31bf8504 	addi	r6,r6,-492
   afee4:	e17ffe17 	ldw	r5,-8(fp)
   afee8:	e13ffd17 	ldw	r4,-12(fp)
   afeec:	00b09740 	call	b0974 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   afef0:	0001883a 	nop
   afef4:	e037883a 	mov	sp,fp
   afef8:	dfc00117 	ldw	ra,4(sp)
   afefc:	df000017 	ldw	fp,0(sp)
   aff00:	dec00204 	addi	sp,sp,8
   aff04:	f800283a 	ret

000aff08 <alt_hostfs_open>:
* alt_hostfs_open
*
* If we can't find anything return -1
*/
int alt_hostfs_open(alt_fd* fd, const char * name, int flags, int mode)
{
   aff08:	defff404 	addi	sp,sp,-48
   aff0c:	df000b15 	stw	fp,44(sp)
   aff10:	df000b04 	addi	fp,sp,44
   aff14:	e13ffc15 	stw	r4,-16(fp)
   aff18:	e17ffd15 	stw	r5,-12(fp)
   aff1c:	e1bffe15 	stw	r6,-8(fp)
   aff20:	e1ffff15 	stw	r7,-4(fp)
  static const struct HOSTCALL_INFO hcinfo = { 0x0103, "open" };

  alt_hostfs_dev* dev= (alt_hostfs_dev*)fd->dev;
   aff24:	e0bffc17 	ldw	r2,-16(fp)
   aff28:	10800017 	ldw	r2,0(r2)
   aff2c:	e0bff515 	stw	r2,-44(fp)
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
   aff30:	e0bff517 	ldw	r2,-44(fp)
   aff34:	10800217 	ldw	r2,8(r2)
   aff38:	e0bff615 	stw	r2,-40(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
   aff3c:	e0bff617 	ldw	r2,-40(fp)
   aff40:	10bfffc4 	addi	r2,r2,-1
   aff44:	e0bffb15 	stw	r2,-20(fp)

  while (*++ptr != 0)
   aff48:	e0bffb17 	ldw	r2,-20(fp)
   aff4c:	10800044 	addi	r2,r2,1
   aff50:	e0bffb15 	stw	r2,-20(fp)
   aff54:	e0bffb17 	ldw	r2,-20(fp)
   aff58:	10800003 	ldbu	r2,0(r2)
   aff5c:	10803fcc 	andi	r2,r2,255
   aff60:	1080201c 	xori	r2,r2,128
   aff64:	10bfe004 	addi	r2,r2,-128
   aff68:	103ff71e 	bne	r2,zero,aff48 <__alt_data_end+0xfffeff48>
    ;

  return ptr - string;
   aff6c:	e0fffb17 	ldw	r3,-20(fp)
   aff70:	e0bff617 	ldw	r2,-40(fp)
   aff74:	1885c83a 	sub	r2,r3,r2
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
   aff78:	10800044 	addi	r2,r2,1
   aff7c:	1007883a 	mov	r3,r2
   aff80:	e0bffd17 	ldw	r2,-12(fp)
   aff84:	10c5883a 	add	r2,r2,r3
   aff88:	e0bffd15 	stw	r2,-12(fp)

  r3 = (int)&hcinfo;
   aff8c:	d0a00d04 	addi	r2,gp,-32716
   aff90:	1007883a 	mov	r3,r2
  r4 = (int)name;
   aff94:	e0bffd17 	ldw	r2,-12(fp)
   aff98:	1009883a 	mov	r4,r2
  r5 = flags;
   aff9c:	e17ffe17 	ldw	r5,-8(fp)
  r6 = mode;
   affa0:	e1bfff17 	ldw	r6,-4(fp)
   affa4:	e0bffd17 	ldw	r2,-12(fp)
   affa8:	e0bff915 	stw	r2,-28(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
   affac:	e0bff917 	ldw	r2,-28(fp)
   affb0:	10bfffc4 	addi	r2,r2,-1
   affb4:	e0bffa15 	stw	r2,-24(fp)

  while (*++ptr != 0)
   affb8:	e0bffa17 	ldw	r2,-24(fp)
   affbc:	10800044 	addi	r2,r2,1
   affc0:	e0bffa15 	stw	r2,-24(fp)
   affc4:	e0bffa17 	ldw	r2,-24(fp)
   affc8:	10800003 	ldbu	r2,0(r2)
   affcc:	10803fcc 	andi	r2,r2,255
   affd0:	1080201c 	xori	r2,r2,128
   affd4:	10bfe004 	addi	r2,r2,-128
   affd8:	103ff71e 	bne	r2,zero,affb8 <__alt_data_end+0xfffeffb8>
    ;

  return ptr - string;
   affdc:	e1fffa17 	ldw	r7,-24(fp)
   affe0:	e0bff917 	ldw	r2,-28(fp)
   affe4:	3885c83a 	sub	r2,r7,r2

  r3 = (int)&hcinfo;
  r4 = (int)name;
  r5 = flags;
  r6 = mode;
  r7 = inline_strlen(name);
   affe8:	100f883a 	mov	r7,r2

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6), "r" (r7) : "memory" );
   affec:	003da07a 	break	1

  handle = (void *)r2;
   afff0:	e0bff715 	stw	r2,-36(fp)
  error = r3;
   afff4:	e0fff815 	stw	r3,-32(fp)

  if (error == 0)
   afff8:	e0bff817 	ldw	r2,-32(fp)
   afffc:	1000031e 	bne	r2,zero,b000c <alt_hostfs_open+0x104>
    fd->priv = handle;
   b0000:	e0bffc17 	ldw	r2,-16(fp)
   b0004:	e0fff717 	ldw	r3,-36(fp)
   b0008:	10c00115 	stw	r3,4(r2)

  return -error;
   b000c:	e0bff817 	ldw	r2,-32(fp)
   b0010:	0085c83a 	sub	r2,zero,r2
}
   b0014:	e037883a 	mov	sp,fp
   b0018:	df000017 	ldw	fp,0(sp)
   b001c:	dec00104 	addi	sp,sp,4
   b0020:	f800283a 	ret

000b0024 <alt_hostfs_close>:
* alt_hostfs_close
*
* Read the file
*/
int alt_hostfs_close(alt_fd* fd)
{
   b0024:	defffd04 	addi	sp,sp,-12
   b0028:	df000215 	stw	fp,8(sp)
   b002c:	df000204 	addi	fp,sp,8
   b0030:	e13fff15 	stw	r4,-4(fp)

  /* Input and output parameters for the hostcall */
  register int r3 asm ("r3");
  register int r4 asm ("r4");

  r3 = (int)&hcinfo;
   b0034:	d0a01004 	addi	r2,gp,-32704
   b0038:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
   b003c:	e0bfff17 	ldw	r2,-4(fp)
   b0040:	10800117 	ldw	r2,4(r2)
   b0044:	1009883a 	mov	r4,r2

  __asm__ volatile("break 1" : "+r" (r3) : "r" (r4) );
   b0048:	003da07a 	break	1

  error = r3;
   b004c:	e0fffe15 	stw	r3,-8(fp)

  return -error;
   b0050:	e0bffe17 	ldw	r2,-8(fp)
   b0054:	0085c83a 	sub	r2,zero,r2
}
   b0058:	e037883a 	mov	sp,fp
   b005c:	df000017 	ldw	fp,0(sp)
   b0060:	dec00104 	addi	sp,sp,4
   b0064:	f800283a 	ret

000b0068 <alt_hostfs_read>:
* alt_hostfs_read
*
* Read the file
*/
int alt_hostfs_read(alt_fd* fd, char * ptr, int len)
{
   b0068:	defffa04 	addi	sp,sp,-24
   b006c:	df000515 	stw	fp,20(sp)
   b0070:	df000504 	addi	fp,sp,20
   b0074:	e13ffd15 	stw	r4,-12(fp)
   b0078:	e17ffe15 	stw	r5,-8(fp)
   b007c:	e1bfff15 	stw	r6,-4(fp)
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");


  r3 = (int)&hcinfo;
   b0080:	d0a01304 	addi	r2,gp,-32692
   b0084:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
   b0088:	e0bffd17 	ldw	r2,-12(fp)
   b008c:	10800117 	ldw	r2,4(r2)
   b0090:	1009883a 	mov	r4,r2
  r5 = (int)ptr;
   b0094:	e0bffe17 	ldw	r2,-8(fp)
   b0098:	100b883a 	mov	r5,r2
  r6 = len;
   b009c:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
   b00a0:	003da07a 	break	1

  rc = r2;
   b00a4:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
   b00a8:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
   b00ac:	e0bffc17 	ldw	r2,-16(fp)
   b00b0:	10000326 	beq	r2,zero,b00c0 <alt_hostfs_read+0x58>
   b00b4:	e0bffc17 	ldw	r2,-16(fp)
   b00b8:	0085c83a 	sub	r2,zero,r2
   b00bc:	00000106 	br	b00c4 <alt_hostfs_read+0x5c>
   b00c0:	e0bffb17 	ldw	r2,-20(fp)
}
   b00c4:	e037883a 	mov	sp,fp
   b00c8:	df000017 	ldw	fp,0(sp)
   b00cc:	dec00104 	addi	sp,sp,4
   b00d0:	f800283a 	ret

000b00d4 <alt_hostfs_write>:
* alt_hostfs_write
*
* Read the file
*/
int alt_hostfs_write(alt_fd* fd, const char * ptr, int len)
{
   b00d4:	defffa04 	addi	sp,sp,-24
   b00d8:	df000515 	stw	fp,20(sp)
   b00dc:	df000504 	addi	fp,sp,20
   b00e0:	e13ffd15 	stw	r4,-12(fp)
   b00e4:	e17ffe15 	stw	r5,-8(fp)
   b00e8:	e1bfff15 	stw	r6,-4(fp)
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");

  r3 = (int)&hcinfo;
   b00ec:	d0a01604 	addi	r2,gp,-32680
   b00f0:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
   b00f4:	e0bffd17 	ldw	r2,-12(fp)
   b00f8:	10800117 	ldw	r2,4(r2)
   b00fc:	1009883a 	mov	r4,r2
  r5 = (int)ptr;
   b0100:	e0bffe17 	ldw	r2,-8(fp)
   b0104:	100b883a 	mov	r5,r2
  r6 = len;
   b0108:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
   b010c:	003da07a 	break	1

  rc = r2;
   b0110:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
   b0114:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
   b0118:	e0bffc17 	ldw	r2,-16(fp)
   b011c:	10000326 	beq	r2,zero,b012c <alt_hostfs_write+0x58>
   b0120:	e0bffc17 	ldw	r2,-16(fp)
   b0124:	0085c83a 	sub	r2,zero,r2
   b0128:	00000106 	br	b0130 <alt_hostfs_write+0x5c>
   b012c:	e0bffb17 	ldw	r2,-20(fp)
}
   b0130:	e037883a 	mov	sp,fp
   b0134:	df000017 	ldw	fp,0(sp)
   b0138:	dec00104 	addi	sp,sp,4
   b013c:	f800283a 	ret

000b0140 <alt_hostfs_seek>:
* Move around within a file
*
* returns -errno for an error or the offset within the file
*/
int alt_hostfs_seek(alt_fd* fd, int ptr, int dir)
{
   b0140:	defffa04 	addi	sp,sp,-24
   b0144:	df000515 	stw	fp,20(sp)
   b0148:	df000504 	addi	fp,sp,20
   b014c:	e13ffd15 	stw	r4,-12(fp)
   b0150:	e17ffe15 	stw	r5,-8(fp)
   b0154:	e1bfff15 	stw	r6,-4(fp)
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");

  r3 = (int)&hcinfo;
   b0158:	d0a01904 	addi	r2,gp,-32668
   b015c:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
   b0160:	e0bffd17 	ldw	r2,-12(fp)
   b0164:	10800117 	ldw	r2,4(r2)
   b0168:	1009883a 	mov	r4,r2
  r5 = ptr;
   b016c:	e17ffe17 	ldw	r5,-8(fp)
  r6 = dir;
   b0170:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
   b0174:	003da07a 	break	1

  rc = r2;
   b0178:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
   b017c:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
   b0180:	e0bffc17 	ldw	r2,-16(fp)
   b0184:	10000326 	beq	r2,zero,b0194 <alt_hostfs_seek+0x54>
   b0188:	e0bffc17 	ldw	r2,-16(fp)
   b018c:	0085c83a 	sub	r2,zero,r2
   b0190:	00000106 	br	b0198 <alt_hostfs_seek+0x58>
   b0194:	e0bffb17 	ldw	r2,-20(fp)
}
   b0198:	e037883a 	mov	sp,fp
   b019c:	df000017 	ldw	fp,0(sp)
   b01a0:	dec00104 	addi	sp,sp,4
   b01a4:	f800283a 	ret

000b01a8 <alt_hostfs_fstat>:
* at the lower address.
* We need to copy the structure and byte swap it to make it match our local
* layout of struct stat.
*/
int alt_hostfs_fstat(alt_fd* fd, struct stat* st)
{
   b01a8:	deffe904 	addi	sp,sp,-92
   b01ac:	df001615 	stw	fp,88(sp)
   b01b0:	df001604 	addi	fp,sp,88
   b01b4:	e13ffe15 	stw	r4,-8(fp)
   b01b8:	e17fff15 	stw	r5,-4(fp)
  register int r2 asm ("r2");
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");

  r3 = (int)&hcinfo;
   b01bc:	d0a01c04 	addi	r2,gp,-32656
   b01c0:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
   b01c4:	e0bffe17 	ldw	r2,-8(fp)
   b01c8:	10800117 	ldw	r2,4(r2)
   b01cc:	1009883a 	mov	r4,r2
  r5 = (int)&hoststat;
   b01d0:	e0bfee04 	addi	r2,fp,-72
   b01d4:	100b883a 	mov	r5,r2

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5) : "memory" );
   b01d8:	003da07a 	break	1

  rc = r2;
   b01dc:	e0bfeb15 	stw	r2,-84(fp)
  error = r3;
   b01e0:	e0ffec15 	stw	r3,-80(fp)

  if (error == 0)
   b01e4:	e0bfec17 	ldw	r2,-80(fp)
   b01e8:	1000621e 	bne	r2,zero,b0374 <alt_hostfs_fstat+0x1cc>
     * no change is required.  On a little-endian processor we need to swap
     * the bytes in each word.
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
   b01ec:	e0bfee04 	addi	r2,fp,-72
   b01f0:	e0bfea15 	stw	r2,-88(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
   b01f4:	e0bfea17 	ldw	r2,-88(fp)
   b01f8:	10801004 	addi	r2,r2,64
   b01fc:	e0bfed15 	stw	r2,-76(fp)
    for ( ; ptr < end ; ptr++)
   b0200:	00001606 	br	b025c <alt_hostfs_fstat+0xb4>
      *ptr = ((*ptr & 0xFF000000) >> 24) |
   b0204:	e0bfea17 	ldw	r2,-88(fp)
   b0208:	10800017 	ldw	r2,0(r2)
   b020c:	1006d63a 	srli	r3,r2,24
             ((*ptr & 0x00FF0000) >> 8)  |
   b0210:	e0bfea17 	ldw	r2,-88(fp)
   b0214:	10800017 	ldw	r2,0(r2)
   b0218:	10803fec 	andhi	r2,r2,255
   b021c:	1004d23a 	srli	r2,r2,8

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
   b0220:	1886b03a 	or	r3,r3,r2
             ((*ptr & 0x00FF0000) >> 8)  |
             ((*ptr & 0x0000FF00) << 8)  |
   b0224:	e0bfea17 	ldw	r2,-88(fp)
   b0228:	10800017 	ldw	r2,0(r2)
   b022c:	10bfc00c 	andi	r2,r2,65280
   b0230:	1004923a 	slli	r2,r2,8
#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
             ((*ptr & 0x00FF0000) >> 8)  |
   b0234:	1886b03a 	or	r3,r3,r2
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
   b0238:	e0bfea17 	ldw	r2,-88(fp)
   b023c:	10800017 	ldw	r2,0(r2)
   b0240:	1004963a 	slli	r2,r2,24
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
             ((*ptr & 0x00FF0000) >> 8)  |
             ((*ptr & 0x0000FF00) << 8)  |
   b0244:	1886b03a 	or	r3,r3,r2

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
   b0248:	e0bfea17 	ldw	r2,-88(fp)
   b024c:	10c00015 	stw	r3,0(r2)
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
   b0250:	e0bfea17 	ldw	r2,-88(fp)
   b0254:	10800104 	addi	r2,r2,4
   b0258:	e0bfea15 	stw	r2,-88(fp)
   b025c:	e0ffea17 	ldw	r3,-88(fp)
   b0260:	e0bfed17 	ldw	r2,-76(fp)
   b0264:	18bfe736 	bltu	r3,r2,b0204 <__alt_data_end+0xffff0204>
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
   b0268:	e0bfff17 	ldw	r2,-4(fp)
   b026c:	e0bfea15 	stw	r2,-88(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
   b0270:	e0bfea17 	ldw	r2,-88(fp)
   b0274:	10800f04 	addi	r2,r2,60
   b0278:	e0bfed15 	stw	r2,-76(fp)
    for ( ; ptr < end ; ptr++)
   b027c:	00000506 	br	b0294 <alt_hostfs_fstat+0xec>
      *ptr = 0;
   b0280:	e0bfea17 	ldw	r2,-88(fp)
   b0284:	10000015 	stw	zero,0(r2)
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
    for ( ; ptr < end ; ptr++)
   b0288:	e0bfea17 	ldw	r2,-88(fp)
   b028c:	10800104 	addi	r2,r2,4
   b0290:	e0bfea15 	stw	r2,-88(fp)
   b0294:	e0ffea17 	ldw	r3,-88(fp)
   b0298:	e0bfed17 	ldw	r2,-76(fp)
   b029c:	18bff836 	bltu	r3,r2,b0280 <__alt_data_end+0xffff0280>

    /* Copy the data provided by the host into our local copy, for data which
     * is provided as 64bit values by the host we just use the least
     * significant word.
     */
    st->st_dev     = hoststat.fst_dev;
   b02a0:	e0bfee17 	ldw	r2,-72(fp)
   b02a4:	1007883a 	mov	r3,r2
   b02a8:	e0bfff17 	ldw	r2,-4(fp)
   b02ac:	10c0000d 	sth	r3,0(r2)
    st->st_ino     = hoststat.fst_ino;
   b02b0:	e0bfef17 	ldw	r2,-68(fp)
   b02b4:	1007883a 	mov	r3,r2
   b02b8:	e0bfff17 	ldw	r2,-4(fp)
   b02bc:	10c0008d 	sth	r3,2(r2)
    st->st_mode    = hoststat.fst_mode;
   b02c0:	e0fff017 	ldw	r3,-64(fp)
   b02c4:	e0bfff17 	ldw	r2,-4(fp)
   b02c8:	10c00115 	stw	r3,4(r2)
    st->st_nlink   = hoststat.fst_nlink;
   b02cc:	e0bff117 	ldw	r2,-60(fp)
   b02d0:	1007883a 	mov	r3,r2
   b02d4:	e0bfff17 	ldw	r2,-4(fp)
   b02d8:	10c0020d 	sth	r3,8(r2)
    st->st_uid     = hoststat.fst_uid;
   b02dc:	e0bff217 	ldw	r2,-56(fp)
   b02e0:	1007883a 	mov	r3,r2
   b02e4:	e0bfff17 	ldw	r2,-4(fp)
   b02e8:	10c0028d 	sth	r3,10(r2)
    st->st_gid     = hoststat.fst_gid;
   b02ec:	e0bff317 	ldw	r2,-52(fp)
   b02f0:	1007883a 	mov	r3,r2
   b02f4:	e0bfff17 	ldw	r2,-4(fp)
   b02f8:	10c0030d 	sth	r3,12(r2)
    st->st_rdev    = hoststat.fst_rdev;
   b02fc:	e0bff417 	ldw	r2,-48(fp)
   b0300:	1007883a 	mov	r3,r2
   b0304:	e0bfff17 	ldw	r2,-4(fp)
   b0308:	10c0038d 	sth	r3,14(r2)
    st->st_size    = hoststat.fst_size[1];
   b030c:	e0bff617 	ldw	r2,-40(fp)
   b0310:	1007883a 	mov	r3,r2
   b0314:	e0bfff17 	ldw	r2,-4(fp)
   b0318:	10c00415 	stw	r3,16(r2)

    st->st_atime   = hoststat.fst_atime;
   b031c:	e0bffb17 	ldw	r2,-20(fp)
   b0320:	1007883a 	mov	r3,r2
   b0324:	e0bfff17 	ldw	r2,-4(fp)
   b0328:	10c00515 	stw	r3,20(r2)
    st->st_mtime   = hoststat.fst_mtime;
   b032c:	e0bffc17 	ldw	r2,-16(fp)
   b0330:	1007883a 	mov	r3,r2
   b0334:	e0bfff17 	ldw	r2,-4(fp)
   b0338:	10c00715 	stw	r3,28(r2)
    st->st_ctime   = hoststat.fst_ctime;
   b033c:	e0bffd17 	ldw	r2,-12(fp)
   b0340:	1007883a 	mov	r3,r2
   b0344:	e0bfff17 	ldw	r2,-4(fp)
   b0348:	10c00915 	stw	r3,36(r2)

    st->st_blksize = hoststat.fst_blksize[1];
   b034c:	e0bff817 	ldw	r2,-32(fp)
   b0350:	1007883a 	mov	r3,r2
   b0354:	e0bfff17 	ldw	r2,-4(fp)
   b0358:	10c00b15 	stw	r3,44(r2)
    st->st_blocks  = hoststat.fst_blocks[1];
   b035c:	e0bffa17 	ldw	r2,-24(fp)
   b0360:	1007883a 	mov	r3,r2
   b0364:	e0bfff17 	ldw	r2,-4(fp)
   b0368:	10c00c15 	stw	r3,48(r2)

    return rc;
   b036c:	e0bfeb17 	ldw	r2,-84(fp)
   b0370:	00000206 	br	b037c <alt_hostfs_fstat+0x1d4>
  }
  else
    return -error;
   b0374:	e0bfec17 	ldw	r2,-80(fp)
   b0378:	0085c83a 	sub	r2,zero,r2
}
   b037c:	e037883a 	mov	sp,fp
   b0380:	df000017 	ldw	fp,0(sp)
   b0384:	dec00104 	addi	sp,sp,4
   b0388:	f800283a 	ret

000b038c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   b038c:	defff504 	addi	sp,sp,-44
   b0390:	df000a15 	stw	fp,40(sp)
   b0394:	df000a04 	addi	fp,sp,40
   b0398:	e13ffc15 	stw	r4,-16(fp)
   b039c:	e17ffd15 	stw	r5,-12(fp)
   b03a0:	e1bffe15 	stw	r6,-8(fp)
   b03a4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   b03a8:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   b03ac:	d0a72417 	ldw	r2,-25456(gp)
  
  if (alt_ticks_per_second ())
   b03b0:	10003c26 	beq	r2,zero,b04a4 <alt_alarm_start+0x118>
  {
    if (alarm)
   b03b4:	e0bffc17 	ldw	r2,-16(fp)
   b03b8:	10003826 	beq	r2,zero,b049c <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   b03bc:	e0bffc17 	ldw	r2,-16(fp)
   b03c0:	e0fffe17 	ldw	r3,-8(fp)
   b03c4:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   b03c8:	e0bffc17 	ldw	r2,-16(fp)
   b03cc:	e0ffff17 	ldw	r3,-4(fp)
   b03d0:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   b03d4:	0005303a 	rdctl	r2,status
   b03d8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   b03dc:	e0fff917 	ldw	r3,-28(fp)
   b03e0:	00bfff84 	movi	r2,-2
   b03e4:	1884703a 	and	r2,r3,r2
   b03e8:	1001703a 	wrctl	status,r2
  
  return context;
   b03ec:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   b03f0:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   b03f4:	d0a72517 	ldw	r2,-25452(gp)
      
      current_nticks = alt_nticks();
   b03f8:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   b03fc:	e0fffd17 	ldw	r3,-12(fp)
   b0400:	e0bff617 	ldw	r2,-40(fp)
   b0404:	1885883a 	add	r2,r3,r2
   b0408:	10c00044 	addi	r3,r2,1
   b040c:	e0bffc17 	ldw	r2,-16(fp)
   b0410:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   b0414:	e0bffc17 	ldw	r2,-16(fp)
   b0418:	10c00217 	ldw	r3,8(r2)
   b041c:	e0bff617 	ldw	r2,-40(fp)
   b0420:	1880042e 	bgeu	r3,r2,b0434 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   b0424:	e0bffc17 	ldw	r2,-16(fp)
   b0428:	00c00044 	movi	r3,1
   b042c:	10c00405 	stb	r3,16(r2)
   b0430:	00000206 	br	b043c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   b0434:	e0bffc17 	ldw	r2,-16(fp)
   b0438:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   b043c:	e0bffc17 	ldw	r2,-16(fp)
   b0440:	d0e02004 	addi	r3,gp,-32640
   b0444:	e0fffa15 	stw	r3,-24(fp)
   b0448:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   b044c:	e0bffb17 	ldw	r2,-20(fp)
   b0450:	e0fffa17 	ldw	r3,-24(fp)
   b0454:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   b0458:	e0bffa17 	ldw	r2,-24(fp)
   b045c:	10c00017 	ldw	r3,0(r2)
   b0460:	e0bffb17 	ldw	r2,-20(fp)
   b0464:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   b0468:	e0bffa17 	ldw	r2,-24(fp)
   b046c:	10800017 	ldw	r2,0(r2)
   b0470:	e0fffb17 	ldw	r3,-20(fp)
   b0474:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   b0478:	e0bffa17 	ldw	r2,-24(fp)
   b047c:	e0fffb17 	ldw	r3,-20(fp)
   b0480:	10c00015 	stw	r3,0(r2)
   b0484:	e0bff817 	ldw	r2,-32(fp)
   b0488:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   b048c:	e0bff717 	ldw	r2,-36(fp)
   b0490:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   b0494:	0005883a 	mov	r2,zero
   b0498:	00000306 	br	b04a8 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   b049c:	00bffa84 	movi	r2,-22
   b04a0:	00000106 	br	b04a8 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   b04a4:	00bfde84 	movi	r2,-134
  }
}
   b04a8:	e037883a 	mov	sp,fp
   b04ac:	df000017 	ldw	fp,0(sp)
   b04b0:	dec00104 	addi	sp,sp,4
   b04b4:	f800283a 	ret

000b04b8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   b04b8:	deffff04 	addi	sp,sp,-4
   b04bc:	df000015 	stw	fp,0(sp)
   b04c0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   b04c4:	0001883a 	nop
   b04c8:	e037883a 	mov	sp,fp
   b04cc:	df000017 	ldw	fp,0(sp)
   b04d0:	dec00104 	addi	sp,sp,4
   b04d4:	f800283a 	ret

000b04d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   b04d8:	defffe04 	addi	sp,sp,-8
   b04dc:	dfc00115 	stw	ra,4(sp)
   b04e0:	df000015 	stw	fp,0(sp)
   b04e4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   b04e8:	d0a00b17 	ldw	r2,-32724(gp)
   b04ec:	10000326 	beq	r2,zero,b04fc <alt_get_errno+0x24>
   b04f0:	d0a00b17 	ldw	r2,-32724(gp)
   b04f4:	103ee83a 	callr	r2
   b04f8:	00000106 	br	b0500 <alt_get_errno+0x28>
   b04fc:	d0a71904 	addi	r2,gp,-25500
}
   b0500:	e037883a 	mov	sp,fp
   b0504:	dfc00117 	ldw	ra,4(sp)
   b0508:	df000017 	ldw	fp,0(sp)
   b050c:	dec00204 	addi	sp,sp,8
   b0510:	f800283a 	ret

000b0514 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   b0514:	defffa04 	addi	sp,sp,-24
   b0518:	dfc00515 	stw	ra,20(sp)
   b051c:	df000415 	stw	fp,16(sp)
   b0520:	df000404 	addi	fp,sp,16
   b0524:	e13ffe15 	stw	r4,-8(fp)
   b0528:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   b052c:	e0bffe17 	ldw	r2,-8(fp)
   b0530:	10000326 	beq	r2,zero,b0540 <alt_dev_llist_insert+0x2c>
   b0534:	e0bffe17 	ldw	r2,-8(fp)
   b0538:	10800217 	ldw	r2,8(r2)
   b053c:	1000061e 	bne	r2,zero,b0558 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   b0540:	00b04d80 	call	b04d8 <alt_get_errno>
   b0544:	1007883a 	mov	r3,r2
   b0548:	00800584 	movi	r2,22
   b054c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   b0550:	00bffa84 	movi	r2,-22
   b0554:	00001306 	br	b05a4 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   b0558:	e0bffe17 	ldw	r2,-8(fp)
   b055c:	e0ffff17 	ldw	r3,-4(fp)
   b0560:	e0fffc15 	stw	r3,-16(fp)
   b0564:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   b0568:	e0bffd17 	ldw	r2,-12(fp)
   b056c:	e0fffc17 	ldw	r3,-16(fp)
   b0570:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   b0574:	e0bffc17 	ldw	r2,-16(fp)
   b0578:	10c00017 	ldw	r3,0(r2)
   b057c:	e0bffd17 	ldw	r2,-12(fp)
   b0580:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   b0584:	e0bffc17 	ldw	r2,-16(fp)
   b0588:	10800017 	ldw	r2,0(r2)
   b058c:	e0fffd17 	ldw	r3,-12(fp)
   b0590:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   b0594:	e0bffc17 	ldw	r2,-16(fp)
   b0598:	e0fffd17 	ldw	r3,-12(fp)
   b059c:	10c00015 	stw	r3,0(r2)

  return 0;  
   b05a0:	0005883a 	mov	r2,zero
}
   b05a4:	e037883a 	mov	sp,fp
   b05a8:	dfc00117 	ldw	ra,4(sp)
   b05ac:	df000017 	ldw	fp,0(sp)
   b05b0:	dec00204 	addi	sp,sp,8
   b05b4:	f800283a 	ret

000b05b8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   b05b8:	defffd04 	addi	sp,sp,-12
   b05bc:	dfc00215 	stw	ra,8(sp)
   b05c0:	df000115 	stw	fp,4(sp)
   b05c4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   b05c8:	008002f4 	movhi	r2,11
   b05cc:	1084da04 	addi	r2,r2,4968
   b05d0:	e0bfff15 	stw	r2,-4(fp)
   b05d4:	00000606 	br	b05f0 <_do_ctors+0x38>
        (*ctor) (); 
   b05d8:	e0bfff17 	ldw	r2,-4(fp)
   b05dc:	10800017 	ldw	r2,0(r2)
   b05e0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   b05e4:	e0bfff17 	ldw	r2,-4(fp)
   b05e8:	10bfff04 	addi	r2,r2,-4
   b05ec:	e0bfff15 	stw	r2,-4(fp)
   b05f0:	e0ffff17 	ldw	r3,-4(fp)
   b05f4:	008002f4 	movhi	r2,11
   b05f8:	1084db04 	addi	r2,r2,4972
   b05fc:	18bff62e 	bgeu	r3,r2,b05d8 <__alt_data_end+0xffff05d8>
        (*ctor) (); 
}
   b0600:	0001883a 	nop
   b0604:	e037883a 	mov	sp,fp
   b0608:	dfc00117 	ldw	ra,4(sp)
   b060c:	df000017 	ldw	fp,0(sp)
   b0610:	dec00204 	addi	sp,sp,8
   b0614:	f800283a 	ret

000b0618 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   b0618:	defffd04 	addi	sp,sp,-12
   b061c:	dfc00215 	stw	ra,8(sp)
   b0620:	df000115 	stw	fp,4(sp)
   b0624:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   b0628:	008002f4 	movhi	r2,11
   b062c:	1084da04 	addi	r2,r2,4968
   b0630:	e0bfff15 	stw	r2,-4(fp)
   b0634:	00000606 	br	b0650 <_do_dtors+0x38>
        (*dtor) (); 
   b0638:	e0bfff17 	ldw	r2,-4(fp)
   b063c:	10800017 	ldw	r2,0(r2)
   b0640:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   b0644:	e0bfff17 	ldw	r2,-4(fp)
   b0648:	10bfff04 	addi	r2,r2,-4
   b064c:	e0bfff15 	stw	r2,-4(fp)
   b0650:	e0ffff17 	ldw	r3,-4(fp)
   b0654:	008002f4 	movhi	r2,11
   b0658:	1084db04 	addi	r2,r2,4972
   b065c:	18bff62e 	bgeu	r3,r2,b0638 <__alt_data_end+0xffff0638>
        (*dtor) (); 
}
   b0660:	0001883a 	nop
   b0664:	e037883a 	mov	sp,fp
   b0668:	dfc00117 	ldw	ra,4(sp)
   b066c:	df000017 	ldw	fp,0(sp)
   b0670:	dec00204 	addi	sp,sp,8
   b0674:	f800283a 	ret

000b0678 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   b0678:	defffa04 	addi	sp,sp,-24
   b067c:	dfc00515 	stw	ra,20(sp)
   b0680:	df000415 	stw	fp,16(sp)
   b0684:	df000404 	addi	fp,sp,16
   b0688:	e13ffe15 	stw	r4,-8(fp)
   b068c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   b0690:	e0bfff17 	ldw	r2,-4(fp)
   b0694:	10800017 	ldw	r2,0(r2)
   b0698:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   b069c:	e13ffe17 	ldw	r4,-8(fp)
   b06a0:	00a2cf40 	call	a2cf4 <strlen>
   b06a4:	10800044 	addi	r2,r2,1
   b06a8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   b06ac:	00000d06 	br	b06e4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   b06b0:	e0bffc17 	ldw	r2,-16(fp)
   b06b4:	10800217 	ldw	r2,8(r2)
   b06b8:	e0fffd17 	ldw	r3,-12(fp)
   b06bc:	180d883a 	mov	r6,r3
   b06c0:	e17ffe17 	ldw	r5,-8(fp)
   b06c4:	1009883a 	mov	r4,r2
   b06c8:	00b10240 	call	b1024 <memcmp>
   b06cc:	1000021e 	bne	r2,zero,b06d8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   b06d0:	e0bffc17 	ldw	r2,-16(fp)
   b06d4:	00000706 	br	b06f4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   b06d8:	e0bffc17 	ldw	r2,-16(fp)
   b06dc:	10800017 	ldw	r2,0(r2)
   b06e0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   b06e4:	e0fffc17 	ldw	r3,-16(fp)
   b06e8:	e0bfff17 	ldw	r2,-4(fp)
   b06ec:	18bff01e 	bne	r3,r2,b06b0 <__alt_data_end+0xffff06b0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   b06f0:	0005883a 	mov	r2,zero
}
   b06f4:	e037883a 	mov	sp,fp
   b06f8:	dfc00117 	ldw	ra,4(sp)
   b06fc:	df000017 	ldw	fp,0(sp)
   b0700:	dec00204 	addi	sp,sp,8
   b0704:	f800283a 	ret

000b0708 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   b0708:	defffb04 	addi	sp,sp,-20
   b070c:	dfc00415 	stw	ra,16(sp)
   b0710:	df000315 	stw	fp,12(sp)
   b0714:	df000304 	addi	fp,sp,12
   b0718:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   b071c:	d0a00617 	ldw	r2,-32744(gp)
   b0720:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   b0724:	00003106 	br	b07ec <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   b0728:	e0bffd17 	ldw	r2,-12(fp)
   b072c:	10800217 	ldw	r2,8(r2)
   b0730:	1009883a 	mov	r4,r2
   b0734:	00a2cf40 	call	a2cf4 <strlen>
   b0738:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   b073c:	e0bffd17 	ldw	r2,-12(fp)
   b0740:	10c00217 	ldw	r3,8(r2)
   b0744:	e0bffe17 	ldw	r2,-8(fp)
   b0748:	10bfffc4 	addi	r2,r2,-1
   b074c:	1885883a 	add	r2,r3,r2
   b0750:	10800003 	ldbu	r2,0(r2)
   b0754:	10803fcc 	andi	r2,r2,255
   b0758:	1080201c 	xori	r2,r2,128
   b075c:	10bfe004 	addi	r2,r2,-128
   b0760:	10800bd8 	cmpnei	r2,r2,47
   b0764:	1000031e 	bne	r2,zero,b0774 <alt_find_file+0x6c>
    {
      len -= 1;
   b0768:	e0bffe17 	ldw	r2,-8(fp)
   b076c:	10bfffc4 	addi	r2,r2,-1
   b0770:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   b0774:	e0bffe17 	ldw	r2,-8(fp)
   b0778:	e0ffff17 	ldw	r3,-4(fp)
   b077c:	1885883a 	add	r2,r3,r2
   b0780:	10800003 	ldbu	r2,0(r2)
   b0784:	10803fcc 	andi	r2,r2,255
   b0788:	1080201c 	xori	r2,r2,128
   b078c:	10bfe004 	addi	r2,r2,-128
   b0790:	10800be0 	cmpeqi	r2,r2,47
   b0794:	1000081e 	bne	r2,zero,b07b8 <alt_find_file+0xb0>
   b0798:	e0bffe17 	ldw	r2,-8(fp)
   b079c:	e0ffff17 	ldw	r3,-4(fp)
   b07a0:	1885883a 	add	r2,r3,r2
   b07a4:	10800003 	ldbu	r2,0(r2)
   b07a8:	10803fcc 	andi	r2,r2,255
   b07ac:	1080201c 	xori	r2,r2,128
   b07b0:	10bfe004 	addi	r2,r2,-128
   b07b4:	10000a1e 	bne	r2,zero,b07e0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   b07b8:	e0bffd17 	ldw	r2,-12(fp)
   b07bc:	10800217 	ldw	r2,8(r2)
   b07c0:	e0fffe17 	ldw	r3,-8(fp)
   b07c4:	180d883a 	mov	r6,r3
   b07c8:	e17fff17 	ldw	r5,-4(fp)
   b07cc:	1009883a 	mov	r4,r2
   b07d0:	00b10240 	call	b1024 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   b07d4:	1000021e 	bne	r2,zero,b07e0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   b07d8:	e0bffd17 	ldw	r2,-12(fp)
   b07dc:	00000706 	br	b07fc <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   b07e0:	e0bffd17 	ldw	r2,-12(fp)
   b07e4:	10800017 	ldw	r2,0(r2)
   b07e8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   b07ec:	e0fffd17 	ldw	r3,-12(fp)
   b07f0:	d0a00604 	addi	r2,gp,-32744
   b07f4:	18bfcc1e 	bne	r3,r2,b0728 <__alt_data_end+0xffff0728>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   b07f8:	0005883a 	mov	r2,zero
}
   b07fc:	e037883a 	mov	sp,fp
   b0800:	dfc00117 	ldw	ra,4(sp)
   b0804:	df000017 	ldw	fp,0(sp)
   b0808:	dec00204 	addi	sp,sp,8
   b080c:	f800283a 	ret

000b0810 <alt_fs_reg>:
 * A return value of zero indicates success. A negative return value indicates
 * failure. 
 */
 
int alt_fs_reg (alt_dev* dev)
{
   b0810:	defffc04 	addi	sp,sp,-16
   b0814:	df000315 	stw	fp,12(sp)
   b0818:	df000304 	addi	fp,sp,12
   b081c:	e13fff15 	stw	r4,-4(fp)
  /*
   * check that the device has a name.
   */

  if (!dev->name)
   b0820:	e0bfff17 	ldw	r2,-4(fp)
   b0824:	10800217 	ldw	r2,8(r2)
   b0828:	1000021e 	bne	r2,zero,b0834 <alt_fs_reg+0x24>
  {
    return -ENODEV;
   b082c:	00bffb44 	movi	r2,-19
   b0830:	00001306 	br	b0880 <alt_fs_reg+0x70>
  
  /*
   * register the file system.
   */

  alt_llist_insert(&alt_fs_list, &dev->llist);
   b0834:	e0bfff17 	ldw	r2,-4(fp)
   b0838:	d0e00604 	addi	r3,gp,-32744
   b083c:	e0fffd15 	stw	r3,-12(fp)
   b0840:	e0bffe15 	stw	r2,-8(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   b0844:	e0bffe17 	ldw	r2,-8(fp)
   b0848:	e0fffd17 	ldw	r3,-12(fp)
   b084c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   b0850:	e0bffd17 	ldw	r2,-12(fp)
   b0854:	10c00017 	ldw	r3,0(r2)
   b0858:	e0bffe17 	ldw	r2,-8(fp)
   b085c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   b0860:	e0bffd17 	ldw	r2,-12(fp)
   b0864:	10800017 	ldw	r2,0(r2)
   b0868:	e0fffe17 	ldw	r3,-8(fp)
   b086c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   b0870:	e0bffd17 	ldw	r2,-12(fp)
   b0874:	e0fffe17 	ldw	r3,-8(fp)
   b0878:	10c00015 	stw	r3,0(r2)

  return 0;
   b087c:	0005883a 	mov	r2,zero
} 
   b0880:	e037883a 	mov	sp,fp
   b0884:	df000017 	ldw	fp,0(sp)
   b0888:	dec00104 	addi	sp,sp,4
   b088c:	f800283a 	ret

000b0890 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   b0890:	defffa04 	addi	sp,sp,-24
   b0894:	dfc00515 	stw	ra,20(sp)
   b0898:	df000415 	stw	fp,16(sp)
   b089c:	dc000315 	stw	r16,12(sp)
   b08a0:	df000404 	addi	fp,sp,16
   b08a4:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   b08a8:	00bffa04 	movi	r2,-24
   b08ac:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   b08b0:	e03ffc15 	stw	zero,-16(fp)
   b08b4:	00001d06 	br	b092c <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   b08b8:	040002f4 	movhi	r16,11
   b08bc:	84081204 	addi	r16,r16,8264
   b08c0:	e0bffc17 	ldw	r2,-16(fp)
   b08c4:	01400304 	movi	r5,12
   b08c8:	1009883a 	mov	r4,r2
   b08cc:	00ab8e00 	call	ab8e0 <__mulsi3>
   b08d0:	8085883a 	add	r2,r16,r2
   b08d4:	10800017 	ldw	r2,0(r2)
   b08d8:	1000111e 	bne	r2,zero,b0920 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   b08dc:	040002f4 	movhi	r16,11
   b08e0:	84081204 	addi	r16,r16,8264
   b08e4:	e0bffc17 	ldw	r2,-16(fp)
   b08e8:	01400304 	movi	r5,12
   b08ec:	1009883a 	mov	r4,r2
   b08f0:	00ab8e00 	call	ab8e0 <__mulsi3>
   b08f4:	8085883a 	add	r2,r16,r2
   b08f8:	e0fffe17 	ldw	r3,-8(fp)
   b08fc:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   b0900:	d0e00a17 	ldw	r3,-32728(gp)
   b0904:	e0bffc17 	ldw	r2,-16(fp)
   b0908:	1880020e 	bge	r3,r2,b0914 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   b090c:	e0bffc17 	ldw	r2,-16(fp)
   b0910:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
   b0914:	e0bffc17 	ldw	r2,-16(fp)
   b0918:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   b091c:	00000606 	br	b0938 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   b0920:	e0bffc17 	ldw	r2,-16(fp)
   b0924:	10800044 	addi	r2,r2,1
   b0928:	e0bffc15 	stw	r2,-16(fp)
   b092c:	e0bffc17 	ldw	r2,-16(fp)
   b0930:	10800810 	cmplti	r2,r2,32
   b0934:	103fe01e 	bne	r2,zero,b08b8 <__alt_data_end+0xffff08b8>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   b0938:	e0bffd17 	ldw	r2,-12(fp)
}
   b093c:	e6ffff04 	addi	sp,fp,-4
   b0940:	dfc00217 	ldw	ra,8(sp)
   b0944:	df000117 	ldw	fp,4(sp)
   b0948:	dc000017 	ldw	r16,0(sp)
   b094c:	dec00304 	addi	sp,sp,12
   b0950:	f800283a 	ret

000b0954 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   b0954:	deffff04 	addi	sp,sp,-4
   b0958:	df000015 	stw	fp,0(sp)
   b095c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   b0960:	0001883a 	nop
   b0964:	e037883a 	mov	sp,fp
   b0968:	df000017 	ldw	fp,0(sp)
   b096c:	dec00104 	addi	sp,sp,4
   b0970:	f800283a 	ret

000b0974 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   b0974:	defff904 	addi	sp,sp,-28
   b0978:	dfc00615 	stw	ra,24(sp)
   b097c:	df000515 	stw	fp,20(sp)
   b0980:	df000504 	addi	fp,sp,20
   b0984:	e13ffc15 	stw	r4,-16(fp)
   b0988:	e17ffd15 	stw	r5,-12(fp)
   b098c:	e1bffe15 	stw	r6,-8(fp)
   b0990:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   b0994:	e0800217 	ldw	r2,8(fp)
   b0998:	d8800015 	stw	r2,0(sp)
   b099c:	e1ffff17 	ldw	r7,-4(fp)
   b09a0:	e1bffe17 	ldw	r6,-8(fp)
   b09a4:	e17ffd17 	ldw	r5,-12(fp)
   b09a8:	e13ffc17 	ldw	r4,-16(fp)
   b09ac:	00b0b240 	call	b0b24 <alt_iic_isr_register>
}  
   b09b0:	e037883a 	mov	sp,fp
   b09b4:	dfc00117 	ldw	ra,4(sp)
   b09b8:	df000017 	ldw	fp,0(sp)
   b09bc:	dec00204 	addi	sp,sp,8
   b09c0:	f800283a 	ret

000b09c4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   b09c4:	defff904 	addi	sp,sp,-28
   b09c8:	df000615 	stw	fp,24(sp)
   b09cc:	df000604 	addi	fp,sp,24
   b09d0:	e13ffe15 	stw	r4,-8(fp)
   b09d4:	e17fff15 	stw	r5,-4(fp)
   b09d8:	e0bfff17 	ldw	r2,-4(fp)
   b09dc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   b09e0:	0005303a 	rdctl	r2,status
   b09e4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   b09e8:	e0fffb17 	ldw	r3,-20(fp)
   b09ec:	00bfff84 	movi	r2,-2
   b09f0:	1884703a 	and	r2,r3,r2
   b09f4:	1001703a 	wrctl	status,r2
  
  return context;
   b09f8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   b09fc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   b0a00:	00c00044 	movi	r3,1
   b0a04:	e0bffa17 	ldw	r2,-24(fp)
   b0a08:	1884983a 	sll	r2,r3,r2
   b0a0c:	1007883a 	mov	r3,r2
   b0a10:	d0a72317 	ldw	r2,-25460(gp)
   b0a14:	1884b03a 	or	r2,r3,r2
   b0a18:	d0a72315 	stw	r2,-25460(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   b0a1c:	d0a72317 	ldw	r2,-25460(gp)
   b0a20:	100170fa 	wrctl	ienable,r2
   b0a24:	e0bffc17 	ldw	r2,-16(fp)
   b0a28:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   b0a2c:	e0bffd17 	ldw	r2,-12(fp)
   b0a30:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   b0a34:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   b0a38:	0001883a 	nop
}
   b0a3c:	e037883a 	mov	sp,fp
   b0a40:	df000017 	ldw	fp,0(sp)
   b0a44:	dec00104 	addi	sp,sp,4
   b0a48:	f800283a 	ret

000b0a4c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   b0a4c:	defff904 	addi	sp,sp,-28
   b0a50:	df000615 	stw	fp,24(sp)
   b0a54:	df000604 	addi	fp,sp,24
   b0a58:	e13ffe15 	stw	r4,-8(fp)
   b0a5c:	e17fff15 	stw	r5,-4(fp)
   b0a60:	e0bfff17 	ldw	r2,-4(fp)
   b0a64:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   b0a68:	0005303a 	rdctl	r2,status
   b0a6c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   b0a70:	e0fffb17 	ldw	r3,-20(fp)
   b0a74:	00bfff84 	movi	r2,-2
   b0a78:	1884703a 	and	r2,r3,r2
   b0a7c:	1001703a 	wrctl	status,r2
  
  return context;
   b0a80:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   b0a84:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   b0a88:	00c00044 	movi	r3,1
   b0a8c:	e0bffa17 	ldw	r2,-24(fp)
   b0a90:	1884983a 	sll	r2,r3,r2
   b0a94:	0084303a 	nor	r2,zero,r2
   b0a98:	1007883a 	mov	r3,r2
   b0a9c:	d0a72317 	ldw	r2,-25460(gp)
   b0aa0:	1884703a 	and	r2,r3,r2
   b0aa4:	d0a72315 	stw	r2,-25460(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   b0aa8:	d0a72317 	ldw	r2,-25460(gp)
   b0aac:	100170fa 	wrctl	ienable,r2
   b0ab0:	e0bffc17 	ldw	r2,-16(fp)
   b0ab4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   b0ab8:	e0bffd17 	ldw	r2,-12(fp)
   b0abc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   b0ac0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   b0ac4:	0001883a 	nop
}
   b0ac8:	e037883a 	mov	sp,fp
   b0acc:	df000017 	ldw	fp,0(sp)
   b0ad0:	dec00104 	addi	sp,sp,4
   b0ad4:	f800283a 	ret

000b0ad8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   b0ad8:	defffc04 	addi	sp,sp,-16
   b0adc:	df000315 	stw	fp,12(sp)
   b0ae0:	df000304 	addi	fp,sp,12
   b0ae4:	e13ffe15 	stw	r4,-8(fp)
   b0ae8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   b0aec:	000530fa 	rdctl	r2,ienable
   b0af0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   b0af4:	00c00044 	movi	r3,1
   b0af8:	e0bfff17 	ldw	r2,-4(fp)
   b0afc:	1884983a 	sll	r2,r3,r2
   b0b00:	1007883a 	mov	r3,r2
   b0b04:	e0bffd17 	ldw	r2,-12(fp)
   b0b08:	1884703a 	and	r2,r3,r2
   b0b0c:	1004c03a 	cmpne	r2,r2,zero
   b0b10:	10803fcc 	andi	r2,r2,255
}
   b0b14:	e037883a 	mov	sp,fp
   b0b18:	df000017 	ldw	fp,0(sp)
   b0b1c:	dec00104 	addi	sp,sp,4
   b0b20:	f800283a 	ret

000b0b24 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   b0b24:	defff504 	addi	sp,sp,-44
   b0b28:	dfc00a15 	stw	ra,40(sp)
   b0b2c:	df000915 	stw	fp,36(sp)
   b0b30:	df000904 	addi	fp,sp,36
   b0b34:	e13ffc15 	stw	r4,-16(fp)
   b0b38:	e17ffd15 	stw	r5,-12(fp)
   b0b3c:	e1bffe15 	stw	r6,-8(fp)
   b0b40:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   b0b44:	00bffa84 	movi	r2,-22
   b0b48:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   b0b4c:	e0bffd17 	ldw	r2,-12(fp)
   b0b50:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   b0b54:	e0bff817 	ldw	r2,-32(fp)
   b0b58:	10800808 	cmpgei	r2,r2,32
   b0b5c:	1000271e 	bne	r2,zero,b0bfc <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   b0b60:	0005303a 	rdctl	r2,status
   b0b64:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   b0b68:	e0fffb17 	ldw	r3,-20(fp)
   b0b6c:	00bfff84 	movi	r2,-2
   b0b70:	1884703a 	and	r2,r3,r2
   b0b74:	1001703a 	wrctl	status,r2
  
  return context;
   b0b78:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   b0b7c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   b0b80:	008002f4 	movhi	r2,11
   b0b84:	1093c504 	addi	r2,r2,20244
   b0b88:	e0fff817 	ldw	r3,-32(fp)
   b0b8c:	180690fa 	slli	r3,r3,3
   b0b90:	10c5883a 	add	r2,r2,r3
   b0b94:	e0fffe17 	ldw	r3,-8(fp)
   b0b98:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   b0b9c:	008002f4 	movhi	r2,11
   b0ba0:	1093c504 	addi	r2,r2,20244
   b0ba4:	e0fff817 	ldw	r3,-32(fp)
   b0ba8:	180690fa 	slli	r3,r3,3
   b0bac:	10c5883a 	add	r2,r2,r3
   b0bb0:	10800104 	addi	r2,r2,4
   b0bb4:	e0ffff17 	ldw	r3,-4(fp)
   b0bb8:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   b0bbc:	e0bffe17 	ldw	r2,-8(fp)
   b0bc0:	10000526 	beq	r2,zero,b0bd8 <alt_iic_isr_register+0xb4>
   b0bc4:	e0bff817 	ldw	r2,-32(fp)
   b0bc8:	100b883a 	mov	r5,r2
   b0bcc:	e13ffc17 	ldw	r4,-16(fp)
   b0bd0:	00b09c40 	call	b09c4 <alt_ic_irq_enable>
   b0bd4:	00000406 	br	b0be8 <alt_iic_isr_register+0xc4>
   b0bd8:	e0bff817 	ldw	r2,-32(fp)
   b0bdc:	100b883a 	mov	r5,r2
   b0be0:	e13ffc17 	ldw	r4,-16(fp)
   b0be4:	00b0a4c0 	call	b0a4c <alt_ic_irq_disable>
   b0be8:	e0bff715 	stw	r2,-36(fp)
   b0bec:	e0bffa17 	ldw	r2,-24(fp)
   b0bf0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   b0bf4:	e0bff917 	ldw	r2,-28(fp)
   b0bf8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   b0bfc:	e0bff717 	ldw	r2,-36(fp)
}
   b0c00:	e037883a 	mov	sp,fp
   b0c04:	dfc00117 	ldw	ra,4(sp)
   b0c08:	df000017 	ldw	fp,0(sp)
   b0c0c:	dec00204 	addi	sp,sp,8
   b0c10:	f800283a 	ret

000b0c14 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   b0c14:	defff804 	addi	sp,sp,-32
   b0c18:	dfc00715 	stw	ra,28(sp)
   b0c1c:	df000615 	stw	fp,24(sp)
   b0c20:	dc000515 	stw	r16,20(sp)
   b0c24:	df000604 	addi	fp,sp,24
   b0c28:	e13ffb15 	stw	r4,-20(fp)
   b0c2c:	e17ffc15 	stw	r5,-16(fp)
   b0c30:	e1bffd15 	stw	r6,-12(fp)
   b0c34:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   b0c38:	e1bffe17 	ldw	r6,-8(fp)
   b0c3c:	e17ffd17 	ldw	r5,-12(fp)
   b0c40:	e13ffc17 	ldw	r4,-16(fp)
   b0c44:	00ae8b80 	call	ae8b8 <open>
   b0c48:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   b0c4c:	e0bffa17 	ldw	r2,-24(fp)
   b0c50:	10002216 	blt	r2,zero,b0cdc <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   b0c54:	040002f4 	movhi	r16,11
   b0c58:	84081204 	addi	r16,r16,8264
   b0c5c:	e0bffa17 	ldw	r2,-24(fp)
   b0c60:	01400304 	movi	r5,12
   b0c64:	1009883a 	mov	r4,r2
   b0c68:	00ab8e00 	call	ab8e0 <__mulsi3>
   b0c6c:	8085883a 	add	r2,r16,r2
   b0c70:	10c00017 	ldw	r3,0(r2)
   b0c74:	e0bffb17 	ldw	r2,-20(fp)
   b0c78:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   b0c7c:	040002f4 	movhi	r16,11
   b0c80:	84081204 	addi	r16,r16,8264
   b0c84:	e0bffa17 	ldw	r2,-24(fp)
   b0c88:	01400304 	movi	r5,12
   b0c8c:	1009883a 	mov	r4,r2
   b0c90:	00ab8e00 	call	ab8e0 <__mulsi3>
   b0c94:	8085883a 	add	r2,r16,r2
   b0c98:	10800104 	addi	r2,r2,4
   b0c9c:	10c00017 	ldw	r3,0(r2)
   b0ca0:	e0bffb17 	ldw	r2,-20(fp)
   b0ca4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   b0ca8:	040002f4 	movhi	r16,11
   b0cac:	84081204 	addi	r16,r16,8264
   b0cb0:	e0bffa17 	ldw	r2,-24(fp)
   b0cb4:	01400304 	movi	r5,12
   b0cb8:	1009883a 	mov	r4,r2
   b0cbc:	00ab8e00 	call	ab8e0 <__mulsi3>
   b0cc0:	8085883a 	add	r2,r16,r2
   b0cc4:	10800204 	addi	r2,r2,8
   b0cc8:	10c00017 	ldw	r3,0(r2)
   b0ccc:	e0bffb17 	ldw	r2,-20(fp)
   b0cd0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   b0cd4:	e13ffa17 	ldw	r4,-24(fp)
   b0cd8:	00aeb540 	call	aeb54 <alt_release_fd>
  }
} 
   b0cdc:	0001883a 	nop
   b0ce0:	e6ffff04 	addi	sp,fp,-4
   b0ce4:	dfc00217 	ldw	ra,8(sp)
   b0ce8:	df000117 	ldw	fp,4(sp)
   b0cec:	dc000017 	ldw	r16,0(sp)
   b0cf0:	dec00304 	addi	sp,sp,12
   b0cf4:	f800283a 	ret

000b0cf8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   b0cf8:	defffb04 	addi	sp,sp,-20
   b0cfc:	dfc00415 	stw	ra,16(sp)
   b0d00:	df000315 	stw	fp,12(sp)
   b0d04:	df000304 	addi	fp,sp,12
   b0d08:	e13ffd15 	stw	r4,-12(fp)
   b0d0c:	e17ffe15 	stw	r5,-8(fp)
   b0d10:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   b0d14:	01c07fc4 	movi	r7,511
   b0d18:	01800044 	movi	r6,1
   b0d1c:	e17ffd17 	ldw	r5,-12(fp)
   b0d20:	010002f4 	movhi	r4,11
   b0d24:	21081504 	addi	r4,r4,8276
   b0d28:	00b0c140 	call	b0c14 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   b0d2c:	01c07fc4 	movi	r7,511
   b0d30:	000d883a 	mov	r6,zero
   b0d34:	e17ffe17 	ldw	r5,-8(fp)
   b0d38:	010002f4 	movhi	r4,11
   b0d3c:	21081204 	addi	r4,r4,8264
   b0d40:	00b0c140 	call	b0c14 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   b0d44:	01c07fc4 	movi	r7,511
   b0d48:	01800044 	movi	r6,1
   b0d4c:	e17fff17 	ldw	r5,-4(fp)
   b0d50:	010002f4 	movhi	r4,11
   b0d54:	21081804 	addi	r4,r4,8288
   b0d58:	00b0c140 	call	b0c14 <alt_open_fd>
}  
   b0d5c:	0001883a 	nop
   b0d60:	e037883a 	mov	sp,fp
   b0d64:	dfc00117 	ldw	ra,4(sp)
   b0d68:	df000017 	ldw	fp,0(sp)
   b0d6c:	dec00204 	addi	sp,sp,8
   b0d70:	f800283a 	ret

000b0d74 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   b0d74:	defffa04 	addi	sp,sp,-24
   b0d78:	df000515 	stw	fp,20(sp)
   b0d7c:	df000504 	addi	fp,sp,20
   b0d80:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   b0d84:	0005303a 	rdctl	r2,status
   b0d88:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   b0d8c:	e0fffc17 	ldw	r3,-16(fp)
   b0d90:	00bfff84 	movi	r2,-2
   b0d94:	1884703a 	and	r2,r3,r2
   b0d98:	1001703a 	wrctl	status,r2
  
  return context;
   b0d9c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   b0da0:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   b0da4:	e0bfff17 	ldw	r2,-4(fp)
   b0da8:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   b0dac:	e0bffd17 	ldw	r2,-12(fp)
   b0db0:	10800017 	ldw	r2,0(r2)
   b0db4:	e0fffd17 	ldw	r3,-12(fp)
   b0db8:	18c00117 	ldw	r3,4(r3)
   b0dbc:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   b0dc0:	e0bffd17 	ldw	r2,-12(fp)
   b0dc4:	10800117 	ldw	r2,4(r2)
   b0dc8:	e0fffd17 	ldw	r3,-12(fp)
   b0dcc:	18c00017 	ldw	r3,0(r3)
   b0dd0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   b0dd4:	e0bffd17 	ldw	r2,-12(fp)
   b0dd8:	e0fffd17 	ldw	r3,-12(fp)
   b0ddc:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   b0de0:	e0bffd17 	ldw	r2,-12(fp)
   b0de4:	e0fffd17 	ldw	r3,-12(fp)
   b0de8:	10c00015 	stw	r3,0(r2)
   b0dec:	e0bffb17 	ldw	r2,-20(fp)
   b0df0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   b0df4:	e0bffe17 	ldw	r2,-8(fp)
   b0df8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   b0dfc:	0001883a 	nop
   b0e00:	e037883a 	mov	sp,fp
   b0e04:	df000017 	ldw	fp,0(sp)
   b0e08:	dec00104 	addi	sp,sp,4
   b0e0c:	f800283a 	ret

000b0e10 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   b0e10:	defffb04 	addi	sp,sp,-20
   b0e14:	dfc00415 	stw	ra,16(sp)
   b0e18:	df000315 	stw	fp,12(sp)
   b0e1c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   b0e20:	d0a02017 	ldw	r2,-32640(gp)
   b0e24:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   b0e28:	d0a72517 	ldw	r2,-25452(gp)
   b0e2c:	10800044 	addi	r2,r2,1
   b0e30:	d0a72515 	stw	r2,-25452(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   b0e34:	00002e06 	br	b0ef0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   b0e38:	e0bffd17 	ldw	r2,-12(fp)
   b0e3c:	10800017 	ldw	r2,0(r2)
   b0e40:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   b0e44:	e0bffd17 	ldw	r2,-12(fp)
   b0e48:	10800403 	ldbu	r2,16(r2)
   b0e4c:	10803fcc 	andi	r2,r2,255
   b0e50:	10000426 	beq	r2,zero,b0e64 <alt_tick+0x54>
   b0e54:	d0a72517 	ldw	r2,-25452(gp)
   b0e58:	1000021e 	bne	r2,zero,b0e64 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   b0e5c:	e0bffd17 	ldw	r2,-12(fp)
   b0e60:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   b0e64:	e0bffd17 	ldw	r2,-12(fp)
   b0e68:	10800217 	ldw	r2,8(r2)
   b0e6c:	d0e72517 	ldw	r3,-25452(gp)
   b0e70:	18801d36 	bltu	r3,r2,b0ee8 <alt_tick+0xd8>
   b0e74:	e0bffd17 	ldw	r2,-12(fp)
   b0e78:	10800403 	ldbu	r2,16(r2)
   b0e7c:	10803fcc 	andi	r2,r2,255
   b0e80:	1000191e 	bne	r2,zero,b0ee8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   b0e84:	e0bffd17 	ldw	r2,-12(fp)
   b0e88:	10800317 	ldw	r2,12(r2)
   b0e8c:	e0fffd17 	ldw	r3,-12(fp)
   b0e90:	18c00517 	ldw	r3,20(r3)
   b0e94:	1809883a 	mov	r4,r3
   b0e98:	103ee83a 	callr	r2
   b0e9c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   b0ea0:	e0bfff17 	ldw	r2,-4(fp)
   b0ea4:	1000031e 	bne	r2,zero,b0eb4 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   b0ea8:	e13ffd17 	ldw	r4,-12(fp)
   b0eac:	00b0d740 	call	b0d74 <alt_alarm_stop>
   b0eb0:	00000d06 	br	b0ee8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   b0eb4:	e0bffd17 	ldw	r2,-12(fp)
   b0eb8:	10c00217 	ldw	r3,8(r2)
   b0ebc:	e0bfff17 	ldw	r2,-4(fp)
   b0ec0:	1887883a 	add	r3,r3,r2
   b0ec4:	e0bffd17 	ldw	r2,-12(fp)
   b0ec8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   b0ecc:	e0bffd17 	ldw	r2,-12(fp)
   b0ed0:	10c00217 	ldw	r3,8(r2)
   b0ed4:	d0a72517 	ldw	r2,-25452(gp)
   b0ed8:	1880032e 	bgeu	r3,r2,b0ee8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   b0edc:	e0bffd17 	ldw	r2,-12(fp)
   b0ee0:	00c00044 	movi	r3,1
   b0ee4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   b0ee8:	e0bffe17 	ldw	r2,-8(fp)
   b0eec:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   b0ef0:	e0fffd17 	ldw	r3,-12(fp)
   b0ef4:	d0a02004 	addi	r2,gp,-32640
   b0ef8:	18bfcf1e 	bne	r3,r2,b0e38 <__alt_data_end+0xffff0e38>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   b0efc:	0001883a 	nop
}
   b0f00:	0001883a 	nop
   b0f04:	e037883a 	mov	sp,fp
   b0f08:	dfc00117 	ldw	ra,4(sp)
   b0f0c:	df000017 	ldw	fp,0(sp)
   b0f10:	dec00204 	addi	sp,sp,8
   b0f14:	f800283a 	ret

000b0f18 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   b0f18:	deffff04 	addi	sp,sp,-4
   b0f1c:	df000015 	stw	fp,0(sp)
   b0f20:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   b0f24:	000170fa 	wrctl	ienable,zero
}
   b0f28:	0001883a 	nop
   b0f2c:	e037883a 	mov	sp,fp
   b0f30:	df000017 	ldw	fp,0(sp)
   b0f34:	dec00104 	addi	sp,sp,4
   b0f38:	f800283a 	ret

000b0f3c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   b0f3c:	defffe04 	addi	sp,sp,-8
   b0f40:	df000115 	stw	fp,4(sp)
   b0f44:	df000104 	addi	fp,sp,4
   b0f48:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   b0f4c:	e0bfff17 	ldw	r2,-4(fp)
   b0f50:	10bffe84 	addi	r2,r2,-6
   b0f54:	10c00428 	cmpgeui	r3,r2,16
   b0f58:	18001a1e 	bne	r3,zero,b0fc4 <alt_exception_cause_generated_bad_addr+0x88>
   b0f5c:	100690ba 	slli	r3,r2,2
   b0f60:	008002f4 	movhi	r2,11
   b0f64:	1083dd04 	addi	r2,r2,3956
   b0f68:	1885883a 	add	r2,r3,r2
   b0f6c:	10800017 	ldw	r2,0(r2)
   b0f70:	1000683a 	jmp	r2
   b0f74:	000b0fb4 	movhi	zero,11326
   b0f78:	000b0fb4 	movhi	zero,11326
   b0f7c:	000b0fc4 	movi	zero,11327
   b0f80:	000b0fc4 	movi	zero,11327
   b0f84:	000b0fc4 	movi	zero,11327
   b0f88:	000b0fb4 	movhi	zero,11326
   b0f8c:	000b0fbc 	xorhi	zero,zero,11326
   b0f90:	000b0fc4 	movi	zero,11327
   b0f94:	000b0fb4 	movhi	zero,11326
   b0f98:	000b0fb4 	movhi	zero,11326
   b0f9c:	000b0fc4 	movi	zero,11327
   b0fa0:	000b0fb4 	movhi	zero,11326
   b0fa4:	000b0fbc 	xorhi	zero,zero,11326
   b0fa8:	000b0fc4 	movi	zero,11327
   b0fac:	000b0fc4 	movi	zero,11327
   b0fb0:	000b0fb4 	movhi	zero,11326
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   b0fb4:	00800044 	movi	r2,1
   b0fb8:	00000306 	br	b0fc8 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   b0fbc:	0005883a 	mov	r2,zero
   b0fc0:	00000106 	br	b0fc8 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   b0fc4:	0005883a 	mov	r2,zero
  }
}
   b0fc8:	e037883a 	mov	sp,fp
   b0fcc:	df000017 	ldw	fp,0(sp)
   b0fd0:	dec00104 	addi	sp,sp,4
   b0fd4:	f800283a 	ret

000b0fd8 <atexit>:
   b0fd8:	200b883a 	mov	r5,r4
   b0fdc:	000f883a 	mov	r7,zero
   b0fe0:	000d883a 	mov	r6,zero
   b0fe4:	0009883a 	mov	r4,zero
   b0fe8:	00b10a01 	jmpi	b10a0 <__register_exitproc>

000b0fec <exit>:
   b0fec:	defffe04 	addi	sp,sp,-8
   b0ff0:	000b883a 	mov	r5,zero
   b0ff4:	dc000015 	stw	r16,0(sp)
   b0ff8:	dfc00115 	stw	ra,4(sp)
   b0ffc:	2021883a 	mov	r16,r4
   b1000:	00b11b80 	call	b11b8 <__call_exitprocs>
   b1004:	008002f4 	movhi	r2,11
   b1008:	108c9404 	addi	r2,r2,12880
   b100c:	11000017 	ldw	r4,0(r2)
   b1010:	20800f17 	ldw	r2,60(r4)
   b1014:	10000126 	beq	r2,zero,b101c <exit+0x30>
   b1018:	103ee83a 	callr	r2
   b101c:	8009883a 	mov	r4,r16
   b1020:	00b13380 	call	b1338 <_exit>

000b1024 <memcmp>:
   b1024:	01c000c4 	movi	r7,3
   b1028:	3980192e 	bgeu	r7,r6,b1090 <memcmp+0x6c>
   b102c:	2144b03a 	or	r2,r4,r5
   b1030:	11c4703a 	and	r2,r2,r7
   b1034:	10000f26 	beq	r2,zero,b1074 <memcmp+0x50>
   b1038:	20800003 	ldbu	r2,0(r4)
   b103c:	28c00003 	ldbu	r3,0(r5)
   b1040:	10c0151e 	bne	r2,r3,b1098 <memcmp+0x74>
   b1044:	31bfff84 	addi	r6,r6,-2
   b1048:	01ffffc4 	movi	r7,-1
   b104c:	00000406 	br	b1060 <memcmp+0x3c>
   b1050:	20800003 	ldbu	r2,0(r4)
   b1054:	28c00003 	ldbu	r3,0(r5)
   b1058:	31bfffc4 	addi	r6,r6,-1
   b105c:	10c00e1e 	bne	r2,r3,b1098 <memcmp+0x74>
   b1060:	21000044 	addi	r4,r4,1
   b1064:	29400044 	addi	r5,r5,1
   b1068:	31fff91e 	bne	r6,r7,b1050 <__alt_data_end+0xffff1050>
   b106c:	0005883a 	mov	r2,zero
   b1070:	f800283a 	ret
   b1074:	20c00017 	ldw	r3,0(r4)
   b1078:	28800017 	ldw	r2,0(r5)
   b107c:	18bfee1e 	bne	r3,r2,b1038 <__alt_data_end+0xffff1038>
   b1080:	31bfff04 	addi	r6,r6,-4
   b1084:	21000104 	addi	r4,r4,4
   b1088:	29400104 	addi	r5,r5,4
   b108c:	39bff936 	bltu	r7,r6,b1074 <__alt_data_end+0xffff1074>
   b1090:	303fe91e 	bne	r6,zero,b1038 <__alt_data_end+0xffff1038>
   b1094:	003ff506 	br	b106c <__alt_data_end+0xffff106c>
   b1098:	10c5c83a 	sub	r2,r2,r3
   b109c:	f800283a 	ret

000b10a0 <__register_exitproc>:
   b10a0:	defffa04 	addi	sp,sp,-24
   b10a4:	dc000315 	stw	r16,12(sp)
   b10a8:	040002f4 	movhi	r16,11
   b10ac:	840c9404 	addi	r16,r16,12880
   b10b0:	80c00017 	ldw	r3,0(r16)
   b10b4:	dc400415 	stw	r17,16(sp)
   b10b8:	dfc00515 	stw	ra,20(sp)
   b10bc:	18805217 	ldw	r2,328(r3)
   b10c0:	2023883a 	mov	r17,r4
   b10c4:	10003726 	beq	r2,zero,b11a4 <__register_exitproc+0x104>
   b10c8:	10c00117 	ldw	r3,4(r2)
   b10cc:	010007c4 	movi	r4,31
   b10d0:	20c00e16 	blt	r4,r3,b110c <__register_exitproc+0x6c>
   b10d4:	1a000044 	addi	r8,r3,1
   b10d8:	8800221e 	bne	r17,zero,b1164 <__register_exitproc+0xc4>
   b10dc:	18c00084 	addi	r3,r3,2
   b10e0:	18c7883a 	add	r3,r3,r3
   b10e4:	18c7883a 	add	r3,r3,r3
   b10e8:	12000115 	stw	r8,4(r2)
   b10ec:	10c7883a 	add	r3,r2,r3
   b10f0:	19400015 	stw	r5,0(r3)
   b10f4:	0005883a 	mov	r2,zero
   b10f8:	dfc00517 	ldw	ra,20(sp)
   b10fc:	dc400417 	ldw	r17,16(sp)
   b1100:	dc000317 	ldw	r16,12(sp)
   b1104:	dec00604 	addi	sp,sp,24
   b1108:	f800283a 	ret
   b110c:	00800034 	movhi	r2,0
   b1110:	10800004 	addi	r2,r2,0
   b1114:	10002626 	beq	r2,zero,b11b0 <__register_exitproc+0x110>
   b1118:	01006404 	movi	r4,400
   b111c:	d9400015 	stw	r5,0(sp)
   b1120:	d9800115 	stw	r6,4(sp)
   b1124:	d9c00215 	stw	r7,8(sp)
   b1128:	00000000 	call	0 <__alt_mem_sdram_controller>
   b112c:	d9400017 	ldw	r5,0(sp)
   b1130:	d9800117 	ldw	r6,4(sp)
   b1134:	d9c00217 	ldw	r7,8(sp)
   b1138:	10001d26 	beq	r2,zero,b11b0 <__register_exitproc+0x110>
   b113c:	81000017 	ldw	r4,0(r16)
   b1140:	10000115 	stw	zero,4(r2)
   b1144:	02000044 	movi	r8,1
   b1148:	22405217 	ldw	r9,328(r4)
   b114c:	0007883a 	mov	r3,zero
   b1150:	12400015 	stw	r9,0(r2)
   b1154:	20805215 	stw	r2,328(r4)
   b1158:	10006215 	stw	zero,392(r2)
   b115c:	10006315 	stw	zero,396(r2)
   b1160:	883fde26 	beq	r17,zero,b10dc <__alt_data_end+0xffff10dc>
   b1164:	18c9883a 	add	r4,r3,r3
   b1168:	2109883a 	add	r4,r4,r4
   b116c:	1109883a 	add	r4,r2,r4
   b1170:	21802215 	stw	r6,136(r4)
   b1174:	01800044 	movi	r6,1
   b1178:	12406217 	ldw	r9,392(r2)
   b117c:	30cc983a 	sll	r6,r6,r3
   b1180:	4992b03a 	or	r9,r9,r6
   b1184:	12406215 	stw	r9,392(r2)
   b1188:	21c04215 	stw	r7,264(r4)
   b118c:	01000084 	movi	r4,2
   b1190:	893fd21e 	bne	r17,r4,b10dc <__alt_data_end+0xffff10dc>
   b1194:	11006317 	ldw	r4,396(r2)
   b1198:	218cb03a 	or	r6,r4,r6
   b119c:	11806315 	stw	r6,396(r2)
   b11a0:	003fce06 	br	b10dc <__alt_data_end+0xffff10dc>
   b11a4:	18805304 	addi	r2,r3,332
   b11a8:	18805215 	stw	r2,328(r3)
   b11ac:	003fc606 	br	b10c8 <__alt_data_end+0xffff10c8>
   b11b0:	00bfffc4 	movi	r2,-1
   b11b4:	003fd006 	br	b10f8 <__alt_data_end+0xffff10f8>

000b11b8 <__call_exitprocs>:
   b11b8:	defff504 	addi	sp,sp,-44
   b11bc:	df000915 	stw	fp,36(sp)
   b11c0:	dd400615 	stw	r21,24(sp)
   b11c4:	dc800315 	stw	r18,12(sp)
   b11c8:	dfc00a15 	stw	ra,40(sp)
   b11cc:	ddc00815 	stw	r23,32(sp)
   b11d0:	dd800715 	stw	r22,28(sp)
   b11d4:	dd000515 	stw	r20,20(sp)
   b11d8:	dcc00415 	stw	r19,16(sp)
   b11dc:	dc400215 	stw	r17,8(sp)
   b11e0:	dc000115 	stw	r16,4(sp)
   b11e4:	d9000015 	stw	r4,0(sp)
   b11e8:	2839883a 	mov	fp,r5
   b11ec:	04800044 	movi	r18,1
   b11f0:	057fffc4 	movi	r21,-1
   b11f4:	008002f4 	movhi	r2,11
   b11f8:	108c9404 	addi	r2,r2,12880
   b11fc:	12000017 	ldw	r8,0(r2)
   b1200:	45005217 	ldw	r20,328(r8)
   b1204:	44c05204 	addi	r19,r8,328
   b1208:	a0001c26 	beq	r20,zero,b127c <__call_exitprocs+0xc4>
   b120c:	a0800117 	ldw	r2,4(r20)
   b1210:	15ffffc4 	addi	r23,r2,-1
   b1214:	b8000d16 	blt	r23,zero,b124c <__call_exitprocs+0x94>
   b1218:	14000044 	addi	r16,r2,1
   b121c:	8421883a 	add	r16,r16,r16
   b1220:	8421883a 	add	r16,r16,r16
   b1224:	84402004 	addi	r17,r16,128
   b1228:	a463883a 	add	r17,r20,r17
   b122c:	a421883a 	add	r16,r20,r16
   b1230:	e0001e26 	beq	fp,zero,b12ac <__call_exitprocs+0xf4>
   b1234:	80804017 	ldw	r2,256(r16)
   b1238:	e0801c26 	beq	fp,r2,b12ac <__call_exitprocs+0xf4>
   b123c:	bdffffc4 	addi	r23,r23,-1
   b1240:	843fff04 	addi	r16,r16,-4
   b1244:	8c7fff04 	addi	r17,r17,-4
   b1248:	bd7ff91e 	bne	r23,r21,b1230 <__alt_data_end+0xffff1230>
   b124c:	00800034 	movhi	r2,0
   b1250:	10800004 	addi	r2,r2,0
   b1254:	10000926 	beq	r2,zero,b127c <__call_exitprocs+0xc4>
   b1258:	a0800117 	ldw	r2,4(r20)
   b125c:	1000301e 	bne	r2,zero,b1320 <__call_exitprocs+0x168>
   b1260:	a0800017 	ldw	r2,0(r20)
   b1264:	10003226 	beq	r2,zero,b1330 <__call_exitprocs+0x178>
   b1268:	a009883a 	mov	r4,r20
   b126c:	98800015 	stw	r2,0(r19)
   b1270:	00000000 	call	0 <__alt_mem_sdram_controller>
   b1274:	9d000017 	ldw	r20,0(r19)
   b1278:	a03fe41e 	bne	r20,zero,b120c <__alt_data_end+0xffff120c>
   b127c:	dfc00a17 	ldw	ra,40(sp)
   b1280:	df000917 	ldw	fp,36(sp)
   b1284:	ddc00817 	ldw	r23,32(sp)
   b1288:	dd800717 	ldw	r22,28(sp)
   b128c:	dd400617 	ldw	r21,24(sp)
   b1290:	dd000517 	ldw	r20,20(sp)
   b1294:	dcc00417 	ldw	r19,16(sp)
   b1298:	dc800317 	ldw	r18,12(sp)
   b129c:	dc400217 	ldw	r17,8(sp)
   b12a0:	dc000117 	ldw	r16,4(sp)
   b12a4:	dec00b04 	addi	sp,sp,44
   b12a8:	f800283a 	ret
   b12ac:	a0800117 	ldw	r2,4(r20)
   b12b0:	80c00017 	ldw	r3,0(r16)
   b12b4:	10bfffc4 	addi	r2,r2,-1
   b12b8:	15c01426 	beq	r2,r23,b130c <__call_exitprocs+0x154>
   b12bc:	80000015 	stw	zero,0(r16)
   b12c0:	183fde26 	beq	r3,zero,b123c <__alt_data_end+0xffff123c>
   b12c4:	95c8983a 	sll	r4,r18,r23
   b12c8:	a0806217 	ldw	r2,392(r20)
   b12cc:	a5800117 	ldw	r22,4(r20)
   b12d0:	2084703a 	and	r2,r4,r2
   b12d4:	10000b26 	beq	r2,zero,b1304 <__call_exitprocs+0x14c>
   b12d8:	a0806317 	ldw	r2,396(r20)
   b12dc:	2088703a 	and	r4,r4,r2
   b12e0:	20000c1e 	bne	r4,zero,b1314 <__call_exitprocs+0x15c>
   b12e4:	89400017 	ldw	r5,0(r17)
   b12e8:	d9000017 	ldw	r4,0(sp)
   b12ec:	183ee83a 	callr	r3
   b12f0:	a0800117 	ldw	r2,4(r20)
   b12f4:	15bfbf1e 	bne	r2,r22,b11f4 <__alt_data_end+0xffff11f4>
   b12f8:	98800017 	ldw	r2,0(r19)
   b12fc:	153fcf26 	beq	r2,r20,b123c <__alt_data_end+0xffff123c>
   b1300:	003fbc06 	br	b11f4 <__alt_data_end+0xffff11f4>
   b1304:	183ee83a 	callr	r3
   b1308:	003ff906 	br	b12f0 <__alt_data_end+0xffff12f0>
   b130c:	a5c00115 	stw	r23,4(r20)
   b1310:	003feb06 	br	b12c0 <__alt_data_end+0xffff12c0>
   b1314:	89000017 	ldw	r4,0(r17)
   b1318:	183ee83a 	callr	r3
   b131c:	003ff406 	br	b12f0 <__alt_data_end+0xffff12f0>
   b1320:	a0800017 	ldw	r2,0(r20)
   b1324:	a027883a 	mov	r19,r20
   b1328:	1029883a 	mov	r20,r2
   b132c:	003fb606 	br	b1208 <__alt_data_end+0xffff1208>
   b1330:	0005883a 	mov	r2,zero
   b1334:	003ffb06 	br	b1324 <__alt_data_end+0xffff1324>

000b1338 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   b1338:	defffd04 	addi	sp,sp,-12
   b133c:	df000215 	stw	fp,8(sp)
   b1340:	df000204 	addi	fp,sp,8
   b1344:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   b1348:	0001883a 	nop
   b134c:	e0bfff17 	ldw	r2,-4(fp)
   b1350:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   b1354:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   b1358:	10000226 	beq	r2,zero,b1364 <_exit+0x2c>
    ALT_SIM_FAIL();
   b135c:	002af070 	cmpltui	zero,zero,43969
   b1360:	00000106 	br	b1368 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   b1364:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   b1368:	003fff06 	br	b1368 <__alt_data_end+0xffff1368>

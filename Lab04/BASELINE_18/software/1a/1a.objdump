
1a.elf:     file format elf32-littlenios2
1a.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08040230

Program Header:
    LOAD off    0x00001000 vaddr 0x08040000 paddr 0x08040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08040020 paddr 0x08040020 align 2**12
         filesz 0x0000348c memsz 0x0000348c flags r-x
    LOAD off    0x000044ac vaddr 0x080434ac paddr 0x08044b74 align 2**12
         filesz 0x000016c8 memsz 0x000016c8 flags rw-
    LOAD off    0x0000623c vaddr 0x0804623c paddr 0x0804623c align 2**12
         filesz 0x00000000 memsz 0x00000120 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08040000  08040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  08040020  08040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00003238  08040230  08040230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000044  08043468  08043468  00004468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000016c8  080434ac  08044b74  000044ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000120  0804623c  0804623c  0000623c  2**2
                  ALLOC, SMALL_DATA
  6 .mem_info     00000000  00010000  00010000  00005b74  2**0
                  CONTENTS
  7 .sdram_controller 00000000  0804635c  0804635c  00005b74  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00005b74  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000698  00000000  00000000  00005b98  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00008d70  00000000  00000000  00006230  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003023  00000000  00000000  0000efa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000031ce  00000000  00000000  00011fc3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000f90  00000000  00000000  00015194  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002088  00000000  00000000  00016124  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00000cd1  00000000  00000000  000181ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  00018e80  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000001d8  00000000  00000000  00018ec0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0001b256  2**0
                  CONTENTS, READONLY
 19 .cpu          00000006  00000000  00000000  0001b259  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0001b25f  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0001b260  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0001b261  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0001b265  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0001b269  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000c  00000000  00000000  0001b26d  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000c  00000000  00000000  0001b279  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000c  00000000  00000000  0001b285  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000009  00000000  00000000  0001b291  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000001f  00000000  00000000  0001b29a  2**0
                  CONTENTS, READONLY
 30 .jdi          0001df6f  00000000  00000000  0001b2b9  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     001ccad0  00000000  00000000  00039228  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08040000 l    d  .entry	00000000 .entry
08040020 l    d  .exceptions	00000000 .exceptions
08040230 l    d  .text	00000000 .text
08043468 l    d  .rodata	00000000 .rodata
080434ac l    d  .rwdata	00000000 .rwdata
0804623c l    d  .bss	00000000 .bss
00010000 l    d  .mem_info	00000000 .mem_info
0804635c l    d  .sdram_controller	00000000 .sdram_controller
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../1a_bsp//obj/HAL/src/crt0.o
08040268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 alt_load.c
08040464 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
080405fc l     F .text	00000034 alt_dev_reg
080434ac l     O .rwdata	00001060 jtag_uart_1a
0804450c l     O .rwdata	00000028 altera_hostfs
00000000 l    df *ABS*	00000000 altera_avalon_fifo_util.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
08040e08 l     F .text	0000020c altera_avalon_jtag_uart_irq
08041014 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0804164c l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_hostfs.c
08044b00 l     O .rwdata	00000009 hcinfo.2538
08044b0c l     O .rwdata	0000000a hcinfo.2551
08044b18 l     O .rwdata	00000009 hcinfo.2560
08044b24 l     O .rwdata	0000000a hcinfo.2573
08044b30 l     O .rwdata	0000000a hcinfo.2586
08044b3c l     O .rwdata	0000000a hcinfo.2612
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
08041e48 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
08041f7c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
08041fa8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fs_reg.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
08042488 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
080425e8 l     F .text	0000003c alt_get_errno
08042624 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
080446dc l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_exit.c
08046254 g     O .bss	00000004 alt_instruction_exception_handler
08040550 g     F .text	0000007c alt_main
0804625c g     O .bss	00000100 alt_irq
08040968 g     F .text	0000005c altera_avalon_fifo_write_almostfull
08044b74 g       *ABS*	00000000 __flash_rwdata_start
08041740 g     F .text	0000011c alt_hostfs_open
080406e0 g     F .text	00000098 altera_avalon_fifo_init
08040a20 g     F .text	00000058 altera_avalon_fifo_write_fifo
08042a94 g     F .text	00000024 altera_nios2_gen2_irq_init
08040000 g     F .entry	0000000c __reset
08040bbc g     F .text	00000028 altera_avalon_fifo_read_backpressure
08040020 g       *ABS*	00000000 __flash_exceptions_start
08046258 g     O .bss	00000004 errno
08000000 g       *ABS*	00000000 __alt_mem_sdram_controller
08046240 g     O .bss	00000004 alt_argv
0804cb00 g       *ABS*	00000000 _gp
080405cc g     F .text	00000030 usleep
080408ac g     F .text	00000060 altera_avalon_fifo_clear_event
0804455c g     O .rwdata	00000180 alt_fd_list
08041978 g     F .text	00000068 alt_hostfs_seek
08042ab8 g     F .text	00000090 alt_find_dev
08042e78 g     F .text	00000148 memcpy
08042148 g     F .text	00000080 alt_fs_reg
0804256c g     F .text	0000007c alt_io_redirect
08043468 g       *ABS*	00000000 __DTOR_END__
08042d14 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0804120c g     F .text	0000021c altera_avalon_jtag_uart_read
08043350 g     F .text	00000064 .hidden __udivsi3
080418a0 g     F .text	0000006c alt_hostfs_read
08044b58 g     O .rwdata	00000004 alt_max_fd
08044b6c g     O .rwdata	00000004 _global_impure_ptr
0804635c g       *ABS*	00000000 __bss_end
08042398 g     F .text	000000f0 alt_iic_isr_register
0804298c g     F .text	00000108 alt_tick
0804234c g     F .text	0000004c alt_ic_irq_enabled
080428f0 g     F .text	0000009c alt_alarm_stop
08046248 g     O .bss	00000004 alt_irq_active
0804185c g     F .text	00000044 alt_hostfs_close
080400fc g     F .exceptions	000000d4 alt_irq_handler
08044534 g     O .rwdata	00000028 alt_dev_null
08041f5c g     F .text	00000020 alt_dcache_flush_all
0804090c g     F .text	0000005c altera_avalon_fifo_write_ienable
08044b74 g       *ABS*	00000000 __ram_rwdata_end
0804081c g     F .text	0000002c altera_avalon_fifo_read_almostempty
08044b50 g     O .rwdata	00000008 alt_dev_list
080434ac g       *ABS*	00000000 __ram_rodata_end
080433b4 g     F .text	00000058 .hidden __umodsi3
0804635c g       *ABS*	00000000 end
08040d48 g     F .text	000000c0 altera_avalon_jtag_uart_init
080401d0 g     F .exceptions	00000060 alt_instruction_exception_entry
08040848 g     F .text	0000003c altera_avalon_fifo_read_event
08043468 g       *ABS*	00000000 __CTOR_LIST__
10000000 g       *ABS*	00000000 __alt_stack_pointer
080416c4 g     F .text	0000007c alt_avalon_timer_sc_init
08041428 g     F .text	00000224 altera_avalon_jtag_uart_write
08040ae4 g     F .text	0000004c altera_avalon_fifo_read_fifo
080430d8 g     F .text	00000180 __call_exitprocs
08040230 g     F .text	0000003c _start
0804624c g     O .bss	00000004 _alt_tick_rate
08046250 g     O .bss	00000004 _alt_nticks
08040668 g     F .text	00000078 alt_sys_init
08042fc0 g     F .text	00000118 __register_exitproc
080410b4 g     F .text	00000068 altera_avalon_jtag_uart_close
0804340c g     F .text	00000028 .hidden __mulsi3
080434ac g       *ABS*	00000000 __ram_rwdata_start
08043468 g       *ABS*	00000000 __ram_rodata_start
08040be4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
08042c50 g     F .text	000000c4 alt_get_fd
08041cf0 g     F .text	00000158 alt_busy_sleep
08042dfc g     F .text	0000007c memcmp
08040ca4 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0804635c g       *ABS*	00000000 __alt_stack_base
08040cf4 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
08040778 g     F .text	0000003c altera_avalon_fifo_read_status
08040b90 g     F .text	0000002c altera_avalon_fifo_read_other_info
08042b48 g     F .text	00000108 alt_find_file
08041fe4 g     F .text	000000a4 alt_dev_llist_insert
0804623c g       *ABS*	00000000 __bss_start
08040374 g     F .text	00000058 main
08046244 g     O .bss	00000004 alt_envp
08040c44 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
08040884 g     F .text	00000028 altera_avalon_fifo_read_level
08044b5c g     O .rwdata	00000004 alt_errno
08043258 g     F .text	00000084 .hidden __divsi3
08043468 g       *ABS*	00000000 __CTOR_END__
08043468 g       *ABS*	00000000 __flash_rodata_start
08043468 g       *ABS*	00000000 __DTOR_LIST__
08040630 g     F .text	00000038 alt_irq_init
0804286c g     F .text	00000084 alt_release_fd
08042db0 g     F .text	00000014 atexit
08044b70 g     O .rwdata	00000004 _impure_ptr
0804623c g     O .bss	00000004 alt_argc
080420e8 g     F .text	00000060 _do_dtors
08040020 g       .exceptions	00000000 alt_irq_entry
08044b48 g     O .rwdata	00000008 alt_fs_list
0804190c g     F .text	0000006c alt_hostfs_write
00010000 g       *ABS*	00000000 __alt_mem_mem_info
08040020 g       *ABS*	00000000 __ram_exceptions_start
08040b30 g     F .text	00000060 altera_avalon_fifo_write_other_info
080421e8 g     F .text	00000050 alt_ic_isr_register
08044b74 g       *ABS*	00000000 _edata
0804635c g       *ABS*	00000000 _end
08040230 g       *ABS*	00000000 __ram_exceptions_end
0804111c g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
080422c0 g     F .text	0000008c alt_ic_irq_disable
08042dc4 g     F .text	00000038 exit
080432dc g     F .text	00000074 .hidden __modsi3
080407b4 g     F .text	0000003c altera_avalon_fifo_read_ienable
10000000 g       *ABS*	00000000 __alt_data_end
08040020 g     F .exceptions	00000000 alt_exception
0804026c g     F .text	00000108 write_sentence_to_memory
08043434 g     F .text	00000034 _exit
08041bc4 g     F .text	0000012c alt_alarm_start
080407f0 g     F .text	0000002c altera_avalon_fifo_read_almostfull
080403cc g     F .text	00000098 strlen
08042710 g     F .text	0000015c open
08040a78 g     F .text	0000006c altera_avalon_read_fifo
080421c8 g     F .text	00000020 alt_icache_flush_all
08044b60 g     O .rwdata	00000004 alt_priority_mask
08042238 g     F .text	00000088 alt_ic_irq_enable
080409c4 g     F .text	0000005c altera_avalon_fifo_write_almostempty
08044b64 g     O .rwdata	00000008 alt_alarm_list
08042088 g     F .text	00000060 _do_ctors
08041e84 g     F .text	000000d8 close
080404cc g     F .text	00000084 alt_load
080419e0 g     F .text	000001e4 alt_hostfs_fstat



Disassembly of section .entry:

08040000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8040000:	00420134 	movhi	at,2052
    ori r1, r1, %lo(_start)
 8040004:	08408c14 	ori	at,at,560
    jmp r1
 8040008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

08040020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8040020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8040024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8040028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 804002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8040030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8040034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8040038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 804003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8040040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8040044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8040048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 804004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8040050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8040054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8040058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 804005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8040060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8040064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8040068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 804006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8040070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8040074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8040078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 804007c:	10000326 	beq	r2,zero,804008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8040080:	20000226 	beq	r4,zero,804008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8040084:	80400fc0 	call	80400fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8040088:	00000706 	br	80400a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 804008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 8040090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 8040094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 8040098:	80401d00 	call	80401d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 804009c:	1000021e 	bne	r2,zero,80400a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 80400a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 80400a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 80400a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 80400ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80400b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80400b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80400b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80400bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80400c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80400c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80400c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80400cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80400d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80400d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80400d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80400dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80400e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80400e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80400e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80400ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80400f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80400f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80400f8:	ef80083a 	eret

080400fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80400fc:	defff904 	addi	sp,sp,-28
 8040100:	dfc00615 	stw	ra,24(sp)
 8040104:	df000515 	stw	fp,20(sp)
 8040108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 804010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8040110:	0005313a 	rdctl	r2,ipending
 8040114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 8040118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 804011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 8040120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8040124:	00800044 	movi	r2,1
 8040128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 804012c:	e0fffb17 	ldw	r3,-20(fp)
 8040130:	e0bffc17 	ldw	r2,-16(fp)
 8040134:	1884703a 	and	r2,r3,r2
 8040138:	10001426 	beq	r2,zero,804018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 804013c:	00820134 	movhi	r2,2052
 8040140:	10989704 	addi	r2,r2,25180
 8040144:	e0fffd17 	ldw	r3,-12(fp)
 8040148:	180690fa 	slli	r3,r3,3
 804014c:	10c5883a 	add	r2,r2,r3
 8040150:	10c00017 	ldw	r3,0(r2)
 8040154:	00820134 	movhi	r2,2052
 8040158:	10989704 	addi	r2,r2,25180
 804015c:	e13ffd17 	ldw	r4,-12(fp)
 8040160:	200890fa 	slli	r4,r4,3
 8040164:	1105883a 	add	r2,r2,r4
 8040168:	10800104 	addi	r2,r2,4
 804016c:	10800017 	ldw	r2,0(r2)
 8040170:	1009883a 	mov	r4,r2
 8040174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 8040178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 804017c:	0005313a 	rdctl	r2,ipending
 8040180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 8040184:	e0bfff17 	ldw	r2,-4(fp)
 8040188:	00000706 	br	80401a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 804018c:	e0bffc17 	ldw	r2,-16(fp)
 8040190:	1085883a 	add	r2,r2,r2
 8040194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 8040198:	e0bffd17 	ldw	r2,-12(fp)
 804019c:	10800044 	addi	r2,r2,1
 80401a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 80401a4:	003fe106 	br	804012c <__alt_data_end+0xf804012c>

    active = alt_irq_pending ();
 80401a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 80401ac:	e0bffb17 	ldw	r2,-20(fp)
 80401b0:	103fdb1e 	bne	r2,zero,8040120 <__alt_data_end+0xf8040120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80401b4:	0001883a 	nop
}
 80401b8:	0001883a 	nop
 80401bc:	e037883a 	mov	sp,fp
 80401c0:	dfc00117 	ldw	ra,4(sp)
 80401c4:	df000017 	ldw	fp,0(sp)
 80401c8:	dec00204 	addi	sp,sp,8
 80401cc:	f800283a 	ret

080401d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 80401d0:	defffb04 	addi	sp,sp,-20
 80401d4:	dfc00415 	stw	ra,16(sp)
 80401d8:	df000315 	stw	fp,12(sp)
 80401dc:	df000304 	addi	fp,sp,12
 80401e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 80401e4:	00bfffc4 	movi	r2,-1
 80401e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 80401ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 80401f0:	d0a5d517 	ldw	r2,-26796(gp)
 80401f4:	10000726 	beq	r2,zero,8040214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 80401f8:	d0a5d517 	ldw	r2,-26796(gp)
 80401fc:	e0fffd17 	ldw	r3,-12(fp)
 8040200:	e1bffe17 	ldw	r6,-8(fp)
 8040204:	e17fff17 	ldw	r5,-4(fp)
 8040208:	1809883a 	mov	r4,r3
 804020c:	103ee83a 	callr	r2
 8040210:	00000206 	br	804021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 8040214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 8040218:	0005883a 	mov	r2,zero
}
 804021c:	e037883a 	mov	sp,fp
 8040220:	dfc00117 	ldw	ra,4(sp)
 8040224:	df000017 	ldw	fp,0(sp)
 8040228:	dec00204 	addi	sp,sp,8
 804022c:	f800283a 	ret

Disassembly of section .text:

08040230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 8040230:	06c40034 	movhi	sp,4096
    ori sp, sp, %lo(__alt_stack_pointer)
 8040234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 8040238:	06820134 	movhi	gp,2052
    ori gp, gp, %lo(_gp)
 804023c:	d6b2c014 	ori	gp,gp,51968
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 8040240:	00820134 	movhi	r2,2052
    ori r2, r2, %lo(__bss_start)
 8040244:	10988f14 	ori	r2,r2,25148

    movhi r3, %hi(__bss_end)
 8040248:	00c20134 	movhi	r3,2052
    ori r3, r3, %lo(__bss_end)
 804024c:	18d8d714 	ori	r3,r3,25436

    beq r2, r3, 1f
 8040250:	10c00326 	beq	r2,r3,8040260 <_start+0x30>

0:
    stw zero, (r2)
 8040254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 8040258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 804025c:	10fffd36 	bltu	r2,r3,8040254 <__alt_data_end+0xf8040254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 8040260:	80404cc0 	call	80404cc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 8040264:	80405500 	call	8040550 <alt_main>

08040268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 8040268:	003fff06 	br	8040268 <__alt_data_end+0xf8040268>

0804026c <write_sentence_to_memory>:
#include <io.h>

#include <altera_avalon_fifo_regs.h>
#include <altera_avalon_fifo_util.h>

void write_sentence_to_memory(const char *sentence, uint32_t base_address) {
 804026c:	defff804 	addi	sp,sp,-32
 8040270:	dfc00715 	stw	ra,28(sp)
 8040274:	df000615 	stw	fp,24(sp)
 8040278:	df000604 	addi	fp,sp,24
 804027c:	e13ffe15 	stw	r4,-8(fp)
 8040280:	e17fff15 	stw	r5,-4(fp)
    int len = strlen(sentence);
 8040284:	e13ffe17 	ldw	r4,-8(fp)
 8040288:	80403cc0 	call	80403cc <strlen>
 804028c:	e0bffd15 	stw	r2,-12(fp)
    int offset = 0;
 8040290:	e03ffa15 	stw	zero,-24(fp)

    for (int i = 0; i < len; i += 2) {
 8040294:	e03ffb15 	stw	zero,-20(fp)
 8040298:	00002d06 	br	8040350 <write_sentence_to_memory+0xe4>
        uint16_t data = 0;
 804029c:	e03ffc0d 	sth	zero,-16(fp)
        if (i + 1 < len) {
 80402a0:	e0bffb17 	ldw	r2,-20(fp)
 80402a4:	10c00044 	addi	r3,r2,1
 80402a8:	e0bffd17 	ldw	r2,-12(fp)
 80402ac:	1880140e 	bge	r3,r2,8040300 <write_sentence_to_memory+0x94>
            // Combine two characters into one 16-bit integer
            data = (sentence[i] << 8) | sentence[i + 1];
 80402b0:	e0bffb17 	ldw	r2,-20(fp)
 80402b4:	e0fffe17 	ldw	r3,-8(fp)
 80402b8:	1885883a 	add	r2,r3,r2
 80402bc:	10800003 	ldbu	r2,0(r2)
 80402c0:	10803fcc 	andi	r2,r2,255
 80402c4:	1080201c 	xori	r2,r2,128
 80402c8:	10bfe004 	addi	r2,r2,-128
 80402cc:	1004923a 	slli	r2,r2,8
 80402d0:	1009883a 	mov	r4,r2
 80402d4:	e0bffb17 	ldw	r2,-20(fp)
 80402d8:	10800044 	addi	r2,r2,1
 80402dc:	e0fffe17 	ldw	r3,-8(fp)
 80402e0:	1885883a 	add	r2,r3,r2
 80402e4:	10800003 	ldbu	r2,0(r2)
 80402e8:	10803fcc 	andi	r2,r2,255
 80402ec:	1080201c 	xori	r2,r2,128
 80402f0:	10bfe004 	addi	r2,r2,-128
 80402f4:	2084b03a 	or	r2,r4,r2
 80402f8:	e0bffc0d 	sth	r2,-16(fp)
 80402fc:	00000806 	br	8040320 <write_sentence_to_memory+0xb4>
        } else {
            // If there's only one character left, just use it
            data = sentence[i];
 8040300:	e0bffb17 	ldw	r2,-20(fp)
 8040304:	e0fffe17 	ldw	r3,-8(fp)
 8040308:	1885883a 	add	r2,r3,r2
 804030c:	10800003 	ldbu	r2,0(r2)
 8040310:	10803fcc 	andi	r2,r2,255
 8040314:	1080201c 	xori	r2,r2,128
 8040318:	10bfe004 	addi	r2,r2,-128
 804031c:	e0bffc0d 	sth	r2,-16(fp)
        }
        IOWR_16DIRECT(base_address, offset, data);
 8040320:	e0fffa17 	ldw	r3,-24(fp)
 8040324:	e0bfff17 	ldw	r2,-4(fp)
 8040328:	1885883a 	add	r2,r3,r2
 804032c:	1007883a 	mov	r3,r2
 8040330:	e0bffc0b 	ldhu	r2,-16(fp)
 8040334:	1880002d 	sthio	r2,0(r3)
        offset += 2; // Each 16-bit integer occupies 2 bytes of memory
 8040338:	e0bffa17 	ldw	r2,-24(fp)
 804033c:	10800084 	addi	r2,r2,2
 8040340:	e0bffa15 	stw	r2,-24(fp)

void write_sentence_to_memory(const char *sentence, uint32_t base_address) {
    int len = strlen(sentence);
    int offset = 0;

    for (int i = 0; i < len; i += 2) {
 8040344:	e0bffb17 	ldw	r2,-20(fp)
 8040348:	10800084 	addi	r2,r2,2
 804034c:	e0bffb15 	stw	r2,-20(fp)
 8040350:	e0fffb17 	ldw	r3,-20(fp)
 8040354:	e0bffd17 	ldw	r2,-12(fp)
 8040358:	18bfd016 	blt	r3,r2,804029c <__alt_data_end+0xf804029c>
            data = sentence[i];
        }
        IOWR_16DIRECT(base_address, offset, data);
        offset += 2; // Each 16-bit integer occupies 2 bytes of memory
    }
}
 804035c:	0001883a 	nop
 8040360:	e037883a 	mov	sp,fp
 8040364:	dfc00117 	ldw	ra,4(sp)
 8040368:	df000017 	ldw	fp,0(sp)
 804036c:	dec00204 	addi	sp,sp,8
 8040370:	f800283a 	ret

08040374 <main>:

int main() {
 8040374:	defffd04 	addi	sp,sp,-12
 8040378:	dfc00215 	stw	ra,8(sp)
 804037c:	df000115 	stw	fp,4(sp)
 8040380:	df000104 	addi	fp,sp,4
    int count = 4;
 8040384:	00800104 	movi	r2,4
 8040388:	e0bfff15 	stw	r2,-4(fp)
    // out 0x0000_0088 - 0x0000_008b
    // csr 0x0000_0060 - 0x0000_007f
    // in  0x0000_00a8 - 0x0000_00ab
    while(1){
    	while (altera_avalon_fifo_read_status(0x00000060,1<<0) != 0)
 804038c:	0001883a 	nop
 8040390:	01400044 	movi	r5,1
 8040394:	01001804 	movi	r4,96
 8040398:	80407780 	call	8040778 <altera_avalon_fifo_read_status>
 804039c:	103ffc1e 	bne	r2,zero,8040390 <__alt_data_end+0xf8040390>
    	{}

    	// Write the data to FIFO
    	altera_avalon_fifo_write_fifo(0x000000a8,0x00000060,(int)count);
 80403a0:	e0bfff17 	ldw	r2,-4(fp)
 80403a4:	100d883a 	mov	r6,r2
 80403a8:	01401804 	movi	r5,96
 80403ac:	01002a04 	movi	r4,168
 80403b0:	8040a200 	call	8040a20 <altera_avalon_fifo_write_fifo>
    	count += 4;
 80403b4:	e0bfff17 	ldw	r2,-4(fp)
 80403b8:	10800104 	addi	r2,r2,4
 80403bc:	e0bfff15 	stw	r2,-4(fp)

    	usleep(50000);
 80403c0:	0130d414 	movui	r4,50000
 80403c4:	80405cc0 	call	80405cc <usleep>
    }
 80403c8:	003ff006 	br	804038c <__alt_data_end+0xf804038c>

080403cc <strlen>:
 80403cc:	208000cc 	andi	r2,r4,3
 80403d0:	10002026 	beq	r2,zero,8040454 <strlen+0x88>
 80403d4:	20800007 	ldb	r2,0(r4)
 80403d8:	10002026 	beq	r2,zero,804045c <strlen+0x90>
 80403dc:	2005883a 	mov	r2,r4
 80403e0:	00000206 	br	80403ec <strlen+0x20>
 80403e4:	10c00007 	ldb	r3,0(r2)
 80403e8:	18001826 	beq	r3,zero,804044c <strlen+0x80>
 80403ec:	10800044 	addi	r2,r2,1
 80403f0:	10c000cc 	andi	r3,r2,3
 80403f4:	183ffb1e 	bne	r3,zero,80403e4 <__alt_data_end+0xf80403e4>
 80403f8:	10c00017 	ldw	r3,0(r2)
 80403fc:	01ffbff4 	movhi	r7,65279
 8040400:	39ffbfc4 	addi	r7,r7,-257
 8040404:	00ca303a 	nor	r5,zero,r3
 8040408:	01a02074 	movhi	r6,32897
 804040c:	19c7883a 	add	r3,r3,r7
 8040410:	31a02004 	addi	r6,r6,-32640
 8040414:	1946703a 	and	r3,r3,r5
 8040418:	1986703a 	and	r3,r3,r6
 804041c:	1800091e 	bne	r3,zero,8040444 <strlen+0x78>
 8040420:	10800104 	addi	r2,r2,4
 8040424:	10c00017 	ldw	r3,0(r2)
 8040428:	19cb883a 	add	r5,r3,r7
 804042c:	00c6303a 	nor	r3,zero,r3
 8040430:	28c6703a 	and	r3,r5,r3
 8040434:	1986703a 	and	r3,r3,r6
 8040438:	183ff926 	beq	r3,zero,8040420 <__alt_data_end+0xf8040420>
 804043c:	00000106 	br	8040444 <strlen+0x78>
 8040440:	10800044 	addi	r2,r2,1
 8040444:	10c00007 	ldb	r3,0(r2)
 8040448:	183ffd1e 	bne	r3,zero,8040440 <__alt_data_end+0xf8040440>
 804044c:	1105c83a 	sub	r2,r2,r4
 8040450:	f800283a 	ret
 8040454:	2005883a 	mov	r2,r4
 8040458:	003fe706 	br	80403f8 <__alt_data_end+0xf80403f8>
 804045c:	0005883a 	mov	r2,zero
 8040460:	f800283a 	ret

08040464 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 8040464:	defffc04 	addi	sp,sp,-16
 8040468:	df000315 	stw	fp,12(sp)
 804046c:	df000304 	addi	fp,sp,12
 8040470:	e13ffd15 	stw	r4,-12(fp)
 8040474:	e17ffe15 	stw	r5,-8(fp)
 8040478:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 804047c:	e0fffe17 	ldw	r3,-8(fp)
 8040480:	e0bffd17 	ldw	r2,-12(fp)
 8040484:	18800c26 	beq	r3,r2,80404b8 <alt_load_section+0x54>
  {
    while( to != end )
 8040488:	00000806 	br	80404ac <alt_load_section+0x48>
    {
      *to++ = *from++;
 804048c:	e0bffe17 	ldw	r2,-8(fp)
 8040490:	10c00104 	addi	r3,r2,4
 8040494:	e0fffe15 	stw	r3,-8(fp)
 8040498:	e0fffd17 	ldw	r3,-12(fp)
 804049c:	19000104 	addi	r4,r3,4
 80404a0:	e13ffd15 	stw	r4,-12(fp)
 80404a4:	18c00017 	ldw	r3,0(r3)
 80404a8:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 80404ac:	e0fffe17 	ldw	r3,-8(fp)
 80404b0:	e0bfff17 	ldw	r2,-4(fp)
 80404b4:	18bff51e 	bne	r3,r2,804048c <__alt_data_end+0xf804048c>
    {
      *to++ = *from++;
    }
  }
}
 80404b8:	0001883a 	nop
 80404bc:	e037883a 	mov	sp,fp
 80404c0:	df000017 	ldw	fp,0(sp)
 80404c4:	dec00104 	addi	sp,sp,4
 80404c8:	f800283a 	ret

080404cc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 80404cc:	defffe04 	addi	sp,sp,-8
 80404d0:	dfc00115 	stw	ra,4(sp)
 80404d4:	df000015 	stw	fp,0(sp)
 80404d8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 80404dc:	01820134 	movhi	r6,2052
 80404e0:	3192dd04 	addi	r6,r6,19316
 80404e4:	01420134 	movhi	r5,2052
 80404e8:	294d2b04 	addi	r5,r5,13484
 80404ec:	01020134 	movhi	r4,2052
 80404f0:	2112dd04 	addi	r4,r4,19316
 80404f4:	80404640 	call	8040464 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 80404f8:	01820134 	movhi	r6,2052
 80404fc:	31808c04 	addi	r6,r6,560
 8040500:	01420134 	movhi	r5,2052
 8040504:	29400804 	addi	r5,r5,32
 8040508:	01020134 	movhi	r4,2052
 804050c:	21000804 	addi	r4,r4,32
 8040510:	80404640 	call	8040464 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 8040514:	01820134 	movhi	r6,2052
 8040518:	318d2b04 	addi	r6,r6,13484
 804051c:	01420134 	movhi	r5,2052
 8040520:	294d1a04 	addi	r5,r5,13416
 8040524:	01020134 	movhi	r4,2052
 8040528:	210d1a04 	addi	r4,r4,13416
 804052c:	80404640 	call	8040464 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 8040530:	8041f5c0 	call	8041f5c <alt_dcache_flush_all>
  alt_icache_flush_all();
 8040534:	80421c80 	call	80421c8 <alt_icache_flush_all>
}
 8040538:	0001883a 	nop
 804053c:	e037883a 	mov	sp,fp
 8040540:	dfc00117 	ldw	ra,4(sp)
 8040544:	df000017 	ldw	fp,0(sp)
 8040548:	dec00204 	addi	sp,sp,8
 804054c:	f800283a 	ret

08040550 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 8040550:	defffd04 	addi	sp,sp,-12
 8040554:	dfc00215 	stw	ra,8(sp)
 8040558:	df000115 	stw	fp,4(sp)
 804055c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 8040560:	0009883a 	mov	r4,zero
 8040564:	80406300 	call	8040630 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 8040568:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 804056c:	80406680 	call	8040668 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 8040570:	01820134 	movhi	r6,2052
 8040574:	318d1a04 	addi	r6,r6,13416
 8040578:	01420134 	movhi	r5,2052
 804057c:	294d1a04 	addi	r5,r5,13416
 8040580:	01020134 	movhi	r4,2052
 8040584:	210d1a04 	addi	r4,r4,13416
 8040588:	804256c0 	call	804256c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 804058c:	80420880 	call	8042088 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 8040590:	01020134 	movhi	r4,2052
 8040594:	21083a04 	addi	r4,r4,8424
 8040598:	8042db00 	call	8042db0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 804059c:	d0a5cf17 	ldw	r2,-26820(gp)
 80405a0:	d0e5d017 	ldw	r3,-26816(gp)
 80405a4:	d125d117 	ldw	r4,-26812(gp)
 80405a8:	200d883a 	mov	r6,r4
 80405ac:	180b883a 	mov	r5,r3
 80405b0:	1009883a 	mov	r4,r2
 80405b4:	80403740 	call	8040374 <main>
 80405b8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 80405bc:	01000044 	movi	r4,1
 80405c0:	8041e840 	call	8041e84 <close>
  exit (result);
 80405c4:	e13fff17 	ldw	r4,-4(fp)
 80405c8:	8042dc40 	call	8042dc4 <exit>

080405cc <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 80405cc:	defffd04 	addi	sp,sp,-12
 80405d0:	dfc00215 	stw	ra,8(sp)
 80405d4:	df000115 	stw	fp,4(sp)
 80405d8:	df000104 	addi	fp,sp,4
 80405dc:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 80405e0:	e13fff17 	ldw	r4,-4(fp)
 80405e4:	8041cf00 	call	8041cf0 <alt_busy_sleep>
}
 80405e8:	e037883a 	mov	sp,fp
 80405ec:	dfc00117 	ldw	ra,4(sp)
 80405f0:	df000017 	ldw	fp,0(sp)
 80405f4:	dec00204 	addi	sp,sp,8
 80405f8:	f800283a 	ret

080405fc <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 80405fc:	defffd04 	addi	sp,sp,-12
 8040600:	dfc00215 	stw	ra,8(sp)
 8040604:	df000115 	stw	fp,4(sp)
 8040608:	df000104 	addi	fp,sp,4
 804060c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 8040610:	d1601404 	addi	r5,gp,-32688
 8040614:	e13fff17 	ldw	r4,-4(fp)
 8040618:	8041fe40 	call	8041fe4 <alt_dev_llist_insert>
}
 804061c:	e037883a 	mov	sp,fp
 8040620:	dfc00117 	ldw	ra,4(sp)
 8040624:	df000017 	ldw	fp,0(sp)
 8040628:	dec00204 	addi	sp,sp,8
 804062c:	f800283a 	ret

08040630 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 8040630:	defffd04 	addi	sp,sp,-12
 8040634:	dfc00215 	stw	ra,8(sp)
 8040638:	df000115 	stw	fp,4(sp)
 804063c:	df000104 	addi	fp,sp,4
 8040640:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU_1A, cpu_1a);
 8040644:	8042a940 	call	8042a94 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 8040648:	00800044 	movi	r2,1
 804064c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 8040650:	0001883a 	nop
 8040654:	e037883a 	mov	sp,fp
 8040658:	dfc00117 	ldw	ra,4(sp)
 804065c:	df000017 	ldw	fp,0(sp)
 8040660:	dec00204 	addi	sp,sp,8
 8040664:	f800283a 	ret

08040668 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 8040668:	defffe04 	addi	sp,sp,-8
 804066c:	dfc00115 	stw	ra,4(sp)
 8040670:	df000015 	stw	fp,0(sp)
 8040674:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_1A, timer_1a);
 8040678:	01c0fa04 	movi	r7,1000
 804067c:	01800044 	movi	r6,1
 8040680:	000b883a 	mov	r5,zero
 8040684:	0009883a 	mov	r4,zero
 8040688:	80416c40 	call	80416c4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_FIFO_INIT ( FIFO_Q_1, fifo_q_1);
 804068c:	0001883a 	nop
    ALTERA_AVALON_FIFO_INIT ( FIFO_Q_2, fifo_q_2);
 8040690:	0001883a 	nop
    ALTERA_AVALON_FIFO_INIT ( FIFO_Q_3, fifo_q_3);
 8040694:	0001883a 	nop
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_1A, jtag_uart_1a);
 8040698:	01800404 	movi	r6,16
 804069c:	000b883a 	mov	r5,zero
 80406a0:	01020134 	movhi	r4,2052
 80406a4:	210d3504 	addi	r4,r4,13524
 80406a8:	8040d480 	call	8040d48 <altera_avalon_jtag_uart_init>
 80406ac:	01020134 	movhi	r4,2052
 80406b0:	210d2b04 	addi	r4,r4,13484
 80406b4:	80405fc0 	call	80405fc <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYS_ID_1A, sys_id_1a);
 80406b8:	0001883a 	nop
    ALTERA_HOSTFS_INIT ( ALTERA_HOSTFS, altera_hostfs);
 80406bc:	01020134 	movhi	r4,2052
 80406c0:	21114304 	addi	r4,r4,17676
 80406c4:	80421480 	call	8042148 <alt_fs_reg>
}
 80406c8:	0001883a 	nop
 80406cc:	e037883a 	mov	sp,fp
 80406d0:	dfc00117 	ldw	ra,4(sp)
 80406d4:	df000017 	ldw	fp,0(sp)
 80406d8:	dec00204 	addi	sp,sp,8
 80406dc:	f800283a 	ret

080406e0 <altera_avalon_fifo_init>:



int altera_avalon_fifo_init(alt_u32 address, alt_u32 ienable,
                            alt_u32 emptymark, alt_u32 fullmark)
{
 80406e0:	defffa04 	addi	sp,sp,-24
 80406e4:	dfc00515 	stw	ra,20(sp)
 80406e8:	df000415 	stw	fp,16(sp)
 80406ec:	df000404 	addi	fp,sp,16
 80406f0:	e13ffc15 	stw	r4,-16(fp)
 80406f4:	e17ffd15 	stw	r5,-12(fp)
 80406f8:	e1bffe15 	stw	r6,-8(fp)
 80406fc:	e1ffff15 	stw	r7,-4(fp)
    if(altera_avalon_fifo_clear_event(address, ALTERA_AVALON_FIFO_EVENT_ALL) != ALTERA_AVALON_FIFO_OK)
 8040700:	01400fc4 	movi	r5,63
 8040704:	e13ffc17 	ldw	r4,-16(fp)
 8040708:	80408ac0 	call	80408ac <altera_avalon_fifo_clear_event>
 804070c:	10000226 	beq	r2,zero,8040718 <altera_avalon_fifo_init+0x38>
    {
        return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
 8040710:	00bfffc4 	movi	r2,-1
 8040714:	00001306 	br	8040764 <altera_avalon_fifo_init+0x84>
    }

    if( altera_avalon_fifo_write_ienable(address, ienable) != ALTERA_AVALON_FIFO_OK)
 8040718:	e17ffd17 	ldw	r5,-12(fp)
 804071c:	e13ffc17 	ldw	r4,-16(fp)
 8040720:	804090c0 	call	804090c <altera_avalon_fifo_write_ienable>
 8040724:	10000226 	beq	r2,zero,8040730 <altera_avalon_fifo_init+0x50>
    {
         return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
 8040728:	00bfff84 	movi	r2,-2
 804072c:	00000d06 	br	8040764 <altera_avalon_fifo_init+0x84>
    }

    if( altera_avalon_fifo_write_almostfull(address, fullmark) != ALTERA_AVALON_FIFO_OK)
 8040730:	e17fff17 	ldw	r5,-4(fp)
 8040734:	e13ffc17 	ldw	r4,-16(fp)
 8040738:	80409680 	call	8040968 <altera_avalon_fifo_write_almostfull>
 804073c:	10000226 	beq	r2,zero,8040748 <altera_avalon_fifo_init+0x68>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
 8040740:	00bfff44 	movi	r2,-3
 8040744:	00000706 	br	8040764 <altera_avalon_fifo_init+0x84>
    }
  
    if( altera_avalon_fifo_write_almostempty(address, emptymark) != ALTERA_AVALON_FIFO_OK)
 8040748:	e17ffe17 	ldw	r5,-8(fp)
 804074c:	e13ffc17 	ldw	r4,-16(fp)
 8040750:	80409c40 	call	80409c4 <altera_avalon_fifo_write_almostempty>
 8040754:	10000226 	beq	r2,zero,8040760 <altera_avalon_fifo_init+0x80>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
 8040758:	00bfff44 	movi	r2,-3
 804075c:	00000106 	br	8040764 <altera_avalon_fifo_init+0x84>
    }

    return ALTERA_AVALON_FIFO_OK;
 8040760:	0005883a 	mov	r2,zero
}
 8040764:	e037883a 	mov	sp,fp
 8040768:	dfc00117 	ldw	ra,4(sp)
 804076c:	df000017 	ldw	fp,0(sp)
 8040770:	dec00204 	addi	sp,sp,8
 8040774:	f800283a 	ret

08040778 <altera_avalon_fifo_read_status>:

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
 8040778:	defffd04 	addi	sp,sp,-12
 804077c:	df000215 	stw	fp,8(sp)
 8040780:	df000204 	addi	fp,sp,8
 8040784:	e13ffe15 	stw	r4,-8(fp)
 8040788:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
 804078c:	e0bffe17 	ldw	r2,-8(fp)
 8040790:	10800104 	addi	r2,r2,4
 8040794:	10800037 	ldwio	r2,0(r2)
 8040798:	1007883a 	mov	r3,r2
 804079c:	e0bfff17 	ldw	r2,-4(fp)
 80407a0:	1884703a 	and	r2,r3,r2
}
 80407a4:	e037883a 	mov	sp,fp
 80407a8:	df000017 	ldw	fp,0(sp)
 80407ac:	dec00104 	addi	sp,sp,4
 80407b0:	f800283a 	ret

080407b4 <altera_avalon_fifo_read_ienable>:

int altera_avalon_fifo_read_ienable(alt_u32 address, alt_u32 mask)
{
 80407b4:	defffd04 	addi	sp,sp,-12
 80407b8:	df000215 	stw	fp,8(sp)
 80407bc:	df000204 	addi	fp,sp,8
 80407c0:	e13ffe15 	stw	r4,-8(fp)
 80407c4:	e17fff15 	stw	r5,-4(fp)
	
    return (IORD_ALTERA_AVALON_FIFO_IENABLE(address) & mask);
 80407c8:	e0bffe17 	ldw	r2,-8(fp)
 80407cc:	10800304 	addi	r2,r2,12
 80407d0:	10800037 	ldwio	r2,0(r2)
 80407d4:	1007883a 	mov	r3,r2
 80407d8:	e0bfff17 	ldw	r2,-4(fp)
 80407dc:	1884703a 	and	r2,r3,r2
}
 80407e0:	e037883a 	mov	sp,fp
 80407e4:	df000017 	ldw	fp,0(sp)
 80407e8:	dec00104 	addi	sp,sp,4
 80407ec:	f800283a 	ret

080407f0 <altera_avalon_fifo_read_almostfull>:

int altera_avalon_fifo_read_almostfull(alt_u32 address)
{
 80407f0:	defffe04 	addi	sp,sp,-8
 80407f4:	df000115 	stw	fp,4(sp)
 80407f8:	df000104 	addi	fp,sp,4
 80407fc:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address);
 8040800:	e0bfff17 	ldw	r2,-4(fp)
 8040804:	10800404 	addi	r2,r2,16
 8040808:	10800037 	ldwio	r2,0(r2)
}
 804080c:	e037883a 	mov	sp,fp
 8040810:	df000017 	ldw	fp,0(sp)
 8040814:	dec00104 	addi	sp,sp,4
 8040818:	f800283a 	ret

0804081c <altera_avalon_fifo_read_almostempty>:

int altera_avalon_fifo_read_almostempty(alt_u32 address)
{
 804081c:	defffe04 	addi	sp,sp,-8
 8040820:	df000115 	stw	fp,4(sp)
 8040824:	df000104 	addi	fp,sp,4
 8040828:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address);
 804082c:	e0bfff17 	ldw	r2,-4(fp)
 8040830:	10800504 	addi	r2,r2,20
 8040834:	10800037 	ldwio	r2,0(r2)
}
 8040838:	e037883a 	mov	sp,fp
 804083c:	df000017 	ldw	fp,0(sp)
 8040840:	dec00104 	addi	sp,sp,4
 8040844:	f800283a 	ret

08040848 <altera_avalon_fifo_read_event>:

int altera_avalon_fifo_read_event(alt_u32 address, alt_u32 mask)
{
 8040848:	defffd04 	addi	sp,sp,-12
 804084c:	df000215 	stw	fp,8(sp)
 8040850:	df000204 	addi	fp,sp,8
 8040854:	e13ffe15 	stw	r4,-8(fp)
 8040858:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask);
 804085c:	e0bffe17 	ldw	r2,-8(fp)
 8040860:	10800204 	addi	r2,r2,8
 8040864:	10800037 	ldwio	r2,0(r2)
 8040868:	1007883a 	mov	r3,r2
 804086c:	e0bfff17 	ldw	r2,-4(fp)
 8040870:	1884703a 	and	r2,r3,r2
}
 8040874:	e037883a 	mov	sp,fp
 8040878:	df000017 	ldw	fp,0(sp)
 804087c:	dec00104 	addi	sp,sp,4
 8040880:	f800283a 	ret

08040884 <altera_avalon_fifo_read_level>:

int altera_avalon_fifo_read_level(alt_u32 address)
{
 8040884:	defffe04 	addi	sp,sp,-8
 8040888:	df000115 	stw	fp,4(sp)
 804088c:	df000104 	addi	fp,sp,4
 8040890:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_LEVEL(address);
 8040894:	e0bfff17 	ldw	r2,-4(fp)
 8040898:	10800037 	ldwio	r2,0(r2)
}
 804089c:	e037883a 	mov	sp,fp
 80408a0:	df000017 	ldw	fp,0(sp)
 80408a4:	dec00104 	addi	sp,sp,4
 80408a8:	f800283a 	ret

080408ac <altera_avalon_fifo_clear_event>:

int altera_avalon_fifo_clear_event(alt_u32 address, alt_u32 mask)
{
 80408ac:	defffd04 	addi	sp,sp,-12
 80408b0:	df000215 	stw	fp,8(sp)
 80408b4:	df000204 	addi	fp,sp,8
 80408b8:	e13ffe15 	stw	r4,-8(fp)
 80408bc:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_EVENT(address, mask);
 80408c0:	e0bffe17 	ldw	r2,-8(fp)
 80408c4:	10800204 	addi	r2,r2,8
 80408c8:	1007883a 	mov	r3,r2
 80408cc:	e0bfff17 	ldw	r2,-4(fp)
 80408d0:	18800035 	stwio	r2,0(r3)
    if((IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask) == 0)
 80408d4:	e0bffe17 	ldw	r2,-8(fp)
 80408d8:	10800204 	addi	r2,r2,8
 80408dc:	10800037 	ldwio	r2,0(r2)
 80408e0:	1007883a 	mov	r3,r2
 80408e4:	e0bfff17 	ldw	r2,-4(fp)
 80408e8:	1884703a 	and	r2,r3,r2
 80408ec:	1000021e 	bne	r2,zero,80408f8 <altera_avalon_fifo_clear_event+0x4c>
        return ALTERA_AVALON_FIFO_OK;
 80408f0:	0005883a 	mov	r2,zero
 80408f4:	00000106 	br	80408fc <altera_avalon_fifo_clear_event+0x50>
    else
    return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
 80408f8:	00bfffc4 	movi	r2,-1
}
 80408fc:	e037883a 	mov	sp,fp
 8040900:	df000017 	ldw	fp,0(sp)
 8040904:	dec00104 	addi	sp,sp,4
 8040908:	f800283a 	ret

0804090c <altera_avalon_fifo_write_ienable>:

int altera_avalon_fifo_write_ienable(alt_u32 address, alt_u32 mask)
{
 804090c:	defffd04 	addi	sp,sp,-12
 8040910:	df000215 	stw	fp,8(sp)
 8040914:	df000204 	addi	fp,sp,8
 8040918:	e13ffe15 	stw	r4,-8(fp)
 804091c:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_IENABLE(address, mask);
 8040920:	e0bffe17 	ldw	r2,-8(fp)
 8040924:	10800304 	addi	r2,r2,12
 8040928:	1007883a 	mov	r3,r2
 804092c:	e0bfff17 	ldw	r2,-4(fp)
 8040930:	18800035 	stwio	r2,0(r3)
    if(IORD_ALTERA_AVALON_FIFO_IENABLE(address) == mask)
 8040934:	e0bffe17 	ldw	r2,-8(fp)
 8040938:	10800304 	addi	r2,r2,12
 804093c:	10800037 	ldwio	r2,0(r2)
 8040940:	1007883a 	mov	r3,r2
 8040944:	e0bfff17 	ldw	r2,-4(fp)
 8040948:	1880021e 	bne	r3,r2,8040954 <altera_avalon_fifo_write_ienable+0x48>
        return ALTERA_AVALON_FIFO_OK;
 804094c:	0005883a 	mov	r2,zero
 8040950:	00000106 	br	8040958 <altera_avalon_fifo_write_ienable+0x4c>
    else
        return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
 8040954:	00bfff84 	movi	r2,-2
}
 8040958:	e037883a 	mov	sp,fp
 804095c:	df000017 	ldw	fp,0(sp)
 8040960:	dec00104 	addi	sp,sp,4
 8040964:	f800283a 	ret

08040968 <altera_avalon_fifo_write_almostfull>:

int altera_avalon_fifo_write_almostfull(alt_u32 address, alt_u32 data)
{
 8040968:	defffd04 	addi	sp,sp,-12
 804096c:	df000215 	stw	fp,8(sp)
 8040970:	df000204 	addi	fp,sp,8
 8040974:	e13ffe15 	stw	r4,-8(fp)
 8040978:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTFULL(address, data);
 804097c:	e0bffe17 	ldw	r2,-8(fp)
 8040980:	10800404 	addi	r2,r2,16
 8040984:	1007883a 	mov	r3,r2
 8040988:	e0bfff17 	ldw	r2,-4(fp)
 804098c:	18800035 	stwio	r2,0(r3)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address) == data)
 8040990:	e0bffe17 	ldw	r2,-8(fp)
 8040994:	10800404 	addi	r2,r2,16
 8040998:	10800037 	ldwio	r2,0(r2)
 804099c:	1007883a 	mov	r3,r2
 80409a0:	e0bfff17 	ldw	r2,-4(fp)
 80409a4:	1880021e 	bne	r3,r2,80409b0 <altera_avalon_fifo_write_almostfull+0x48>
        return ALTERA_AVALON_FIFO_OK;
 80409a8:	0005883a 	mov	r2,zero
 80409ac:	00000106 	br	80409b4 <altera_avalon_fifo_write_almostfull+0x4c>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
 80409b0:	00bfff44 	movi	r2,-3
}
 80409b4:	e037883a 	mov	sp,fp
 80409b8:	df000017 	ldw	fp,0(sp)
 80409bc:	dec00104 	addi	sp,sp,4
 80409c0:	f800283a 	ret

080409c4 <altera_avalon_fifo_write_almostempty>:

int altera_avalon_fifo_write_almostempty(alt_u32 address, alt_u32 data)
{
 80409c4:	defffd04 	addi	sp,sp,-12
 80409c8:	df000215 	stw	fp,8(sp)
 80409cc:	df000204 	addi	fp,sp,8
 80409d0:	e13ffe15 	stw	r4,-8(fp)
 80409d4:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address, data);
 80409d8:	e0bffe17 	ldw	r2,-8(fp)
 80409dc:	10800504 	addi	r2,r2,20
 80409e0:	1007883a 	mov	r3,r2
 80409e4:	e0bfff17 	ldw	r2,-4(fp)
 80409e8:	18800035 	stwio	r2,0(r3)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address) == data)
 80409ec:	e0bffe17 	ldw	r2,-8(fp)
 80409f0:	10800504 	addi	r2,r2,20
 80409f4:	10800037 	ldwio	r2,0(r2)
 80409f8:	1007883a 	mov	r3,r2
 80409fc:	e0bfff17 	ldw	r2,-4(fp)
 8040a00:	1880021e 	bne	r3,r2,8040a0c <altera_avalon_fifo_write_almostempty+0x48>
        return ALTERA_AVALON_FIFO_OK;
 8040a04:	0005883a 	mov	r2,zero
 8040a08:	00000106 	br	8040a10 <altera_avalon_fifo_write_almostempty+0x4c>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
 8040a0c:	00bfff44 	movi	r2,-3
}
 8040a10:	e037883a 	mov	sp,fp
 8040a14:	df000017 	ldw	fp,0(sp)
 8040a18:	dec00104 	addi	sp,sp,4
 8040a1c:	f800283a 	ret

08040a20 <altera_avalon_fifo_write_fifo>:

int altera_avalon_fifo_write_fifo(alt_u32 write_address,
                                  alt_u32 ctrl_address,
                                  alt_u32 data)
{
 8040a20:	defffb04 	addi	sp,sp,-20
 8040a24:	dfc00415 	stw	ra,16(sp)
 8040a28:	df000315 	stw	fp,12(sp)
 8040a2c:	df000304 	addi	fp,sp,12
 8040a30:	e13ffd15 	stw	r4,-12(fp)
 8040a34:	e17ffe15 	stw	r5,-8(fp)
 8040a38:	e1bfff15 	stw	r6,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
 8040a3c:	01400044 	movi	r5,1
 8040a40:	e13ffe17 	ldw	r4,-8(fp)
 8040a44:	80407780 	call	8040778 <altera_avalon_fifo_read_status>
 8040a48:	1000051e 	bne	r2,zero,8040a60 <altera_avalon_fifo_write_fifo+0x40>
    {
        IOWR_ALTERA_AVALON_FIFO_DATA(write_address, data);
 8040a4c:	e0bffd17 	ldw	r2,-12(fp)
 8040a50:	e0ffff17 	ldw	r3,-4(fp)
 8040a54:	10c00035 	stwio	r3,0(r2)
        return ALTERA_AVALON_FIFO_OK;
 8040a58:	0005883a 	mov	r2,zero
 8040a5c:	00000106 	br	8040a64 <altera_avalon_fifo_write_fifo+0x44>
    }
    else
    {
        return ALTERA_AVALON_FIFO_FULL;
 8040a60:	00bfff04 	movi	r2,-4
    }
}
 8040a64:	e037883a 	mov	sp,fp
 8040a68:	dfc00117 	ldw	ra,4(sp)
 8040a6c:	df000017 	ldw	fp,0(sp)
 8040a70:	dec00204 	addi	sp,sp,8
 8040a74:	f800283a 	ret

08040a78 <altera_avalon_read_fifo>:

int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)
{
 8040a78:	defffa04 	addi	sp,sp,-24
 8040a7c:	dfc00515 	stw	ra,20(sp)
 8040a80:	df000415 	stw	fp,16(sp)
 8040a84:	df000404 	addi	fp,sp,16
 8040a88:	e13ffd15 	stw	r4,-12(fp)
 8040a8c:	e17ffe15 	stw	r5,-8(fp)
 8040a90:	e1bfff15 	stw	r6,-4(fp)
    int return_val = 0;
 8040a94:	e03ffc15 	stw	zero,-16(fp)
    *data = 0;
 8040a98:	e0bfff17 	ldw	r2,-4(fp)
 8040a9c:	10000015 	stw	zero,0(r2)
    
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
 8040aa0:	01400084 	movi	r5,2
 8040aa4:	e13ffe17 	ldw	r4,-8(fp)
 8040aa8:	80407780 	call	8040778 <altera_avalon_fifo_read_status>
 8040aac:	1000071e 	bne	r2,zero,8040acc <altera_avalon_read_fifo+0x54>
    {
        return_val = altera_avalon_fifo_read_level(ctrl_address);
 8040ab0:	e13ffe17 	ldw	r4,-8(fp)
 8040ab4:	80408840 	call	8040884 <altera_avalon_fifo_read_level>
 8040ab8:	e0bffc15 	stw	r2,-16(fp)
        *data = IORD_ALTERA_AVALON_FIFO_DATA(read_address);
 8040abc:	e0bffd17 	ldw	r2,-12(fp)
 8040ac0:	10c00037 	ldwio	r3,0(r2)
 8040ac4:	e0bfff17 	ldw	r2,-4(fp)
 8040ac8:	10c00015 	stw	r3,0(r2)
    
    }
    return return_val;
 8040acc:	e0bffc17 	ldw	r2,-16(fp)
}
 8040ad0:	e037883a 	mov	sp,fp
 8040ad4:	dfc00117 	ldw	ra,4(sp)
 8040ad8:	df000017 	ldw	fp,0(sp)
 8040adc:	dec00204 	addi	sp,sp,8
 8040ae0:	f800283a 	ret

08040ae4 <altera_avalon_fifo_read_fifo>:

int altera_avalon_fifo_read_fifo(alt_u32 read_address, alt_u32 ctrl_address)
{
 8040ae4:	defffc04 	addi	sp,sp,-16
 8040ae8:	dfc00315 	stw	ra,12(sp)
 8040aec:	df000215 	stw	fp,8(sp)
 8040af0:	df000204 	addi	fp,sp,8
 8040af4:	e13ffe15 	stw	r4,-8(fp)
 8040af8:	e17fff15 	stw	r5,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
 8040afc:	01400084 	movi	r5,2
 8040b00:	e13fff17 	ldw	r4,-4(fp)
 8040b04:	80407780 	call	8040778 <altera_avalon_fifo_read_status>
 8040b08:	1000031e 	bne	r2,zero,8040b18 <altera_avalon_fifo_read_fifo+0x34>
    {
        return IORD_ALTERA_AVALON_FIFO_DATA(read_address);
 8040b0c:	e0bffe17 	ldw	r2,-8(fp)
 8040b10:	10800037 	ldwio	r2,0(r2)
 8040b14:	00000106 	br	8040b1c <altera_avalon_fifo_read_fifo+0x38>
    }
    return 0;
 8040b18:	0005883a 	mov	r2,zero
}
 8040b1c:	e037883a 	mov	sp,fp
 8040b20:	dfc00117 	ldw	ra,4(sp)
 8040b24:	df000017 	ldw	fp,0(sp)
 8040b28:	dec00204 	addi	sp,sp,8
 8040b2c:	f800283a 	ret

08040b30 <altera_avalon_fifo_write_other_info>:

int altera_avalon_fifo_write_other_info(alt_u32 write_address,
					alt_u32 ctrl_address,
					alt_u32 data)
{
 8040b30:	defffb04 	addi	sp,sp,-20
 8040b34:	dfc00415 	stw	ra,16(sp)
 8040b38:	df000315 	stw	fp,12(sp)
 8040b3c:	df000304 	addi	fp,sp,12
 8040b40:	e13ffd15 	stw	r4,-12(fp)
 8040b44:	e17ffe15 	stw	r5,-8(fp)
 8040b48:	e1bfff15 	stw	r6,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
 8040b4c:	01400044 	movi	r5,1
 8040b50:	e13ffe17 	ldw	r4,-8(fp)
 8040b54:	80407780 	call	8040778 <altera_avalon_fifo_read_status>
 8040b58:	1000071e 	bne	r2,zero,8040b78 <altera_avalon_fifo_write_other_info+0x48>
    {
	IOWR_ALTERA_AVALON_FIFO_OTHER_INFO(write_address, data);
 8040b5c:	e0bffd17 	ldw	r2,-12(fp)
 8040b60:	10800104 	addi	r2,r2,4
 8040b64:	1007883a 	mov	r3,r2
 8040b68:	e0bfff17 	ldw	r2,-4(fp)
 8040b6c:	18800035 	stwio	r2,0(r3)
	return ALTERA_AVALON_FIFO_OK;
 8040b70:	0005883a 	mov	r2,zero
 8040b74:	00000106 	br	8040b7c <altera_avalon_fifo_write_other_info+0x4c>
    }
    else
    {
	return ALTERA_AVALON_FIFO_FULL;
 8040b78:	00bfff04 	movi	r2,-4
    }
}
 8040b7c:	e037883a 	mov	sp,fp
 8040b80:	dfc00117 	ldw	ra,4(sp)
 8040b84:	df000017 	ldw	fp,0(sp)
 8040b88:	dec00204 	addi	sp,sp,8
 8040b8c:	f800283a 	ret

08040b90 <altera_avalon_fifo_read_other_info>:

int altera_avalon_fifo_read_other_info(alt_u32 read_address)
{
 8040b90:	defffe04 	addi	sp,sp,-8
 8040b94:	df000115 	stw	fp,4(sp)
 8040b98:	df000104 	addi	fp,sp,4
 8040b9c:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_OTHER_INFO(read_address);
 8040ba0:	e0bfff17 	ldw	r2,-4(fp)
 8040ba4:	10800104 	addi	r2,r2,4
 8040ba8:	10800037 	ldwio	r2,0(r2)
}
 8040bac:	e037883a 	mov	sp,fp
 8040bb0:	df000017 	ldw	fp,0(sp)
 8040bb4:	dec00104 	addi	sp,sp,4
 8040bb8:	f800283a 	ret

08040bbc <altera_avalon_fifo_read_backpressure>:

int altera_avalon_fifo_read_backpressure (alt_u32 read_address){
 8040bbc:	defffe04 	addi	sp,sp,-8
 8040bc0:	df000115 	stw	fp,4(sp)
 8040bc4:	df000104 	addi	fp,sp,4
 8040bc8:	e13fff15 	stw	r4,-4(fp)
    // Read data from FIFO directly. If FIFO is empty and backpressure is supported, this call is backpressure.
    return IORD_ALTERA_AVALON_FIFO_DATA(read_address);  
 8040bcc:	e0bfff17 	ldw	r2,-4(fp)
 8040bd0:	10800037 	ldwio	r2,0(r2)
}
 8040bd4:	e037883a 	mov	sp,fp
 8040bd8:	df000017 	ldw	fp,0(sp)
 8040bdc:	dec00104 	addi	sp,sp,4
 8040be0:	f800283a 	ret

08040be4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 8040be4:	defffa04 	addi	sp,sp,-24
 8040be8:	dfc00515 	stw	ra,20(sp)
 8040bec:	df000415 	stw	fp,16(sp)
 8040bf0:	df000404 	addi	fp,sp,16
 8040bf4:	e13ffd15 	stw	r4,-12(fp)
 8040bf8:	e17ffe15 	stw	r5,-8(fp)
 8040bfc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8040c00:	e0bffd17 	ldw	r2,-12(fp)
 8040c04:	10800017 	ldw	r2,0(r2)
 8040c08:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 8040c0c:	e0bffc17 	ldw	r2,-16(fp)
 8040c10:	10c00a04 	addi	r3,r2,40
 8040c14:	e0bffd17 	ldw	r2,-12(fp)
 8040c18:	10800217 	ldw	r2,8(r2)
 8040c1c:	100f883a 	mov	r7,r2
 8040c20:	e1bfff17 	ldw	r6,-4(fp)
 8040c24:	e17ffe17 	ldw	r5,-8(fp)
 8040c28:	1809883a 	mov	r4,r3
 8040c2c:	804120c0 	call	804120c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 8040c30:	e037883a 	mov	sp,fp
 8040c34:	dfc00117 	ldw	ra,4(sp)
 8040c38:	df000017 	ldw	fp,0(sp)
 8040c3c:	dec00204 	addi	sp,sp,8
 8040c40:	f800283a 	ret

08040c44 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 8040c44:	defffa04 	addi	sp,sp,-24
 8040c48:	dfc00515 	stw	ra,20(sp)
 8040c4c:	df000415 	stw	fp,16(sp)
 8040c50:	df000404 	addi	fp,sp,16
 8040c54:	e13ffd15 	stw	r4,-12(fp)
 8040c58:	e17ffe15 	stw	r5,-8(fp)
 8040c5c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8040c60:	e0bffd17 	ldw	r2,-12(fp)
 8040c64:	10800017 	ldw	r2,0(r2)
 8040c68:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 8040c6c:	e0bffc17 	ldw	r2,-16(fp)
 8040c70:	10c00a04 	addi	r3,r2,40
 8040c74:	e0bffd17 	ldw	r2,-12(fp)
 8040c78:	10800217 	ldw	r2,8(r2)
 8040c7c:	100f883a 	mov	r7,r2
 8040c80:	e1bfff17 	ldw	r6,-4(fp)
 8040c84:	e17ffe17 	ldw	r5,-8(fp)
 8040c88:	1809883a 	mov	r4,r3
 8040c8c:	80414280 	call	8041428 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 8040c90:	e037883a 	mov	sp,fp
 8040c94:	dfc00117 	ldw	ra,4(sp)
 8040c98:	df000017 	ldw	fp,0(sp)
 8040c9c:	dec00204 	addi	sp,sp,8
 8040ca0:	f800283a 	ret

08040ca4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 8040ca4:	defffc04 	addi	sp,sp,-16
 8040ca8:	dfc00315 	stw	ra,12(sp)
 8040cac:	df000215 	stw	fp,8(sp)
 8040cb0:	df000204 	addi	fp,sp,8
 8040cb4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8040cb8:	e0bfff17 	ldw	r2,-4(fp)
 8040cbc:	10800017 	ldw	r2,0(r2)
 8040cc0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 8040cc4:	e0bffe17 	ldw	r2,-8(fp)
 8040cc8:	10c00a04 	addi	r3,r2,40
 8040ccc:	e0bfff17 	ldw	r2,-4(fp)
 8040cd0:	10800217 	ldw	r2,8(r2)
 8040cd4:	100b883a 	mov	r5,r2
 8040cd8:	1809883a 	mov	r4,r3
 8040cdc:	80410b40 	call	80410b4 <altera_avalon_jtag_uart_close>
}
 8040ce0:	e037883a 	mov	sp,fp
 8040ce4:	dfc00117 	ldw	ra,4(sp)
 8040ce8:	df000017 	ldw	fp,0(sp)
 8040cec:	dec00204 	addi	sp,sp,8
 8040cf0:	f800283a 	ret

08040cf4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 8040cf4:	defffa04 	addi	sp,sp,-24
 8040cf8:	dfc00515 	stw	ra,20(sp)
 8040cfc:	df000415 	stw	fp,16(sp)
 8040d00:	df000404 	addi	fp,sp,16
 8040d04:	e13ffd15 	stw	r4,-12(fp)
 8040d08:	e17ffe15 	stw	r5,-8(fp)
 8040d0c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 8040d10:	e0bffd17 	ldw	r2,-12(fp)
 8040d14:	10800017 	ldw	r2,0(r2)
 8040d18:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 8040d1c:	e0bffc17 	ldw	r2,-16(fp)
 8040d20:	10800a04 	addi	r2,r2,40
 8040d24:	e1bfff17 	ldw	r6,-4(fp)
 8040d28:	e17ffe17 	ldw	r5,-8(fp)
 8040d2c:	1009883a 	mov	r4,r2
 8040d30:	804111c0 	call	804111c <altera_avalon_jtag_uart_ioctl>
}
 8040d34:	e037883a 	mov	sp,fp
 8040d38:	dfc00117 	ldw	ra,4(sp)
 8040d3c:	df000017 	ldw	fp,0(sp)
 8040d40:	dec00204 	addi	sp,sp,8
 8040d44:	f800283a 	ret

08040d48 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 8040d48:	defffa04 	addi	sp,sp,-24
 8040d4c:	dfc00515 	stw	ra,20(sp)
 8040d50:	df000415 	stw	fp,16(sp)
 8040d54:	df000404 	addi	fp,sp,16
 8040d58:	e13ffd15 	stw	r4,-12(fp)
 8040d5c:	e17ffe15 	stw	r5,-8(fp)
 8040d60:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8040d64:	e0bffd17 	ldw	r2,-12(fp)
 8040d68:	00c00044 	movi	r3,1
 8040d6c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 8040d70:	e0bffd17 	ldw	r2,-12(fp)
 8040d74:	10800017 	ldw	r2,0(r2)
 8040d78:	10800104 	addi	r2,r2,4
 8040d7c:	1007883a 	mov	r3,r2
 8040d80:	e0bffd17 	ldw	r2,-12(fp)
 8040d84:	10800817 	ldw	r2,32(r2)
 8040d88:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 8040d8c:	e0bffe17 	ldw	r2,-8(fp)
 8040d90:	e0ffff17 	ldw	r3,-4(fp)
 8040d94:	d8000015 	stw	zero,0(sp)
 8040d98:	e1fffd17 	ldw	r7,-12(fp)
 8040d9c:	01820134 	movhi	r6,2052
 8040da0:	31838204 	addi	r6,r6,3592
 8040da4:	180b883a 	mov	r5,r3
 8040da8:	1009883a 	mov	r4,r2
 8040dac:	80421e80 	call	80421e8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 8040db0:	e0bffd17 	ldw	r2,-12(fp)
 8040db4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 8040db8:	e0bffd17 	ldw	r2,-12(fp)
 8040dbc:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8040dc0:	d0e5d317 	ldw	r3,-26804(gp)
 8040dc4:	e1fffd17 	ldw	r7,-12(fp)
 8040dc8:	01820134 	movhi	r6,2052
 8040dcc:	31840504 	addi	r6,r6,4116
 8040dd0:	180b883a 	mov	r5,r3
 8040dd4:	1009883a 	mov	r4,r2
 8040dd8:	8041bc40 	call	8041bc4 <alt_alarm_start>
 8040ddc:	1000040e 	bge	r2,zero,8040df0 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 8040de0:	e0fffd17 	ldw	r3,-12(fp)
 8040de4:	00a00034 	movhi	r2,32768
 8040de8:	10bfffc4 	addi	r2,r2,-1
 8040dec:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 8040df0:	0001883a 	nop
 8040df4:	e037883a 	mov	sp,fp
 8040df8:	dfc00117 	ldw	ra,4(sp)
 8040dfc:	df000017 	ldw	fp,0(sp)
 8040e00:	dec00204 	addi	sp,sp,8
 8040e04:	f800283a 	ret

08040e08 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 8040e08:	defff804 	addi	sp,sp,-32
 8040e0c:	df000715 	stw	fp,28(sp)
 8040e10:	df000704 	addi	fp,sp,28
 8040e14:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 8040e18:	e0bfff17 	ldw	r2,-4(fp)
 8040e1c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 8040e20:	e0bffb17 	ldw	r2,-20(fp)
 8040e24:	10800017 	ldw	r2,0(r2)
 8040e28:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8040e2c:	e0bffc17 	ldw	r2,-16(fp)
 8040e30:	10800104 	addi	r2,r2,4
 8040e34:	10800037 	ldwio	r2,0(r2)
 8040e38:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 8040e3c:	e0bffd17 	ldw	r2,-12(fp)
 8040e40:	1080c00c 	andi	r2,r2,768
 8040e44:	10006d26 	beq	r2,zero,8040ffc <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 8040e48:	e0bffd17 	ldw	r2,-12(fp)
 8040e4c:	1080400c 	andi	r2,r2,256
 8040e50:	10003526 	beq	r2,zero,8040f28 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 8040e54:	00800074 	movhi	r2,1
 8040e58:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8040e5c:	e0bffb17 	ldw	r2,-20(fp)
 8040e60:	10800a17 	ldw	r2,40(r2)
 8040e64:	10800044 	addi	r2,r2,1
 8040e68:	1081ffcc 	andi	r2,r2,2047
 8040e6c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 8040e70:	e0bffb17 	ldw	r2,-20(fp)
 8040e74:	10c00b17 	ldw	r3,44(r2)
 8040e78:	e0bffe17 	ldw	r2,-8(fp)
 8040e7c:	18801526 	beq	r3,r2,8040ed4 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 8040e80:	e0bffc17 	ldw	r2,-16(fp)
 8040e84:	10800037 	ldwio	r2,0(r2)
 8040e88:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 8040e8c:	e0bff917 	ldw	r2,-28(fp)
 8040e90:	10a0000c 	andi	r2,r2,32768
 8040e94:	10001126 	beq	r2,zero,8040edc <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 8040e98:	e0bffb17 	ldw	r2,-20(fp)
 8040e9c:	10800a17 	ldw	r2,40(r2)
 8040ea0:	e0fff917 	ldw	r3,-28(fp)
 8040ea4:	1809883a 	mov	r4,r3
 8040ea8:	e0fffb17 	ldw	r3,-20(fp)
 8040eac:	1885883a 	add	r2,r3,r2
 8040eb0:	10800e04 	addi	r2,r2,56
 8040eb4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8040eb8:	e0bffb17 	ldw	r2,-20(fp)
 8040ebc:	10800a17 	ldw	r2,40(r2)
 8040ec0:	10800044 	addi	r2,r2,1
 8040ec4:	10c1ffcc 	andi	r3,r2,2047
 8040ec8:	e0bffb17 	ldw	r2,-20(fp)
 8040ecc:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 8040ed0:	003fe206 	br	8040e5c <__alt_data_end+0xf8040e5c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 8040ed4:	0001883a 	nop
 8040ed8:	00000106 	br	8040ee0 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 8040edc:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 8040ee0:	e0bff917 	ldw	r2,-28(fp)
 8040ee4:	10bfffec 	andhi	r2,r2,65535
 8040ee8:	10000f26 	beq	r2,zero,8040f28 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8040eec:	e0bffb17 	ldw	r2,-20(fp)
 8040ef0:	10c00817 	ldw	r3,32(r2)
 8040ef4:	00bfff84 	movi	r2,-2
 8040ef8:	1886703a 	and	r3,r3,r2
 8040efc:	e0bffb17 	ldw	r2,-20(fp)
 8040f00:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 8040f04:	e0bffc17 	ldw	r2,-16(fp)
 8040f08:	10800104 	addi	r2,r2,4
 8040f0c:	1007883a 	mov	r3,r2
 8040f10:	e0bffb17 	ldw	r2,-20(fp)
 8040f14:	10800817 	ldw	r2,32(r2)
 8040f18:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8040f1c:	e0bffc17 	ldw	r2,-16(fp)
 8040f20:	10800104 	addi	r2,r2,4
 8040f24:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 8040f28:	e0bffd17 	ldw	r2,-12(fp)
 8040f2c:	1080800c 	andi	r2,r2,512
 8040f30:	103fbe26 	beq	r2,zero,8040e2c <__alt_data_end+0xf8040e2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 8040f34:	e0bffd17 	ldw	r2,-12(fp)
 8040f38:	1004d43a 	srli	r2,r2,16
 8040f3c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 8040f40:	00001406 	br	8040f94 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 8040f44:	e0bffc17 	ldw	r2,-16(fp)
 8040f48:	e0fffb17 	ldw	r3,-20(fp)
 8040f4c:	18c00d17 	ldw	r3,52(r3)
 8040f50:	e13ffb17 	ldw	r4,-20(fp)
 8040f54:	20c7883a 	add	r3,r4,r3
 8040f58:	18c20e04 	addi	r3,r3,2104
 8040f5c:	18c00003 	ldbu	r3,0(r3)
 8040f60:	18c03fcc 	andi	r3,r3,255
 8040f64:	18c0201c 	xori	r3,r3,128
 8040f68:	18ffe004 	addi	r3,r3,-128
 8040f6c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8040f70:	e0bffb17 	ldw	r2,-20(fp)
 8040f74:	10800d17 	ldw	r2,52(r2)
 8040f78:	10800044 	addi	r2,r2,1
 8040f7c:	10c1ffcc 	andi	r3,r2,2047
 8040f80:	e0bffb17 	ldw	r2,-20(fp)
 8040f84:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 8040f88:	e0bffa17 	ldw	r2,-24(fp)
 8040f8c:	10bfffc4 	addi	r2,r2,-1
 8040f90:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 8040f94:	e0bffa17 	ldw	r2,-24(fp)
 8040f98:	10000526 	beq	r2,zero,8040fb0 <altera_avalon_jtag_uart_irq+0x1a8>
 8040f9c:	e0bffb17 	ldw	r2,-20(fp)
 8040fa0:	10c00d17 	ldw	r3,52(r2)
 8040fa4:	e0bffb17 	ldw	r2,-20(fp)
 8040fa8:	10800c17 	ldw	r2,48(r2)
 8040fac:	18bfe51e 	bne	r3,r2,8040f44 <__alt_data_end+0xf8040f44>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 8040fb0:	e0bffa17 	ldw	r2,-24(fp)
 8040fb4:	103f9d26 	beq	r2,zero,8040e2c <__alt_data_end+0xf8040e2c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8040fb8:	e0bffb17 	ldw	r2,-20(fp)
 8040fbc:	10c00817 	ldw	r3,32(r2)
 8040fc0:	00bfff44 	movi	r2,-3
 8040fc4:	1886703a 	and	r3,r3,r2
 8040fc8:	e0bffb17 	ldw	r2,-20(fp)
 8040fcc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8040fd0:	e0bffb17 	ldw	r2,-20(fp)
 8040fd4:	10800017 	ldw	r2,0(r2)
 8040fd8:	10800104 	addi	r2,r2,4
 8040fdc:	1007883a 	mov	r3,r2
 8040fe0:	e0bffb17 	ldw	r2,-20(fp)
 8040fe4:	10800817 	ldw	r2,32(r2)
 8040fe8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8040fec:	e0bffc17 	ldw	r2,-16(fp)
 8040ff0:	10800104 	addi	r2,r2,4
 8040ff4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 8040ff8:	003f8c06 	br	8040e2c <__alt_data_end+0xf8040e2c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 8040ffc:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 8041000:	0001883a 	nop
 8041004:	e037883a 	mov	sp,fp
 8041008:	df000017 	ldw	fp,0(sp)
 804100c:	dec00104 	addi	sp,sp,4
 8041010:	f800283a 	ret

08041014 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 8041014:	defff804 	addi	sp,sp,-32
 8041018:	df000715 	stw	fp,28(sp)
 804101c:	df000704 	addi	fp,sp,28
 8041020:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 8041024:	e0bffb17 	ldw	r2,-20(fp)
 8041028:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 804102c:	e0bff917 	ldw	r2,-28(fp)
 8041030:	10800017 	ldw	r2,0(r2)
 8041034:	10800104 	addi	r2,r2,4
 8041038:	10800037 	ldwio	r2,0(r2)
 804103c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 8041040:	e0bffa17 	ldw	r2,-24(fp)
 8041044:	1081000c 	andi	r2,r2,1024
 8041048:	10000b26 	beq	r2,zero,8041078 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 804104c:	e0bff917 	ldw	r2,-28(fp)
 8041050:	10800017 	ldw	r2,0(r2)
 8041054:	10800104 	addi	r2,r2,4
 8041058:	1007883a 	mov	r3,r2
 804105c:	e0bff917 	ldw	r2,-28(fp)
 8041060:	10800817 	ldw	r2,32(r2)
 8041064:	10810014 	ori	r2,r2,1024
 8041068:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 804106c:	e0bff917 	ldw	r2,-28(fp)
 8041070:	10000915 	stw	zero,36(r2)
 8041074:	00000a06 	br	80410a0 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 8041078:	e0bff917 	ldw	r2,-28(fp)
 804107c:	10c00917 	ldw	r3,36(r2)
 8041080:	00a00034 	movhi	r2,32768
 8041084:	10bfff04 	addi	r2,r2,-4
 8041088:	10c00536 	bltu	r2,r3,80410a0 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 804108c:	e0bff917 	ldw	r2,-28(fp)
 8041090:	10800917 	ldw	r2,36(r2)
 8041094:	10c00044 	addi	r3,r2,1
 8041098:	e0bff917 	ldw	r2,-28(fp)
 804109c:	10c00915 	stw	r3,36(r2)
 80410a0:	d0a5d317 	ldw	r2,-26804(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 80410a4:	e037883a 	mov	sp,fp
 80410a8:	df000017 	ldw	fp,0(sp)
 80410ac:	dec00104 	addi	sp,sp,4
 80410b0:	f800283a 	ret

080410b4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 80410b4:	defffd04 	addi	sp,sp,-12
 80410b8:	df000215 	stw	fp,8(sp)
 80410bc:	df000204 	addi	fp,sp,8
 80410c0:	e13ffe15 	stw	r4,-8(fp)
 80410c4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 80410c8:	00000506 	br	80410e0 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 80410cc:	e0bfff17 	ldw	r2,-4(fp)
 80410d0:	1090000c 	andi	r2,r2,16384
 80410d4:	10000226 	beq	r2,zero,80410e0 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 80410d8:	00bffd44 	movi	r2,-11
 80410dc:	00000b06 	br	804110c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 80410e0:	e0bffe17 	ldw	r2,-8(fp)
 80410e4:	10c00d17 	ldw	r3,52(r2)
 80410e8:	e0bffe17 	ldw	r2,-8(fp)
 80410ec:	10800c17 	ldw	r2,48(r2)
 80410f0:	18800526 	beq	r3,r2,8041108 <altera_avalon_jtag_uart_close+0x54>
 80410f4:	e0bffe17 	ldw	r2,-8(fp)
 80410f8:	10c00917 	ldw	r3,36(r2)
 80410fc:	e0bffe17 	ldw	r2,-8(fp)
 8041100:	10800117 	ldw	r2,4(r2)
 8041104:	18bff136 	bltu	r3,r2,80410cc <__alt_data_end+0xf80410cc>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 8041108:	0005883a 	mov	r2,zero
}
 804110c:	e037883a 	mov	sp,fp
 8041110:	df000017 	ldw	fp,0(sp)
 8041114:	dec00104 	addi	sp,sp,4
 8041118:	f800283a 	ret

0804111c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 804111c:	defffa04 	addi	sp,sp,-24
 8041120:	df000515 	stw	fp,20(sp)
 8041124:	df000504 	addi	fp,sp,20
 8041128:	e13ffd15 	stw	r4,-12(fp)
 804112c:	e17ffe15 	stw	r5,-8(fp)
 8041130:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 8041134:	00bff9c4 	movi	r2,-25
 8041138:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 804113c:	e0bffe17 	ldw	r2,-8(fp)
 8041140:	10da8060 	cmpeqi	r3,r2,27137
 8041144:	1800031e 	bne	r3,zero,8041154 <altera_avalon_jtag_uart_ioctl+0x38>
 8041148:	109a80a0 	cmpeqi	r2,r2,27138
 804114c:	1000181e 	bne	r2,zero,80411b0 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 8041150:	00002906 	br	80411f8 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 8041154:	e0bffd17 	ldw	r2,-12(fp)
 8041158:	10c00117 	ldw	r3,4(r2)
 804115c:	00a00034 	movhi	r2,32768
 8041160:	10bfffc4 	addi	r2,r2,-1
 8041164:	18802126 	beq	r3,r2,80411ec <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 8041168:	e0bfff17 	ldw	r2,-4(fp)
 804116c:	10800017 	ldw	r2,0(r2)
 8041170:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 8041174:	e0bffc17 	ldw	r2,-16(fp)
 8041178:	10800090 	cmplti	r2,r2,2
 804117c:	1000061e 	bne	r2,zero,8041198 <altera_avalon_jtag_uart_ioctl+0x7c>
 8041180:	e0fffc17 	ldw	r3,-16(fp)
 8041184:	00a00034 	movhi	r2,32768
 8041188:	10bfffc4 	addi	r2,r2,-1
 804118c:	18800226 	beq	r3,r2,8041198 <altera_avalon_jtag_uart_ioctl+0x7c>
 8041190:	e0bffc17 	ldw	r2,-16(fp)
 8041194:	00000206 	br	80411a0 <altera_avalon_jtag_uart_ioctl+0x84>
 8041198:	00a00034 	movhi	r2,32768
 804119c:	10bfff84 	addi	r2,r2,-2
 80411a0:	e0fffd17 	ldw	r3,-12(fp)
 80411a4:	18800115 	stw	r2,4(r3)
      rc = 0;
 80411a8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 80411ac:	00000f06 	br	80411ec <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 80411b0:	e0bffd17 	ldw	r2,-12(fp)
 80411b4:	10c00117 	ldw	r3,4(r2)
 80411b8:	00a00034 	movhi	r2,32768
 80411bc:	10bfffc4 	addi	r2,r2,-1
 80411c0:	18800c26 	beq	r3,r2,80411f4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 80411c4:	e0bffd17 	ldw	r2,-12(fp)
 80411c8:	10c00917 	ldw	r3,36(r2)
 80411cc:	e0bffd17 	ldw	r2,-12(fp)
 80411d0:	10800117 	ldw	r2,4(r2)
 80411d4:	1885803a 	cmpltu	r2,r3,r2
 80411d8:	10c03fcc 	andi	r3,r2,255
 80411dc:	e0bfff17 	ldw	r2,-4(fp)
 80411e0:	10c00015 	stw	r3,0(r2)
      rc = 0;
 80411e4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 80411e8:	00000206 	br	80411f4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 80411ec:	0001883a 	nop
 80411f0:	00000106 	br	80411f8 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 80411f4:	0001883a 	nop

  default:
    break;
  }

  return rc;
 80411f8:	e0bffb17 	ldw	r2,-20(fp)
}
 80411fc:	e037883a 	mov	sp,fp
 8041200:	df000017 	ldw	fp,0(sp)
 8041204:	dec00104 	addi	sp,sp,4
 8041208:	f800283a 	ret

0804120c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 804120c:	defff304 	addi	sp,sp,-52
 8041210:	dfc00c15 	stw	ra,48(sp)
 8041214:	df000b15 	stw	fp,44(sp)
 8041218:	df000b04 	addi	fp,sp,44
 804121c:	e13ffc15 	stw	r4,-16(fp)
 8041220:	e17ffd15 	stw	r5,-12(fp)
 8041224:	e1bffe15 	stw	r6,-8(fp)
 8041228:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 804122c:	e0bffd17 	ldw	r2,-12(fp)
 8041230:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 8041234:	00004706 	br	8041354 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 8041238:	e0bffc17 	ldw	r2,-16(fp)
 804123c:	10800a17 	ldw	r2,40(r2)
 8041240:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 8041244:	e0bffc17 	ldw	r2,-16(fp)
 8041248:	10800b17 	ldw	r2,44(r2)
 804124c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 8041250:	e0fff717 	ldw	r3,-36(fp)
 8041254:	e0bff817 	ldw	r2,-32(fp)
 8041258:	18800536 	bltu	r3,r2,8041270 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 804125c:	e0fff717 	ldw	r3,-36(fp)
 8041260:	e0bff817 	ldw	r2,-32(fp)
 8041264:	1885c83a 	sub	r2,r3,r2
 8041268:	e0bff615 	stw	r2,-40(fp)
 804126c:	00000406 	br	8041280 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 8041270:	00c20004 	movi	r3,2048
 8041274:	e0bff817 	ldw	r2,-32(fp)
 8041278:	1885c83a 	sub	r2,r3,r2
 804127c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 8041280:	e0bff617 	ldw	r2,-40(fp)
 8041284:	10001e26 	beq	r2,zero,8041300 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 8041288:	e0fffe17 	ldw	r3,-8(fp)
 804128c:	e0bff617 	ldw	r2,-40(fp)
 8041290:	1880022e 	bgeu	r3,r2,804129c <altera_avalon_jtag_uart_read+0x90>
        n = space;
 8041294:	e0bffe17 	ldw	r2,-8(fp)
 8041298:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 804129c:	e0bffc17 	ldw	r2,-16(fp)
 80412a0:	10c00e04 	addi	r3,r2,56
 80412a4:	e0bff817 	ldw	r2,-32(fp)
 80412a8:	1885883a 	add	r2,r3,r2
 80412ac:	e1bff617 	ldw	r6,-40(fp)
 80412b0:	100b883a 	mov	r5,r2
 80412b4:	e13ff517 	ldw	r4,-44(fp)
 80412b8:	8042e780 	call	8042e78 <memcpy>
      ptr   += n;
 80412bc:	e0fff517 	ldw	r3,-44(fp)
 80412c0:	e0bff617 	ldw	r2,-40(fp)
 80412c4:	1885883a 	add	r2,r3,r2
 80412c8:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 80412cc:	e0fffe17 	ldw	r3,-8(fp)
 80412d0:	e0bff617 	ldw	r2,-40(fp)
 80412d4:	1885c83a 	sub	r2,r3,r2
 80412d8:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 80412dc:	e0fff817 	ldw	r3,-32(fp)
 80412e0:	e0bff617 	ldw	r2,-40(fp)
 80412e4:	1885883a 	add	r2,r3,r2
 80412e8:	10c1ffcc 	andi	r3,r2,2047
 80412ec:	e0bffc17 	ldw	r2,-16(fp)
 80412f0:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 80412f4:	e0bffe17 	ldw	r2,-8(fp)
 80412f8:	00bfcf16 	blt	zero,r2,8041238 <__alt_data_end+0xf8041238>
 80412fc:	00000106 	br	8041304 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 8041300:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 8041304:	e0fff517 	ldw	r3,-44(fp)
 8041308:	e0bffd17 	ldw	r2,-12(fp)
 804130c:	1880141e 	bne	r3,r2,8041360 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 8041310:	e0bfff17 	ldw	r2,-4(fp)
 8041314:	1090000c 	andi	r2,r2,16384
 8041318:	1000131e 	bne	r2,zero,8041368 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 804131c:	0001883a 	nop
 8041320:	e0bffc17 	ldw	r2,-16(fp)
 8041324:	10c00a17 	ldw	r3,40(r2)
 8041328:	e0bff717 	ldw	r2,-36(fp)
 804132c:	1880051e 	bne	r3,r2,8041344 <altera_avalon_jtag_uart_read+0x138>
 8041330:	e0bffc17 	ldw	r2,-16(fp)
 8041334:	10c00917 	ldw	r3,36(r2)
 8041338:	e0bffc17 	ldw	r2,-16(fp)
 804133c:	10800117 	ldw	r2,4(r2)
 8041340:	18bff736 	bltu	r3,r2,8041320 <__alt_data_end+0xf8041320>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 8041344:	e0bffc17 	ldw	r2,-16(fp)
 8041348:	10c00a17 	ldw	r3,40(r2)
 804134c:	e0bff717 	ldw	r2,-36(fp)
 8041350:	18800726 	beq	r3,r2,8041370 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 8041354:	e0bffe17 	ldw	r2,-8(fp)
 8041358:	00bfb716 	blt	zero,r2,8041238 <__alt_data_end+0xf8041238>
 804135c:	00000506 	br	8041374 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 8041360:	0001883a 	nop
 8041364:	00000306 	br	8041374 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 8041368:	0001883a 	nop
 804136c:	00000106 	br	8041374 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 8041370:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 8041374:	e0fff517 	ldw	r3,-44(fp)
 8041378:	e0bffd17 	ldw	r2,-12(fp)
 804137c:	18801826 	beq	r3,r2,80413e0 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8041380:	0005303a 	rdctl	r2,status
 8041384:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8041388:	e0fffb17 	ldw	r3,-20(fp)
 804138c:	00bfff84 	movi	r2,-2
 8041390:	1884703a 	and	r2,r3,r2
 8041394:	1001703a 	wrctl	status,r2
  
  return context;
 8041398:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 804139c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 80413a0:	e0bffc17 	ldw	r2,-16(fp)
 80413a4:	10800817 	ldw	r2,32(r2)
 80413a8:	10c00054 	ori	r3,r2,1
 80413ac:	e0bffc17 	ldw	r2,-16(fp)
 80413b0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 80413b4:	e0bffc17 	ldw	r2,-16(fp)
 80413b8:	10800017 	ldw	r2,0(r2)
 80413bc:	10800104 	addi	r2,r2,4
 80413c0:	1007883a 	mov	r3,r2
 80413c4:	e0bffc17 	ldw	r2,-16(fp)
 80413c8:	10800817 	ldw	r2,32(r2)
 80413cc:	18800035 	stwio	r2,0(r3)
 80413d0:	e0bffa17 	ldw	r2,-24(fp)
 80413d4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80413d8:	e0bff917 	ldw	r2,-28(fp)
 80413dc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 80413e0:	e0fff517 	ldw	r3,-44(fp)
 80413e4:	e0bffd17 	ldw	r2,-12(fp)
 80413e8:	18800426 	beq	r3,r2,80413fc <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 80413ec:	e0fff517 	ldw	r3,-44(fp)
 80413f0:	e0bffd17 	ldw	r2,-12(fp)
 80413f4:	1885c83a 	sub	r2,r3,r2
 80413f8:	00000606 	br	8041414 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 80413fc:	e0bfff17 	ldw	r2,-4(fp)
 8041400:	1090000c 	andi	r2,r2,16384
 8041404:	10000226 	beq	r2,zero,8041410 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 8041408:	00bffd44 	movi	r2,-11
 804140c:	00000106 	br	8041414 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 8041410:	00bffec4 	movi	r2,-5
}
 8041414:	e037883a 	mov	sp,fp
 8041418:	dfc00117 	ldw	ra,4(sp)
 804141c:	df000017 	ldw	fp,0(sp)
 8041420:	dec00204 	addi	sp,sp,8
 8041424:	f800283a 	ret

08041428 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 8041428:	defff304 	addi	sp,sp,-52
 804142c:	dfc00c15 	stw	ra,48(sp)
 8041430:	df000b15 	stw	fp,44(sp)
 8041434:	df000b04 	addi	fp,sp,44
 8041438:	e13ffc15 	stw	r4,-16(fp)
 804143c:	e17ffd15 	stw	r5,-12(fp)
 8041440:	e1bffe15 	stw	r6,-8(fp)
 8041444:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 8041448:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 804144c:	e0bffd17 	ldw	r2,-12(fp)
 8041450:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 8041454:	00003706 	br	8041534 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 8041458:	e0bffc17 	ldw	r2,-16(fp)
 804145c:	10800c17 	ldw	r2,48(r2)
 8041460:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 8041464:	e0bffc17 	ldw	r2,-16(fp)
 8041468:	10800d17 	ldw	r2,52(r2)
 804146c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 8041470:	e0fff917 	ldw	r3,-28(fp)
 8041474:	e0bff517 	ldw	r2,-44(fp)
 8041478:	1880062e 	bgeu	r3,r2,8041494 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 804147c:	e0fff517 	ldw	r3,-44(fp)
 8041480:	e0bff917 	ldw	r2,-28(fp)
 8041484:	1885c83a 	sub	r2,r3,r2
 8041488:	10bfffc4 	addi	r2,r2,-1
 804148c:	e0bff615 	stw	r2,-40(fp)
 8041490:	00000b06 	br	80414c0 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 8041494:	e0bff517 	ldw	r2,-44(fp)
 8041498:	10000526 	beq	r2,zero,80414b0 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 804149c:	00c20004 	movi	r3,2048
 80414a0:	e0bff917 	ldw	r2,-28(fp)
 80414a4:	1885c83a 	sub	r2,r3,r2
 80414a8:	e0bff615 	stw	r2,-40(fp)
 80414ac:	00000406 	br	80414c0 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 80414b0:	00c1ffc4 	movi	r3,2047
 80414b4:	e0bff917 	ldw	r2,-28(fp)
 80414b8:	1885c83a 	sub	r2,r3,r2
 80414bc:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 80414c0:	e0bff617 	ldw	r2,-40(fp)
 80414c4:	10001e26 	beq	r2,zero,8041540 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 80414c8:	e0fffe17 	ldw	r3,-8(fp)
 80414cc:	e0bff617 	ldw	r2,-40(fp)
 80414d0:	1880022e 	bgeu	r3,r2,80414dc <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 80414d4:	e0bffe17 	ldw	r2,-8(fp)
 80414d8:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 80414dc:	e0bffc17 	ldw	r2,-16(fp)
 80414e0:	10c20e04 	addi	r3,r2,2104
 80414e4:	e0bff917 	ldw	r2,-28(fp)
 80414e8:	1885883a 	add	r2,r3,r2
 80414ec:	e1bff617 	ldw	r6,-40(fp)
 80414f0:	e17ffd17 	ldw	r5,-12(fp)
 80414f4:	1009883a 	mov	r4,r2
 80414f8:	8042e780 	call	8042e78 <memcpy>
      ptr   += n;
 80414fc:	e0fffd17 	ldw	r3,-12(fp)
 8041500:	e0bff617 	ldw	r2,-40(fp)
 8041504:	1885883a 	add	r2,r3,r2
 8041508:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 804150c:	e0fffe17 	ldw	r3,-8(fp)
 8041510:	e0bff617 	ldw	r2,-40(fp)
 8041514:	1885c83a 	sub	r2,r3,r2
 8041518:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 804151c:	e0fff917 	ldw	r3,-28(fp)
 8041520:	e0bff617 	ldw	r2,-40(fp)
 8041524:	1885883a 	add	r2,r3,r2
 8041528:	10c1ffcc 	andi	r3,r2,2047
 804152c:	e0bffc17 	ldw	r2,-16(fp)
 8041530:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 8041534:	e0bffe17 	ldw	r2,-8(fp)
 8041538:	00bfc716 	blt	zero,r2,8041458 <__alt_data_end+0xf8041458>
 804153c:	00000106 	br	8041544 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 8041540:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8041544:	0005303a 	rdctl	r2,status
 8041548:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 804154c:	e0fffb17 	ldw	r3,-20(fp)
 8041550:	00bfff84 	movi	r2,-2
 8041554:	1884703a 	and	r2,r3,r2
 8041558:	1001703a 	wrctl	status,r2
  
  return context;
 804155c:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 8041560:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8041564:	e0bffc17 	ldw	r2,-16(fp)
 8041568:	10800817 	ldw	r2,32(r2)
 804156c:	10c00094 	ori	r3,r2,2
 8041570:	e0bffc17 	ldw	r2,-16(fp)
 8041574:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8041578:	e0bffc17 	ldw	r2,-16(fp)
 804157c:	10800017 	ldw	r2,0(r2)
 8041580:	10800104 	addi	r2,r2,4
 8041584:	1007883a 	mov	r3,r2
 8041588:	e0bffc17 	ldw	r2,-16(fp)
 804158c:	10800817 	ldw	r2,32(r2)
 8041590:	18800035 	stwio	r2,0(r3)
 8041594:	e0bffa17 	ldw	r2,-24(fp)
 8041598:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 804159c:	e0bff817 	ldw	r2,-32(fp)
 80415a0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 80415a4:	e0bffe17 	ldw	r2,-8(fp)
 80415a8:	0080100e 	bge	zero,r2,80415ec <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 80415ac:	e0bfff17 	ldw	r2,-4(fp)
 80415b0:	1090000c 	andi	r2,r2,16384
 80415b4:	1000101e 	bne	r2,zero,80415f8 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 80415b8:	0001883a 	nop
 80415bc:	e0bffc17 	ldw	r2,-16(fp)
 80415c0:	10c00d17 	ldw	r3,52(r2)
 80415c4:	e0bff517 	ldw	r2,-44(fp)
 80415c8:	1880051e 	bne	r3,r2,80415e0 <altera_avalon_jtag_uart_write+0x1b8>
 80415cc:	e0bffc17 	ldw	r2,-16(fp)
 80415d0:	10c00917 	ldw	r3,36(r2)
 80415d4:	e0bffc17 	ldw	r2,-16(fp)
 80415d8:	10800117 	ldw	r2,4(r2)
 80415dc:	18bff736 	bltu	r3,r2,80415bc <__alt_data_end+0xf80415bc>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 80415e0:	e0bffc17 	ldw	r2,-16(fp)
 80415e4:	10800917 	ldw	r2,36(r2)
 80415e8:	1000051e 	bne	r2,zero,8041600 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 80415ec:	e0bffe17 	ldw	r2,-8(fp)
 80415f0:	00bfd016 	blt	zero,r2,8041534 <__alt_data_end+0xf8041534>
 80415f4:	00000306 	br	8041604 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 80415f8:	0001883a 	nop
 80415fc:	00000106 	br	8041604 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 8041600:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 8041604:	e0fffd17 	ldw	r3,-12(fp)
 8041608:	e0bff717 	ldw	r2,-36(fp)
 804160c:	18800426 	beq	r3,r2,8041620 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 8041610:	e0fffd17 	ldw	r3,-12(fp)
 8041614:	e0bff717 	ldw	r2,-36(fp)
 8041618:	1885c83a 	sub	r2,r3,r2
 804161c:	00000606 	br	8041638 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 8041620:	e0bfff17 	ldw	r2,-4(fp)
 8041624:	1090000c 	andi	r2,r2,16384
 8041628:	10000226 	beq	r2,zero,8041634 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 804162c:	00bffd44 	movi	r2,-11
 8041630:	00000106 	br	8041638 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 8041634:	00bffec4 	movi	r2,-5
}
 8041638:	e037883a 	mov	sp,fp
 804163c:	dfc00117 	ldw	ra,4(sp)
 8041640:	df000017 	ldw	fp,0(sp)
 8041644:	dec00204 	addi	sp,sp,8
 8041648:	f800283a 	ret

0804164c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 804164c:	defffa04 	addi	sp,sp,-24
 8041650:	dfc00515 	stw	ra,20(sp)
 8041654:	df000415 	stw	fp,16(sp)
 8041658:	df000404 	addi	fp,sp,16
 804165c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 8041660:	0007883a 	mov	r3,zero
 8041664:	e0bfff17 	ldw	r2,-4(fp)
 8041668:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 804166c:	e0bfff17 	ldw	r2,-4(fp)
 8041670:	10800104 	addi	r2,r2,4
 8041674:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8041678:	0005303a 	rdctl	r2,status
 804167c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8041680:	e0fffd17 	ldw	r3,-12(fp)
 8041684:	00bfff84 	movi	r2,-2
 8041688:	1884703a 	and	r2,r3,r2
 804168c:	1001703a 	wrctl	status,r2
  
  return context;
 8041690:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 8041694:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 8041698:	804298c0 	call	804298c <alt_tick>
 804169c:	e0bffc17 	ldw	r2,-16(fp)
 80416a0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80416a4:	e0bffe17 	ldw	r2,-8(fp)
 80416a8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 80416ac:	0001883a 	nop
 80416b0:	e037883a 	mov	sp,fp
 80416b4:	dfc00117 	ldw	ra,4(sp)
 80416b8:	df000017 	ldw	fp,0(sp)
 80416bc:	dec00204 	addi	sp,sp,8
 80416c0:	f800283a 	ret

080416c4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 80416c4:	defff804 	addi	sp,sp,-32
 80416c8:	dfc00715 	stw	ra,28(sp)
 80416cc:	df000615 	stw	fp,24(sp)
 80416d0:	df000604 	addi	fp,sp,24
 80416d4:	e13ffc15 	stw	r4,-16(fp)
 80416d8:	e17ffd15 	stw	r5,-12(fp)
 80416dc:	e1bffe15 	stw	r6,-8(fp)
 80416e0:	e1ffff15 	stw	r7,-4(fp)
 80416e4:	e0bfff17 	ldw	r2,-4(fp)
 80416e8:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 80416ec:	d0a5d317 	ldw	r2,-26804(gp)
 80416f0:	1000021e 	bne	r2,zero,80416fc <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 80416f4:	e0bffb17 	ldw	r2,-20(fp)
 80416f8:	d0a5d315 	stw	r2,-26804(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 80416fc:	e0bffc17 	ldw	r2,-16(fp)
 8041700:	10800104 	addi	r2,r2,4
 8041704:	00c001c4 	movi	r3,7
 8041708:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 804170c:	d8000015 	stw	zero,0(sp)
 8041710:	e1fffc17 	ldw	r7,-16(fp)
 8041714:	01820134 	movhi	r6,2052
 8041718:	31859304 	addi	r6,r6,5708
 804171c:	e17ffe17 	ldw	r5,-8(fp)
 8041720:	e13ffd17 	ldw	r4,-12(fp)
 8041724:	80421e80 	call	80421e8 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 8041728:	0001883a 	nop
 804172c:	e037883a 	mov	sp,fp
 8041730:	dfc00117 	ldw	ra,4(sp)
 8041734:	df000017 	ldw	fp,0(sp)
 8041738:	dec00204 	addi	sp,sp,8
 804173c:	f800283a 	ret

08041740 <alt_hostfs_open>:
* alt_hostfs_open
*
* If we can't find anything return -1
*/
int alt_hostfs_open(alt_fd* fd, const char * name, int flags, int mode)
{
 8041740:	defff404 	addi	sp,sp,-48
 8041744:	df000b15 	stw	fp,44(sp)
 8041748:	df000b04 	addi	fp,sp,44
 804174c:	e13ffc15 	stw	r4,-16(fp)
 8041750:	e17ffd15 	stw	r5,-12(fp)
 8041754:	e1bffe15 	stw	r6,-8(fp)
 8041758:	e1ffff15 	stw	r7,-4(fp)
  static const struct HOSTCALL_INFO hcinfo = { 0x0103, "open" };

  alt_hostfs_dev* dev= (alt_hostfs_dev*)fd->dev;
 804175c:	e0bffc17 	ldw	r2,-16(fp)
 8041760:	10800017 	ldw	r2,0(r2)
 8041764:	e0bff515 	stw	r2,-44(fp)
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
 8041768:	e0bff517 	ldw	r2,-44(fp)
 804176c:	10800217 	ldw	r2,8(r2)
 8041770:	e0bff615 	stw	r2,-40(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
 8041774:	e0bff617 	ldw	r2,-40(fp)
 8041778:	10bfffc4 	addi	r2,r2,-1
 804177c:	e0bffb15 	stw	r2,-20(fp)

  while (*++ptr != 0)
 8041780:	e0bffb17 	ldw	r2,-20(fp)
 8041784:	10800044 	addi	r2,r2,1
 8041788:	e0bffb15 	stw	r2,-20(fp)
 804178c:	e0bffb17 	ldw	r2,-20(fp)
 8041790:	10800003 	ldbu	r2,0(r2)
 8041794:	10803fcc 	andi	r2,r2,255
 8041798:	1080201c 	xori	r2,r2,128
 804179c:	10bfe004 	addi	r2,r2,-128
 80417a0:	103ff71e 	bne	r2,zero,8041780 <__alt_data_end+0xf8041780>
    ;

  return ptr - string;
 80417a4:	e0fffb17 	ldw	r3,-20(fp)
 80417a8:	e0bff617 	ldw	r2,-40(fp)
 80417ac:	1885c83a 	sub	r2,r3,r2
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
 80417b0:	10800044 	addi	r2,r2,1
 80417b4:	1007883a 	mov	r3,r2
 80417b8:	e0bffd17 	ldw	r2,-12(fp)
 80417bc:	10c5883a 	add	r2,r2,r3
 80417c0:	e0bffd15 	stw	r2,-12(fp)

  r3 = (int)&hcinfo;
 80417c4:	d0a00004 	addi	r2,gp,-32768
 80417c8:	1007883a 	mov	r3,r2
  r4 = (int)name;
 80417cc:	e0bffd17 	ldw	r2,-12(fp)
 80417d0:	1009883a 	mov	r4,r2
  r5 = flags;
 80417d4:	e17ffe17 	ldw	r5,-8(fp)
  r6 = mode;
 80417d8:	e1bfff17 	ldw	r6,-4(fp)
 80417dc:	e0bffd17 	ldw	r2,-12(fp)
 80417e0:	e0bff915 	stw	r2,-28(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
 80417e4:	e0bff917 	ldw	r2,-28(fp)
 80417e8:	10bfffc4 	addi	r2,r2,-1
 80417ec:	e0bffa15 	stw	r2,-24(fp)

  while (*++ptr != 0)
 80417f0:	e0bffa17 	ldw	r2,-24(fp)
 80417f4:	10800044 	addi	r2,r2,1
 80417f8:	e0bffa15 	stw	r2,-24(fp)
 80417fc:	e0bffa17 	ldw	r2,-24(fp)
 8041800:	10800003 	ldbu	r2,0(r2)
 8041804:	10803fcc 	andi	r2,r2,255
 8041808:	1080201c 	xori	r2,r2,128
 804180c:	10bfe004 	addi	r2,r2,-128
 8041810:	103ff71e 	bne	r2,zero,80417f0 <__alt_data_end+0xf80417f0>
    ;

  return ptr - string;
 8041814:	e1fffa17 	ldw	r7,-24(fp)
 8041818:	e0bff917 	ldw	r2,-28(fp)
 804181c:	3885c83a 	sub	r2,r7,r2

  r3 = (int)&hcinfo;
  r4 = (int)name;
  r5 = flags;
  r6 = mode;
  r7 = inline_strlen(name);
 8041820:	100f883a 	mov	r7,r2

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6), "r" (r7) : "memory" );
 8041824:	003da07a 	break	1

  handle = (void *)r2;
 8041828:	e0bff715 	stw	r2,-36(fp)
  error = r3;
 804182c:	e0fff815 	stw	r3,-32(fp)

  if (error == 0)
 8041830:	e0bff817 	ldw	r2,-32(fp)
 8041834:	1000031e 	bne	r2,zero,8041844 <alt_hostfs_open+0x104>
    fd->priv = handle;
 8041838:	e0bffc17 	ldw	r2,-16(fp)
 804183c:	e0fff717 	ldw	r3,-36(fp)
 8041840:	10c00115 	stw	r3,4(r2)

  return -error;
 8041844:	e0bff817 	ldw	r2,-32(fp)
 8041848:	0085c83a 	sub	r2,zero,r2
}
 804184c:	e037883a 	mov	sp,fp
 8041850:	df000017 	ldw	fp,0(sp)
 8041854:	dec00104 	addi	sp,sp,4
 8041858:	f800283a 	ret

0804185c <alt_hostfs_close>:
* alt_hostfs_close
*
* Read the file
*/
int alt_hostfs_close(alt_fd* fd)
{
 804185c:	defffd04 	addi	sp,sp,-12
 8041860:	df000215 	stw	fp,8(sp)
 8041864:	df000204 	addi	fp,sp,8
 8041868:	e13fff15 	stw	r4,-4(fp)

  /* Input and output parameters for the hostcall */
  register int r3 asm ("r3");
  register int r4 asm ("r4");

  r3 = (int)&hcinfo;
 804186c:	d0a00304 	addi	r2,gp,-32756
 8041870:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
 8041874:	e0bfff17 	ldw	r2,-4(fp)
 8041878:	10800117 	ldw	r2,4(r2)
 804187c:	1009883a 	mov	r4,r2

  __asm__ volatile("break 1" : "+r" (r3) : "r" (r4) );
 8041880:	003da07a 	break	1

  error = r3;
 8041884:	e0fffe15 	stw	r3,-8(fp)

  return -error;
 8041888:	e0bffe17 	ldw	r2,-8(fp)
 804188c:	0085c83a 	sub	r2,zero,r2
}
 8041890:	e037883a 	mov	sp,fp
 8041894:	df000017 	ldw	fp,0(sp)
 8041898:	dec00104 	addi	sp,sp,4
 804189c:	f800283a 	ret

080418a0 <alt_hostfs_read>:
* alt_hostfs_read
*
* Read the file
*/
int alt_hostfs_read(alt_fd* fd, char * ptr, int len)
{
 80418a0:	defffa04 	addi	sp,sp,-24
 80418a4:	df000515 	stw	fp,20(sp)
 80418a8:	df000504 	addi	fp,sp,20
 80418ac:	e13ffd15 	stw	r4,-12(fp)
 80418b0:	e17ffe15 	stw	r5,-8(fp)
 80418b4:	e1bfff15 	stw	r6,-4(fp)
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");


  r3 = (int)&hcinfo;
 80418b8:	d0a00604 	addi	r2,gp,-32744
 80418bc:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
 80418c0:	e0bffd17 	ldw	r2,-12(fp)
 80418c4:	10800117 	ldw	r2,4(r2)
 80418c8:	1009883a 	mov	r4,r2
  r5 = (int)ptr;
 80418cc:	e0bffe17 	ldw	r2,-8(fp)
 80418d0:	100b883a 	mov	r5,r2
  r6 = len;
 80418d4:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
 80418d8:	003da07a 	break	1

  rc = r2;
 80418dc:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
 80418e0:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
 80418e4:	e0bffc17 	ldw	r2,-16(fp)
 80418e8:	10000326 	beq	r2,zero,80418f8 <alt_hostfs_read+0x58>
 80418ec:	e0bffc17 	ldw	r2,-16(fp)
 80418f0:	0085c83a 	sub	r2,zero,r2
 80418f4:	00000106 	br	80418fc <alt_hostfs_read+0x5c>
 80418f8:	e0bffb17 	ldw	r2,-20(fp)
}
 80418fc:	e037883a 	mov	sp,fp
 8041900:	df000017 	ldw	fp,0(sp)
 8041904:	dec00104 	addi	sp,sp,4
 8041908:	f800283a 	ret

0804190c <alt_hostfs_write>:
* alt_hostfs_write
*
* Read the file
*/
int alt_hostfs_write(alt_fd* fd, const char * ptr, int len)
{
 804190c:	defffa04 	addi	sp,sp,-24
 8041910:	df000515 	stw	fp,20(sp)
 8041914:	df000504 	addi	fp,sp,20
 8041918:	e13ffd15 	stw	r4,-12(fp)
 804191c:	e17ffe15 	stw	r5,-8(fp)
 8041920:	e1bfff15 	stw	r6,-4(fp)
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");

  r3 = (int)&hcinfo;
 8041924:	d0a00904 	addi	r2,gp,-32732
 8041928:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
 804192c:	e0bffd17 	ldw	r2,-12(fp)
 8041930:	10800117 	ldw	r2,4(r2)
 8041934:	1009883a 	mov	r4,r2
  r5 = (int)ptr;
 8041938:	e0bffe17 	ldw	r2,-8(fp)
 804193c:	100b883a 	mov	r5,r2
  r6 = len;
 8041940:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
 8041944:	003da07a 	break	1

  rc = r2;
 8041948:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
 804194c:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
 8041950:	e0bffc17 	ldw	r2,-16(fp)
 8041954:	10000326 	beq	r2,zero,8041964 <alt_hostfs_write+0x58>
 8041958:	e0bffc17 	ldw	r2,-16(fp)
 804195c:	0085c83a 	sub	r2,zero,r2
 8041960:	00000106 	br	8041968 <alt_hostfs_write+0x5c>
 8041964:	e0bffb17 	ldw	r2,-20(fp)
}
 8041968:	e037883a 	mov	sp,fp
 804196c:	df000017 	ldw	fp,0(sp)
 8041970:	dec00104 	addi	sp,sp,4
 8041974:	f800283a 	ret

08041978 <alt_hostfs_seek>:
* Move around within a file
*
* returns -errno for an error or the offset within the file
*/
int alt_hostfs_seek(alt_fd* fd, int ptr, int dir)
{
 8041978:	defffa04 	addi	sp,sp,-24
 804197c:	df000515 	stw	fp,20(sp)
 8041980:	df000504 	addi	fp,sp,20
 8041984:	e13ffd15 	stw	r4,-12(fp)
 8041988:	e17ffe15 	stw	r5,-8(fp)
 804198c:	e1bfff15 	stw	r6,-4(fp)
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");

  r3 = (int)&hcinfo;
 8041990:	d0a00c04 	addi	r2,gp,-32720
 8041994:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
 8041998:	e0bffd17 	ldw	r2,-12(fp)
 804199c:	10800117 	ldw	r2,4(r2)
 80419a0:	1009883a 	mov	r4,r2
  r5 = ptr;
 80419a4:	e17ffe17 	ldw	r5,-8(fp)
  r6 = dir;
 80419a8:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
 80419ac:	003da07a 	break	1

  rc = r2;
 80419b0:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
 80419b4:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
 80419b8:	e0bffc17 	ldw	r2,-16(fp)
 80419bc:	10000326 	beq	r2,zero,80419cc <alt_hostfs_seek+0x54>
 80419c0:	e0bffc17 	ldw	r2,-16(fp)
 80419c4:	0085c83a 	sub	r2,zero,r2
 80419c8:	00000106 	br	80419d0 <alt_hostfs_seek+0x58>
 80419cc:	e0bffb17 	ldw	r2,-20(fp)
}
 80419d0:	e037883a 	mov	sp,fp
 80419d4:	df000017 	ldw	fp,0(sp)
 80419d8:	dec00104 	addi	sp,sp,4
 80419dc:	f800283a 	ret

080419e0 <alt_hostfs_fstat>:
* at the lower address.
* We need to copy the structure and byte swap it to make it match our local
* layout of struct stat.
*/
int alt_hostfs_fstat(alt_fd* fd, struct stat* st)
{
 80419e0:	deffe904 	addi	sp,sp,-92
 80419e4:	df001615 	stw	fp,88(sp)
 80419e8:	df001604 	addi	fp,sp,88
 80419ec:	e13ffe15 	stw	r4,-8(fp)
 80419f0:	e17fff15 	stw	r5,-4(fp)
  register int r2 asm ("r2");
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");

  r3 = (int)&hcinfo;
 80419f4:	d0a00f04 	addi	r2,gp,-32708
 80419f8:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
 80419fc:	e0bffe17 	ldw	r2,-8(fp)
 8041a00:	10800117 	ldw	r2,4(r2)
 8041a04:	1009883a 	mov	r4,r2
  r5 = (int)&hoststat;
 8041a08:	e0bfee04 	addi	r2,fp,-72
 8041a0c:	100b883a 	mov	r5,r2

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5) : "memory" );
 8041a10:	003da07a 	break	1

  rc = r2;
 8041a14:	e0bfeb15 	stw	r2,-84(fp)
  error = r3;
 8041a18:	e0ffec15 	stw	r3,-80(fp)

  if (error == 0)
 8041a1c:	e0bfec17 	ldw	r2,-80(fp)
 8041a20:	1000621e 	bne	r2,zero,8041bac <alt_hostfs_fstat+0x1cc>
     * no change is required.  On a little-endian processor we need to swap
     * the bytes in each word.
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
 8041a24:	e0bfee04 	addi	r2,fp,-72
 8041a28:	e0bfea15 	stw	r2,-88(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
 8041a2c:	e0bfea17 	ldw	r2,-88(fp)
 8041a30:	10801004 	addi	r2,r2,64
 8041a34:	e0bfed15 	stw	r2,-76(fp)
    for ( ; ptr < end ; ptr++)
 8041a38:	00001606 	br	8041a94 <alt_hostfs_fstat+0xb4>
      *ptr = ((*ptr & 0xFF000000) >> 24) |
 8041a3c:	e0bfea17 	ldw	r2,-88(fp)
 8041a40:	10800017 	ldw	r2,0(r2)
 8041a44:	1006d63a 	srli	r3,r2,24
             ((*ptr & 0x00FF0000) >> 8)  |
 8041a48:	e0bfea17 	ldw	r2,-88(fp)
 8041a4c:	10800017 	ldw	r2,0(r2)
 8041a50:	10803fec 	andhi	r2,r2,255
 8041a54:	1004d23a 	srli	r2,r2,8

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
 8041a58:	1886b03a 	or	r3,r3,r2
             ((*ptr & 0x00FF0000) >> 8)  |
             ((*ptr & 0x0000FF00) << 8)  |
 8041a5c:	e0bfea17 	ldw	r2,-88(fp)
 8041a60:	10800017 	ldw	r2,0(r2)
 8041a64:	10bfc00c 	andi	r2,r2,65280
 8041a68:	1004923a 	slli	r2,r2,8
#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
             ((*ptr & 0x00FF0000) >> 8)  |
 8041a6c:	1886b03a 	or	r3,r3,r2
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
 8041a70:	e0bfea17 	ldw	r2,-88(fp)
 8041a74:	10800017 	ldw	r2,0(r2)
 8041a78:	1004963a 	slli	r2,r2,24
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
             ((*ptr & 0x00FF0000) >> 8)  |
             ((*ptr & 0x0000FF00) << 8)  |
 8041a7c:	1886b03a 	or	r3,r3,r2

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
 8041a80:	e0bfea17 	ldw	r2,-88(fp)
 8041a84:	10c00015 	stw	r3,0(r2)
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
 8041a88:	e0bfea17 	ldw	r2,-88(fp)
 8041a8c:	10800104 	addi	r2,r2,4
 8041a90:	e0bfea15 	stw	r2,-88(fp)
 8041a94:	e0ffea17 	ldw	r3,-88(fp)
 8041a98:	e0bfed17 	ldw	r2,-76(fp)
 8041a9c:	18bfe736 	bltu	r3,r2,8041a3c <__alt_data_end+0xf8041a3c>
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
 8041aa0:	e0bfff17 	ldw	r2,-4(fp)
 8041aa4:	e0bfea15 	stw	r2,-88(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
 8041aa8:	e0bfea17 	ldw	r2,-88(fp)
 8041aac:	10800f04 	addi	r2,r2,60
 8041ab0:	e0bfed15 	stw	r2,-76(fp)
    for ( ; ptr < end ; ptr++)
 8041ab4:	00000506 	br	8041acc <alt_hostfs_fstat+0xec>
      *ptr = 0;
 8041ab8:	e0bfea17 	ldw	r2,-88(fp)
 8041abc:	10000015 	stw	zero,0(r2)
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
    for ( ; ptr < end ; ptr++)
 8041ac0:	e0bfea17 	ldw	r2,-88(fp)
 8041ac4:	10800104 	addi	r2,r2,4
 8041ac8:	e0bfea15 	stw	r2,-88(fp)
 8041acc:	e0ffea17 	ldw	r3,-88(fp)
 8041ad0:	e0bfed17 	ldw	r2,-76(fp)
 8041ad4:	18bff836 	bltu	r3,r2,8041ab8 <__alt_data_end+0xf8041ab8>

    /* Copy the data provided by the host into our local copy, for data which
     * is provided as 64bit values by the host we just use the least
     * significant word.
     */
    st->st_dev     = hoststat.fst_dev;
 8041ad8:	e0bfee17 	ldw	r2,-72(fp)
 8041adc:	1007883a 	mov	r3,r2
 8041ae0:	e0bfff17 	ldw	r2,-4(fp)
 8041ae4:	10c0000d 	sth	r3,0(r2)
    st->st_ino     = hoststat.fst_ino;
 8041ae8:	e0bfef17 	ldw	r2,-68(fp)
 8041aec:	1007883a 	mov	r3,r2
 8041af0:	e0bfff17 	ldw	r2,-4(fp)
 8041af4:	10c0008d 	sth	r3,2(r2)
    st->st_mode    = hoststat.fst_mode;
 8041af8:	e0fff017 	ldw	r3,-64(fp)
 8041afc:	e0bfff17 	ldw	r2,-4(fp)
 8041b00:	10c00115 	stw	r3,4(r2)
    st->st_nlink   = hoststat.fst_nlink;
 8041b04:	e0bff117 	ldw	r2,-60(fp)
 8041b08:	1007883a 	mov	r3,r2
 8041b0c:	e0bfff17 	ldw	r2,-4(fp)
 8041b10:	10c0020d 	sth	r3,8(r2)
    st->st_uid     = hoststat.fst_uid;
 8041b14:	e0bff217 	ldw	r2,-56(fp)
 8041b18:	1007883a 	mov	r3,r2
 8041b1c:	e0bfff17 	ldw	r2,-4(fp)
 8041b20:	10c0028d 	sth	r3,10(r2)
    st->st_gid     = hoststat.fst_gid;
 8041b24:	e0bff317 	ldw	r2,-52(fp)
 8041b28:	1007883a 	mov	r3,r2
 8041b2c:	e0bfff17 	ldw	r2,-4(fp)
 8041b30:	10c0030d 	sth	r3,12(r2)
    st->st_rdev    = hoststat.fst_rdev;
 8041b34:	e0bff417 	ldw	r2,-48(fp)
 8041b38:	1007883a 	mov	r3,r2
 8041b3c:	e0bfff17 	ldw	r2,-4(fp)
 8041b40:	10c0038d 	sth	r3,14(r2)
    st->st_size    = hoststat.fst_size[1];
 8041b44:	e0bff617 	ldw	r2,-40(fp)
 8041b48:	1007883a 	mov	r3,r2
 8041b4c:	e0bfff17 	ldw	r2,-4(fp)
 8041b50:	10c00415 	stw	r3,16(r2)

    st->st_atime   = hoststat.fst_atime;
 8041b54:	e0bffb17 	ldw	r2,-20(fp)
 8041b58:	1007883a 	mov	r3,r2
 8041b5c:	e0bfff17 	ldw	r2,-4(fp)
 8041b60:	10c00515 	stw	r3,20(r2)
    st->st_mtime   = hoststat.fst_mtime;
 8041b64:	e0bffc17 	ldw	r2,-16(fp)
 8041b68:	1007883a 	mov	r3,r2
 8041b6c:	e0bfff17 	ldw	r2,-4(fp)
 8041b70:	10c00715 	stw	r3,28(r2)
    st->st_ctime   = hoststat.fst_ctime;
 8041b74:	e0bffd17 	ldw	r2,-12(fp)
 8041b78:	1007883a 	mov	r3,r2
 8041b7c:	e0bfff17 	ldw	r2,-4(fp)
 8041b80:	10c00915 	stw	r3,36(r2)

    st->st_blksize = hoststat.fst_blksize[1];
 8041b84:	e0bff817 	ldw	r2,-32(fp)
 8041b88:	1007883a 	mov	r3,r2
 8041b8c:	e0bfff17 	ldw	r2,-4(fp)
 8041b90:	10c00b15 	stw	r3,44(r2)
    st->st_blocks  = hoststat.fst_blocks[1];
 8041b94:	e0bffa17 	ldw	r2,-24(fp)
 8041b98:	1007883a 	mov	r3,r2
 8041b9c:	e0bfff17 	ldw	r2,-4(fp)
 8041ba0:	10c00c15 	stw	r3,48(r2)

    return rc;
 8041ba4:	e0bfeb17 	ldw	r2,-84(fp)
 8041ba8:	00000206 	br	8041bb4 <alt_hostfs_fstat+0x1d4>
  }
  else
    return -error;
 8041bac:	e0bfec17 	ldw	r2,-80(fp)
 8041bb0:	0085c83a 	sub	r2,zero,r2
}
 8041bb4:	e037883a 	mov	sp,fp
 8041bb8:	df000017 	ldw	fp,0(sp)
 8041bbc:	dec00104 	addi	sp,sp,4
 8041bc0:	f800283a 	ret

08041bc4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 8041bc4:	defff504 	addi	sp,sp,-44
 8041bc8:	df000a15 	stw	fp,40(sp)
 8041bcc:	df000a04 	addi	fp,sp,40
 8041bd0:	e13ffc15 	stw	r4,-16(fp)
 8041bd4:	e17ffd15 	stw	r5,-12(fp)
 8041bd8:	e1bffe15 	stw	r6,-8(fp)
 8041bdc:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 8041be0:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8041be4:	d0a5d317 	ldw	r2,-26804(gp)
  
  if (alt_ticks_per_second ())
 8041be8:	10003c26 	beq	r2,zero,8041cdc <alt_alarm_start+0x118>
  {
    if (alarm)
 8041bec:	e0bffc17 	ldw	r2,-16(fp)
 8041bf0:	10003826 	beq	r2,zero,8041cd4 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 8041bf4:	e0bffc17 	ldw	r2,-16(fp)
 8041bf8:	e0fffe17 	ldw	r3,-8(fp)
 8041bfc:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 8041c00:	e0bffc17 	ldw	r2,-16(fp)
 8041c04:	e0ffff17 	ldw	r3,-4(fp)
 8041c08:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8041c0c:	0005303a 	rdctl	r2,status
 8041c10:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8041c14:	e0fff917 	ldw	r3,-28(fp)
 8041c18:	00bfff84 	movi	r2,-2
 8041c1c:	1884703a 	and	r2,r3,r2
 8041c20:	1001703a 	wrctl	status,r2
  
  return context;
 8041c24:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 8041c28:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8041c2c:	d0a5d417 	ldw	r2,-26800(gp)
      
      current_nticks = alt_nticks();
 8041c30:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 8041c34:	e0fffd17 	ldw	r3,-12(fp)
 8041c38:	e0bff617 	ldw	r2,-40(fp)
 8041c3c:	1885883a 	add	r2,r3,r2
 8041c40:	10c00044 	addi	r3,r2,1
 8041c44:	e0bffc17 	ldw	r2,-16(fp)
 8041c48:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 8041c4c:	e0bffc17 	ldw	r2,-16(fp)
 8041c50:	10c00217 	ldw	r3,8(r2)
 8041c54:	e0bff617 	ldw	r2,-40(fp)
 8041c58:	1880042e 	bgeu	r3,r2,8041c6c <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 8041c5c:	e0bffc17 	ldw	r2,-16(fp)
 8041c60:	00c00044 	movi	r3,1
 8041c64:	10c00405 	stb	r3,16(r2)
 8041c68:	00000206 	br	8041c74 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 8041c6c:	e0bffc17 	ldw	r2,-16(fp)
 8041c70:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 8041c74:	e0bffc17 	ldw	r2,-16(fp)
 8041c78:	d0e01904 	addi	r3,gp,-32668
 8041c7c:	e0fffa15 	stw	r3,-24(fp)
 8041c80:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8041c84:	e0bffb17 	ldw	r2,-20(fp)
 8041c88:	e0fffa17 	ldw	r3,-24(fp)
 8041c8c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8041c90:	e0bffa17 	ldw	r2,-24(fp)
 8041c94:	10c00017 	ldw	r3,0(r2)
 8041c98:	e0bffb17 	ldw	r2,-20(fp)
 8041c9c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8041ca0:	e0bffa17 	ldw	r2,-24(fp)
 8041ca4:	10800017 	ldw	r2,0(r2)
 8041ca8:	e0fffb17 	ldw	r3,-20(fp)
 8041cac:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8041cb0:	e0bffa17 	ldw	r2,-24(fp)
 8041cb4:	e0fffb17 	ldw	r3,-20(fp)
 8041cb8:	10c00015 	stw	r3,0(r2)
 8041cbc:	e0bff817 	ldw	r2,-32(fp)
 8041cc0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8041cc4:	e0bff717 	ldw	r2,-36(fp)
 8041cc8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 8041ccc:	0005883a 	mov	r2,zero
 8041cd0:	00000306 	br	8041ce0 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 8041cd4:	00bffa84 	movi	r2,-22
 8041cd8:	00000106 	br	8041ce0 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 8041cdc:	00bfde84 	movi	r2,-134
  }
}
 8041ce0:	e037883a 	mov	sp,fp
 8041ce4:	df000017 	ldw	fp,0(sp)
 8041ce8:	dec00104 	addi	sp,sp,4
 8041cec:	f800283a 	ret

08041cf0 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 8041cf0:	defffa04 	addi	sp,sp,-24
 8041cf4:	dfc00515 	stw	ra,20(sp)
 8041cf8:	df000415 	stw	fp,16(sp)
 8041cfc:	df000404 	addi	fp,sp,16
 8041d00:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 8041d04:	00800244 	movi	r2,9
 8041d08:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 8041d0c:	014003f4 	movhi	r5,15
 8041d10:	29509004 	addi	r5,r5,16960
 8041d14:	e13ffd17 	ldw	r4,-12(fp)
 8041d18:	804340c0 	call	804340c <__mulsi3>
 8041d1c:	100b883a 	mov	r5,r2
 8041d20:	01011e34 	movhi	r4,1144
 8041d24:	211a3004 	addi	r4,r4,26816
 8041d28:	80433500 	call	8043350 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 8041d2c:	100b883a 	mov	r5,r2
 8041d30:	01200034 	movhi	r4,32768
 8041d34:	213fffc4 	addi	r4,r4,-1
 8041d38:	80433500 	call	8043350 <__udivsi3>
 8041d3c:	100b883a 	mov	r5,r2
 8041d40:	e13fff17 	ldw	r4,-4(fp)
 8041d44:	80433500 	call	8043350 <__udivsi3>
 8041d48:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 8041d4c:	e0bffe17 	ldw	r2,-8(fp)
 8041d50:	10002a26 	beq	r2,zero,8041dfc <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 8041d54:	e03ffc15 	stw	zero,-16(fp)
 8041d58:	00001706 	br	8041db8 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 8041d5c:	00a00034 	movhi	r2,32768
 8041d60:	10bfffc4 	addi	r2,r2,-1
 8041d64:	10bfffc4 	addi	r2,r2,-1
 8041d68:	103ffe1e 	bne	r2,zero,8041d64 <__alt_data_end+0xf8041d64>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 8041d6c:	014003f4 	movhi	r5,15
 8041d70:	29509004 	addi	r5,r5,16960
 8041d74:	e13ffd17 	ldw	r4,-12(fp)
 8041d78:	804340c0 	call	804340c <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 8041d7c:	100b883a 	mov	r5,r2
 8041d80:	01011e34 	movhi	r4,1144
 8041d84:	211a3004 	addi	r4,r4,26816
 8041d88:	80433500 	call	8043350 <__udivsi3>
 8041d8c:	100b883a 	mov	r5,r2
 8041d90:	01200034 	movhi	r4,32768
 8041d94:	213fffc4 	addi	r4,r4,-1
 8041d98:	80433500 	call	8043350 <__udivsi3>
 8041d9c:	1007883a 	mov	r3,r2
 8041da0:	e0bfff17 	ldw	r2,-4(fp)
 8041da4:	10c5c83a 	sub	r2,r2,r3
 8041da8:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 8041dac:	e0bffc17 	ldw	r2,-16(fp)
 8041db0:	10800044 	addi	r2,r2,1
 8041db4:	e0bffc15 	stw	r2,-16(fp)
 8041db8:	e0fffc17 	ldw	r3,-16(fp)
 8041dbc:	e0bffe17 	ldw	r2,-8(fp)
 8041dc0:	18bfe616 	blt	r3,r2,8041d5c <__alt_data_end+0xf8041d5c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 8041dc4:	014003f4 	movhi	r5,15
 8041dc8:	29509004 	addi	r5,r5,16960
 8041dcc:	e13ffd17 	ldw	r4,-12(fp)
 8041dd0:	804340c0 	call	804340c <__mulsi3>
 8041dd4:	100b883a 	mov	r5,r2
 8041dd8:	01011e34 	movhi	r4,1144
 8041ddc:	211a3004 	addi	r4,r4,26816
 8041de0:	80433500 	call	8043350 <__udivsi3>
 8041de4:	e17fff17 	ldw	r5,-4(fp)
 8041de8:	1009883a 	mov	r4,r2
 8041dec:	804340c0 	call	804340c <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 8041df0:	10bfffc4 	addi	r2,r2,-1
 8041df4:	103ffe1e 	bne	r2,zero,8041df0 <__alt_data_end+0xf8041df0>
 8041df8:	00000d06 	br	8041e30 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 8041dfc:	014003f4 	movhi	r5,15
 8041e00:	29509004 	addi	r5,r5,16960
 8041e04:	e13ffd17 	ldw	r4,-12(fp)
 8041e08:	804340c0 	call	804340c <__mulsi3>
 8041e0c:	100b883a 	mov	r5,r2
 8041e10:	01011e34 	movhi	r4,1144
 8041e14:	211a3004 	addi	r4,r4,26816
 8041e18:	80433500 	call	8043350 <__udivsi3>
 8041e1c:	e17fff17 	ldw	r5,-4(fp)
 8041e20:	1009883a 	mov	r4,r2
 8041e24:	804340c0 	call	804340c <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 8041e28:	10bfffc4 	addi	r2,r2,-1
 8041e2c:	00bffe16 	blt	zero,r2,8041e28 <__alt_data_end+0xf8041e28>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 8041e30:	0005883a 	mov	r2,zero
}
 8041e34:	e037883a 	mov	sp,fp
 8041e38:	dfc00117 	ldw	ra,4(sp)
 8041e3c:	df000017 	ldw	fp,0(sp)
 8041e40:	dec00204 	addi	sp,sp,8
 8041e44:	f800283a 	ret

08041e48 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8041e48:	defffe04 	addi	sp,sp,-8
 8041e4c:	dfc00115 	stw	ra,4(sp)
 8041e50:	df000015 	stw	fp,0(sp)
 8041e54:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8041e58:	d0a01717 	ldw	r2,-32676(gp)
 8041e5c:	10000326 	beq	r2,zero,8041e6c <alt_get_errno+0x24>
 8041e60:	d0a01717 	ldw	r2,-32676(gp)
 8041e64:	103ee83a 	callr	r2
 8041e68:	00000106 	br	8041e70 <alt_get_errno+0x28>
 8041e6c:	d0a5d604 	addi	r2,gp,-26792
}
 8041e70:	e037883a 	mov	sp,fp
 8041e74:	dfc00117 	ldw	ra,4(sp)
 8041e78:	df000017 	ldw	fp,0(sp)
 8041e7c:	dec00204 	addi	sp,sp,8
 8041e80:	f800283a 	ret

08041e84 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 8041e84:	defffb04 	addi	sp,sp,-20
 8041e88:	dfc00415 	stw	ra,16(sp)
 8041e8c:	df000315 	stw	fp,12(sp)
 8041e90:	df000304 	addi	fp,sp,12
 8041e94:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 8041e98:	e0bfff17 	ldw	r2,-4(fp)
 8041e9c:	10000816 	blt	r2,zero,8041ec0 <close+0x3c>
 8041ea0:	01400304 	movi	r5,12
 8041ea4:	e13fff17 	ldw	r4,-4(fp)
 8041ea8:	804340c0 	call	804340c <__mulsi3>
 8041eac:	1007883a 	mov	r3,r2
 8041eb0:	00820134 	movhi	r2,2052
 8041eb4:	10915704 	addi	r2,r2,17756
 8041eb8:	1885883a 	add	r2,r3,r2
 8041ebc:	00000106 	br	8041ec4 <close+0x40>
 8041ec0:	0005883a 	mov	r2,zero
 8041ec4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 8041ec8:	e0bffd17 	ldw	r2,-12(fp)
 8041ecc:	10001926 	beq	r2,zero,8041f34 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 8041ed0:	e0bffd17 	ldw	r2,-12(fp)
 8041ed4:	10800017 	ldw	r2,0(r2)
 8041ed8:	10800417 	ldw	r2,16(r2)
 8041edc:	10000626 	beq	r2,zero,8041ef8 <close+0x74>
 8041ee0:	e0bffd17 	ldw	r2,-12(fp)
 8041ee4:	10800017 	ldw	r2,0(r2)
 8041ee8:	10800417 	ldw	r2,16(r2)
 8041eec:	e13ffd17 	ldw	r4,-12(fp)
 8041ef0:	103ee83a 	callr	r2
 8041ef4:	00000106 	br	8041efc <close+0x78>
 8041ef8:	0005883a 	mov	r2,zero
 8041efc:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 8041f00:	e13fff17 	ldw	r4,-4(fp)
 8041f04:	804286c0 	call	804286c <alt_release_fd>
    if (rval < 0)
 8041f08:	e0bffe17 	ldw	r2,-8(fp)
 8041f0c:	1000070e 	bge	r2,zero,8041f2c <close+0xa8>
    {
      ALT_ERRNO = -rval;
 8041f10:	8041e480 	call	8041e48 <alt_get_errno>
 8041f14:	1007883a 	mov	r3,r2
 8041f18:	e0bffe17 	ldw	r2,-8(fp)
 8041f1c:	0085c83a 	sub	r2,zero,r2
 8041f20:	18800015 	stw	r2,0(r3)
      return -1;
 8041f24:	00bfffc4 	movi	r2,-1
 8041f28:	00000706 	br	8041f48 <close+0xc4>
    }
    return 0;
 8041f2c:	0005883a 	mov	r2,zero
 8041f30:	00000506 	br	8041f48 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8041f34:	8041e480 	call	8041e48 <alt_get_errno>
 8041f38:	1007883a 	mov	r3,r2
 8041f3c:	00801444 	movi	r2,81
 8041f40:	18800015 	stw	r2,0(r3)
    return -1;
 8041f44:	00bfffc4 	movi	r2,-1
  }
}
 8041f48:	e037883a 	mov	sp,fp
 8041f4c:	dfc00117 	ldw	ra,4(sp)
 8041f50:	df000017 	ldw	fp,0(sp)
 8041f54:	dec00204 	addi	sp,sp,8
 8041f58:	f800283a 	ret

08041f5c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 8041f5c:	deffff04 	addi	sp,sp,-4
 8041f60:	df000015 	stw	fp,0(sp)
 8041f64:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 8041f68:	0001883a 	nop
 8041f6c:	e037883a 	mov	sp,fp
 8041f70:	df000017 	ldw	fp,0(sp)
 8041f74:	dec00104 	addi	sp,sp,4
 8041f78:	f800283a 	ret

08041f7c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 8041f7c:	defffc04 	addi	sp,sp,-16
 8041f80:	df000315 	stw	fp,12(sp)
 8041f84:	df000304 	addi	fp,sp,12
 8041f88:	e13ffd15 	stw	r4,-12(fp)
 8041f8c:	e17ffe15 	stw	r5,-8(fp)
 8041f90:	e1bfff15 	stw	r6,-4(fp)
  return len;
 8041f94:	e0bfff17 	ldw	r2,-4(fp)
}
 8041f98:	e037883a 	mov	sp,fp
 8041f9c:	df000017 	ldw	fp,0(sp)
 8041fa0:	dec00104 	addi	sp,sp,4
 8041fa4:	f800283a 	ret

08041fa8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8041fa8:	defffe04 	addi	sp,sp,-8
 8041fac:	dfc00115 	stw	ra,4(sp)
 8041fb0:	df000015 	stw	fp,0(sp)
 8041fb4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8041fb8:	d0a01717 	ldw	r2,-32676(gp)
 8041fbc:	10000326 	beq	r2,zero,8041fcc <alt_get_errno+0x24>
 8041fc0:	d0a01717 	ldw	r2,-32676(gp)
 8041fc4:	103ee83a 	callr	r2
 8041fc8:	00000106 	br	8041fd0 <alt_get_errno+0x28>
 8041fcc:	d0a5d604 	addi	r2,gp,-26792
}
 8041fd0:	e037883a 	mov	sp,fp
 8041fd4:	dfc00117 	ldw	ra,4(sp)
 8041fd8:	df000017 	ldw	fp,0(sp)
 8041fdc:	dec00204 	addi	sp,sp,8
 8041fe0:	f800283a 	ret

08041fe4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 8041fe4:	defffa04 	addi	sp,sp,-24
 8041fe8:	dfc00515 	stw	ra,20(sp)
 8041fec:	df000415 	stw	fp,16(sp)
 8041ff0:	df000404 	addi	fp,sp,16
 8041ff4:	e13ffe15 	stw	r4,-8(fp)
 8041ff8:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 8041ffc:	e0bffe17 	ldw	r2,-8(fp)
 8042000:	10000326 	beq	r2,zero,8042010 <alt_dev_llist_insert+0x2c>
 8042004:	e0bffe17 	ldw	r2,-8(fp)
 8042008:	10800217 	ldw	r2,8(r2)
 804200c:	1000061e 	bne	r2,zero,8042028 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 8042010:	8041fa80 	call	8041fa8 <alt_get_errno>
 8042014:	1007883a 	mov	r3,r2
 8042018:	00800584 	movi	r2,22
 804201c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 8042020:	00bffa84 	movi	r2,-22
 8042024:	00001306 	br	8042074 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 8042028:	e0bffe17 	ldw	r2,-8(fp)
 804202c:	e0ffff17 	ldw	r3,-4(fp)
 8042030:	e0fffc15 	stw	r3,-16(fp)
 8042034:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8042038:	e0bffd17 	ldw	r2,-12(fp)
 804203c:	e0fffc17 	ldw	r3,-16(fp)
 8042040:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8042044:	e0bffc17 	ldw	r2,-16(fp)
 8042048:	10c00017 	ldw	r3,0(r2)
 804204c:	e0bffd17 	ldw	r2,-12(fp)
 8042050:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8042054:	e0bffc17 	ldw	r2,-16(fp)
 8042058:	10800017 	ldw	r2,0(r2)
 804205c:	e0fffd17 	ldw	r3,-12(fp)
 8042060:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8042064:	e0bffc17 	ldw	r2,-16(fp)
 8042068:	e0fffd17 	ldw	r3,-12(fp)
 804206c:	10c00015 	stw	r3,0(r2)

  return 0;  
 8042070:	0005883a 	mov	r2,zero
}
 8042074:	e037883a 	mov	sp,fp
 8042078:	dfc00117 	ldw	ra,4(sp)
 804207c:	df000017 	ldw	fp,0(sp)
 8042080:	dec00204 	addi	sp,sp,8
 8042084:	f800283a 	ret

08042088 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 8042088:	defffd04 	addi	sp,sp,-12
 804208c:	dfc00215 	stw	ra,8(sp)
 8042090:	df000115 	stw	fp,4(sp)
 8042094:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8042098:	00820134 	movhi	r2,2052
 804209c:	108d1904 	addi	r2,r2,13412
 80420a0:	e0bfff15 	stw	r2,-4(fp)
 80420a4:	00000606 	br	80420c0 <_do_ctors+0x38>
        (*ctor) (); 
 80420a8:	e0bfff17 	ldw	r2,-4(fp)
 80420ac:	10800017 	ldw	r2,0(r2)
 80420b0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 80420b4:	e0bfff17 	ldw	r2,-4(fp)
 80420b8:	10bfff04 	addi	r2,r2,-4
 80420bc:	e0bfff15 	stw	r2,-4(fp)
 80420c0:	e0ffff17 	ldw	r3,-4(fp)
 80420c4:	00820134 	movhi	r2,2052
 80420c8:	108d1a04 	addi	r2,r2,13416
 80420cc:	18bff62e 	bgeu	r3,r2,80420a8 <__alt_data_end+0xf80420a8>
        (*ctor) (); 
}
 80420d0:	0001883a 	nop
 80420d4:	e037883a 	mov	sp,fp
 80420d8:	dfc00117 	ldw	ra,4(sp)
 80420dc:	df000017 	ldw	fp,0(sp)
 80420e0:	dec00204 	addi	sp,sp,8
 80420e4:	f800283a 	ret

080420e8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 80420e8:	defffd04 	addi	sp,sp,-12
 80420ec:	dfc00215 	stw	ra,8(sp)
 80420f0:	df000115 	stw	fp,4(sp)
 80420f4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 80420f8:	00820134 	movhi	r2,2052
 80420fc:	108d1904 	addi	r2,r2,13412
 8042100:	e0bfff15 	stw	r2,-4(fp)
 8042104:	00000606 	br	8042120 <_do_dtors+0x38>
        (*dtor) (); 
 8042108:	e0bfff17 	ldw	r2,-4(fp)
 804210c:	10800017 	ldw	r2,0(r2)
 8042110:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8042114:	e0bfff17 	ldw	r2,-4(fp)
 8042118:	10bfff04 	addi	r2,r2,-4
 804211c:	e0bfff15 	stw	r2,-4(fp)
 8042120:	e0ffff17 	ldw	r3,-4(fp)
 8042124:	00820134 	movhi	r2,2052
 8042128:	108d1a04 	addi	r2,r2,13416
 804212c:	18bff62e 	bgeu	r3,r2,8042108 <__alt_data_end+0xf8042108>
        (*dtor) (); 
}
 8042130:	0001883a 	nop
 8042134:	e037883a 	mov	sp,fp
 8042138:	dfc00117 	ldw	ra,4(sp)
 804213c:	df000017 	ldw	fp,0(sp)
 8042140:	dec00204 	addi	sp,sp,8
 8042144:	f800283a 	ret

08042148 <alt_fs_reg>:
 * A return value of zero indicates success. A negative return value indicates
 * failure. 
 */
 
int alt_fs_reg (alt_dev* dev)
{
 8042148:	defffc04 	addi	sp,sp,-16
 804214c:	df000315 	stw	fp,12(sp)
 8042150:	df000304 	addi	fp,sp,12
 8042154:	e13fff15 	stw	r4,-4(fp)
  /*
   * check that the device has a name.
   */

  if (!dev->name)
 8042158:	e0bfff17 	ldw	r2,-4(fp)
 804215c:	10800217 	ldw	r2,8(r2)
 8042160:	1000021e 	bne	r2,zero,804216c <alt_fs_reg+0x24>
  {
    return -ENODEV;
 8042164:	00bffb44 	movi	r2,-19
 8042168:	00001306 	br	80421b8 <alt_fs_reg+0x70>
  
  /*
   * register the file system.
   */

  alt_llist_insert(&alt_fs_list, &dev->llist);
 804216c:	e0bfff17 	ldw	r2,-4(fp)
 8042170:	d0e01204 	addi	r3,gp,-32696
 8042174:	e0fffd15 	stw	r3,-12(fp)
 8042178:	e0bffe15 	stw	r2,-8(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 804217c:	e0bffe17 	ldw	r2,-8(fp)
 8042180:	e0fffd17 	ldw	r3,-12(fp)
 8042184:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8042188:	e0bffd17 	ldw	r2,-12(fp)
 804218c:	10c00017 	ldw	r3,0(r2)
 8042190:	e0bffe17 	ldw	r2,-8(fp)
 8042194:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8042198:	e0bffd17 	ldw	r2,-12(fp)
 804219c:	10800017 	ldw	r2,0(r2)
 80421a0:	e0fffe17 	ldw	r3,-8(fp)
 80421a4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 80421a8:	e0bffd17 	ldw	r2,-12(fp)
 80421ac:	e0fffe17 	ldw	r3,-8(fp)
 80421b0:	10c00015 	stw	r3,0(r2)

  return 0;
 80421b4:	0005883a 	mov	r2,zero
} 
 80421b8:	e037883a 	mov	sp,fp
 80421bc:	df000017 	ldw	fp,0(sp)
 80421c0:	dec00104 	addi	sp,sp,4
 80421c4:	f800283a 	ret

080421c8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 80421c8:	deffff04 	addi	sp,sp,-4
 80421cc:	df000015 	stw	fp,0(sp)
 80421d0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 80421d4:	0001883a 	nop
 80421d8:	e037883a 	mov	sp,fp
 80421dc:	df000017 	ldw	fp,0(sp)
 80421e0:	dec00104 	addi	sp,sp,4
 80421e4:	f800283a 	ret

080421e8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 80421e8:	defff904 	addi	sp,sp,-28
 80421ec:	dfc00615 	stw	ra,24(sp)
 80421f0:	df000515 	stw	fp,20(sp)
 80421f4:	df000504 	addi	fp,sp,20
 80421f8:	e13ffc15 	stw	r4,-16(fp)
 80421fc:	e17ffd15 	stw	r5,-12(fp)
 8042200:	e1bffe15 	stw	r6,-8(fp)
 8042204:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 8042208:	e0800217 	ldw	r2,8(fp)
 804220c:	d8800015 	stw	r2,0(sp)
 8042210:	e1ffff17 	ldw	r7,-4(fp)
 8042214:	e1bffe17 	ldw	r6,-8(fp)
 8042218:	e17ffd17 	ldw	r5,-12(fp)
 804221c:	e13ffc17 	ldw	r4,-16(fp)
 8042220:	80423980 	call	8042398 <alt_iic_isr_register>
}  
 8042224:	e037883a 	mov	sp,fp
 8042228:	dfc00117 	ldw	ra,4(sp)
 804222c:	df000017 	ldw	fp,0(sp)
 8042230:	dec00204 	addi	sp,sp,8
 8042234:	f800283a 	ret

08042238 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 8042238:	defff904 	addi	sp,sp,-28
 804223c:	df000615 	stw	fp,24(sp)
 8042240:	df000604 	addi	fp,sp,24
 8042244:	e13ffe15 	stw	r4,-8(fp)
 8042248:	e17fff15 	stw	r5,-4(fp)
 804224c:	e0bfff17 	ldw	r2,-4(fp)
 8042250:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8042254:	0005303a 	rdctl	r2,status
 8042258:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 804225c:	e0fffb17 	ldw	r3,-20(fp)
 8042260:	00bfff84 	movi	r2,-2
 8042264:	1884703a 	and	r2,r3,r2
 8042268:	1001703a 	wrctl	status,r2
  
  return context;
 804226c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8042270:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 8042274:	00c00044 	movi	r3,1
 8042278:	e0bffa17 	ldw	r2,-24(fp)
 804227c:	1884983a 	sll	r2,r3,r2
 8042280:	1007883a 	mov	r3,r2
 8042284:	d0a5d217 	ldw	r2,-26808(gp)
 8042288:	1884b03a 	or	r2,r3,r2
 804228c:	d0a5d215 	stw	r2,-26808(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8042290:	d0a5d217 	ldw	r2,-26808(gp)
 8042294:	100170fa 	wrctl	ienable,r2
 8042298:	e0bffc17 	ldw	r2,-16(fp)
 804229c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80422a0:	e0bffd17 	ldw	r2,-12(fp)
 80422a4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 80422a8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 80422ac:	0001883a 	nop
}
 80422b0:	e037883a 	mov	sp,fp
 80422b4:	df000017 	ldw	fp,0(sp)
 80422b8:	dec00104 	addi	sp,sp,4
 80422bc:	f800283a 	ret

080422c0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 80422c0:	defff904 	addi	sp,sp,-28
 80422c4:	df000615 	stw	fp,24(sp)
 80422c8:	df000604 	addi	fp,sp,24
 80422cc:	e13ffe15 	stw	r4,-8(fp)
 80422d0:	e17fff15 	stw	r5,-4(fp)
 80422d4:	e0bfff17 	ldw	r2,-4(fp)
 80422d8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80422dc:	0005303a 	rdctl	r2,status
 80422e0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80422e4:	e0fffb17 	ldw	r3,-20(fp)
 80422e8:	00bfff84 	movi	r2,-2
 80422ec:	1884703a 	and	r2,r3,r2
 80422f0:	1001703a 	wrctl	status,r2
  
  return context;
 80422f4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 80422f8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 80422fc:	00c00044 	movi	r3,1
 8042300:	e0bffa17 	ldw	r2,-24(fp)
 8042304:	1884983a 	sll	r2,r3,r2
 8042308:	0084303a 	nor	r2,zero,r2
 804230c:	1007883a 	mov	r3,r2
 8042310:	d0a5d217 	ldw	r2,-26808(gp)
 8042314:	1884703a 	and	r2,r3,r2
 8042318:	d0a5d215 	stw	r2,-26808(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 804231c:	d0a5d217 	ldw	r2,-26808(gp)
 8042320:	100170fa 	wrctl	ienable,r2
 8042324:	e0bffc17 	ldw	r2,-16(fp)
 8042328:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 804232c:	e0bffd17 	ldw	r2,-12(fp)
 8042330:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8042334:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 8042338:	0001883a 	nop
}
 804233c:	e037883a 	mov	sp,fp
 8042340:	df000017 	ldw	fp,0(sp)
 8042344:	dec00104 	addi	sp,sp,4
 8042348:	f800283a 	ret

0804234c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 804234c:	defffc04 	addi	sp,sp,-16
 8042350:	df000315 	stw	fp,12(sp)
 8042354:	df000304 	addi	fp,sp,12
 8042358:	e13ffe15 	stw	r4,-8(fp)
 804235c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 8042360:	000530fa 	rdctl	r2,ienable
 8042364:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 8042368:	00c00044 	movi	r3,1
 804236c:	e0bfff17 	ldw	r2,-4(fp)
 8042370:	1884983a 	sll	r2,r3,r2
 8042374:	1007883a 	mov	r3,r2
 8042378:	e0bffd17 	ldw	r2,-12(fp)
 804237c:	1884703a 	and	r2,r3,r2
 8042380:	1004c03a 	cmpne	r2,r2,zero
 8042384:	10803fcc 	andi	r2,r2,255
}
 8042388:	e037883a 	mov	sp,fp
 804238c:	df000017 	ldw	fp,0(sp)
 8042390:	dec00104 	addi	sp,sp,4
 8042394:	f800283a 	ret

08042398 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8042398:	defff504 	addi	sp,sp,-44
 804239c:	dfc00a15 	stw	ra,40(sp)
 80423a0:	df000915 	stw	fp,36(sp)
 80423a4:	df000904 	addi	fp,sp,36
 80423a8:	e13ffc15 	stw	r4,-16(fp)
 80423ac:	e17ffd15 	stw	r5,-12(fp)
 80423b0:	e1bffe15 	stw	r6,-8(fp)
 80423b4:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 80423b8:	00bffa84 	movi	r2,-22
 80423bc:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 80423c0:	e0bffd17 	ldw	r2,-12(fp)
 80423c4:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 80423c8:	e0bff817 	ldw	r2,-32(fp)
 80423cc:	10800808 	cmpgei	r2,r2,32
 80423d0:	1000271e 	bne	r2,zero,8042470 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80423d4:	0005303a 	rdctl	r2,status
 80423d8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80423dc:	e0fffb17 	ldw	r3,-20(fp)
 80423e0:	00bfff84 	movi	r2,-2
 80423e4:	1884703a 	and	r2,r3,r2
 80423e8:	1001703a 	wrctl	status,r2
  
  return context;
 80423ec:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 80423f0:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 80423f4:	00820134 	movhi	r2,2052
 80423f8:	10989704 	addi	r2,r2,25180
 80423fc:	e0fff817 	ldw	r3,-32(fp)
 8042400:	180690fa 	slli	r3,r3,3
 8042404:	10c5883a 	add	r2,r2,r3
 8042408:	e0fffe17 	ldw	r3,-8(fp)
 804240c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 8042410:	00820134 	movhi	r2,2052
 8042414:	10989704 	addi	r2,r2,25180
 8042418:	e0fff817 	ldw	r3,-32(fp)
 804241c:	180690fa 	slli	r3,r3,3
 8042420:	10c5883a 	add	r2,r2,r3
 8042424:	10800104 	addi	r2,r2,4
 8042428:	e0ffff17 	ldw	r3,-4(fp)
 804242c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 8042430:	e0bffe17 	ldw	r2,-8(fp)
 8042434:	10000526 	beq	r2,zero,804244c <alt_iic_isr_register+0xb4>
 8042438:	e0bff817 	ldw	r2,-32(fp)
 804243c:	100b883a 	mov	r5,r2
 8042440:	e13ffc17 	ldw	r4,-16(fp)
 8042444:	80422380 	call	8042238 <alt_ic_irq_enable>
 8042448:	00000406 	br	804245c <alt_iic_isr_register+0xc4>
 804244c:	e0bff817 	ldw	r2,-32(fp)
 8042450:	100b883a 	mov	r5,r2
 8042454:	e13ffc17 	ldw	r4,-16(fp)
 8042458:	80422c00 	call	80422c0 <alt_ic_irq_disable>
 804245c:	e0bff715 	stw	r2,-36(fp)
 8042460:	e0bffa17 	ldw	r2,-24(fp)
 8042464:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8042468:	e0bff917 	ldw	r2,-28(fp)
 804246c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 8042470:	e0bff717 	ldw	r2,-36(fp)
}
 8042474:	e037883a 	mov	sp,fp
 8042478:	dfc00117 	ldw	ra,4(sp)
 804247c:	df000017 	ldw	fp,0(sp)
 8042480:	dec00204 	addi	sp,sp,8
 8042484:	f800283a 	ret

08042488 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 8042488:	defff804 	addi	sp,sp,-32
 804248c:	dfc00715 	stw	ra,28(sp)
 8042490:	df000615 	stw	fp,24(sp)
 8042494:	dc000515 	stw	r16,20(sp)
 8042498:	df000604 	addi	fp,sp,24
 804249c:	e13ffb15 	stw	r4,-20(fp)
 80424a0:	e17ffc15 	stw	r5,-16(fp)
 80424a4:	e1bffd15 	stw	r6,-12(fp)
 80424a8:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 80424ac:	e1bffe17 	ldw	r6,-8(fp)
 80424b0:	e17ffd17 	ldw	r5,-12(fp)
 80424b4:	e13ffc17 	ldw	r4,-16(fp)
 80424b8:	80427100 	call	8042710 <open>
 80424bc:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 80424c0:	e0bffa17 	ldw	r2,-24(fp)
 80424c4:	10002216 	blt	r2,zero,8042550 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 80424c8:	04020134 	movhi	r16,2052
 80424cc:	84115704 	addi	r16,r16,17756
 80424d0:	e0bffa17 	ldw	r2,-24(fp)
 80424d4:	01400304 	movi	r5,12
 80424d8:	1009883a 	mov	r4,r2
 80424dc:	804340c0 	call	804340c <__mulsi3>
 80424e0:	8085883a 	add	r2,r16,r2
 80424e4:	10c00017 	ldw	r3,0(r2)
 80424e8:	e0bffb17 	ldw	r2,-20(fp)
 80424ec:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 80424f0:	04020134 	movhi	r16,2052
 80424f4:	84115704 	addi	r16,r16,17756
 80424f8:	e0bffa17 	ldw	r2,-24(fp)
 80424fc:	01400304 	movi	r5,12
 8042500:	1009883a 	mov	r4,r2
 8042504:	804340c0 	call	804340c <__mulsi3>
 8042508:	8085883a 	add	r2,r16,r2
 804250c:	10800104 	addi	r2,r2,4
 8042510:	10c00017 	ldw	r3,0(r2)
 8042514:	e0bffb17 	ldw	r2,-20(fp)
 8042518:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 804251c:	04020134 	movhi	r16,2052
 8042520:	84115704 	addi	r16,r16,17756
 8042524:	e0bffa17 	ldw	r2,-24(fp)
 8042528:	01400304 	movi	r5,12
 804252c:	1009883a 	mov	r4,r2
 8042530:	804340c0 	call	804340c <__mulsi3>
 8042534:	8085883a 	add	r2,r16,r2
 8042538:	10800204 	addi	r2,r2,8
 804253c:	10c00017 	ldw	r3,0(r2)
 8042540:	e0bffb17 	ldw	r2,-20(fp)
 8042544:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 8042548:	e13ffa17 	ldw	r4,-24(fp)
 804254c:	804286c0 	call	804286c <alt_release_fd>
  }
} 
 8042550:	0001883a 	nop
 8042554:	e6ffff04 	addi	sp,fp,-4
 8042558:	dfc00217 	ldw	ra,8(sp)
 804255c:	df000117 	ldw	fp,4(sp)
 8042560:	dc000017 	ldw	r16,0(sp)
 8042564:	dec00304 	addi	sp,sp,12
 8042568:	f800283a 	ret

0804256c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 804256c:	defffb04 	addi	sp,sp,-20
 8042570:	dfc00415 	stw	ra,16(sp)
 8042574:	df000315 	stw	fp,12(sp)
 8042578:	df000304 	addi	fp,sp,12
 804257c:	e13ffd15 	stw	r4,-12(fp)
 8042580:	e17ffe15 	stw	r5,-8(fp)
 8042584:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 8042588:	01c07fc4 	movi	r7,511
 804258c:	01800044 	movi	r6,1
 8042590:	e17ffd17 	ldw	r5,-12(fp)
 8042594:	01020134 	movhi	r4,2052
 8042598:	21115a04 	addi	r4,r4,17768
 804259c:	80424880 	call	8042488 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 80425a0:	01c07fc4 	movi	r7,511
 80425a4:	000d883a 	mov	r6,zero
 80425a8:	e17ffe17 	ldw	r5,-8(fp)
 80425ac:	01020134 	movhi	r4,2052
 80425b0:	21115704 	addi	r4,r4,17756
 80425b4:	80424880 	call	8042488 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 80425b8:	01c07fc4 	movi	r7,511
 80425bc:	01800044 	movi	r6,1
 80425c0:	e17fff17 	ldw	r5,-4(fp)
 80425c4:	01020134 	movhi	r4,2052
 80425c8:	21115d04 	addi	r4,r4,17780
 80425cc:	80424880 	call	8042488 <alt_open_fd>
}  
 80425d0:	0001883a 	nop
 80425d4:	e037883a 	mov	sp,fp
 80425d8:	dfc00117 	ldw	ra,4(sp)
 80425dc:	df000017 	ldw	fp,0(sp)
 80425e0:	dec00204 	addi	sp,sp,8
 80425e4:	f800283a 	ret

080425e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80425e8:	defffe04 	addi	sp,sp,-8
 80425ec:	dfc00115 	stw	ra,4(sp)
 80425f0:	df000015 	stw	fp,0(sp)
 80425f4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80425f8:	d0a01717 	ldw	r2,-32676(gp)
 80425fc:	10000326 	beq	r2,zero,804260c <alt_get_errno+0x24>
 8042600:	d0a01717 	ldw	r2,-32676(gp)
 8042604:	103ee83a 	callr	r2
 8042608:	00000106 	br	8042610 <alt_get_errno+0x28>
 804260c:	d0a5d604 	addi	r2,gp,-26792
}
 8042610:	e037883a 	mov	sp,fp
 8042614:	dfc00117 	ldw	ra,4(sp)
 8042618:	df000017 	ldw	fp,0(sp)
 804261c:	dec00204 	addi	sp,sp,8
 8042620:	f800283a 	ret

08042624 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 8042624:	defffb04 	addi	sp,sp,-20
 8042628:	dfc00415 	stw	ra,16(sp)
 804262c:	df000315 	stw	fp,12(sp)
 8042630:	dc000215 	stw	r16,8(sp)
 8042634:	df000304 	addi	fp,sp,12
 8042638:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 804263c:	e0bffe17 	ldw	r2,-8(fp)
 8042640:	10800217 	ldw	r2,8(r2)
 8042644:	10d00034 	orhi	r3,r2,16384
 8042648:	e0bffe17 	ldw	r2,-8(fp)
 804264c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8042650:	e03ffd15 	stw	zero,-12(fp)
 8042654:	00002306 	br	80426e4 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8042658:	04020134 	movhi	r16,2052
 804265c:	84115704 	addi	r16,r16,17756
 8042660:	e0bffd17 	ldw	r2,-12(fp)
 8042664:	01400304 	movi	r5,12
 8042668:	1009883a 	mov	r4,r2
 804266c:	804340c0 	call	804340c <__mulsi3>
 8042670:	8085883a 	add	r2,r16,r2
 8042674:	10c00017 	ldw	r3,0(r2)
 8042678:	e0bffe17 	ldw	r2,-8(fp)
 804267c:	10800017 	ldw	r2,0(r2)
 8042680:	1880151e 	bne	r3,r2,80426d8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8042684:	04020134 	movhi	r16,2052
 8042688:	84115704 	addi	r16,r16,17756
 804268c:	e0bffd17 	ldw	r2,-12(fp)
 8042690:	01400304 	movi	r5,12
 8042694:	1009883a 	mov	r4,r2
 8042698:	804340c0 	call	804340c <__mulsi3>
 804269c:	8085883a 	add	r2,r16,r2
 80426a0:	10800204 	addi	r2,r2,8
 80426a4:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 80426a8:	10000b0e 	bge	r2,zero,80426d8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 80426ac:	01400304 	movi	r5,12
 80426b0:	e13ffd17 	ldw	r4,-12(fp)
 80426b4:	804340c0 	call	804340c <__mulsi3>
 80426b8:	1007883a 	mov	r3,r2
 80426bc:	00820134 	movhi	r2,2052
 80426c0:	10915704 	addi	r2,r2,17756
 80426c4:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 80426c8:	e0bffe17 	ldw	r2,-8(fp)
 80426cc:	18800226 	beq	r3,r2,80426d8 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 80426d0:	00bffcc4 	movi	r2,-13
 80426d4:	00000806 	br	80426f8 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 80426d8:	e0bffd17 	ldw	r2,-12(fp)
 80426dc:	10800044 	addi	r2,r2,1
 80426e0:	e0bffd15 	stw	r2,-12(fp)
 80426e4:	d0a01617 	ldw	r2,-32680(gp)
 80426e8:	1007883a 	mov	r3,r2
 80426ec:	e0bffd17 	ldw	r2,-12(fp)
 80426f0:	18bfd92e 	bgeu	r3,r2,8042658 <__alt_data_end+0xf8042658>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 80426f4:	0005883a 	mov	r2,zero
}
 80426f8:	e6ffff04 	addi	sp,fp,-4
 80426fc:	dfc00217 	ldw	ra,8(sp)
 8042700:	df000117 	ldw	fp,4(sp)
 8042704:	dc000017 	ldw	r16,0(sp)
 8042708:	dec00304 	addi	sp,sp,12
 804270c:	f800283a 	ret

08042710 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 8042710:	defff604 	addi	sp,sp,-40
 8042714:	dfc00915 	stw	ra,36(sp)
 8042718:	df000815 	stw	fp,32(sp)
 804271c:	df000804 	addi	fp,sp,32
 8042720:	e13ffd15 	stw	r4,-12(fp)
 8042724:	e17ffe15 	stw	r5,-8(fp)
 8042728:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 804272c:	00bfffc4 	movi	r2,-1
 8042730:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 8042734:	00bffb44 	movi	r2,-19
 8042738:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 804273c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 8042740:	d1601404 	addi	r5,gp,-32688
 8042744:	e13ffd17 	ldw	r4,-12(fp)
 8042748:	8042ab80 	call	8042ab8 <alt_find_dev>
 804274c:	e0bff815 	stw	r2,-32(fp)
 8042750:	e0bff817 	ldw	r2,-32(fp)
 8042754:	1000051e 	bne	r2,zero,804276c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 8042758:	e13ffd17 	ldw	r4,-12(fp)
 804275c:	8042b480 	call	8042b48 <alt_find_file>
 8042760:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 8042764:	00800044 	movi	r2,1
 8042768:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 804276c:	e0bff817 	ldw	r2,-32(fp)
 8042770:	10002b26 	beq	r2,zero,8042820 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 8042774:	e13ff817 	ldw	r4,-32(fp)
 8042778:	8042c500 	call	8042c50 <alt_get_fd>
 804277c:	e0bff915 	stw	r2,-28(fp)
 8042780:	e0bff917 	ldw	r2,-28(fp)
 8042784:	1000030e 	bge	r2,zero,8042794 <open+0x84>
    {
      status = index;
 8042788:	e0bff917 	ldw	r2,-28(fp)
 804278c:	e0bffa15 	stw	r2,-24(fp)
 8042790:	00002506 	br	8042828 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 8042794:	01400304 	movi	r5,12
 8042798:	e13ff917 	ldw	r4,-28(fp)
 804279c:	804340c0 	call	804340c <__mulsi3>
 80427a0:	1007883a 	mov	r3,r2
 80427a4:	00820134 	movhi	r2,2052
 80427a8:	10915704 	addi	r2,r2,17756
 80427ac:	1885883a 	add	r2,r3,r2
 80427b0:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 80427b4:	e0fffe17 	ldw	r3,-8(fp)
 80427b8:	00900034 	movhi	r2,16384
 80427bc:	10bfffc4 	addi	r2,r2,-1
 80427c0:	1886703a 	and	r3,r3,r2
 80427c4:	e0bffc17 	ldw	r2,-16(fp)
 80427c8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 80427cc:	e0bffb17 	ldw	r2,-20(fp)
 80427d0:	1000051e 	bne	r2,zero,80427e8 <open+0xd8>
 80427d4:	e13ffc17 	ldw	r4,-16(fp)
 80427d8:	80426240 	call	8042624 <alt_file_locked>
 80427dc:	e0bffa15 	stw	r2,-24(fp)
 80427e0:	e0bffa17 	ldw	r2,-24(fp)
 80427e4:	10001016 	blt	r2,zero,8042828 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 80427e8:	e0bff817 	ldw	r2,-32(fp)
 80427ec:	10800317 	ldw	r2,12(r2)
 80427f0:	10000826 	beq	r2,zero,8042814 <open+0x104>
 80427f4:	e0bff817 	ldw	r2,-32(fp)
 80427f8:	10800317 	ldw	r2,12(r2)
 80427fc:	e1ffff17 	ldw	r7,-4(fp)
 8042800:	e1bffe17 	ldw	r6,-8(fp)
 8042804:	e17ffd17 	ldw	r5,-12(fp)
 8042808:	e13ffc17 	ldw	r4,-16(fp)
 804280c:	103ee83a 	callr	r2
 8042810:	00000106 	br	8042818 <open+0x108>
 8042814:	0005883a 	mov	r2,zero
 8042818:	e0bffa15 	stw	r2,-24(fp)
 804281c:	00000206 	br	8042828 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 8042820:	00bffb44 	movi	r2,-19
 8042824:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 8042828:	e0bffa17 	ldw	r2,-24(fp)
 804282c:	1000090e 	bge	r2,zero,8042854 <open+0x144>
  {
    alt_release_fd (index);  
 8042830:	e13ff917 	ldw	r4,-28(fp)
 8042834:	804286c0 	call	804286c <alt_release_fd>
    ALT_ERRNO = -status;
 8042838:	80425e80 	call	80425e8 <alt_get_errno>
 804283c:	1007883a 	mov	r3,r2
 8042840:	e0bffa17 	ldw	r2,-24(fp)
 8042844:	0085c83a 	sub	r2,zero,r2
 8042848:	18800015 	stw	r2,0(r3)
    return -1;
 804284c:	00bfffc4 	movi	r2,-1
 8042850:	00000106 	br	8042858 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 8042854:	e0bff917 	ldw	r2,-28(fp)
}
 8042858:	e037883a 	mov	sp,fp
 804285c:	dfc00117 	ldw	ra,4(sp)
 8042860:	df000017 	ldw	fp,0(sp)
 8042864:	dec00204 	addi	sp,sp,8
 8042868:	f800283a 	ret

0804286c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 804286c:	defffc04 	addi	sp,sp,-16
 8042870:	dfc00315 	stw	ra,12(sp)
 8042874:	df000215 	stw	fp,8(sp)
 8042878:	dc000115 	stw	r16,4(sp)
 804287c:	df000204 	addi	fp,sp,8
 8042880:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 8042884:	e0bffe17 	ldw	r2,-8(fp)
 8042888:	108000d0 	cmplti	r2,r2,3
 804288c:	1000111e 	bne	r2,zero,80428d4 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 8042890:	04020134 	movhi	r16,2052
 8042894:	84115704 	addi	r16,r16,17756
 8042898:	e0bffe17 	ldw	r2,-8(fp)
 804289c:	01400304 	movi	r5,12
 80428a0:	1009883a 	mov	r4,r2
 80428a4:	804340c0 	call	804340c <__mulsi3>
 80428a8:	8085883a 	add	r2,r16,r2
 80428ac:	10800204 	addi	r2,r2,8
 80428b0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 80428b4:	04020134 	movhi	r16,2052
 80428b8:	84115704 	addi	r16,r16,17756
 80428bc:	e0bffe17 	ldw	r2,-8(fp)
 80428c0:	01400304 	movi	r5,12
 80428c4:	1009883a 	mov	r4,r2
 80428c8:	804340c0 	call	804340c <__mulsi3>
 80428cc:	8085883a 	add	r2,r16,r2
 80428d0:	10000015 	stw	zero,0(r2)
  }
}
 80428d4:	0001883a 	nop
 80428d8:	e6ffff04 	addi	sp,fp,-4
 80428dc:	dfc00217 	ldw	ra,8(sp)
 80428e0:	df000117 	ldw	fp,4(sp)
 80428e4:	dc000017 	ldw	r16,0(sp)
 80428e8:	dec00304 	addi	sp,sp,12
 80428ec:	f800283a 	ret

080428f0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 80428f0:	defffa04 	addi	sp,sp,-24
 80428f4:	df000515 	stw	fp,20(sp)
 80428f8:	df000504 	addi	fp,sp,20
 80428fc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8042900:	0005303a 	rdctl	r2,status
 8042904:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8042908:	e0fffc17 	ldw	r3,-16(fp)
 804290c:	00bfff84 	movi	r2,-2
 8042910:	1884703a 	and	r2,r3,r2
 8042914:	1001703a 	wrctl	status,r2
  
  return context;
 8042918:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 804291c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 8042920:	e0bfff17 	ldw	r2,-4(fp)
 8042924:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 8042928:	e0bffd17 	ldw	r2,-12(fp)
 804292c:	10800017 	ldw	r2,0(r2)
 8042930:	e0fffd17 	ldw	r3,-12(fp)
 8042934:	18c00117 	ldw	r3,4(r3)
 8042938:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 804293c:	e0bffd17 	ldw	r2,-12(fp)
 8042940:	10800117 	ldw	r2,4(r2)
 8042944:	e0fffd17 	ldw	r3,-12(fp)
 8042948:	18c00017 	ldw	r3,0(r3)
 804294c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 8042950:	e0bffd17 	ldw	r2,-12(fp)
 8042954:	e0fffd17 	ldw	r3,-12(fp)
 8042958:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 804295c:	e0bffd17 	ldw	r2,-12(fp)
 8042960:	e0fffd17 	ldw	r3,-12(fp)
 8042964:	10c00015 	stw	r3,0(r2)
 8042968:	e0bffb17 	ldw	r2,-20(fp)
 804296c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8042970:	e0bffe17 	ldw	r2,-8(fp)
 8042974:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 8042978:	0001883a 	nop
 804297c:	e037883a 	mov	sp,fp
 8042980:	df000017 	ldw	fp,0(sp)
 8042984:	dec00104 	addi	sp,sp,4
 8042988:	f800283a 	ret

0804298c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 804298c:	defffb04 	addi	sp,sp,-20
 8042990:	dfc00415 	stw	ra,16(sp)
 8042994:	df000315 	stw	fp,12(sp)
 8042998:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 804299c:	d0a01917 	ldw	r2,-32668(gp)
 80429a0:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 80429a4:	d0a5d417 	ldw	r2,-26800(gp)
 80429a8:	10800044 	addi	r2,r2,1
 80429ac:	d0a5d415 	stw	r2,-26800(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 80429b0:	00002e06 	br	8042a6c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 80429b4:	e0bffd17 	ldw	r2,-12(fp)
 80429b8:	10800017 	ldw	r2,0(r2)
 80429bc:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 80429c0:	e0bffd17 	ldw	r2,-12(fp)
 80429c4:	10800403 	ldbu	r2,16(r2)
 80429c8:	10803fcc 	andi	r2,r2,255
 80429cc:	10000426 	beq	r2,zero,80429e0 <alt_tick+0x54>
 80429d0:	d0a5d417 	ldw	r2,-26800(gp)
 80429d4:	1000021e 	bne	r2,zero,80429e0 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 80429d8:	e0bffd17 	ldw	r2,-12(fp)
 80429dc:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 80429e0:	e0bffd17 	ldw	r2,-12(fp)
 80429e4:	10800217 	ldw	r2,8(r2)
 80429e8:	d0e5d417 	ldw	r3,-26800(gp)
 80429ec:	18801d36 	bltu	r3,r2,8042a64 <alt_tick+0xd8>
 80429f0:	e0bffd17 	ldw	r2,-12(fp)
 80429f4:	10800403 	ldbu	r2,16(r2)
 80429f8:	10803fcc 	andi	r2,r2,255
 80429fc:	1000191e 	bne	r2,zero,8042a64 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 8042a00:	e0bffd17 	ldw	r2,-12(fp)
 8042a04:	10800317 	ldw	r2,12(r2)
 8042a08:	e0fffd17 	ldw	r3,-12(fp)
 8042a0c:	18c00517 	ldw	r3,20(r3)
 8042a10:	1809883a 	mov	r4,r3
 8042a14:	103ee83a 	callr	r2
 8042a18:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 8042a1c:	e0bfff17 	ldw	r2,-4(fp)
 8042a20:	1000031e 	bne	r2,zero,8042a30 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 8042a24:	e13ffd17 	ldw	r4,-12(fp)
 8042a28:	80428f00 	call	80428f0 <alt_alarm_stop>
 8042a2c:	00000d06 	br	8042a64 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 8042a30:	e0bffd17 	ldw	r2,-12(fp)
 8042a34:	10c00217 	ldw	r3,8(r2)
 8042a38:	e0bfff17 	ldw	r2,-4(fp)
 8042a3c:	1887883a 	add	r3,r3,r2
 8042a40:	e0bffd17 	ldw	r2,-12(fp)
 8042a44:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 8042a48:	e0bffd17 	ldw	r2,-12(fp)
 8042a4c:	10c00217 	ldw	r3,8(r2)
 8042a50:	d0a5d417 	ldw	r2,-26800(gp)
 8042a54:	1880032e 	bgeu	r3,r2,8042a64 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 8042a58:	e0bffd17 	ldw	r2,-12(fp)
 8042a5c:	00c00044 	movi	r3,1
 8042a60:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 8042a64:	e0bffe17 	ldw	r2,-8(fp)
 8042a68:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8042a6c:	e0fffd17 	ldw	r3,-12(fp)
 8042a70:	d0a01904 	addi	r2,gp,-32668
 8042a74:	18bfcf1e 	bne	r3,r2,80429b4 <__alt_data_end+0xf80429b4>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 8042a78:	0001883a 	nop
}
 8042a7c:	0001883a 	nop
 8042a80:	e037883a 	mov	sp,fp
 8042a84:	dfc00117 	ldw	ra,4(sp)
 8042a88:	df000017 	ldw	fp,0(sp)
 8042a8c:	dec00204 	addi	sp,sp,8
 8042a90:	f800283a 	ret

08042a94 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 8042a94:	deffff04 	addi	sp,sp,-4
 8042a98:	df000015 	stw	fp,0(sp)
 8042a9c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 8042aa0:	000170fa 	wrctl	ienable,zero
}
 8042aa4:	0001883a 	nop
 8042aa8:	e037883a 	mov	sp,fp
 8042aac:	df000017 	ldw	fp,0(sp)
 8042ab0:	dec00104 	addi	sp,sp,4
 8042ab4:	f800283a 	ret

08042ab8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 8042ab8:	defffa04 	addi	sp,sp,-24
 8042abc:	dfc00515 	stw	ra,20(sp)
 8042ac0:	df000415 	stw	fp,16(sp)
 8042ac4:	df000404 	addi	fp,sp,16
 8042ac8:	e13ffe15 	stw	r4,-8(fp)
 8042acc:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 8042ad0:	e0bfff17 	ldw	r2,-4(fp)
 8042ad4:	10800017 	ldw	r2,0(r2)
 8042ad8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 8042adc:	e13ffe17 	ldw	r4,-8(fp)
 8042ae0:	80403cc0 	call	80403cc <strlen>
 8042ae4:	10800044 	addi	r2,r2,1
 8042ae8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8042aec:	00000d06 	br	8042b24 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 8042af0:	e0bffc17 	ldw	r2,-16(fp)
 8042af4:	10800217 	ldw	r2,8(r2)
 8042af8:	e0fffd17 	ldw	r3,-12(fp)
 8042afc:	180d883a 	mov	r6,r3
 8042b00:	e17ffe17 	ldw	r5,-8(fp)
 8042b04:	1009883a 	mov	r4,r2
 8042b08:	8042dfc0 	call	8042dfc <memcmp>
 8042b0c:	1000021e 	bne	r2,zero,8042b18 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 8042b10:	e0bffc17 	ldw	r2,-16(fp)
 8042b14:	00000706 	br	8042b34 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 8042b18:	e0bffc17 	ldw	r2,-16(fp)
 8042b1c:	10800017 	ldw	r2,0(r2)
 8042b20:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8042b24:	e0fffc17 	ldw	r3,-16(fp)
 8042b28:	e0bfff17 	ldw	r2,-4(fp)
 8042b2c:	18bff01e 	bne	r3,r2,8042af0 <__alt_data_end+0xf8042af0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 8042b30:	0005883a 	mov	r2,zero
}
 8042b34:	e037883a 	mov	sp,fp
 8042b38:	dfc00117 	ldw	ra,4(sp)
 8042b3c:	df000017 	ldw	fp,0(sp)
 8042b40:	dec00204 	addi	sp,sp,8
 8042b44:	f800283a 	ret

08042b48 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 8042b48:	defffb04 	addi	sp,sp,-20
 8042b4c:	dfc00415 	stw	ra,16(sp)
 8042b50:	df000315 	stw	fp,12(sp)
 8042b54:	df000304 	addi	fp,sp,12
 8042b58:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 8042b5c:	d0a01217 	ldw	r2,-32696(gp)
 8042b60:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8042b64:	00003106 	br	8042c2c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 8042b68:	e0bffd17 	ldw	r2,-12(fp)
 8042b6c:	10800217 	ldw	r2,8(r2)
 8042b70:	1009883a 	mov	r4,r2
 8042b74:	80403cc0 	call	80403cc <strlen>
 8042b78:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 8042b7c:	e0bffd17 	ldw	r2,-12(fp)
 8042b80:	10c00217 	ldw	r3,8(r2)
 8042b84:	e0bffe17 	ldw	r2,-8(fp)
 8042b88:	10bfffc4 	addi	r2,r2,-1
 8042b8c:	1885883a 	add	r2,r3,r2
 8042b90:	10800003 	ldbu	r2,0(r2)
 8042b94:	10803fcc 	andi	r2,r2,255
 8042b98:	1080201c 	xori	r2,r2,128
 8042b9c:	10bfe004 	addi	r2,r2,-128
 8042ba0:	10800bd8 	cmpnei	r2,r2,47
 8042ba4:	1000031e 	bne	r2,zero,8042bb4 <alt_find_file+0x6c>
    {
      len -= 1;
 8042ba8:	e0bffe17 	ldw	r2,-8(fp)
 8042bac:	10bfffc4 	addi	r2,r2,-1
 8042bb0:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8042bb4:	e0bffe17 	ldw	r2,-8(fp)
 8042bb8:	e0ffff17 	ldw	r3,-4(fp)
 8042bbc:	1885883a 	add	r2,r3,r2
 8042bc0:	10800003 	ldbu	r2,0(r2)
 8042bc4:	10803fcc 	andi	r2,r2,255
 8042bc8:	1080201c 	xori	r2,r2,128
 8042bcc:	10bfe004 	addi	r2,r2,-128
 8042bd0:	10800be0 	cmpeqi	r2,r2,47
 8042bd4:	1000081e 	bne	r2,zero,8042bf8 <alt_find_file+0xb0>
 8042bd8:	e0bffe17 	ldw	r2,-8(fp)
 8042bdc:	e0ffff17 	ldw	r3,-4(fp)
 8042be0:	1885883a 	add	r2,r3,r2
 8042be4:	10800003 	ldbu	r2,0(r2)
 8042be8:	10803fcc 	andi	r2,r2,255
 8042bec:	1080201c 	xori	r2,r2,128
 8042bf0:	10bfe004 	addi	r2,r2,-128
 8042bf4:	10000a1e 	bne	r2,zero,8042c20 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 8042bf8:	e0bffd17 	ldw	r2,-12(fp)
 8042bfc:	10800217 	ldw	r2,8(r2)
 8042c00:	e0fffe17 	ldw	r3,-8(fp)
 8042c04:	180d883a 	mov	r6,r3
 8042c08:	e17fff17 	ldw	r5,-4(fp)
 8042c0c:	1009883a 	mov	r4,r2
 8042c10:	8042dfc0 	call	8042dfc <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8042c14:	1000021e 	bne	r2,zero,8042c20 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 8042c18:	e0bffd17 	ldw	r2,-12(fp)
 8042c1c:	00000706 	br	8042c3c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 8042c20:	e0bffd17 	ldw	r2,-12(fp)
 8042c24:	10800017 	ldw	r2,0(r2)
 8042c28:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8042c2c:	e0fffd17 	ldw	r3,-12(fp)
 8042c30:	d0a01204 	addi	r2,gp,-32696
 8042c34:	18bfcc1e 	bne	r3,r2,8042b68 <__alt_data_end+0xf8042b68>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 8042c38:	0005883a 	mov	r2,zero
}
 8042c3c:	e037883a 	mov	sp,fp
 8042c40:	dfc00117 	ldw	ra,4(sp)
 8042c44:	df000017 	ldw	fp,0(sp)
 8042c48:	dec00204 	addi	sp,sp,8
 8042c4c:	f800283a 	ret

08042c50 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 8042c50:	defffa04 	addi	sp,sp,-24
 8042c54:	dfc00515 	stw	ra,20(sp)
 8042c58:	df000415 	stw	fp,16(sp)
 8042c5c:	dc000315 	stw	r16,12(sp)
 8042c60:	df000404 	addi	fp,sp,16
 8042c64:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 8042c68:	00bffa04 	movi	r2,-24
 8042c6c:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8042c70:	e03ffc15 	stw	zero,-16(fp)
 8042c74:	00001d06 	br	8042cec <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
 8042c78:	04020134 	movhi	r16,2052
 8042c7c:	84115704 	addi	r16,r16,17756
 8042c80:	e0bffc17 	ldw	r2,-16(fp)
 8042c84:	01400304 	movi	r5,12
 8042c88:	1009883a 	mov	r4,r2
 8042c8c:	804340c0 	call	804340c <__mulsi3>
 8042c90:	8085883a 	add	r2,r16,r2
 8042c94:	10800017 	ldw	r2,0(r2)
 8042c98:	1000111e 	bne	r2,zero,8042ce0 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
 8042c9c:	04020134 	movhi	r16,2052
 8042ca0:	84115704 	addi	r16,r16,17756
 8042ca4:	e0bffc17 	ldw	r2,-16(fp)
 8042ca8:	01400304 	movi	r5,12
 8042cac:	1009883a 	mov	r4,r2
 8042cb0:	804340c0 	call	804340c <__mulsi3>
 8042cb4:	8085883a 	add	r2,r16,r2
 8042cb8:	e0fffe17 	ldw	r3,-8(fp)
 8042cbc:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 8042cc0:	d0e01617 	ldw	r3,-32680(gp)
 8042cc4:	e0bffc17 	ldw	r2,-16(fp)
 8042cc8:	1880020e 	bge	r3,r2,8042cd4 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
 8042ccc:	e0bffc17 	ldw	r2,-16(fp)
 8042cd0:	d0a01615 	stw	r2,-32680(gp)
      }
      rc = i;
 8042cd4:	e0bffc17 	ldw	r2,-16(fp)
 8042cd8:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 8042cdc:	00000606 	br	8042cf8 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8042ce0:	e0bffc17 	ldw	r2,-16(fp)
 8042ce4:	10800044 	addi	r2,r2,1
 8042ce8:	e0bffc15 	stw	r2,-16(fp)
 8042cec:	e0bffc17 	ldw	r2,-16(fp)
 8042cf0:	10800810 	cmplti	r2,r2,32
 8042cf4:	103fe01e 	bne	r2,zero,8042c78 <__alt_data_end+0xf8042c78>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 8042cf8:	e0bffd17 	ldw	r2,-12(fp)
}
 8042cfc:	e6ffff04 	addi	sp,fp,-4
 8042d00:	dfc00217 	ldw	ra,8(sp)
 8042d04:	df000117 	ldw	fp,4(sp)
 8042d08:	dc000017 	ldw	r16,0(sp)
 8042d0c:	dec00304 	addi	sp,sp,12
 8042d10:	f800283a 	ret

08042d14 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 8042d14:	defffe04 	addi	sp,sp,-8
 8042d18:	df000115 	stw	fp,4(sp)
 8042d1c:	df000104 	addi	fp,sp,4
 8042d20:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 8042d24:	e0bfff17 	ldw	r2,-4(fp)
 8042d28:	10bffe84 	addi	r2,r2,-6
 8042d2c:	10c00428 	cmpgeui	r3,r2,16
 8042d30:	18001a1e 	bne	r3,zero,8042d9c <alt_exception_cause_generated_bad_addr+0x88>
 8042d34:	100690ba 	slli	r3,r2,2
 8042d38:	00820134 	movhi	r2,2052
 8042d3c:	108b5304 	addi	r2,r2,11596
 8042d40:	1885883a 	add	r2,r3,r2
 8042d44:	10800017 	ldw	r2,0(r2)
 8042d48:	1000683a 	jmp	r2
 8042d4c:	08042d8c 	andi	zero,at,4278
 8042d50:	08042d8c 	andi	zero,at,4278
 8042d54:	08042d9c 	xori	zero,at,4278
 8042d58:	08042d9c 	xori	zero,at,4278
 8042d5c:	08042d9c 	xori	zero,at,4278
 8042d60:	08042d8c 	andi	zero,at,4278
 8042d64:	08042d94 	ori	zero,at,4278
 8042d68:	08042d9c 	xori	zero,at,4278
 8042d6c:	08042d8c 	andi	zero,at,4278
 8042d70:	08042d8c 	andi	zero,at,4278
 8042d74:	08042d9c 	xori	zero,at,4278
 8042d78:	08042d8c 	andi	zero,at,4278
 8042d7c:	08042d94 	ori	zero,at,4278
 8042d80:	08042d9c 	xori	zero,at,4278
 8042d84:	08042d9c 	xori	zero,at,4278
 8042d88:	08042d8c 	andi	zero,at,4278
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 8042d8c:	00800044 	movi	r2,1
 8042d90:	00000306 	br	8042da0 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 8042d94:	0005883a 	mov	r2,zero
 8042d98:	00000106 	br	8042da0 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 8042d9c:	0005883a 	mov	r2,zero
  }
}
 8042da0:	e037883a 	mov	sp,fp
 8042da4:	df000017 	ldw	fp,0(sp)
 8042da8:	dec00104 	addi	sp,sp,4
 8042dac:	f800283a 	ret

08042db0 <atexit>:
 8042db0:	200b883a 	mov	r5,r4
 8042db4:	000f883a 	mov	r7,zero
 8042db8:	000d883a 	mov	r6,zero
 8042dbc:	0009883a 	mov	r4,zero
 8042dc0:	8042fc01 	jmpi	8042fc0 <__register_exitproc>

08042dc4 <exit>:
 8042dc4:	defffe04 	addi	sp,sp,-8
 8042dc8:	000b883a 	mov	r5,zero
 8042dcc:	dc000015 	stw	r16,0(sp)
 8042dd0:	dfc00115 	stw	ra,4(sp)
 8042dd4:	2021883a 	mov	r16,r4
 8042dd8:	80430d80 	call	80430d8 <__call_exitprocs>
 8042ddc:	00820134 	movhi	r2,2052
 8042de0:	1092db04 	addi	r2,r2,19308
 8042de4:	11000017 	ldw	r4,0(r2)
 8042de8:	20800f17 	ldw	r2,60(r4)
 8042dec:	10000126 	beq	r2,zero,8042df4 <exit+0x30>
 8042df0:	103ee83a 	callr	r2
 8042df4:	8009883a 	mov	r4,r16
 8042df8:	80434340 	call	8043434 <_exit>

08042dfc <memcmp>:
 8042dfc:	01c000c4 	movi	r7,3
 8042e00:	3980192e 	bgeu	r7,r6,8042e68 <memcmp+0x6c>
 8042e04:	2144b03a 	or	r2,r4,r5
 8042e08:	11c4703a 	and	r2,r2,r7
 8042e0c:	10000f26 	beq	r2,zero,8042e4c <memcmp+0x50>
 8042e10:	20800003 	ldbu	r2,0(r4)
 8042e14:	28c00003 	ldbu	r3,0(r5)
 8042e18:	10c0151e 	bne	r2,r3,8042e70 <memcmp+0x74>
 8042e1c:	31bfff84 	addi	r6,r6,-2
 8042e20:	01ffffc4 	movi	r7,-1
 8042e24:	00000406 	br	8042e38 <memcmp+0x3c>
 8042e28:	20800003 	ldbu	r2,0(r4)
 8042e2c:	28c00003 	ldbu	r3,0(r5)
 8042e30:	31bfffc4 	addi	r6,r6,-1
 8042e34:	10c00e1e 	bne	r2,r3,8042e70 <memcmp+0x74>
 8042e38:	21000044 	addi	r4,r4,1
 8042e3c:	29400044 	addi	r5,r5,1
 8042e40:	31fff91e 	bne	r6,r7,8042e28 <__alt_data_end+0xf8042e28>
 8042e44:	0005883a 	mov	r2,zero
 8042e48:	f800283a 	ret
 8042e4c:	20c00017 	ldw	r3,0(r4)
 8042e50:	28800017 	ldw	r2,0(r5)
 8042e54:	18bfee1e 	bne	r3,r2,8042e10 <__alt_data_end+0xf8042e10>
 8042e58:	31bfff04 	addi	r6,r6,-4
 8042e5c:	21000104 	addi	r4,r4,4
 8042e60:	29400104 	addi	r5,r5,4
 8042e64:	39bff936 	bltu	r7,r6,8042e4c <__alt_data_end+0xf8042e4c>
 8042e68:	303fe91e 	bne	r6,zero,8042e10 <__alt_data_end+0xf8042e10>
 8042e6c:	003ff506 	br	8042e44 <__alt_data_end+0xf8042e44>
 8042e70:	10c5c83a 	sub	r2,r2,r3
 8042e74:	f800283a 	ret

08042e78 <memcpy>:
 8042e78:	defffd04 	addi	sp,sp,-12
 8042e7c:	dfc00215 	stw	ra,8(sp)
 8042e80:	dc400115 	stw	r17,4(sp)
 8042e84:	dc000015 	stw	r16,0(sp)
 8042e88:	00c003c4 	movi	r3,15
 8042e8c:	2005883a 	mov	r2,r4
 8042e90:	1980452e 	bgeu	r3,r6,8042fa8 <memcpy+0x130>
 8042e94:	2906b03a 	or	r3,r5,r4
 8042e98:	18c000cc 	andi	r3,r3,3
 8042e9c:	1800441e 	bne	r3,zero,8042fb0 <memcpy+0x138>
 8042ea0:	347ffc04 	addi	r17,r6,-16
 8042ea4:	8822d13a 	srli	r17,r17,4
 8042ea8:	28c00104 	addi	r3,r5,4
 8042eac:	23400104 	addi	r13,r4,4
 8042eb0:	8820913a 	slli	r16,r17,4
 8042eb4:	2b000204 	addi	r12,r5,8
 8042eb8:	22c00204 	addi	r11,r4,8
 8042ebc:	84000504 	addi	r16,r16,20
 8042ec0:	2a800304 	addi	r10,r5,12
 8042ec4:	22400304 	addi	r9,r4,12
 8042ec8:	2c21883a 	add	r16,r5,r16
 8042ecc:	2811883a 	mov	r8,r5
 8042ed0:	200f883a 	mov	r7,r4
 8042ed4:	41000017 	ldw	r4,0(r8)
 8042ed8:	1fc00017 	ldw	ra,0(r3)
 8042edc:	63c00017 	ldw	r15,0(r12)
 8042ee0:	39000015 	stw	r4,0(r7)
 8042ee4:	53800017 	ldw	r14,0(r10)
 8042ee8:	6fc00015 	stw	ra,0(r13)
 8042eec:	5bc00015 	stw	r15,0(r11)
 8042ef0:	4b800015 	stw	r14,0(r9)
 8042ef4:	18c00404 	addi	r3,r3,16
 8042ef8:	39c00404 	addi	r7,r7,16
 8042efc:	42000404 	addi	r8,r8,16
 8042f00:	6b400404 	addi	r13,r13,16
 8042f04:	63000404 	addi	r12,r12,16
 8042f08:	5ac00404 	addi	r11,r11,16
 8042f0c:	52800404 	addi	r10,r10,16
 8042f10:	4a400404 	addi	r9,r9,16
 8042f14:	1c3fef1e 	bne	r3,r16,8042ed4 <__alt_data_end+0xf8042ed4>
 8042f18:	89c00044 	addi	r7,r17,1
 8042f1c:	380e913a 	slli	r7,r7,4
 8042f20:	310003cc 	andi	r4,r6,15
 8042f24:	02c000c4 	movi	r11,3
 8042f28:	11c7883a 	add	r3,r2,r7
 8042f2c:	29cb883a 	add	r5,r5,r7
 8042f30:	5900212e 	bgeu	r11,r4,8042fb8 <memcpy+0x140>
 8042f34:	1813883a 	mov	r9,r3
 8042f38:	2811883a 	mov	r8,r5
 8042f3c:	200f883a 	mov	r7,r4
 8042f40:	42800017 	ldw	r10,0(r8)
 8042f44:	4a400104 	addi	r9,r9,4
 8042f48:	39ffff04 	addi	r7,r7,-4
 8042f4c:	4abfff15 	stw	r10,-4(r9)
 8042f50:	42000104 	addi	r8,r8,4
 8042f54:	59fffa36 	bltu	r11,r7,8042f40 <__alt_data_end+0xf8042f40>
 8042f58:	213fff04 	addi	r4,r4,-4
 8042f5c:	2008d0ba 	srli	r4,r4,2
 8042f60:	318000cc 	andi	r6,r6,3
 8042f64:	21000044 	addi	r4,r4,1
 8042f68:	2109883a 	add	r4,r4,r4
 8042f6c:	2109883a 	add	r4,r4,r4
 8042f70:	1907883a 	add	r3,r3,r4
 8042f74:	290b883a 	add	r5,r5,r4
 8042f78:	30000626 	beq	r6,zero,8042f94 <memcpy+0x11c>
 8042f7c:	198d883a 	add	r6,r3,r6
 8042f80:	29c00003 	ldbu	r7,0(r5)
 8042f84:	18c00044 	addi	r3,r3,1
 8042f88:	29400044 	addi	r5,r5,1
 8042f8c:	19ffffc5 	stb	r7,-1(r3)
 8042f90:	19bffb1e 	bne	r3,r6,8042f80 <__alt_data_end+0xf8042f80>
 8042f94:	dfc00217 	ldw	ra,8(sp)
 8042f98:	dc400117 	ldw	r17,4(sp)
 8042f9c:	dc000017 	ldw	r16,0(sp)
 8042fa0:	dec00304 	addi	sp,sp,12
 8042fa4:	f800283a 	ret
 8042fa8:	2007883a 	mov	r3,r4
 8042fac:	003ff206 	br	8042f78 <__alt_data_end+0xf8042f78>
 8042fb0:	2007883a 	mov	r3,r4
 8042fb4:	003ff106 	br	8042f7c <__alt_data_end+0xf8042f7c>
 8042fb8:	200d883a 	mov	r6,r4
 8042fbc:	003fee06 	br	8042f78 <__alt_data_end+0xf8042f78>

08042fc0 <__register_exitproc>:
 8042fc0:	defffa04 	addi	sp,sp,-24
 8042fc4:	dc000315 	stw	r16,12(sp)
 8042fc8:	04020134 	movhi	r16,2052
 8042fcc:	8412db04 	addi	r16,r16,19308
 8042fd0:	80c00017 	ldw	r3,0(r16)
 8042fd4:	dc400415 	stw	r17,16(sp)
 8042fd8:	dfc00515 	stw	ra,20(sp)
 8042fdc:	18805217 	ldw	r2,328(r3)
 8042fe0:	2023883a 	mov	r17,r4
 8042fe4:	10003726 	beq	r2,zero,80430c4 <__register_exitproc+0x104>
 8042fe8:	10c00117 	ldw	r3,4(r2)
 8042fec:	010007c4 	movi	r4,31
 8042ff0:	20c00e16 	blt	r4,r3,804302c <__register_exitproc+0x6c>
 8042ff4:	1a000044 	addi	r8,r3,1
 8042ff8:	8800221e 	bne	r17,zero,8043084 <__register_exitproc+0xc4>
 8042ffc:	18c00084 	addi	r3,r3,2
 8043000:	18c7883a 	add	r3,r3,r3
 8043004:	18c7883a 	add	r3,r3,r3
 8043008:	12000115 	stw	r8,4(r2)
 804300c:	10c7883a 	add	r3,r2,r3
 8043010:	19400015 	stw	r5,0(r3)
 8043014:	0005883a 	mov	r2,zero
 8043018:	dfc00517 	ldw	ra,20(sp)
 804301c:	dc400417 	ldw	r17,16(sp)
 8043020:	dc000317 	ldw	r16,12(sp)
 8043024:	dec00604 	addi	sp,sp,24
 8043028:	f800283a 	ret
 804302c:	00800034 	movhi	r2,0
 8043030:	10800004 	addi	r2,r2,0
 8043034:	10002626 	beq	r2,zero,80430d0 <__register_exitproc+0x110>
 8043038:	01006404 	movi	r4,400
 804303c:	d9400015 	stw	r5,0(sp)
 8043040:	d9800115 	stw	r6,4(sp)
 8043044:	d9c00215 	stw	r7,8(sp)
 8043048:	00000000 	call	0 <__alt_mem_mem_info-0x10000>
 804304c:	d9400017 	ldw	r5,0(sp)
 8043050:	d9800117 	ldw	r6,4(sp)
 8043054:	d9c00217 	ldw	r7,8(sp)
 8043058:	10001d26 	beq	r2,zero,80430d0 <__register_exitproc+0x110>
 804305c:	81000017 	ldw	r4,0(r16)
 8043060:	10000115 	stw	zero,4(r2)
 8043064:	02000044 	movi	r8,1
 8043068:	22405217 	ldw	r9,328(r4)
 804306c:	0007883a 	mov	r3,zero
 8043070:	12400015 	stw	r9,0(r2)
 8043074:	20805215 	stw	r2,328(r4)
 8043078:	10006215 	stw	zero,392(r2)
 804307c:	10006315 	stw	zero,396(r2)
 8043080:	883fde26 	beq	r17,zero,8042ffc <__alt_data_end+0xf8042ffc>
 8043084:	18c9883a 	add	r4,r3,r3
 8043088:	2109883a 	add	r4,r4,r4
 804308c:	1109883a 	add	r4,r2,r4
 8043090:	21802215 	stw	r6,136(r4)
 8043094:	01800044 	movi	r6,1
 8043098:	12406217 	ldw	r9,392(r2)
 804309c:	30cc983a 	sll	r6,r6,r3
 80430a0:	4992b03a 	or	r9,r9,r6
 80430a4:	12406215 	stw	r9,392(r2)
 80430a8:	21c04215 	stw	r7,264(r4)
 80430ac:	01000084 	movi	r4,2
 80430b0:	893fd21e 	bne	r17,r4,8042ffc <__alt_data_end+0xf8042ffc>
 80430b4:	11006317 	ldw	r4,396(r2)
 80430b8:	218cb03a 	or	r6,r4,r6
 80430bc:	11806315 	stw	r6,396(r2)
 80430c0:	003fce06 	br	8042ffc <__alt_data_end+0xf8042ffc>
 80430c4:	18805304 	addi	r2,r3,332
 80430c8:	18805215 	stw	r2,328(r3)
 80430cc:	003fc606 	br	8042fe8 <__alt_data_end+0xf8042fe8>
 80430d0:	00bfffc4 	movi	r2,-1
 80430d4:	003fd006 	br	8043018 <__alt_data_end+0xf8043018>

080430d8 <__call_exitprocs>:
 80430d8:	defff504 	addi	sp,sp,-44
 80430dc:	df000915 	stw	fp,36(sp)
 80430e0:	dd400615 	stw	r21,24(sp)
 80430e4:	dc800315 	stw	r18,12(sp)
 80430e8:	dfc00a15 	stw	ra,40(sp)
 80430ec:	ddc00815 	stw	r23,32(sp)
 80430f0:	dd800715 	stw	r22,28(sp)
 80430f4:	dd000515 	stw	r20,20(sp)
 80430f8:	dcc00415 	stw	r19,16(sp)
 80430fc:	dc400215 	stw	r17,8(sp)
 8043100:	dc000115 	stw	r16,4(sp)
 8043104:	d9000015 	stw	r4,0(sp)
 8043108:	2839883a 	mov	fp,r5
 804310c:	04800044 	movi	r18,1
 8043110:	057fffc4 	movi	r21,-1
 8043114:	00820134 	movhi	r2,2052
 8043118:	1092db04 	addi	r2,r2,19308
 804311c:	12000017 	ldw	r8,0(r2)
 8043120:	45005217 	ldw	r20,328(r8)
 8043124:	44c05204 	addi	r19,r8,328
 8043128:	a0001c26 	beq	r20,zero,804319c <__call_exitprocs+0xc4>
 804312c:	a0800117 	ldw	r2,4(r20)
 8043130:	15ffffc4 	addi	r23,r2,-1
 8043134:	b8000d16 	blt	r23,zero,804316c <__call_exitprocs+0x94>
 8043138:	14000044 	addi	r16,r2,1
 804313c:	8421883a 	add	r16,r16,r16
 8043140:	8421883a 	add	r16,r16,r16
 8043144:	84402004 	addi	r17,r16,128
 8043148:	a463883a 	add	r17,r20,r17
 804314c:	a421883a 	add	r16,r20,r16
 8043150:	e0001e26 	beq	fp,zero,80431cc <__call_exitprocs+0xf4>
 8043154:	80804017 	ldw	r2,256(r16)
 8043158:	e0801c26 	beq	fp,r2,80431cc <__call_exitprocs+0xf4>
 804315c:	bdffffc4 	addi	r23,r23,-1
 8043160:	843fff04 	addi	r16,r16,-4
 8043164:	8c7fff04 	addi	r17,r17,-4
 8043168:	bd7ff91e 	bne	r23,r21,8043150 <__alt_data_end+0xf8043150>
 804316c:	00800034 	movhi	r2,0
 8043170:	10800004 	addi	r2,r2,0
 8043174:	10000926 	beq	r2,zero,804319c <__call_exitprocs+0xc4>
 8043178:	a0800117 	ldw	r2,4(r20)
 804317c:	1000301e 	bne	r2,zero,8043240 <__call_exitprocs+0x168>
 8043180:	a0800017 	ldw	r2,0(r20)
 8043184:	10003226 	beq	r2,zero,8043250 <__call_exitprocs+0x178>
 8043188:	a009883a 	mov	r4,r20
 804318c:	98800015 	stw	r2,0(r19)
 8043190:	00000000 	call	0 <__alt_mem_mem_info-0x10000>
 8043194:	9d000017 	ldw	r20,0(r19)
 8043198:	a03fe41e 	bne	r20,zero,804312c <__alt_data_end+0xf804312c>
 804319c:	dfc00a17 	ldw	ra,40(sp)
 80431a0:	df000917 	ldw	fp,36(sp)
 80431a4:	ddc00817 	ldw	r23,32(sp)
 80431a8:	dd800717 	ldw	r22,28(sp)
 80431ac:	dd400617 	ldw	r21,24(sp)
 80431b0:	dd000517 	ldw	r20,20(sp)
 80431b4:	dcc00417 	ldw	r19,16(sp)
 80431b8:	dc800317 	ldw	r18,12(sp)
 80431bc:	dc400217 	ldw	r17,8(sp)
 80431c0:	dc000117 	ldw	r16,4(sp)
 80431c4:	dec00b04 	addi	sp,sp,44
 80431c8:	f800283a 	ret
 80431cc:	a0800117 	ldw	r2,4(r20)
 80431d0:	80c00017 	ldw	r3,0(r16)
 80431d4:	10bfffc4 	addi	r2,r2,-1
 80431d8:	15c01426 	beq	r2,r23,804322c <__call_exitprocs+0x154>
 80431dc:	80000015 	stw	zero,0(r16)
 80431e0:	183fde26 	beq	r3,zero,804315c <__alt_data_end+0xf804315c>
 80431e4:	95c8983a 	sll	r4,r18,r23
 80431e8:	a0806217 	ldw	r2,392(r20)
 80431ec:	a5800117 	ldw	r22,4(r20)
 80431f0:	2084703a 	and	r2,r4,r2
 80431f4:	10000b26 	beq	r2,zero,8043224 <__call_exitprocs+0x14c>
 80431f8:	a0806317 	ldw	r2,396(r20)
 80431fc:	2088703a 	and	r4,r4,r2
 8043200:	20000c1e 	bne	r4,zero,8043234 <__call_exitprocs+0x15c>
 8043204:	89400017 	ldw	r5,0(r17)
 8043208:	d9000017 	ldw	r4,0(sp)
 804320c:	183ee83a 	callr	r3
 8043210:	a0800117 	ldw	r2,4(r20)
 8043214:	15bfbf1e 	bne	r2,r22,8043114 <__alt_data_end+0xf8043114>
 8043218:	98800017 	ldw	r2,0(r19)
 804321c:	153fcf26 	beq	r2,r20,804315c <__alt_data_end+0xf804315c>
 8043220:	003fbc06 	br	8043114 <__alt_data_end+0xf8043114>
 8043224:	183ee83a 	callr	r3
 8043228:	003ff906 	br	8043210 <__alt_data_end+0xf8043210>
 804322c:	a5c00115 	stw	r23,4(r20)
 8043230:	003feb06 	br	80431e0 <__alt_data_end+0xf80431e0>
 8043234:	89000017 	ldw	r4,0(r17)
 8043238:	183ee83a 	callr	r3
 804323c:	003ff406 	br	8043210 <__alt_data_end+0xf8043210>
 8043240:	a0800017 	ldw	r2,0(r20)
 8043244:	a027883a 	mov	r19,r20
 8043248:	1029883a 	mov	r20,r2
 804324c:	003fb606 	br	8043128 <__alt_data_end+0xf8043128>
 8043250:	0005883a 	mov	r2,zero
 8043254:	003ffb06 	br	8043244 <__alt_data_end+0xf8043244>

08043258 <__divsi3>:
 8043258:	20001b16 	blt	r4,zero,80432c8 <__divsi3+0x70>
 804325c:	000f883a 	mov	r7,zero
 8043260:	28001616 	blt	r5,zero,80432bc <__divsi3+0x64>
 8043264:	200d883a 	mov	r6,r4
 8043268:	29001a2e 	bgeu	r5,r4,80432d4 <__divsi3+0x7c>
 804326c:	00800804 	movi	r2,32
 8043270:	00c00044 	movi	r3,1
 8043274:	00000106 	br	804327c <__divsi3+0x24>
 8043278:	10000d26 	beq	r2,zero,80432b0 <__divsi3+0x58>
 804327c:	294b883a 	add	r5,r5,r5
 8043280:	10bfffc4 	addi	r2,r2,-1
 8043284:	18c7883a 	add	r3,r3,r3
 8043288:	293ffb36 	bltu	r5,r4,8043278 <__alt_data_end+0xf8043278>
 804328c:	0005883a 	mov	r2,zero
 8043290:	18000726 	beq	r3,zero,80432b0 <__divsi3+0x58>
 8043294:	0005883a 	mov	r2,zero
 8043298:	31400236 	bltu	r6,r5,80432a4 <__divsi3+0x4c>
 804329c:	314dc83a 	sub	r6,r6,r5
 80432a0:	10c4b03a 	or	r2,r2,r3
 80432a4:	1806d07a 	srli	r3,r3,1
 80432a8:	280ad07a 	srli	r5,r5,1
 80432ac:	183ffa1e 	bne	r3,zero,8043298 <__alt_data_end+0xf8043298>
 80432b0:	38000126 	beq	r7,zero,80432b8 <__divsi3+0x60>
 80432b4:	0085c83a 	sub	r2,zero,r2
 80432b8:	f800283a 	ret
 80432bc:	014bc83a 	sub	r5,zero,r5
 80432c0:	39c0005c 	xori	r7,r7,1
 80432c4:	003fe706 	br	8043264 <__alt_data_end+0xf8043264>
 80432c8:	0109c83a 	sub	r4,zero,r4
 80432cc:	01c00044 	movi	r7,1
 80432d0:	003fe306 	br	8043260 <__alt_data_end+0xf8043260>
 80432d4:	00c00044 	movi	r3,1
 80432d8:	003fee06 	br	8043294 <__alt_data_end+0xf8043294>

080432dc <__modsi3>:
 80432dc:	20001716 	blt	r4,zero,804333c <__modsi3+0x60>
 80432e0:	000f883a 	mov	r7,zero
 80432e4:	2005883a 	mov	r2,r4
 80432e8:	28001216 	blt	r5,zero,8043334 <__modsi3+0x58>
 80432ec:	2900162e 	bgeu	r5,r4,8043348 <__modsi3+0x6c>
 80432f0:	01800804 	movi	r6,32
 80432f4:	00c00044 	movi	r3,1
 80432f8:	00000106 	br	8043300 <__modsi3+0x24>
 80432fc:	30000a26 	beq	r6,zero,8043328 <__modsi3+0x4c>
 8043300:	294b883a 	add	r5,r5,r5
 8043304:	31bfffc4 	addi	r6,r6,-1
 8043308:	18c7883a 	add	r3,r3,r3
 804330c:	293ffb36 	bltu	r5,r4,80432fc <__alt_data_end+0xf80432fc>
 8043310:	18000526 	beq	r3,zero,8043328 <__modsi3+0x4c>
 8043314:	1806d07a 	srli	r3,r3,1
 8043318:	11400136 	bltu	r2,r5,8043320 <__modsi3+0x44>
 804331c:	1145c83a 	sub	r2,r2,r5
 8043320:	280ad07a 	srli	r5,r5,1
 8043324:	183ffb1e 	bne	r3,zero,8043314 <__alt_data_end+0xf8043314>
 8043328:	38000126 	beq	r7,zero,8043330 <__modsi3+0x54>
 804332c:	0085c83a 	sub	r2,zero,r2
 8043330:	f800283a 	ret
 8043334:	014bc83a 	sub	r5,zero,r5
 8043338:	003fec06 	br	80432ec <__alt_data_end+0xf80432ec>
 804333c:	0109c83a 	sub	r4,zero,r4
 8043340:	01c00044 	movi	r7,1
 8043344:	003fe706 	br	80432e4 <__alt_data_end+0xf80432e4>
 8043348:	00c00044 	movi	r3,1
 804334c:	003ff106 	br	8043314 <__alt_data_end+0xf8043314>

08043350 <__udivsi3>:
 8043350:	200d883a 	mov	r6,r4
 8043354:	2900152e 	bgeu	r5,r4,80433ac <__udivsi3+0x5c>
 8043358:	28001416 	blt	r5,zero,80433ac <__udivsi3+0x5c>
 804335c:	00800804 	movi	r2,32
 8043360:	00c00044 	movi	r3,1
 8043364:	00000206 	br	8043370 <__udivsi3+0x20>
 8043368:	10000e26 	beq	r2,zero,80433a4 <__udivsi3+0x54>
 804336c:	28000516 	blt	r5,zero,8043384 <__udivsi3+0x34>
 8043370:	294b883a 	add	r5,r5,r5
 8043374:	10bfffc4 	addi	r2,r2,-1
 8043378:	18c7883a 	add	r3,r3,r3
 804337c:	293ffa36 	bltu	r5,r4,8043368 <__alt_data_end+0xf8043368>
 8043380:	18000826 	beq	r3,zero,80433a4 <__udivsi3+0x54>
 8043384:	0005883a 	mov	r2,zero
 8043388:	31400236 	bltu	r6,r5,8043394 <__udivsi3+0x44>
 804338c:	314dc83a 	sub	r6,r6,r5
 8043390:	10c4b03a 	or	r2,r2,r3
 8043394:	1806d07a 	srli	r3,r3,1
 8043398:	280ad07a 	srli	r5,r5,1
 804339c:	183ffa1e 	bne	r3,zero,8043388 <__alt_data_end+0xf8043388>
 80433a0:	f800283a 	ret
 80433a4:	0005883a 	mov	r2,zero
 80433a8:	f800283a 	ret
 80433ac:	00c00044 	movi	r3,1
 80433b0:	003ff406 	br	8043384 <__alt_data_end+0xf8043384>

080433b4 <__umodsi3>:
 80433b4:	2005883a 	mov	r2,r4
 80433b8:	2900122e 	bgeu	r5,r4,8043404 <__umodsi3+0x50>
 80433bc:	28001116 	blt	r5,zero,8043404 <__umodsi3+0x50>
 80433c0:	01800804 	movi	r6,32
 80433c4:	00c00044 	movi	r3,1
 80433c8:	00000206 	br	80433d4 <__umodsi3+0x20>
 80433cc:	30000c26 	beq	r6,zero,8043400 <__umodsi3+0x4c>
 80433d0:	28000516 	blt	r5,zero,80433e8 <__umodsi3+0x34>
 80433d4:	294b883a 	add	r5,r5,r5
 80433d8:	31bfffc4 	addi	r6,r6,-1
 80433dc:	18c7883a 	add	r3,r3,r3
 80433e0:	293ffa36 	bltu	r5,r4,80433cc <__alt_data_end+0xf80433cc>
 80433e4:	18000626 	beq	r3,zero,8043400 <__umodsi3+0x4c>
 80433e8:	1806d07a 	srli	r3,r3,1
 80433ec:	11400136 	bltu	r2,r5,80433f4 <__umodsi3+0x40>
 80433f0:	1145c83a 	sub	r2,r2,r5
 80433f4:	280ad07a 	srli	r5,r5,1
 80433f8:	183ffb1e 	bne	r3,zero,80433e8 <__alt_data_end+0xf80433e8>
 80433fc:	f800283a 	ret
 8043400:	f800283a 	ret
 8043404:	00c00044 	movi	r3,1
 8043408:	003ff706 	br	80433e8 <__alt_data_end+0xf80433e8>

0804340c <__mulsi3>:
 804340c:	0005883a 	mov	r2,zero
 8043410:	20000726 	beq	r4,zero,8043430 <__mulsi3+0x24>
 8043414:	20c0004c 	andi	r3,r4,1
 8043418:	2008d07a 	srli	r4,r4,1
 804341c:	18000126 	beq	r3,zero,8043424 <__mulsi3+0x18>
 8043420:	1145883a 	add	r2,r2,r5
 8043424:	294b883a 	add	r5,r5,r5
 8043428:	203ffa1e 	bne	r4,zero,8043414 <__alt_data_end+0xf8043414>
 804342c:	f800283a 	ret
 8043430:	f800283a 	ret

08043434 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 8043434:	defffd04 	addi	sp,sp,-12
 8043438:	df000215 	stw	fp,8(sp)
 804343c:	df000204 	addi	fp,sp,8
 8043440:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 8043444:	0001883a 	nop
 8043448:	e0bfff17 	ldw	r2,-4(fp)
 804344c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 8043450:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 8043454:	10000226 	beq	r2,zero,8043460 <_exit+0x2c>
    ALT_SIM_FAIL();
 8043458:	002af070 	cmpltui	zero,zero,43969
 804345c:	00000106 	br	8043464 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 8043460:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 8043464:	003fff06 	br	8043464 <__alt_data_end+0xf8043464>

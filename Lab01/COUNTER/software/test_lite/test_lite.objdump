
test_lite.elf:     file format elf32-littlenios2
test_lite.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00040224

Program Header:
    LOAD off    0x00001000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x00005834 memsz 0x00005834 flags r-x
    LOAD off    0x00006854 vaddr 0x00045854 paddr 0x00046fc0 align 2**12
         filesz 0x0000176c memsz 0x0000176c flags rw-
    LOAD off    0x0000072c vaddr 0x0004872c paddr 0x0004872c align 2**12
         filesz 0x00000000 memsz 0x00000428 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00040000  00040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000204  00040020  00040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000055e4  00040224  00040224  00001224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000004c  00045808  00045808  00006808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       0000176c  00045854  00046fc0  00006854  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000428  0004872c  0004872c  0000872c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_mem   00000000  00048b54  00048b54  00007fc0  2**0
                  CONTENTS
  7 .comment      0000002d  00000000  00000000  00007fc0  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000a38  00000000  00000000  00007ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_info   0001498a  00000000  00000000  00008a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000068bf  00000000  00000000  0001d3b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line   00005f52  00000000  00000000  00023c71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_frame  000015a8  00000000  00000000  00029bc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    00001a5d  00000000  00000000  0002b16c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_alt_sim_info 00000010  00000000  00000000  0002cbcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000070  00000000  00000000  0002cbe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line_str 000012c1  00000000  00000000  0002cc50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_loclists 000041d6  00000000  00000000  0002df11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000005e0  00000000  00000000  000320e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .thread_model 00000003  00000000  00000000  00034cea  2**0
                  CONTENTS, READONLY
 20 .cpu          00000003  00000000  00000000  00034ced  2**0
                  CONTENTS, READONLY
 21 .qsys         00000001  00000000  00000000  00034cf0  2**0
                  CONTENTS, READONLY
 22 .simulation_enabled 00000001  00000000  00000000  00034cf1  2**0
                  CONTENTS, READONLY
 23 .sysid_hash   00000004  00000000  00000000  00034cf2  2**0
                  CONTENTS, READONLY
 24 .sysid_base   00000004  00000000  00000000  00034cf6  2**0
                  CONTENTS, READONLY
 25 .sysid_time   00000004  00000000  00000000  00034cfa  2**0
                  CONTENTS, READONLY
 26 .stderr_dev   0000000b  00000000  00000000  00034cfe  2**0
                  CONTENTS, READONLY
 27 .stdin_dev    0000000b  00000000  00000000  00034d09  2**0
                  CONTENTS, READONLY
 28 .stdout_dev   0000000b  00000000  00000000  00034d14  2**0
                  CONTENTS, READONLY
 29 .sopc_system_name 00000003  00000000  00000000  00034d1f  2**0
                  CONTENTS, READONLY
 30 .quartus_project_dir 0000001b  00000000  00000000  00034d22  2**0
                  CONTENTS, READONLY
 31 .jdi          000042fa  00000000  00000000  00034d3d  2**0
                  CONTENTS, READONLY
 32 .sopcinfo     0003dbcb  00000000  00000000  00039037  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00040000 l    d  .entry	00000000 .entry
00040020 l    d  .exceptions	00000000 .exceptions
00040224 l    d  .text	00000000 .text
00045808 l    d  .rodata	00000000 .rodata
00045854 l    d  .rwdata	00000000 .rwdata
0004872c l    d  .bss	00000000 .bss
00048b54 l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    d  .debug_loclists	00000000 .debug_loclists
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    df *ABS*	00000000 crt0.o
0004025c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 impure.c
00000000 l    df *ABS*	00000000 findfp.c
0004040c l     F .text	00000008 __fp_lock
00040414 l     F .text	0000001c stdio_exit_handler
00040430 l     F .text	00000070 cleanup_stdio
000404a0 l     F .text	00000008 __fp_unlock
000404a8 l     F .text	00000174 global_stdio_init.part.0
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 freer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 reallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
00043250 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00043368 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
000433d0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
000434c8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
000435b4 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
000436a0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00043880 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00046fb0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00043aec l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00043c2c l     F .text	00000034 alt_dev_reg
00045f2c l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00043f24 l     F .text	00000214 altera_avalon_jtag_uart_irq
00044138 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00044784 l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00044a04 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00044e68 l     F .text	000000d4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00044fb8 l     F .text	0000003c alt_get_errno
00044ff4 l     F .text	000000dc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00048760 g     O .bss	00000004 alt_instruction_exception_handler
00042eac g     F .text	00000058 _isatty_r
000437bc g     F .text	0000007c alt_main
00040294 g     F .text	000000d0 _puts_r
000488c4 g     O .bss	00000100 alt_irq
000414ec g     F .text	00000064 _lseek_r
00046fc0 g       *ABS*	00000000 __flash_rwdata_start
00048b54 g       *ABS*	00000000 __alt_heap_start
00040dc0 g     F .text	0000005c __sseek
0004073c g     F .text	00000028 __sinit
0004385c g     F .text	00000024 __malloc_unlock
00041164 g     F .text	00000128 memmove
00045400 g     F .text	00000024 altera_nios2_gen2_irq_init
00040000 g     F .entry	0000000c __reset
00048730 g     O .bss	00000004 __stdio_exit_handler
00040020 g       *ABS*	00000000 __flash_exceptions_start
00042e4c g     F .text	00000060 _fstat_r
0004872c g     O .bss	00000004 errno
00040d38 g     F .text	00000008 __seofread
00048748 g     O .bss	00000004 alt_argv
0004ef8c g       *ABS*	00000000 _gp
00045dac g     O .rwdata	00000180 alt_fd_list
00045424 g     F .text	00000090 alt_find_dev
00041064 g     F .text	00000100 memcpy
00044f3c g     F .text	0000007c alt_io_redirect
00045808 g       *ABS*	00000000 __DTOR_END__
00040364 g     F .text	00000010 puts
00045674 g     F .text	00000074 alt_exception_cause_generated_bad_addr
0004433c g     F .text	00000220 altera_avalon_jtag_uart_read
00043168 g     F .text	00000064 .hidden __udivsi3
00043504 g     F .text	000000b0 isatty
0004873c g     O .bss	00000004 __malloc_top_pad
0004079c g     F .text	000004a0 __sfvwrite_r
00042f04 g     F .text	00000058 _sbrk_r
00041550 g     F .text	00000064 _read_r
00046fa8 g     O .rwdata	00000004 alt_max_fd
00042828 g     F .text	000000f0 _fclose_r
00042b8c g     F .text	0000008c fflush
00048738 g     O .bss	00000004 __malloc_max_sbrked_mem
000436dc g     F .text	000000e0 lseek
0004223c g     F .text	000005ec _realloc_r
00048b54 g       *ABS*	00000000 __bss_end
00044d80 g     F .text	000000e8 alt_iic_isr_register
000452d4 g     F .text	0000012c alt_tick
0004076c g     F .text	00000018 __fp_lock_all
00044d34 g     F .text	0000004c alt_ic_irq_enabled
00045230 g     F .text	000000a4 alt_alarm_stop
00048750 g     O .bss	00000004 alt_irq_active
00040000 g       *ABS*	00000000 __alt_mem_onchip_mem
000400fc g     F .exceptions	000000c8 alt_irq_handler
00045d84 g     O .rwdata	00000028 alt_dev_null
00041424 g     F .text	000000c8 _reclaim_reent
000449e4 g     F .text	00000020 alt_dcache_flush_all
00046fc0 g       *ABS*	00000000 __ram_rwdata_end
00048764 g     O .bss	00000138 __sf
00046fa0 g     O .rwdata	00000008 alt_dev_list
00043b28 g     F .text	00000104 write
00045854 g       *ABS*	00000000 __ram_rodata_end
0004340c g     F .text	000000bc fstat
000431cc g     F .text	0000005c .hidden __umodsi3
00048b54 g       *ABS*	00000000 end
00043e64 g     F .text	000000c0 altera_avalon_jtag_uart_init
000401c4 g     F .exceptions	00000060 alt_instruction_exception_entry
00045808 g       *ABS*	00000000 __CTOR_LIST__
00080000 g       *ABS*	00000000 __alt_stack_pointer
00044800 g     F .text	00000084 alt_avalon_timer_sc_init
0004455c g     F .text	00000228 altera_avalon_jtag_uart_write
00040764 g     F .text	00000004 __sfp_lock_acquire
00040f68 g     F .text	000000fc memchr
0004176c g     F .text	00000308 _free_r
00042f5c g     F .text	00000118 __call_exitprocs
000489c4 g     O .bss	00000190 __atexit0
00046f90 g     O .rwdata	00000004 __malloc_sbrk_base
00040224 g     F .text	0000003c _start
00048754 g     O .bss	00000004 _alt_tick_rate
00048758 g     O .bss	00000008 _alt_nticks
000438bc g     F .text	00000108 read
00043c9c g     F .text	00000064 alt_sys_init
00045774 g     F .text	00000094 __register_exitproc
000441e0 g     F .text	00000068 altera_avalon_jtag_uart_close
00043228 g     F .text	00000028 .hidden __mulsi3
00045854 g       *ABS*	00000000 __ram_rwdata_start
00045808 g       *ABS*	00000000 __ram_rodata_start
0004889c g     O .bss	00000028 __malloc_current_mallinfo
00043d00 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000455bc g     F .text	000000b8 alt_get_fd
000413cc g     F .text	00000058 _close_r
000456fc g     F .text	00000078 memcmp
00043dc0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00048b54 g       *ABS*	00000000 __alt_stack_base
00043e10 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00040e24 g     F .text	00000144 __swsetup_r
0004061c g     F .text	00000120 __sfp
0004597c g     O .rwdata	00000408 __malloc_av_
00048740 g     O .bss	00000004 __atexit
00040ce4 g     F .text	00000054 __sread
000454b4 g     F .text	00000108 alt_find_file
00044a40 g     F .text	000000a8 alt_dev_llist_insert
00043838 g     F .text	00000024 __malloc_lock
00043a34 g     F .text	000000b8 sbrk
00042b30 g     F .text	0000005c _fflush_r
0004872c g       *ABS*	00000000 __bss_start
0004128c g     F .text	00000140 memset
00040260 g     F .text	00000034 main
0004874c g     O .bss	00000004 alt_envp
00048734 g     O .bss	00000004 __malloc_max_total_mem
00043d60 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00040e1c g     F .text	00000008 __sclose
00080000 g       *ABS*	00000000 __alt_heap_limit
00042918 g     F .text	00000010 fclose
00041a74 g     F .text	000007c8 _malloc_r
00046fac g     O .rwdata	00000004 alt_errno
00043074 g     F .text	00000080 .hidden __divsi3
00041648 g     F .text	00000124 _malloc_trim_r
00045808 g       *ABS*	00000000 __CTOR_END__
00045808 g       *ABS*	00000000 __flash_rodata_start
00045808 g       *ABS*	00000000 __DTOR_LIST__
00043c60 g     F .text	0000003c alt_irq_init
000439c4 g     F .text	00000070 alt_release_fd
000456e8 g     F .text	00000014 atexit
000415b4 g     F .text	00000064 _write_r
00046f8c g     O .rwdata	00000004 _impure_ptr
00048744 g     O .bss	00000004 alt_argc
00042928 g     F .text	00000208 __sflush_r
00044b4c g     F .text	00000064 _do_dtors
00040c3c g     F .text	000000a8 _fwalk_sglue
00040020 g       .exceptions	00000000 alt_irq_entry
00040784 g     F .text	00000018 __fp_unlock_all
00046f98 g     O .rwdata	00000008 alt_fs_list
00040020 g       *ABS*	00000000 __ram_exceptions_start
00042dc0 g     F .text	0000008c __swhatbuf_r
00044bd0 g     F .text	00000050 alt_ic_isr_register
00045970 g     O .rwdata	0000000c __sglue
00046fc0 g       *ABS*	00000000 _edata
00048b54 g       *ABS*	00000000 _end
00040224 g       *ABS*	00000000 __ram_exceptions_end
00044248 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00044ca8 g     F .text	0000008c alt_ic_irq_disable
00040d40 g     F .text	00000080 __swrite
00046f94 g     O .rwdata	00000004 __malloc_trim_threshold
00041618 g     F .text	00000030 exit
000430f4 g     F .text	00000074 .hidden __modsi3
00045854 g     O .rwdata	0000011c _impure_data
00080000 g       *ABS*	00000000 __alt_data_end
00040020 g     F .exceptions	00000000 alt_exception
00040768 g     F .text	00000004 __sfp_lock_release
00043394 g     F .text	0000003c _exit
00044884 g     F .text	00000160 alt_alarm_start
00042c18 g     F .text	000001a8 __smakebuf_r
00040374 g     F .text	00000098 strlen
000450d0 g     F .text	00000160 open
00044bb0 g     F .text	00000020 alt_icache_flush_all
00046fb4 g     O .rwdata	00000004 alt_priority_mask
00044c20 g     F .text	00000088 alt_ic_irq_enable
00046fb8 g     O .rwdata	00000008 alt_alarm_list
00044ae8 g     F .text	00000064 _do_ctors
0004328c g     F .text	000000dc close
0004361c g     F .text	00000084 alt_load



Disassembly of section .entry:

00040000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   40000:	00400134 	movhi	at,4
    ori r1, r1, %lo(_start)
   40004:	08408914 	ori	at,at,548
    jmp r1
   40008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00040020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   40020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   40024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   40028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   4002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   40030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   40034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   40038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   4003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   40040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   40044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   40048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   4004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   40050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   40054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   40058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   4005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   40060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   40064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   40068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   4006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   40070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   40074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   40078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   4007c:	10000326 	beq	r2,zero,4008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   40080:	20000226 	beq	r4,zero,4008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   40084:	00400fc0 	call	400fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   40088:	00000706 	br	400a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   4008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   40090:	e8bfff17 	ldw	r2,-4(ea)
   40094:	e93fff04 	addi	r4,ea,-4
   40098:	00401c40 	call	401c4 <alt_instruction_exception_entry>
   4009c:	1000021e 	bne	r2,zero,400a8 <alt_exception+0x88>
   400a0:	ebffff04 	addi	r15,ea,-4
   400a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   400a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   400ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   400b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   400b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   400b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   400bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   400c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   400c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   400c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   400cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   400d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   400d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   400d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   400dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   400e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   400e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   400e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   400ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   400f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   400f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   400f8:	ef80083a 	eret

000400fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   400fc:	defff904 	addi	sp,sp,-28
   40100:	dfc00615 	stw	ra,24(sp)
   40104:	df000515 	stw	fp,20(sp)
   40108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   4010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   40110:	0005313a 	rdctl	r2,ipending
   40114:	e0bffc15 	stw	r2,-16(fp)

  return active;
   40118:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   4011c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
   40120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   40124:	00800044 	movi	r2,1
   40128:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   4012c:	e0ffff17 	ldw	r3,-4(fp)
   40130:	e0bffe17 	ldw	r2,-8(fp)
   40134:	1884703a 	and	r2,r3,r2
   40138:	10001126 	beq	r2,zero,40180 <alt_irq_handler+0x84>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   4013c:	e0bffd17 	ldw	r2,-12(fp)
   40140:	100690fa 	slli	r3,r2,3
   40144:	00800174 	movhi	r2,5
   40148:	1885883a 	add	r2,r3,r2
   4014c:	10e23117 	ldw	r3,-30524(r2)
   40150:	e0bffd17 	ldw	r2,-12(fp)
   40154:	100890fa 	slli	r4,r2,3
   40158:	00800174 	movhi	r2,5
   4015c:	2085883a 	add	r2,r4,r2
   40160:	10a23217 	ldw	r2,-30520(r2)
   40164:	1009883a 	mov	r4,r2
   40168:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   4016c:	0001883a 	nop
  NIOS2_READ_IPENDING (active);
   40170:	0005313a 	rdctl	r2,ipending
   40174:	e0bffb15 	stw	r2,-20(fp)
  return active;
   40178:	e0bffb17 	ldw	r2,-20(fp)
   4017c:	00000706 	br	4019c <alt_irq_handler+0xa0>
      }
      mask <<= 1;
   40180:	e0bffe17 	ldw	r2,-8(fp)
   40184:	1085883a 	add	r2,r2,r2
   40188:	e0bffe15 	stw	r2,-8(fp)
      i++;
   4018c:	e0bffd17 	ldw	r2,-12(fp)
   40190:	10800044 	addi	r2,r2,1
   40194:	e0bffd15 	stw	r2,-12(fp)
      if (active & mask)
   40198:	003fe406 	br	4012c <alt_irq_handler+0x30>

    } while (1);

    active = alt_irq_pending ();
   4019c:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
   401a0:	e0bfff17 	ldw	r2,-4(fp)
   401a4:	103fde1e 	bne	r2,zero,40120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   401a8:	0001883a 	nop
}
   401ac:	0001883a 	nop
   401b0:	e037883a 	mov	sp,fp
   401b4:	dfc00117 	ldw	ra,4(sp)
   401b8:	df000017 	ldw	fp,0(sp)
   401bc:	dec00204 	addi	sp,sp,8
   401c0:	f800283a 	ret

000401c4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   401c4:	defffb04 	addi	sp,sp,-20
   401c8:	dfc00415 	stw	ra,16(sp)
   401cc:	df000315 	stw	fp,12(sp)
   401d0:	df000304 	addi	fp,sp,12
   401d4:	e13ffd15 	stw	r4,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   401d8:	00bfffc4 	movi	r2,-1
   401dc:	e0bfff15 	stw	r2,-4(fp)
  badaddr = 0;
   401e0:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   401e4:	d0a5f517 	ldw	r2,-26668(gp)
   401e8:	10000726 	beq	r2,zero,40208 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   401ec:	d0a5f517 	ldw	r2,-26668(gp)
   401f0:	e0ffff17 	ldw	r3,-4(fp)
   401f4:	e1bffe17 	ldw	r6,-8(fp)
   401f8:	e17ffd17 	ldw	r5,-12(fp)
   401fc:	1809883a 	mov	r4,r3
   40200:	103ee83a 	callr	r2
   40204:	00000206 	br	40210 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   40208:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   4020c:	0005883a 	mov	r2,zero
}
   40210:	e037883a 	mov	sp,fp
   40214:	dfc00117 	ldw	ra,4(sp)
   40218:	df000017 	ldw	fp,0(sp)
   4021c:	dec00204 	addi	sp,sp,8
   40220:	f800283a 	ret

Disassembly of section .text:

00040224 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   40224:	06c00234 	movhi	sp,8
    ori sp, sp, %lo(__alt_stack_pointer)
   40228:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   4022c:	06800134 	movhi	gp,4
    ori gp, gp, %lo(_gp)
   40230:	d6bbe314 	ori	gp,gp,61324
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   40234:	00800134 	movhi	r2,4
    ori r2, r2, %lo(__bss_start)
   40238:	10a1cb14 	ori	r2,r2,34604

    movhi r3, %hi(__bss_end)
   4023c:	00c00134 	movhi	r3,4
    ori r3, r3, %lo(__bss_end)
   40240:	18e2d514 	ori	r3,r3,35668

    beq r2, r3, 1f
   40244:	10c00326 	beq	r2,r3,40254 <_start+0x30>

0:
    stw zero, (r2)
   40248:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   4024c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   40250:	10fffd36 	bltu	r2,r3,40248 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   40254:	004361c0 	call	4361c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   40258:	00437bc0 	call	437bc <alt_main>

0004025c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   4025c:	003fff06 	br	4025c <alt_after_alt_main>

00040260 <main>:
 */

#include <stdio.h>

int main()
{
   40260:	defffe04 	addi	sp,sp,-8
   40264:	dfc00115 	stw	ra,4(sp)
   40268:	df000015 	stw	fp,0(sp)
   4026c:	d839883a 	mov	fp,sp
  printf("Hello from Nios II!\n");
   40270:	01000134 	movhi	r4,4
   40274:	21160204 	addi	r4,r4,22536
   40278:	00403640 	call	40364 <puts>

  return 0;
   4027c:	0005883a 	mov	r2,zero
}
   40280:	e037883a 	mov	sp,fp
   40284:	dfc00117 	ldw	ra,4(sp)
   40288:	df000017 	ldw	fp,0(sp)
   4028c:	dec00204 	addi	sp,sp,8
   40290:	f800283a 	ret

00040294 <_puts_r>:
   40294:	defff504 	addi	sp,sp,-44
   40298:	dc000815 	stw	r16,32(sp)
   4029c:	2021883a 	mov	r16,r4
   402a0:	2809883a 	mov	r4,r5
   402a4:	dc400915 	stw	r17,36(sp)
   402a8:	dfc00a15 	stw	ra,40(sp)
   402ac:	2823883a 	mov	r17,r5
   402b0:	00403740 	call	40374 <strlen>
   402b4:	11000044 	addi	r4,r2,1
   402b8:	d8800515 	stw	r2,20(sp)
   402bc:	00800044 	movi	r2,1
   402c0:	00c00134 	movhi	r3,4
   402c4:	d8800715 	stw	r2,28(sp)
   402c8:	d8800404 	addi	r2,sp,16
   402cc:	18d60704 	addi	r3,r3,22556
   402d0:	d8800115 	stw	r2,4(sp)
   402d4:	00800084 	movi	r2,2
   402d8:	dc400415 	stw	r17,16(sp)
   402dc:	d8c00615 	stw	r3,24(sp)
   402e0:	d9000315 	stw	r4,12(sp)
   402e4:	d8800215 	stw	r2,8(sp)
   402e8:	81400217 	ldw	r5,8(r16)
   402ec:	80000226 	beq	r16,zero,402f8 <_puts_r+0x64>
   402f0:	80800d17 	ldw	r2,52(r16)
   402f4:	10001426 	beq	r2,zero,40348 <_puts_r+0xb4>
   402f8:	2880030b 	ldhu	r2,12(r5)
   402fc:	10c8000c 	andi	r3,r2,8192
   40300:	1800061e 	bne	r3,zero,4031c <_puts_r+0x88>
   40304:	28c01917 	ldw	r3,100(r5)
   40308:	0137ffc4 	movi	r4,-8193
   4030c:	10880014 	ori	r2,r2,8192
   40310:	1906703a 	and	r3,r3,r4
   40314:	2880030d 	sth	r2,12(r5)
   40318:	28c01915 	stw	r3,100(r5)
   4031c:	d9800104 	addi	r6,sp,4
   40320:	8009883a 	mov	r4,r16
   40324:	004079c0 	call	4079c <__sfvwrite_r>
   40328:	1007883a 	mov	r3,r2
   4032c:	00800284 	movi	r2,10
   40330:	18000a1e 	bne	r3,zero,4035c <_puts_r+0xc8>
   40334:	dfc00a17 	ldw	ra,40(sp)
   40338:	dc400917 	ldw	r17,36(sp)
   4033c:	dc000817 	ldw	r16,32(sp)
   40340:	dec00b04 	addi	sp,sp,44
   40344:	f800283a 	ret
   40348:	8009883a 	mov	r4,r16
   4034c:	d9400015 	stw	r5,0(sp)
   40350:	004073c0 	call	4073c <__sinit>
   40354:	d9400017 	ldw	r5,0(sp)
   40358:	003fe706 	br	402f8 <_puts_r+0x64>
   4035c:	00bfffc4 	movi	r2,-1
   40360:	003ff406 	br	40334 <_puts_r+0xa0>

00040364 <puts>:
   40364:	00800134 	movhi	r2,4
   40368:	200b883a 	mov	r5,r4
   4036c:	111be317 	ldw	r4,28556(r2)
   40370:	00402941 	jmpi	40294 <_puts_r>

00040374 <strlen>:
   40374:	208000cc 	andi	r2,r4,3
   40378:	10000926 	beq	r2,zero,403a0 <strlen+0x2c>
   4037c:	2005883a 	mov	r2,r4
   40380:	00000306 	br	40390 <strlen+0x1c>
   40384:	10800044 	addi	r2,r2,1
   40388:	10c000cc 	andi	r3,r2,3
   4038c:	18000526 	beq	r3,zero,403a4 <strlen+0x30>
   40390:	10c00007 	ldb	r3,0(r2)
   40394:	183ffb1e 	bne	r3,zero,40384 <strlen+0x10>
   40398:	1105c83a 	sub	r2,r2,r4
   4039c:	f800283a 	ret
   403a0:	2005883a 	mov	r2,r4
   403a4:	11400017 	ldw	r5,0(r2)
   403a8:	01ffbff4 	movhi	r7,65279
   403ac:	39ffbfc4 	addi	r7,r7,-257
   403b0:	29c7883a 	add	r3,r5,r7
   403b4:	01a02074 	movhi	r6,32897
   403b8:	014a303a 	nor	r5,zero,r5
   403bc:	1946703a 	and	r3,r3,r5
   403c0:	31a02004 	addi	r6,r6,-32640
   403c4:	1986703a 	and	r3,r3,r6
   403c8:	1800071e 	bne	r3,zero,403e8 <strlen+0x74>
   403cc:	11400117 	ldw	r5,4(r2)
   403d0:	10800104 	addi	r2,r2,4
   403d4:	29c7883a 	add	r3,r5,r7
   403d8:	014a303a 	nor	r5,zero,r5
   403dc:	1946703a 	and	r3,r3,r5
   403e0:	1986703a 	and	r3,r3,r6
   403e4:	183ff926 	beq	r3,zero,403cc <strlen+0x58>
   403e8:	10c00007 	ldb	r3,0(r2)
   403ec:	183fea26 	beq	r3,zero,40398 <strlen+0x24>
   403f0:	10c00047 	ldb	r3,1(r2)
   403f4:	10800044 	addi	r2,r2,1
   403f8:	183fe726 	beq	r3,zero,40398 <strlen+0x24>
   403fc:	10c00047 	ldb	r3,1(r2)
   40400:	10800044 	addi	r2,r2,1
   40404:	183ffa1e 	bne	r3,zero,403f0 <strlen+0x7c>
   40408:	003fe306 	br	40398 <strlen+0x24>

0004040c <__fp_lock>:
   4040c:	0005883a 	mov	r2,zero
   40410:	f800283a 	ret

00040414 <stdio_exit_handler>:
   40414:	01800134 	movhi	r6,4
   40418:	01400134 	movhi	r5,4
   4041c:	01000134 	movhi	r4,4
   40420:	31965c04 	addi	r6,r6,22896
   40424:	294a0a04 	addi	r5,r5,10280
   40428:	21161504 	addi	r4,r4,22612
   4042c:	0040c3c1 	jmpi	40c3c <_fwalk_sglue>

00040430 <cleanup_stdio>:
   40430:	21400117 	ldw	r5,4(r4)
   40434:	defffe04 	addi	sp,sp,-8
   40438:	00800174 	movhi	r2,5
   4043c:	dc000015 	stw	r16,0(sp)
   40440:	dfc00115 	stw	ra,4(sp)
   40444:	10a1d904 	addi	r2,r2,-30876
   40448:	2021883a 	mov	r16,r4
   4044c:	28800126 	beq	r5,r2,40454 <cleanup_stdio+0x24>
   40450:	00428280 	call	42828 <_fclose_r>
   40454:	81400217 	ldw	r5,8(r16)
   40458:	00800174 	movhi	r2,5
   4045c:	10a1f304 	addi	r2,r2,-30772
   40460:	28800226 	beq	r5,r2,4046c <cleanup_stdio+0x3c>
   40464:	8009883a 	mov	r4,r16
   40468:	00428280 	call	42828 <_fclose_r>
   4046c:	81400317 	ldw	r5,12(r16)
   40470:	00800174 	movhi	r2,5
   40474:	10a20d04 	addi	r2,r2,-30668
   40478:	28800526 	beq	r5,r2,40490 <cleanup_stdio+0x60>
   4047c:	8009883a 	mov	r4,r16
   40480:	dfc00117 	ldw	ra,4(sp)
   40484:	dc000017 	ldw	r16,0(sp)
   40488:	dec00204 	addi	sp,sp,8
   4048c:	00428281 	jmpi	42828 <_fclose_r>
   40490:	dfc00117 	ldw	ra,4(sp)
   40494:	dc000017 	ldw	r16,0(sp)
   40498:	dec00204 	addi	sp,sp,8
   4049c:	f800283a 	ret

000404a0 <__fp_unlock>:
   404a0:	0005883a 	mov	r2,zero
   404a4:	f800283a 	ret

000404a8 <global_stdio_init.part.0>:
   404a8:	00800134 	movhi	r2,4
   404ac:	defffa04 	addi	sp,sp,-24
   404b0:	00c00174 	movhi	r3,5
   404b4:	10810504 	addi	r2,r2,1044
   404b8:	dc000015 	stw	r16,0(sp)
   404bc:	18a1cc15 	stw	r2,-30928(r3)
   404c0:	04000174 	movhi	r16,5
   404c4:	00800174 	movhi	r2,5
   404c8:	01000174 	movhi	r4,5
   404cc:	8421d904 	addi	r16,r16,-30876
   404d0:	dfc00515 	stw	ra,20(sp)
   404d4:	dd000415 	stw	r20,16(sp)
   404d8:	dcc00315 	stw	r19,12(sp)
   404dc:	dc800215 	stw	r18,8(sp)
   404e0:	dc400115 	stw	r17,4(sp)
   404e4:	01800204 	movi	r6,8
   404e8:	000b883a 	mov	r5,zero
   404ec:	2121f004 	addi	r4,r4,-30784
   404f0:	1021d915 	stw	zero,-30876(r2)
   404f4:	00800104 	movi	r2,4
   404f8:	80000115 	stw	zero,4(r16)
   404fc:	80000215 	stw	zero,8(r16)
   40500:	80001915 	stw	zero,100(r16)
   40504:	80800315 	stw	r2,12(r16)
   40508:	80000415 	stw	zero,16(r16)
   4050c:	80000515 	stw	zero,20(r16)
   40510:	80000615 	stw	zero,24(r16)
   40514:	004128c0 	call	4128c <memset>
   40518:	05000134 	movhi	r20,4
   4051c:	04c00134 	movhi	r19,4
   40520:	04800134 	movhi	r18,4
   40524:	04400134 	movhi	r17,4
   40528:	00800074 	movhi	r2,1
   4052c:	01000174 	movhi	r4,5
   40530:	a5033904 	addi	r20,r20,3300
   40534:	9cc35004 	addi	r19,r19,3392
   40538:	94837004 	addi	r18,r18,3520
   4053c:	8c438704 	addi	r17,r17,3612
   40540:	10800284 	addi	r2,r2,10
   40544:	01800204 	movi	r6,8
   40548:	000b883a 	mov	r5,zero
   4054c:	21220a04 	addi	r4,r4,-30680
   40550:	84000715 	stw	r16,28(r16)
   40554:	85000815 	stw	r20,32(r16)
   40558:	84c00915 	stw	r19,36(r16)
   4055c:	84800a15 	stw	r18,40(r16)
   40560:	84400b15 	stw	r17,44(r16)
   40564:	80001a15 	stw	zero,104(r16)
   40568:	80001b15 	stw	zero,108(r16)
   4056c:	80001c15 	stw	zero,112(r16)
   40570:	80003315 	stw	zero,204(r16)
   40574:	80801d15 	stw	r2,116(r16)
   40578:	80001e15 	stw	zero,120(r16)
   4057c:	80001f15 	stw	zero,124(r16)
   40580:	80002015 	stw	zero,128(r16)
   40584:	004128c0 	call	4128c <memset>
   40588:	01000174 	movhi	r4,5
   4058c:	00c00174 	movhi	r3,5
   40590:	008000b4 	movhi	r2,2
   40594:	18e1f304 	addi	r3,r3,-30772
   40598:	10800484 	addi	r2,r2,18
   4059c:	01800204 	movi	r6,8
   405a0:	000b883a 	mov	r5,zero
   405a4:	21222404 	addi	r4,r4,-30576
   405a8:	80c02115 	stw	r3,132(r16)
   405ac:	85002215 	stw	r20,136(r16)
   405b0:	84c02315 	stw	r19,140(r16)
   405b4:	84802415 	stw	r18,144(r16)
   405b8:	84402515 	stw	r17,148(r16)
   405bc:	80003415 	stw	zero,208(r16)
   405c0:	80003515 	stw	zero,212(r16)
   405c4:	80003615 	stw	zero,216(r16)
   405c8:	80004d15 	stw	zero,308(r16)
   405cc:	80803715 	stw	r2,220(r16)
   405d0:	80003815 	stw	zero,224(r16)
   405d4:	80003915 	stw	zero,228(r16)
   405d8:	80003a15 	stw	zero,232(r16)
   405dc:	004128c0 	call	4128c <memset>
   405e0:	00800174 	movhi	r2,5
   405e4:	10a20d04 	addi	r2,r2,-30668
   405e8:	80803b15 	stw	r2,236(r16)
   405ec:	85003c15 	stw	r20,240(r16)
   405f0:	84c03d15 	stw	r19,244(r16)
   405f4:	84803e15 	stw	r18,248(r16)
   405f8:	84403f15 	stw	r17,252(r16)
   405fc:	dfc00517 	ldw	ra,20(sp)
   40600:	dd000417 	ldw	r20,16(sp)
   40604:	dcc00317 	ldw	r19,12(sp)
   40608:	dc800217 	ldw	r18,8(sp)
   4060c:	dc400117 	ldw	r17,4(sp)
   40610:	dc000017 	ldw	r16,0(sp)
   40614:	dec00604 	addi	sp,sp,24
   40618:	f800283a 	ret

0004061c <__sfp>:
   4061c:	00800174 	movhi	r2,5
   40620:	10a1cc17 	ldw	r2,-30928(r2)
   40624:	defffc04 	addi	sp,sp,-16
   40628:	dc800215 	stw	r18,8(sp)
   4062c:	dfc00315 	stw	ra,12(sp)
   40630:	dc400115 	stw	r17,4(sp)
   40634:	dc000015 	stw	r16,0(sp)
   40638:	2025883a 	mov	r18,r4
   4063c:	10003926 	beq	r2,zero,40724 <__sfp+0x108>
   40640:	04400134 	movhi	r17,4
   40644:	8c565c04 	addi	r17,r17,22896
   40648:	88800117 	ldw	r2,4(r17)
   4064c:	8c000217 	ldw	r16,8(r17)
   40650:	10bfffc4 	addi	r2,r2,-1
   40654:	1000030e 	bge	r2,zero,40664 <__sfp+0x48>
   40658:	00001f06 	br	406d8 <__sfp+0xbc>
   4065c:	84001a04 	addi	r16,r16,104
   40660:	28001d26 	beq	r5,zero,406d8 <__sfp+0xbc>
   40664:	80c0030f 	ldh	r3,12(r16)
   40668:	10bfffc4 	addi	r2,r2,-1
   4066c:	117fffd8 	cmpnei	r5,r2,-1
   40670:	183ffa1e 	bne	r3,zero,4065c <__sfp+0x40>
   40674:	00bffff4 	movhi	r2,65535
   40678:	10800044 	addi	r2,r2,1
   4067c:	80800315 	stw	r2,12(r16)
   40680:	80001915 	stw	zero,100(r16)
   40684:	80000015 	stw	zero,0(r16)
   40688:	80000215 	stw	zero,8(r16)
   4068c:	80000115 	stw	zero,4(r16)
   40690:	80000415 	stw	zero,16(r16)
   40694:	80000515 	stw	zero,20(r16)
   40698:	80000615 	stw	zero,24(r16)
   4069c:	01800204 	movi	r6,8
   406a0:	000b883a 	mov	r5,zero
   406a4:	81001704 	addi	r4,r16,92
   406a8:	004128c0 	call	4128c <memset>
   406ac:	80000c15 	stw	zero,48(r16)
   406b0:	80000d15 	stw	zero,52(r16)
   406b4:	80001115 	stw	zero,68(r16)
   406b8:	80001215 	stw	zero,72(r16)
   406bc:	8005883a 	mov	r2,r16
   406c0:	dfc00317 	ldw	ra,12(sp)
   406c4:	dc800217 	ldw	r18,8(sp)
   406c8:	dc400117 	ldw	r17,4(sp)
   406cc:	dc000017 	ldw	r16,0(sp)
   406d0:	dec00404 	addi	sp,sp,16
   406d4:	f800283a 	ret
   406d8:	8c000017 	ldw	r16,0(r17)
   406dc:	80000226 	beq	r16,zero,406e8 <__sfp+0xcc>
   406e0:	8023883a 	mov	r17,r16
   406e4:	003fd806 	br	40648 <__sfp+0x2c>
   406e8:	01406b04 	movi	r5,428
   406ec:	9009883a 	mov	r4,r18
   406f0:	0041a740 	call	41a74 <_malloc_r>
   406f4:	1021883a 	mov	r16,r2
   406f8:	10000c26 	beq	r2,zero,4072c <__sfp+0x110>
   406fc:	10000015 	stw	zero,0(r2)
   40700:	11000304 	addi	r4,r2,12
   40704:	00800104 	movi	r2,4
   40708:	80800115 	stw	r2,4(r16)
   4070c:	81000215 	stw	r4,8(r16)
   40710:	01806804 	movi	r6,416
   40714:	000b883a 	mov	r5,zero
   40718:	004128c0 	call	4128c <memset>
   4071c:	8c000015 	stw	r16,0(r17)
   40720:	003fef06 	br	406e0 <__sfp+0xc4>
   40724:	00404a80 	call	404a8 <global_stdio_init.part.0>
   40728:	003fc506 	br	40640 <__sfp+0x24>
   4072c:	88000015 	stw	zero,0(r17)
   40730:	00800304 	movi	r2,12
   40734:	90800015 	stw	r2,0(r18)
   40738:	003fe006 	br	406bc <__sfp+0xa0>

0004073c <__sinit>:
   4073c:	20800d17 	ldw	r2,52(r4)
   40740:	10000126 	beq	r2,zero,40748 <__sinit+0xc>
   40744:	f800283a 	ret
   40748:	00c00174 	movhi	r3,5
   4074c:	00800134 	movhi	r2,4
   40750:	18e1cc17 	ldw	r3,-30928(r3)
   40754:	10810c04 	addi	r2,r2,1072
   40758:	20800d15 	stw	r2,52(r4)
   4075c:	183ff91e 	bne	r3,zero,40744 <__sinit+0x8>
   40760:	00404a81 	jmpi	404a8 <global_stdio_init.part.0>

00040764 <__sfp_lock_acquire>:
   40764:	f800283a 	ret

00040768 <__sfp_lock_release>:
   40768:	f800283a 	ret

0004076c <__fp_lock_all>:
   4076c:	01800134 	movhi	r6,4
   40770:	01400134 	movhi	r5,4
   40774:	31965c04 	addi	r6,r6,22896
   40778:	29410304 	addi	r5,r5,1036
   4077c:	0009883a 	mov	r4,zero
   40780:	0040c3c1 	jmpi	40c3c <_fwalk_sglue>

00040784 <__fp_unlock_all>:
   40784:	01800134 	movhi	r6,4
   40788:	01400134 	movhi	r5,4
   4078c:	31965c04 	addi	r6,r6,22896
   40790:	29412804 	addi	r5,r5,1184
   40794:	0009883a 	mov	r4,zero
   40798:	0040c3c1 	jmpi	40c3c <_fwalk_sglue>

0004079c <__sfvwrite_r>:
   4079c:	30800217 	ldw	r2,8(r6)
   407a0:	1000c426 	beq	r2,zero,40ab4 <__sfvwrite_r+0x318>
   407a4:	2a80030b 	ldhu	r10,12(r5)
   407a8:	defff504 	addi	sp,sp,-44
   407ac:	df000915 	stw	fp,36(sp)
   407b0:	dcc00415 	stw	r19,16(sp)
   407b4:	dc000115 	stw	r16,4(sp)
   407b8:	dfc00a15 	stw	ra,40(sp)
   407bc:	ddc00815 	stw	r23,32(sp)
   407c0:	dd800715 	stw	r22,28(sp)
   407c4:	dd400615 	stw	r21,24(sp)
   407c8:	dd000515 	stw	r20,20(sp)
   407cc:	dc800315 	stw	r18,12(sp)
   407d0:	dc400215 	stw	r17,8(sp)
   407d4:	5080020c 	andi	r2,r10,8
   407d8:	3039883a 	mov	fp,r6
   407dc:	2027883a 	mov	r19,r4
   407e0:	2821883a 	mov	r16,r5
   407e4:	10002226 	beq	r2,zero,40870 <__sfvwrite_r+0xd4>
   407e8:	28800417 	ldw	r2,16(r5)
   407ec:	10002026 	beq	r2,zero,40870 <__sfvwrite_r+0xd4>
   407f0:	5080008c 	andi	r2,r10,2
   407f4:	e4400017 	ldw	r17,0(fp)
   407f8:	10002526 	beq	r2,zero,40890 <__sfvwrite_r+0xf4>
   407fc:	80800917 	ldw	r2,36(r16)
   40800:	81400717 	ldw	r5,28(r16)
   40804:	05600034 	movhi	r21,32768
   40808:	0029883a 	mov	r20,zero
   4080c:	0025883a 	mov	r18,zero
   40810:	ad7f0004 	addi	r21,r21,-1024
   40814:	a00d883a 	mov	r6,r20
   40818:	9809883a 	mov	r4,r19
   4081c:	90001026 	beq	r18,zero,40860 <__sfvwrite_r+0xc4>
   40820:	900f883a 	mov	r7,r18
   40824:	ac80012e 	bgeu	r21,r18,4082c <__sfvwrite_r+0x90>
   40828:	a80f883a 	mov	r7,r21
   4082c:	103ee83a 	callr	r2
   40830:	00809b0e 	bge	zero,r2,40aa0 <__sfvwrite_r+0x304>
   40834:	e0c00217 	ldw	r3,8(fp)
   40838:	a0a9883a 	add	r20,r20,r2
   4083c:	90a5c83a 	sub	r18,r18,r2
   40840:	1885c83a 	sub	r2,r3,r2
   40844:	e0800215 	stw	r2,8(fp)
   40848:	10008426 	beq	r2,zero,40a5c <__sfvwrite_r+0x2c0>
   4084c:	80800917 	ldw	r2,36(r16)
   40850:	81400717 	ldw	r5,28(r16)
   40854:	a00d883a 	mov	r6,r20
   40858:	9809883a 	mov	r4,r19
   4085c:	903ff01e 	bne	r18,zero,40820 <__sfvwrite_r+0x84>
   40860:	8d000017 	ldw	r20,0(r17)
   40864:	8c800117 	ldw	r18,4(r17)
   40868:	8c400204 	addi	r17,r17,8
   4086c:	003fe906 	br	40814 <__sfvwrite_r+0x78>
   40870:	800b883a 	mov	r5,r16
   40874:	9809883a 	mov	r4,r19
   40878:	0040e240 	call	40e24 <__swsetup_r>
   4087c:	10008b1e 	bne	r2,zero,40aac <__sfvwrite_r+0x310>
   40880:	8280030b 	ldhu	r10,12(r16)
   40884:	e4400017 	ldw	r17,0(fp)
   40888:	5080008c 	andi	r2,r10,2
   4088c:	103fdb1e 	bne	r2,zero,407fc <__sfvwrite_r+0x60>
   40890:	5080004c 	andi	r2,r10,1
   40894:	1000501e 	bne	r2,zero,409d8 <__sfvwrite_r+0x23c>
   40898:	00a00034 	movhi	r2,32768
   4089c:	81c00017 	ldw	r7,0(r16)
   408a0:	80c00217 	ldw	r3,8(r16)
   408a4:	10bfffc4 	addi	r2,r2,-1
   408a8:	002d883a 	mov	r22,zero
   408ac:	0025883a 	mov	r18,zero
   408b0:	d8800015 	stw	r2,0(sp)
   408b4:	3809883a 	mov	r4,r7
   408b8:	1829883a 	mov	r20,r3
   408bc:	90004226 	beq	r18,zero,409c8 <__sfvwrite_r+0x22c>
   408c0:	5080800c 	andi	r2,r10,512
   408c4:	10009526 	beq	r2,zero,40b1c <__sfvwrite_r+0x380>
   408c8:	182b883a 	mov	r21,r3
   408cc:	90c0ba36 	bltu	r18,r3,40bb8 <__sfvwrite_r+0x41c>
   408d0:	5081200c 	andi	r2,r10,1152
   408d4:	10002626 	beq	r2,zero,40970 <__sfvwrite_r+0x1d4>
   408d8:	80c00517 	ldw	r3,20(r16)
   408dc:	81400417 	ldw	r5,16(r16)
   408e0:	18c5883a 	add	r2,r3,r3
   408e4:	10c5883a 	add	r2,r2,r3
   408e8:	1006d7fa 	srli	r3,r2,31
   408ec:	396bc83a 	sub	r21,r7,r5
   408f0:	a9000044 	addi	r4,r21,1
   408f4:	1887883a 	add	r3,r3,r2
   408f8:	1829d07a 	srai	r20,r3,1
   408fc:	2485883a 	add	r2,r4,r18
   40900:	a00d883a 	mov	r6,r20
   40904:	a080022e 	bgeu	r20,r2,40910 <__sfvwrite_r+0x174>
   40908:	1029883a 	mov	r20,r2
   4090c:	100d883a 	mov	r6,r2
   40910:	5281000c 	andi	r10,r10,1024
   40914:	5000b626 	beq	r10,zero,40bf0 <__sfvwrite_r+0x454>
   40918:	300b883a 	mov	r5,r6
   4091c:	9809883a 	mov	r4,r19
   40920:	0041a740 	call	41a74 <_malloc_r>
   40924:	102f883a 	mov	r23,r2
   40928:	1000c026 	beq	r2,zero,40c2c <__sfvwrite_r+0x490>
   4092c:	81400417 	ldw	r5,16(r16)
   40930:	a80d883a 	mov	r6,r21
   40934:	1009883a 	mov	r4,r2
   40938:	00410640 	call	41064 <memcpy>
   4093c:	8080030b 	ldhu	r2,12(r16)
   40940:	00fedfc4 	movi	r3,-1153
   40944:	10c4703a 	and	r2,r2,r3
   40948:	10802014 	ori	r2,r2,128
   4094c:	8080030d 	sth	r2,12(r16)
   40950:	a54fc83a 	sub	r7,r20,r21
   40954:	bd49883a 	add	r4,r23,r21
   40958:	85000515 	stw	r20,20(r16)
   4095c:	85c00415 	stw	r23,16(r16)
   40960:	81000015 	stw	r4,0(r16)
   40964:	9029883a 	mov	r20,r18
   40968:	81c00215 	stw	r7,8(r16)
   4096c:	902b883a 	mov	r21,r18
   40970:	a80d883a 	mov	r6,r21
   40974:	b00b883a 	mov	r5,r22
   40978:	00411640 	call	41164 <memmove>
   4097c:	80c00217 	ldw	r3,8(r16)
   40980:	81c00017 	ldw	r7,0(r16)
   40984:	902f883a 	mov	r23,r18
   40988:	1d07c83a 	sub	r3,r3,r20
   4098c:	3d4d883a 	add	r6,r7,r21
   40990:	80c00215 	stw	r3,8(r16)
   40994:	81800015 	stw	r6,0(r16)
   40998:	0025883a 	mov	r18,zero
   4099c:	e0800217 	ldw	r2,8(fp)
   409a0:	b5ed883a 	add	r22,r22,r23
   409a4:	15c5c83a 	sub	r2,r2,r23
   409a8:	e0800215 	stw	r2,8(fp)
   409ac:	10002b26 	beq	r2,zero,40a5c <__sfvwrite_r+0x2c0>
   409b0:	81c00017 	ldw	r7,0(r16)
   409b4:	80c00217 	ldw	r3,8(r16)
   409b8:	8280030b 	ldhu	r10,12(r16)
   409bc:	3809883a 	mov	r4,r7
   409c0:	1829883a 	mov	r20,r3
   409c4:	903fbe1e 	bne	r18,zero,408c0 <__sfvwrite_r+0x124>
   409c8:	8d800017 	ldw	r22,0(r17)
   409cc:	8c800117 	ldw	r18,4(r17)
   409d0:	8c400204 	addi	r17,r17,8
   409d4:	003fb706 	br	408b4 <__sfvwrite_r+0x118>
   409d8:	002f883a 	mov	r23,zero
   409dc:	0005883a 	mov	r2,zero
   409e0:	002d883a 	mov	r22,zero
   409e4:	002b883a 	mov	r21,zero
   409e8:	a8003426 	beq	r21,zero,40abc <__sfvwrite_r+0x320>
   409ec:	10003826 	beq	r2,zero,40ad0 <__sfvwrite_r+0x334>
   409f0:	b829883a 	mov	r20,r23
   409f4:	ad00012e 	bgeu	r21,r20,409fc <__sfvwrite_r+0x260>
   409f8:	a829883a 	mov	r20,r21
   409fc:	81000017 	ldw	r4,0(r16)
   40a00:	80800417 	ldw	r2,16(r16)
   40a04:	84800217 	ldw	r18,8(r16)
   40a08:	81c00517 	ldw	r7,20(r16)
   40a0c:	1100022e 	bgeu	r2,r4,40a18 <__sfvwrite_r+0x27c>
   40a10:	91e5883a 	add	r18,r18,r7
   40a14:	95003616 	blt	r18,r20,40af0 <__sfvwrite_r+0x354>
   40a18:	a1c06a16 	blt	r20,r7,40bc4 <__sfvwrite_r+0x428>
   40a1c:	80800917 	ldw	r2,36(r16)
   40a20:	81400717 	ldw	r5,28(r16)
   40a24:	b00d883a 	mov	r6,r22
   40a28:	9809883a 	mov	r4,r19
   40a2c:	103ee83a 	callr	r2
   40a30:	1025883a 	mov	r18,r2
   40a34:	00801a0e 	bge	zero,r2,40aa0 <__sfvwrite_r+0x304>
   40a38:	bcafc83a 	sub	r23,r23,r18
   40a3c:	b8001426 	beq	r23,zero,40a90 <__sfvwrite_r+0x2f4>
   40a40:	00800044 	movi	r2,1
   40a44:	e0c00217 	ldw	r3,8(fp)
   40a48:	b4ad883a 	add	r22,r22,r18
   40a4c:	acabc83a 	sub	r21,r21,r18
   40a50:	1c87c83a 	sub	r3,r3,r18
   40a54:	e0c00215 	stw	r3,8(fp)
   40a58:	183fe31e 	bne	r3,zero,409e8 <__sfvwrite_r+0x24c>
   40a5c:	0005883a 	mov	r2,zero
   40a60:	dfc00a17 	ldw	ra,40(sp)
   40a64:	df000917 	ldw	fp,36(sp)
   40a68:	ddc00817 	ldw	r23,32(sp)
   40a6c:	dd800717 	ldw	r22,28(sp)
   40a70:	dd400617 	ldw	r21,24(sp)
   40a74:	dd000517 	ldw	r20,20(sp)
   40a78:	dcc00417 	ldw	r19,16(sp)
   40a7c:	dc800317 	ldw	r18,12(sp)
   40a80:	dc400217 	ldw	r17,8(sp)
   40a84:	dc000117 	ldw	r16,4(sp)
   40a88:	dec00b04 	addi	sp,sp,44
   40a8c:	f800283a 	ret
   40a90:	800b883a 	mov	r5,r16
   40a94:	9809883a 	mov	r4,r19
   40a98:	0042b300 	call	42b30 <_fflush_r>
   40a9c:	103fe926 	beq	r2,zero,40a44 <__sfvwrite_r+0x2a8>
   40aa0:	8080030b 	ldhu	r2,12(r16)
   40aa4:	10801014 	ori	r2,r2,64
   40aa8:	8080030d 	sth	r2,12(r16)
   40aac:	00bfffc4 	movi	r2,-1
   40ab0:	003feb06 	br	40a60 <__sfvwrite_r+0x2c4>
   40ab4:	0005883a 	mov	r2,zero
   40ab8:	f800283a 	ret
   40abc:	8d400117 	ldw	r21,4(r17)
   40ac0:	8805883a 	mov	r2,r17
   40ac4:	8c400204 	addi	r17,r17,8
   40ac8:	a83ffc26 	beq	r21,zero,40abc <__sfvwrite_r+0x320>
   40acc:	15800017 	ldw	r22,0(r2)
   40ad0:	a80d883a 	mov	r6,r21
   40ad4:	01400284 	movi	r5,10
   40ad8:	b009883a 	mov	r4,r22
   40adc:	0040f680 	call	40f68 <memchr>
   40ae0:	10004f26 	beq	r2,zero,40c20 <__sfvwrite_r+0x484>
   40ae4:	10800044 	addi	r2,r2,1
   40ae8:	15afc83a 	sub	r23,r2,r22
   40aec:	003fc006 	br	409f0 <__sfvwrite_r+0x254>
   40af0:	b00b883a 	mov	r5,r22
   40af4:	900d883a 	mov	r6,r18
   40af8:	00411640 	call	41164 <memmove>
   40afc:	80800017 	ldw	r2,0(r16)
   40b00:	800b883a 	mov	r5,r16
   40b04:	9809883a 	mov	r4,r19
   40b08:	1485883a 	add	r2,r2,r18
   40b0c:	80800015 	stw	r2,0(r16)
   40b10:	0042b300 	call	42b30 <_fflush_r>
   40b14:	103fc826 	beq	r2,zero,40a38 <__sfvwrite_r+0x29c>
   40b18:	003fe106 	br	40aa0 <__sfvwrite_r+0x304>
   40b1c:	80800417 	ldw	r2,16(r16)
   40b20:	11c01236 	bltu	r2,r7,40b6c <__sfvwrite_r+0x3d0>
   40b24:	81400517 	ldw	r5,20(r16)
   40b28:	91401036 	bltu	r18,r5,40b6c <__sfvwrite_r+0x3d0>
   40b2c:	00a00034 	movhi	r2,32768
   40b30:	902f883a 	mov	r23,r18
   40b34:	90800136 	bltu	r18,r2,40b3c <__sfvwrite_r+0x3a0>
   40b38:	ddc00017 	ldw	r23,0(sp)
   40b3c:	b809883a 	mov	r4,r23
   40b40:	00430f40 	call	430f4 <__modsi3>
   40b44:	80c00917 	ldw	r3,36(r16)
   40b48:	81400717 	ldw	r5,28(r16)
   40b4c:	b88fc83a 	sub	r7,r23,r2
   40b50:	b00d883a 	mov	r6,r22
   40b54:	9809883a 	mov	r4,r19
   40b58:	183ee83a 	callr	r3
   40b5c:	102f883a 	mov	r23,r2
   40b60:	00bfcf0e 	bge	zero,r2,40aa0 <__sfvwrite_r+0x304>
   40b64:	95e5c83a 	sub	r18,r18,r23
   40b68:	003f8c06 	br	4099c <__sfvwrite_r+0x200>
   40b6c:	182f883a 	mov	r23,r3
   40b70:	90c0012e 	bgeu	r18,r3,40b78 <__sfvwrite_r+0x3dc>
   40b74:	902f883a 	mov	r23,r18
   40b78:	3809883a 	mov	r4,r7
   40b7c:	b80d883a 	mov	r6,r23
   40b80:	b00b883a 	mov	r5,r22
   40b84:	00411640 	call	41164 <memmove>
   40b88:	80c00217 	ldw	r3,8(r16)
   40b8c:	81c00017 	ldw	r7,0(r16)
   40b90:	1dc7c83a 	sub	r3,r3,r23
   40b94:	3dcf883a 	add	r7,r7,r23
   40b98:	80c00215 	stw	r3,8(r16)
   40b9c:	81c00015 	stw	r7,0(r16)
   40ba0:	183ff01e 	bne	r3,zero,40b64 <__sfvwrite_r+0x3c8>
   40ba4:	800b883a 	mov	r5,r16
   40ba8:	9809883a 	mov	r4,r19
   40bac:	0042b300 	call	42b30 <_fflush_r>
   40bb0:	103fec26 	beq	r2,zero,40b64 <__sfvwrite_r+0x3c8>
   40bb4:	003fba06 	br	40aa0 <__sfvwrite_r+0x304>
   40bb8:	9029883a 	mov	r20,r18
   40bbc:	902b883a 	mov	r21,r18
   40bc0:	003f6b06 	br	40970 <__sfvwrite_r+0x1d4>
   40bc4:	a00d883a 	mov	r6,r20
   40bc8:	b00b883a 	mov	r5,r22
   40bcc:	00411640 	call	41164 <memmove>
   40bd0:	80c00217 	ldw	r3,8(r16)
   40bd4:	80800017 	ldw	r2,0(r16)
   40bd8:	a025883a 	mov	r18,r20
   40bdc:	1d07c83a 	sub	r3,r3,r20
   40be0:	1505883a 	add	r2,r2,r20
   40be4:	80c00215 	stw	r3,8(r16)
   40be8:	80800015 	stw	r2,0(r16)
   40bec:	003f9206 	br	40a38 <__sfvwrite_r+0x29c>
   40bf0:	9809883a 	mov	r4,r19
   40bf4:	004223c0 	call	4223c <_realloc_r>
   40bf8:	102f883a 	mov	r23,r2
   40bfc:	103f541e 	bne	r2,zero,40950 <__sfvwrite_r+0x1b4>
   40c00:	81400417 	ldw	r5,16(r16)
   40c04:	9809883a 	mov	r4,r19
   40c08:	004176c0 	call	4176c <_free_r>
   40c0c:	8080030b 	ldhu	r2,12(r16)
   40c10:	00c00304 	movi	r3,12
   40c14:	98c00015 	stw	r3,0(r19)
   40c18:	10bfdfcc 	andi	r2,r2,65407
   40c1c:	003fa106 	br	40aa4 <__sfvwrite_r+0x308>
   40c20:	ad000044 	addi	r20,r21,1
   40c24:	a02f883a 	mov	r23,r20
   40c28:	003f7206 	br	409f4 <__sfvwrite_r+0x258>
   40c2c:	00c00304 	movi	r3,12
   40c30:	8080030b 	ldhu	r2,12(r16)
   40c34:	98c00015 	stw	r3,0(r19)
   40c38:	003f9a06 	br	40aa4 <__sfvwrite_r+0x308>

00040c3c <_fwalk_sglue>:
   40c3c:	defff904 	addi	sp,sp,-28
   40c40:	dd400515 	stw	r21,20(sp)
   40c44:	dd000415 	stw	r20,16(sp)
   40c48:	dcc00315 	stw	r19,12(sp)
   40c4c:	dc800215 	stw	r18,8(sp)
   40c50:	dfc00615 	stw	ra,24(sp)
   40c54:	dc400115 	stw	r17,4(sp)
   40c58:	dc000015 	stw	r16,0(sp)
   40c5c:	2027883a 	mov	r19,r4
   40c60:	2829883a 	mov	r20,r5
   40c64:	3025883a 	mov	r18,r6
   40c68:	002b883a 	mov	r21,zero
   40c6c:	94400117 	ldw	r17,4(r18)
   40c70:	94000217 	ldw	r16,8(r18)
   40c74:	8c7fffc4 	addi	r17,r17,-1
   40c78:	88000e16 	blt	r17,zero,40cb4 <_fwalk_sglue+0x78>
   40c7c:	8080030b 	ldhu	r2,12(r16)
   40c80:	8c7fffc4 	addi	r17,r17,-1
   40c84:	108000b0 	cmpltui	r2,r2,2
   40c88:	1000071e 	bne	r2,zero,40ca8 <_fwalk_sglue+0x6c>
   40c8c:	8080038f 	ldh	r2,14(r16)
   40c90:	800b883a 	mov	r5,r16
   40c94:	9809883a 	mov	r4,r19
   40c98:	10bfffe0 	cmpeqi	r2,r2,-1
   40c9c:	1000021e 	bne	r2,zero,40ca8 <_fwalk_sglue+0x6c>
   40ca0:	a03ee83a 	callr	r20
   40ca4:	a8aab03a 	or	r21,r21,r2
   40ca8:	88bfffd8 	cmpnei	r2,r17,-1
   40cac:	84001a04 	addi	r16,r16,104
   40cb0:	103ff21e 	bne	r2,zero,40c7c <_fwalk_sglue+0x40>
   40cb4:	94800017 	ldw	r18,0(r18)
   40cb8:	903fec1e 	bne	r18,zero,40c6c <_fwalk_sglue+0x30>
   40cbc:	a805883a 	mov	r2,r21
   40cc0:	dfc00617 	ldw	ra,24(sp)
   40cc4:	dd400517 	ldw	r21,20(sp)
   40cc8:	dd000417 	ldw	r20,16(sp)
   40ccc:	dcc00317 	ldw	r19,12(sp)
   40cd0:	dc800217 	ldw	r18,8(sp)
   40cd4:	dc400117 	ldw	r17,4(sp)
   40cd8:	dc000017 	ldw	r16,0(sp)
   40cdc:	dec00704 	addi	sp,sp,28
   40ce0:	f800283a 	ret

00040ce4 <__sread>:
   40ce4:	defffe04 	addi	sp,sp,-8
   40ce8:	dc000015 	stw	r16,0(sp)
   40cec:	2821883a 	mov	r16,r5
   40cf0:	2940038f 	ldh	r5,14(r5)
   40cf4:	dfc00115 	stw	ra,4(sp)
   40cf8:	00415500 	call	41550 <_read_r>
   40cfc:	10000716 	blt	r2,zero,40d1c <__sread+0x38>
   40d00:	80c01417 	ldw	r3,80(r16)
   40d04:	1887883a 	add	r3,r3,r2
   40d08:	80c01415 	stw	r3,80(r16)
   40d0c:	dfc00117 	ldw	ra,4(sp)
   40d10:	dc000017 	ldw	r16,0(sp)
   40d14:	dec00204 	addi	sp,sp,8
   40d18:	f800283a 	ret
   40d1c:	80c0030b 	ldhu	r3,12(r16)
   40d20:	18fbffcc 	andi	r3,r3,61439
   40d24:	80c0030d 	sth	r3,12(r16)
   40d28:	dfc00117 	ldw	ra,4(sp)
   40d2c:	dc000017 	ldw	r16,0(sp)
   40d30:	dec00204 	addi	sp,sp,8
   40d34:	f800283a 	ret

00040d38 <__seofread>:
   40d38:	0005883a 	mov	r2,zero
   40d3c:	f800283a 	ret

00040d40 <__swrite>:
   40d40:	2880030b 	ldhu	r2,12(r5)
   40d44:	defffb04 	addi	sp,sp,-20
   40d48:	dcc00315 	stw	r19,12(sp)
   40d4c:	dc800215 	stw	r18,8(sp)
   40d50:	dc400115 	stw	r17,4(sp)
   40d54:	dc000015 	stw	r16,0(sp)
   40d58:	dfc00415 	stw	ra,16(sp)
   40d5c:	10c0400c 	andi	r3,r2,256
   40d60:	2821883a 	mov	r16,r5
   40d64:	2023883a 	mov	r17,r4
   40d68:	3025883a 	mov	r18,r6
   40d6c:	3827883a 	mov	r19,r7
   40d70:	18000d1e 	bne	r3,zero,40da8 <__swrite+0x68>
   40d74:	8140038f 	ldh	r5,14(r16)
   40d78:	10bbffcc 	andi	r2,r2,61439
   40d7c:	980f883a 	mov	r7,r19
   40d80:	900d883a 	mov	r6,r18
   40d84:	8809883a 	mov	r4,r17
   40d88:	8080030d 	sth	r2,12(r16)
   40d8c:	dfc00417 	ldw	ra,16(sp)
   40d90:	dcc00317 	ldw	r19,12(sp)
   40d94:	dc800217 	ldw	r18,8(sp)
   40d98:	dc400117 	ldw	r17,4(sp)
   40d9c:	dc000017 	ldw	r16,0(sp)
   40da0:	dec00504 	addi	sp,sp,20
   40da4:	00415b41 	jmpi	415b4 <_write_r>
   40da8:	2940038f 	ldh	r5,14(r5)
   40dac:	01c00084 	movi	r7,2
   40db0:	000d883a 	mov	r6,zero
   40db4:	00414ec0 	call	414ec <_lseek_r>
   40db8:	8080030b 	ldhu	r2,12(r16)
   40dbc:	003fed06 	br	40d74 <__swrite+0x34>

00040dc0 <__sseek>:
   40dc0:	defffe04 	addi	sp,sp,-8
   40dc4:	dc000015 	stw	r16,0(sp)
   40dc8:	2821883a 	mov	r16,r5
   40dcc:	2940038f 	ldh	r5,14(r5)
   40dd0:	dfc00115 	stw	ra,4(sp)
   40dd4:	00414ec0 	call	414ec <_lseek_r>
   40dd8:	10ffffd8 	cmpnei	r3,r2,-1
   40ddc:	18000826 	beq	r3,zero,40e00 <__sseek+0x40>
   40de0:	80c0030b 	ldhu	r3,12(r16)
   40de4:	80801415 	stw	r2,80(r16)
   40de8:	18c40014 	ori	r3,r3,4096
   40dec:	80c0030d 	sth	r3,12(r16)
   40df0:	dfc00117 	ldw	ra,4(sp)
   40df4:	dc000017 	ldw	r16,0(sp)
   40df8:	dec00204 	addi	sp,sp,8
   40dfc:	f800283a 	ret
   40e00:	80c0030b 	ldhu	r3,12(r16)
   40e04:	18fbffcc 	andi	r3,r3,61439
   40e08:	80c0030d 	sth	r3,12(r16)
   40e0c:	dfc00117 	ldw	ra,4(sp)
   40e10:	dc000017 	ldw	r16,0(sp)
   40e14:	dec00204 	addi	sp,sp,8
   40e18:	f800283a 	ret

00040e1c <__sclose>:
   40e1c:	2940038f 	ldh	r5,14(r5)
   40e20:	00413cc1 	jmpi	413cc <_close_r>

00040e24 <__swsetup_r>:
   40e24:	00800134 	movhi	r2,4
   40e28:	109be317 	ldw	r2,28556(r2)
   40e2c:	defffd04 	addi	sp,sp,-12
   40e30:	dc400115 	stw	r17,4(sp)
   40e34:	dc000015 	stw	r16,0(sp)
   40e38:	dfc00215 	stw	ra,8(sp)
   40e3c:	2023883a 	mov	r17,r4
   40e40:	2821883a 	mov	r16,r5
   40e44:	10000226 	beq	r2,zero,40e50 <__swsetup_r+0x2c>
   40e48:	10c00d17 	ldw	r3,52(r2)
   40e4c:	18003f26 	beq	r3,zero,40f4c <__swsetup_r+0x128>
   40e50:	80c0030b 	ldhu	r3,12(r16)
   40e54:	1880020c 	andi	r2,r3,8
   40e58:	10001a26 	beq	r2,zero,40ec4 <__swsetup_r+0xa0>
   40e5c:	80800417 	ldw	r2,16(r16)
   40e60:	10002126 	beq	r2,zero,40ee8 <__swsetup_r+0xc4>
   40e64:	1900004c 	andi	r4,r3,1
   40e68:	20000b1e 	bne	r4,zero,40e98 <__swsetup_r+0x74>
   40e6c:	1900008c 	andi	r4,r3,2
   40e70:	2000261e 	bne	r4,zero,40f0c <__swsetup_r+0xe8>
   40e74:	81000517 	ldw	r4,20(r16)
   40e78:	81000215 	stw	r4,8(r16)
   40e7c:	10000b26 	beq	r2,zero,40eac <__swsetup_r+0x88>
   40e80:	0005883a 	mov	r2,zero
   40e84:	dfc00217 	ldw	ra,8(sp)
   40e88:	dc400117 	ldw	r17,4(sp)
   40e8c:	dc000017 	ldw	r16,0(sp)
   40e90:	dec00304 	addi	sp,sp,12
   40e94:	f800283a 	ret
   40e98:	81000517 	ldw	r4,20(r16)
   40e9c:	80000215 	stw	zero,8(r16)
   40ea0:	0109c83a 	sub	r4,zero,r4
   40ea4:	81000615 	stw	r4,24(r16)
   40ea8:	103ff51e 	bne	r2,zero,40e80 <__swsetup_r+0x5c>
   40eac:	1900200c 	andi	r4,r3,128
   40eb0:	203ff426 	beq	r4,zero,40e84 <__swsetup_r+0x60>
   40eb4:	18c01014 	ori	r3,r3,64
   40eb8:	80c0030d 	sth	r3,12(r16)
   40ebc:	00bfffc4 	movi	r2,-1
   40ec0:	003ff006 	br	40e84 <__swsetup_r+0x60>
   40ec4:	1880040c 	andi	r2,r3,16
   40ec8:	10002326 	beq	r2,zero,40f58 <__swsetup_r+0x134>
   40ecc:	1880010c 	andi	r2,r3,4
   40ed0:	1000101e 	bne	r2,zero,40f14 <__swsetup_r+0xf0>
   40ed4:	80800417 	ldw	r2,16(r16)
   40ed8:	19000214 	ori	r4,r3,8
   40edc:	8100030d 	sth	r4,12(r16)
   40ee0:	2007883a 	mov	r3,r4
   40ee4:	103fdf1e 	bne	r2,zero,40e64 <__swsetup_r+0x40>
   40ee8:	1900a00c 	andi	r4,r3,640
   40eec:	21008020 	cmpeqi	r4,r4,512
   40ef0:	203fdc1e 	bne	r4,zero,40e64 <__swsetup_r+0x40>
   40ef4:	800b883a 	mov	r5,r16
   40ef8:	8809883a 	mov	r4,r17
   40efc:	0042c180 	call	42c18 <__smakebuf_r>
   40f00:	80c0030b 	ldhu	r3,12(r16)
   40f04:	80800417 	ldw	r2,16(r16)
   40f08:	003fd606 	br	40e64 <__swsetup_r+0x40>
   40f0c:	0009883a 	mov	r4,zero
   40f10:	003fd906 	br	40e78 <__swsetup_r+0x54>
   40f14:	81400c17 	ldw	r5,48(r16)
   40f18:	28000626 	beq	r5,zero,40f34 <__swsetup_r+0x110>
   40f1c:	80801004 	addi	r2,r16,64
   40f20:	28800326 	beq	r5,r2,40f30 <__swsetup_r+0x10c>
   40f24:	8809883a 	mov	r4,r17
   40f28:	004176c0 	call	4176c <_free_r>
   40f2c:	80c0030b 	ldhu	r3,12(r16)
   40f30:	80000c15 	stw	zero,48(r16)
   40f34:	80800417 	ldw	r2,16(r16)
   40f38:	013ff6c4 	movi	r4,-37
   40f3c:	20c6703a 	and	r3,r4,r3
   40f40:	80000115 	stw	zero,4(r16)
   40f44:	80800015 	stw	r2,0(r16)
   40f48:	003fe306 	br	40ed8 <__swsetup_r+0xb4>
   40f4c:	1009883a 	mov	r4,r2
   40f50:	004073c0 	call	4073c <__sinit>
   40f54:	003fbe06 	br	40e50 <__swsetup_r+0x2c>
   40f58:	00800244 	movi	r2,9
   40f5c:	88800015 	stw	r2,0(r17)
   40f60:	18c01014 	ori	r3,r3,64
   40f64:	003fd406 	br	40eb8 <__swsetup_r+0x94>

00040f68 <memchr>:
   40f68:	defffc04 	addi	sp,sp,-16
   40f6c:	dc000015 	stw	r16,0(sp)
   40f70:	2021883a 	mov	r16,r4
   40f74:	dc800215 	stw	r18,8(sp)
   40f78:	dfc00315 	stw	ra,12(sp)
   40f7c:	dc400115 	stw	r17,4(sp)
   40f80:	808000cc 	andi	r2,r16,3
   40f84:	2809883a 	mov	r4,r5
   40f88:	2825883a 	mov	r18,r5
   40f8c:	10000e26 	beq	r2,zero,40fc8 <memchr+0x60>
   40f90:	347fffc4 	addi	r17,r6,-1
   40f94:	30001726 	beq	r6,zero,40ff4 <memchr+0x8c>
   40f98:	28c03fcc 	andi	r3,r5,255
   40f9c:	00000606 	br	40fb8 <memchr+0x50>
   40fa0:	84000044 	addi	r16,r16,1
   40fa4:	808000cc 	andi	r2,r16,3
   40fa8:	10000826 	beq	r2,zero,40fcc <memchr+0x64>
   40fac:	8c7fffc4 	addi	r17,r17,-1
   40fb0:	88bfffe0 	cmpeqi	r2,r17,-1
   40fb4:	10000f1e 	bne	r2,zero,40ff4 <memchr+0x8c>
   40fb8:	80800003 	ldbu	r2,0(r16)
   40fbc:	10fff81e 	bne	r2,r3,40fa0 <memchr+0x38>
   40fc0:	8005883a 	mov	r2,r16
   40fc4:	00000c06 	br	40ff8 <memchr+0x90>
   40fc8:	3023883a 	mov	r17,r6
   40fcc:	88800130 	cmpltui	r2,r17,4
   40fd0:	10000f26 	beq	r2,zero,41010 <memchr+0xa8>
   40fd4:	88000726 	beq	r17,zero,40ff4 <memchr+0x8c>
   40fd8:	8463883a 	add	r17,r16,r17
   40fdc:	8005883a 	mov	r2,r16
   40fe0:	90c03fcc 	andi	r3,r18,255
   40fe4:	11000003 	ldbu	r4,0(r2)
   40fe8:	20c00326 	beq	r4,r3,40ff8 <memchr+0x90>
   40fec:	10800044 	addi	r2,r2,1
   40ff0:	88bffc1e 	bne	r17,r2,40fe4 <memchr+0x7c>
   40ff4:	0005883a 	mov	r2,zero
   40ff8:	dfc00317 	ldw	ra,12(sp)
   40ffc:	dc800217 	ldw	r18,8(sp)
   41000:	dc400117 	ldw	r17,4(sp)
   41004:	dc000017 	ldw	r16,0(sp)
   41008:	dec00404 	addi	sp,sp,16
   4100c:	f800283a 	ret
   41010:	01404074 	movhi	r5,257
   41014:	29404044 	addi	r5,r5,257
   41018:	21003fcc 	andi	r4,r4,255
   4101c:	00432280 	call	43228 <__mulsi3>
   41020:	01bfbff4 	movhi	r6,65279
   41024:	01602074 	movhi	r5,32897
   41028:	31bfbfc4 	addi	r6,r6,-257
   4102c:	29602004 	addi	r5,r5,-32640
   41030:	00000406 	br	41044 <memchr+0xdc>
   41034:	8c7fff04 	addi	r17,r17,-4
   41038:	88c00128 	cmpgeui	r3,r17,4
   4103c:	84000104 	addi	r16,r16,4
   41040:	183fe426 	beq	r3,zero,40fd4 <memchr+0x6c>
   41044:	80c00017 	ldw	r3,0(r16)
   41048:	10c6f03a 	xor	r3,r2,r3
   4104c:	1989883a 	add	r4,r3,r6
   41050:	00c6303a 	nor	r3,zero,r3
   41054:	20c6703a 	and	r3,r4,r3
   41058:	1946703a 	and	r3,r3,r5
   4105c:	183ff526 	beq	r3,zero,41034 <memchr+0xcc>
   41060:	003fdc06 	br	40fd4 <memchr+0x6c>

00041064 <memcpy>:
   41064:	30c00428 	cmpgeui	r3,r6,16
   41068:	2005883a 	mov	r2,r4
   4106c:	18000b1e 	bne	r3,zero,4109c <memcpy+0x38>
   41070:	2007883a 	mov	r3,r4
   41074:	31ffffc4 	addi	r7,r6,-1
   41078:	30003426 	beq	r6,zero,4114c <memcpy+0xe8>
   4107c:	39c00044 	addi	r7,r7,1
   41080:	19cf883a 	add	r7,r3,r7
   41084:	29800003 	ldbu	r6,0(r5)
   41088:	18c00044 	addi	r3,r3,1
   4108c:	29400044 	addi	r5,r5,1
   41090:	19bfffc5 	stb	r6,-1(r3)
   41094:	19fffb1e 	bne	r3,r7,41084 <memcpy+0x20>
   41098:	f800283a 	ret
   4109c:	2146b03a 	or	r3,r4,r5
   410a0:	18c000cc 	andi	r3,r3,3
   410a4:	18002a1e 	bne	r3,zero,41150 <memcpy+0xec>
   410a8:	333ffc04 	addi	r12,r6,-16
   410ac:	6018d13a 	srli	r12,r12,4
   410b0:	2811883a 	mov	r8,r5
   410b4:	200f883a 	mov	r7,r4
   410b8:	63000044 	addi	r12,r12,1
   410bc:	6018913a 	slli	r12,r12,4
   410c0:	2307883a 	add	r3,r4,r12
   410c4:	42c00017 	ldw	r11,0(r8)
   410c8:	42800117 	ldw	r10,4(r8)
   410cc:	42400217 	ldw	r9,8(r8)
   410d0:	41000317 	ldw	r4,12(r8)
   410d4:	39c00404 	addi	r7,r7,16
   410d8:	3afffc15 	stw	r11,-16(r7)
   410dc:	3abffd15 	stw	r10,-12(r7)
   410e0:	3a7ffe15 	stw	r9,-8(r7)
   410e4:	393fff15 	stw	r4,-4(r7)
   410e8:	42000404 	addi	r8,r8,16
   410ec:	38fff51e 	bne	r7,r3,410c4 <memcpy+0x60>
   410f0:	3100030c 	andi	r4,r6,12
   410f4:	2b0b883a 	add	r5,r5,r12
   410f8:	324003cc 	andi	r9,r6,15
   410fc:	20001726 	beq	r4,zero,4115c <memcpy+0xf8>
   41100:	2811883a 	mov	r8,r5
   41104:	1809883a 	mov	r4,r3
   41108:	1a57883a 	add	r11,r3,r9
   4110c:	42800017 	ldw	r10,0(r8)
   41110:	21000104 	addi	r4,r4,4
   41114:	590fc83a 	sub	r7,r11,r4
   41118:	39c00128 	cmpgeui	r7,r7,4
   4111c:	22bfff15 	stw	r10,-4(r4)
   41120:	42000104 	addi	r8,r8,4
   41124:	383ff91e 	bne	r7,zero,4110c <memcpy+0xa8>
   41128:	493fff04 	addi	r4,r9,-4
   4112c:	2008d0ba 	srli	r4,r4,2
   41130:	318000cc 	andi	r6,r6,3
   41134:	31ffffc4 	addi	r7,r6,-1
   41138:	21000044 	addi	r4,r4,1
   4113c:	200890ba 	slli	r4,r4,2
   41140:	1907883a 	add	r3,r3,r4
   41144:	290b883a 	add	r5,r5,r4
   41148:	303fcc1e 	bne	r6,zero,4107c <memcpy+0x18>
   4114c:	f800283a 	ret
   41150:	31ffffc4 	addi	r7,r6,-1
   41154:	2007883a 	mov	r3,r4
   41158:	003fc806 	br	4107c <memcpy+0x18>
   4115c:	480d883a 	mov	r6,r9
   41160:	003fc406 	br	41074 <memcpy+0x10>

00041164 <memmove>:
   41164:	2005883a 	mov	r2,r4
   41168:	29000a2e 	bgeu	r5,r4,41194 <memmove+0x30>
   4116c:	298f883a 	add	r7,r5,r6
   41170:	21c0082e 	bgeu	r4,r7,41194 <memmove+0x30>
   41174:	2187883a 	add	r3,r4,r6
   41178:	30001226 	beq	r6,zero,411c4 <memmove+0x60>
   4117c:	397fffc3 	ldbu	r5,-1(r7)
   41180:	18ffffc4 	addi	r3,r3,-1
   41184:	39ffffc4 	addi	r7,r7,-1
   41188:	19400005 	stb	r5,0(r3)
   4118c:	10fffb1e 	bne	r2,r3,4117c <memmove+0x18>
   41190:	f800283a 	ret
   41194:	30c00428 	cmpgeui	r3,r6,16
   41198:	18000b1e 	bne	r3,zero,411c8 <memmove+0x64>
   4119c:	1007883a 	mov	r3,r2
   411a0:	31ffffc4 	addi	r7,r6,-1
   411a4:	30003626 	beq	r6,zero,41280 <memmove+0x11c>
   411a8:	39c00044 	addi	r7,r7,1
   411ac:	19cf883a 	add	r7,r3,r7
   411b0:	29800003 	ldbu	r6,0(r5)
   411b4:	18c00044 	addi	r3,r3,1
   411b8:	29400044 	addi	r5,r5,1
   411bc:	19bfffc5 	stb	r6,-1(r3)
   411c0:	19fffb1e 	bne	r3,r7,411b0 <memmove+0x4c>
   411c4:	f800283a 	ret
   411c8:	1146b03a 	or	r3,r2,r5
   411cc:	18c000cc 	andi	r3,r3,3
   411d0:	1800281e 	bne	r3,zero,41274 <memmove+0x110>
   411d4:	313ffc04 	addi	r4,r6,-16
   411d8:	2008d13a 	srli	r4,r4,4
   411dc:	2811883a 	mov	r8,r5
   411e0:	100f883a 	mov	r7,r2
   411e4:	21000044 	addi	r4,r4,1
   411e8:	2008913a 	slli	r4,r4,4
   411ec:	1107883a 	add	r3,r2,r4
   411f0:	42400017 	ldw	r9,0(r8)
   411f4:	42000404 	addi	r8,r8,16
   411f8:	39c00404 	addi	r7,r7,16
   411fc:	3a7ffc15 	stw	r9,-16(r7)
   41200:	427ffd17 	ldw	r9,-12(r8)
   41204:	3a7ffd15 	stw	r9,-12(r7)
   41208:	427ffe17 	ldw	r9,-8(r8)
   4120c:	3a7ffe15 	stw	r9,-8(r7)
   41210:	427fff17 	ldw	r9,-4(r8)
   41214:	3a7fff15 	stw	r9,-4(r7)
   41218:	38fff51e 	bne	r7,r3,411f0 <memmove+0x8c>
   4121c:	31c0030c 	andi	r7,r6,12
   41220:	290b883a 	add	r5,r5,r4
   41224:	324003cc 	andi	r9,r6,15
   41228:	38001626 	beq	r7,zero,41284 <memmove+0x120>
   4122c:	2809883a 	mov	r4,r5
   41230:	180f883a 	mov	r7,r3
   41234:	1a57883a 	add	r11,r3,r9
   41238:	22800017 	ldw	r10,0(r4)
   4123c:	39c00104 	addi	r7,r7,4
   41240:	59d1c83a 	sub	r8,r11,r7
   41244:	42000128 	cmpgeui	r8,r8,4
   41248:	3abfff15 	stw	r10,-4(r7)
   4124c:	21000104 	addi	r4,r4,4
   41250:	403ff91e 	bne	r8,zero,41238 <memmove+0xd4>
   41254:	493fff04 	addi	r4,r9,-4
   41258:	2008d0ba 	srli	r4,r4,2
   4125c:	318000cc 	andi	r6,r6,3
   41260:	21000044 	addi	r4,r4,1
   41264:	200890ba 	slli	r4,r4,2
   41268:	1907883a 	add	r3,r3,r4
   4126c:	290b883a 	add	r5,r5,r4
   41270:	003fcb06 	br	411a0 <memmove+0x3c>
   41274:	31ffffc4 	addi	r7,r6,-1
   41278:	1007883a 	mov	r3,r2
   4127c:	003fca06 	br	411a8 <memmove+0x44>
   41280:	f800283a 	ret
   41284:	480d883a 	mov	r6,r9
   41288:	003fc506 	br	411a0 <memmove+0x3c>

0004128c <memset>:
   4128c:	defffb04 	addi	sp,sp,-20
   41290:	dc800215 	stw	r18,8(sp)
   41294:	dc400115 	stw	r17,4(sp)
   41298:	dfc00415 	stw	ra,16(sp)
   4129c:	dcc00315 	stw	r19,12(sp)
   412a0:	dc000015 	stw	r16,0(sp)
   412a4:	208000cc 	andi	r2,r4,3
   412a8:	2023883a 	mov	r17,r4
   412ac:	2825883a 	mov	r18,r5
   412b0:	10004026 	beq	r2,zero,413b4 <memset+0x128>
   412b4:	34ffffc4 	addi	r19,r6,-1
   412b8:	30003326 	beq	r6,zero,41388 <memset+0xfc>
   412bc:	280f883a 	mov	r7,r5
   412c0:	2021883a 	mov	r16,r4
   412c4:	00000306 	br	412d4 <memset+0x48>
   412c8:	9cffffc4 	addi	r19,r19,-1
   412cc:	99bfffe0 	cmpeqi	r6,r19,-1
   412d0:	30002d1e 	bne	r6,zero,41388 <memset+0xfc>
   412d4:	84000044 	addi	r16,r16,1
   412d8:	818000cc 	andi	r6,r16,3
   412dc:	81ffffc5 	stb	r7,-1(r16)
   412e0:	303ff91e 	bne	r6,zero,412c8 <memset+0x3c>
   412e4:	98800128 	cmpgeui	r2,r19,4
   412e8:	10002126 	beq	r2,zero,41370 <memset+0xe4>
   412ec:	01404074 	movhi	r5,257
   412f0:	29404044 	addi	r5,r5,257
   412f4:	91003fcc 	andi	r4,r18,255
   412f8:	00432280 	call	43228 <__mulsi3>
   412fc:	98c00430 	cmpltui	r3,r19,16
   41300:	18002f1e 	bne	r3,zero,413c0 <memset+0x134>
   41304:	99bffc04 	addi	r6,r19,-16
   41308:	300cd13a 	srli	r6,r6,4
   4130c:	31800044 	addi	r6,r6,1
   41310:	300c913a 	slli	r6,r6,4
   41314:	818d883a 	add	r6,r16,r6
   41318:	80800015 	stw	r2,0(r16)
   4131c:	80800115 	stw	r2,4(r16)
   41320:	80800215 	stw	r2,8(r16)
   41324:	80800315 	stw	r2,12(r16)
   41328:	84000404 	addi	r16,r16,16
   4132c:	81bffa1e 	bne	r16,r6,41318 <memset+0x8c>
   41330:	9900030c 	andi	r4,r19,12
   41334:	98c003cc 	andi	r3,r19,15
   41338:	20001b26 	beq	r4,zero,413a8 <memset+0x11c>
   4133c:	3009883a 	mov	r4,r6
   41340:	30cb883a 	add	r5,r6,r3
   41344:	21000104 	addi	r4,r4,4
   41348:	290fc83a 	sub	r7,r5,r4
   4134c:	39c00128 	cmpgeui	r7,r7,4
   41350:	20bfff15 	stw	r2,-4(r4)
   41354:	383ffb1e 	bne	r7,zero,41344 <memset+0xb8>
   41358:	1c3fff04 	addi	r16,r3,-4
   4135c:	8020d0ba 	srli	r16,r16,2
   41360:	1cc000cc 	andi	r19,r3,3
   41364:	84000044 	addi	r16,r16,1
   41368:	802090ba 	slli	r16,r16,2
   4136c:	3421883a 	add	r16,r6,r16
   41370:	98000526 	beq	r19,zero,41388 <memset+0xfc>
   41374:	900b883a 	mov	r5,r18
   41378:	84c7883a 	add	r3,r16,r19
   4137c:	84000044 	addi	r16,r16,1
   41380:	817fffc5 	stb	r5,-1(r16)
   41384:	1c3ffd1e 	bne	r3,r16,4137c <memset+0xf0>
   41388:	8805883a 	mov	r2,r17
   4138c:	dfc00417 	ldw	ra,16(sp)
   41390:	dcc00317 	ldw	r19,12(sp)
   41394:	dc800217 	ldw	r18,8(sp)
   41398:	dc400117 	ldw	r17,4(sp)
   4139c:	dc000017 	ldw	r16,0(sp)
   413a0:	dec00504 	addi	sp,sp,20
   413a4:	f800283a 	ret
   413a8:	1827883a 	mov	r19,r3
   413ac:	983ff11e 	bne	r19,zero,41374 <memset+0xe8>
   413b0:	003ff506 	br	41388 <memset+0xfc>
   413b4:	2021883a 	mov	r16,r4
   413b8:	3027883a 	mov	r19,r6
   413bc:	003fc906 	br	412e4 <memset+0x58>
   413c0:	800d883a 	mov	r6,r16
   413c4:	9807883a 	mov	r3,r19
   413c8:	003fdc06 	br	4133c <memset+0xb0>

000413cc <_close_r>:
   413cc:	defffe04 	addi	sp,sp,-8
   413d0:	dc000015 	stw	r16,0(sp)
   413d4:	00800174 	movhi	r2,5
   413d8:	2021883a 	mov	r16,r4
   413dc:	2809883a 	mov	r4,r5
   413e0:	dfc00115 	stw	ra,4(sp)
   413e4:	1021cb15 	stw	zero,-30932(r2)
   413e8:	004328c0 	call	4328c <close>
   413ec:	10ffffd8 	cmpnei	r3,r2,-1
   413f0:	18000426 	beq	r3,zero,41404 <_close_r+0x38>
   413f4:	dfc00117 	ldw	ra,4(sp)
   413f8:	dc000017 	ldw	r16,0(sp)
   413fc:	dec00204 	addi	sp,sp,8
   41400:	f800283a 	ret
   41404:	00c00174 	movhi	r3,5
   41408:	18e1cb17 	ldw	r3,-30932(r3)
   4140c:	183ff926 	beq	r3,zero,413f4 <_close_r+0x28>
   41410:	80c00015 	stw	r3,0(r16)
   41414:	dfc00117 	ldw	ra,4(sp)
   41418:	dc000017 	ldw	r16,0(sp)
   4141c:	dec00204 	addi	sp,sp,8
   41420:	f800283a 	ret

00041424 <_reclaim_reent>:
   41424:	00800134 	movhi	r2,4
   41428:	109be317 	ldw	r2,28556(r2)
   4142c:	11002e26 	beq	r2,r4,414e8 <_reclaim_reent+0xc4>
   41430:	21401117 	ldw	r5,68(r4)
   41434:	defffc04 	addi	sp,sp,-16
   41438:	dc400115 	stw	r17,4(sp)
   4143c:	dfc00315 	stw	ra,12(sp)
   41440:	dc800215 	stw	r18,8(sp)
   41444:	dc000015 	stw	r16,0(sp)
   41448:	2023883a 	mov	r17,r4
   4144c:	28000f26 	beq	r5,zero,4148c <_reclaim_reent+0x68>
   41450:	0025883a 	mov	r18,zero
   41454:	2c85883a 	add	r2,r5,r18
   41458:	14000017 	ldw	r16,0(r2)
   4145c:	80000626 	beq	r16,zero,41478 <_reclaim_reent+0x54>
   41460:	800b883a 	mov	r5,r16
   41464:	84000017 	ldw	r16,0(r16)
   41468:	8809883a 	mov	r4,r17
   4146c:	004176c0 	call	4176c <_free_r>
   41470:	803ffb1e 	bne	r16,zero,41460 <_reclaim_reent+0x3c>
   41474:	89401117 	ldw	r5,68(r17)
   41478:	94800104 	addi	r18,r18,4
   4147c:	90802018 	cmpnei	r2,r18,128
   41480:	103ff41e 	bne	r2,zero,41454 <_reclaim_reent+0x30>
   41484:	8809883a 	mov	r4,r17
   41488:	004176c0 	call	4176c <_free_r>
   4148c:	89400e17 	ldw	r5,56(r17)
   41490:	28000226 	beq	r5,zero,4149c <_reclaim_reent+0x78>
   41494:	8809883a 	mov	r4,r17
   41498:	004176c0 	call	4176c <_free_r>
   4149c:	89401317 	ldw	r5,76(r17)
   414a0:	28000226 	beq	r5,zero,414ac <_reclaim_reent+0x88>
   414a4:	8809883a 	mov	r4,r17
   414a8:	004176c0 	call	4176c <_free_r>
   414ac:	88800d17 	ldw	r2,52(r17)
   414b0:	10000726 	beq	r2,zero,414d0 <_reclaim_reent+0xac>
   414b4:	8809883a 	mov	r4,r17
   414b8:	dfc00317 	ldw	ra,12(sp)
   414bc:	dc800217 	ldw	r18,8(sp)
   414c0:	dc400117 	ldw	r17,4(sp)
   414c4:	dc000017 	ldw	r16,0(sp)
   414c8:	dec00404 	addi	sp,sp,16
   414cc:	1000683a 	jmp	r2
   414d0:	dfc00317 	ldw	ra,12(sp)
   414d4:	dc800217 	ldw	r18,8(sp)
   414d8:	dc400117 	ldw	r17,4(sp)
   414dc:	dc000017 	ldw	r16,0(sp)
   414e0:	dec00404 	addi	sp,sp,16
   414e4:	f800283a 	ret
   414e8:	f800283a 	ret

000414ec <_lseek_r>:
   414ec:	2807883a 	mov	r3,r5
   414f0:	defffe04 	addi	sp,sp,-8
   414f4:	dc000015 	stw	r16,0(sp)
   414f8:	300b883a 	mov	r5,r6
   414fc:	00800174 	movhi	r2,5
   41500:	380d883a 	mov	r6,r7
   41504:	2021883a 	mov	r16,r4
   41508:	1809883a 	mov	r4,r3
   4150c:	dfc00115 	stw	ra,4(sp)
   41510:	1021cb15 	stw	zero,-30932(r2)
   41514:	00436dc0 	call	436dc <lseek>
   41518:	10ffffd8 	cmpnei	r3,r2,-1
   4151c:	18000426 	beq	r3,zero,41530 <_lseek_r+0x44>
   41520:	dfc00117 	ldw	ra,4(sp)
   41524:	dc000017 	ldw	r16,0(sp)
   41528:	dec00204 	addi	sp,sp,8
   4152c:	f800283a 	ret
   41530:	00c00174 	movhi	r3,5
   41534:	18e1cb17 	ldw	r3,-30932(r3)
   41538:	183ff926 	beq	r3,zero,41520 <_lseek_r+0x34>
   4153c:	80c00015 	stw	r3,0(r16)
   41540:	dfc00117 	ldw	ra,4(sp)
   41544:	dc000017 	ldw	r16,0(sp)
   41548:	dec00204 	addi	sp,sp,8
   4154c:	f800283a 	ret

00041550 <_read_r>:
   41550:	2807883a 	mov	r3,r5
   41554:	defffe04 	addi	sp,sp,-8
   41558:	dc000015 	stw	r16,0(sp)
   4155c:	300b883a 	mov	r5,r6
   41560:	00800174 	movhi	r2,5
   41564:	380d883a 	mov	r6,r7
   41568:	2021883a 	mov	r16,r4
   4156c:	1809883a 	mov	r4,r3
   41570:	dfc00115 	stw	ra,4(sp)
   41574:	1021cb15 	stw	zero,-30932(r2)
   41578:	00438bc0 	call	438bc <read>
   4157c:	10ffffd8 	cmpnei	r3,r2,-1
   41580:	18000426 	beq	r3,zero,41594 <_read_r+0x44>
   41584:	dfc00117 	ldw	ra,4(sp)
   41588:	dc000017 	ldw	r16,0(sp)
   4158c:	dec00204 	addi	sp,sp,8
   41590:	f800283a 	ret
   41594:	00c00174 	movhi	r3,5
   41598:	18e1cb17 	ldw	r3,-30932(r3)
   4159c:	183ff926 	beq	r3,zero,41584 <_read_r+0x34>
   415a0:	80c00015 	stw	r3,0(r16)
   415a4:	dfc00117 	ldw	ra,4(sp)
   415a8:	dc000017 	ldw	r16,0(sp)
   415ac:	dec00204 	addi	sp,sp,8
   415b0:	f800283a 	ret

000415b4 <_write_r>:
   415b4:	2807883a 	mov	r3,r5
   415b8:	defffe04 	addi	sp,sp,-8
   415bc:	dc000015 	stw	r16,0(sp)
   415c0:	300b883a 	mov	r5,r6
   415c4:	00800174 	movhi	r2,5
   415c8:	380d883a 	mov	r6,r7
   415cc:	2021883a 	mov	r16,r4
   415d0:	1809883a 	mov	r4,r3
   415d4:	dfc00115 	stw	ra,4(sp)
   415d8:	1021cb15 	stw	zero,-30932(r2)
   415dc:	0043b280 	call	43b28 <write>
   415e0:	10ffffd8 	cmpnei	r3,r2,-1
   415e4:	18000426 	beq	r3,zero,415f8 <_write_r+0x44>
   415e8:	dfc00117 	ldw	ra,4(sp)
   415ec:	dc000017 	ldw	r16,0(sp)
   415f0:	dec00204 	addi	sp,sp,8
   415f4:	f800283a 	ret
   415f8:	00c00174 	movhi	r3,5
   415fc:	18e1cb17 	ldw	r3,-30932(r3)
   41600:	183ff926 	beq	r3,zero,415e8 <_write_r+0x34>
   41604:	80c00015 	stw	r3,0(r16)
   41608:	dfc00117 	ldw	ra,4(sp)
   4160c:	dc000017 	ldw	r16,0(sp)
   41610:	dec00204 	addi	sp,sp,8
   41614:	f800283a 	ret

00041618 <exit>:
   41618:	defffe04 	addi	sp,sp,-8
   4161c:	000b883a 	mov	r5,zero
   41620:	dc000015 	stw	r16,0(sp)
   41624:	dfc00115 	stw	ra,4(sp)
   41628:	2021883a 	mov	r16,r4
   4162c:	0042f5c0 	call	42f5c <__call_exitprocs>
   41630:	00800174 	movhi	r2,5
   41634:	10a1cc17 	ldw	r2,-30928(r2)
   41638:	10000126 	beq	r2,zero,41640 <exit+0x28>
   4163c:	103ee83a 	callr	r2
   41640:	8009883a 	mov	r4,r16
   41644:	00433940 	call	43394 <_exit>

00041648 <_malloc_trim_r>:
   41648:	defffa04 	addi	sp,sp,-24
   4164c:	dcc00315 	stw	r19,12(sp)
   41650:	04c00134 	movhi	r19,4
   41654:	dd000415 	stw	r20,16(sp)
   41658:	dc800215 	stw	r18,8(sp)
   4165c:	dc400115 	stw	r17,4(sp)
   41660:	dc000015 	stw	r16,0(sp)
   41664:	2829883a 	mov	r20,r5
   41668:	dfc00515 	stw	ra,20(sp)
   4166c:	9cd65f04 	addi	r19,r19,22908
   41670:	2025883a 	mov	r18,r4
   41674:	00438380 	call	43838 <__malloc_lock>
   41678:	98800217 	ldw	r2,8(r19)
   4167c:	14400117 	ldw	r17,4(r2)
   41680:	00bfff04 	movi	r2,-4
   41684:	88a2703a 	and	r17,r17,r2
   41688:	8c03fbc4 	addi	r16,r17,4079
   4168c:	8521c83a 	sub	r16,r16,r20
   41690:	8020d33a 	srli	r16,r16,12
   41694:	843fffc4 	addi	r16,r16,-1
   41698:	8020933a 	slli	r16,r16,12
   4169c:	80840008 	cmpgei	r2,r16,4096
   416a0:	10000626 	beq	r2,zero,416bc <_malloc_trim_r+0x74>
   416a4:	000b883a 	mov	r5,zero
   416a8:	9009883a 	mov	r4,r18
   416ac:	0042f040 	call	42f04 <_sbrk_r>
   416b0:	98c00217 	ldw	r3,8(r19)
   416b4:	1c47883a 	add	r3,r3,r17
   416b8:	10c00b26 	beq	r2,r3,416e8 <_malloc_trim_r+0xa0>
   416bc:	9009883a 	mov	r4,r18
   416c0:	004385c0 	call	4385c <__malloc_unlock>
   416c4:	0005883a 	mov	r2,zero
   416c8:	dfc00517 	ldw	ra,20(sp)
   416cc:	dd000417 	ldw	r20,16(sp)
   416d0:	dcc00317 	ldw	r19,12(sp)
   416d4:	dc800217 	ldw	r18,8(sp)
   416d8:	dc400117 	ldw	r17,4(sp)
   416dc:	dc000017 	ldw	r16,0(sp)
   416e0:	dec00604 	addi	sp,sp,24
   416e4:	f800283a 	ret
   416e8:	040bc83a 	sub	r5,zero,r16
   416ec:	9009883a 	mov	r4,r18
   416f0:	0042f040 	call	42f04 <_sbrk_r>
   416f4:	10bfffd8 	cmpnei	r2,r2,-1
   416f8:	10000d26 	beq	r2,zero,41730 <_malloc_trim_r+0xe8>
   416fc:	00800174 	movhi	r2,5
   41700:	10a22717 	ldw	r2,-30564(r2)
   41704:	98c00217 	ldw	r3,8(r19)
   41708:	8c23c83a 	sub	r17,r17,r16
   4170c:	8c400054 	ori	r17,r17,1
   41710:	1405c83a 	sub	r2,r2,r16
   41714:	1c400115 	stw	r17,4(r3)
   41718:	9009883a 	mov	r4,r18
   4171c:	00c00174 	movhi	r3,5
   41720:	18a22715 	stw	r2,-30564(r3)
   41724:	004385c0 	call	4385c <__malloc_unlock>
   41728:	00800044 	movi	r2,1
   4172c:	003fe606 	br	416c8 <_malloc_trim_r+0x80>
   41730:	000b883a 	mov	r5,zero
   41734:	9009883a 	mov	r4,r18
   41738:	0042f040 	call	42f04 <_sbrk_r>
   4173c:	99000217 	ldw	r4,8(r19)
   41740:	1107c83a 	sub	r3,r2,r4
   41744:	19400410 	cmplti	r5,r3,16
   41748:	283fdc1e 	bne	r5,zero,416bc <_malloc_trim_r+0x74>
   4174c:	01400134 	movhi	r5,4
   41750:	295be417 	ldw	r5,28560(r5)
   41754:	18c00054 	ori	r3,r3,1
   41758:	20c00115 	stw	r3,4(r4)
   4175c:	1145c83a 	sub	r2,r2,r5
   41760:	01400174 	movhi	r5,5
   41764:	28a22715 	stw	r2,-30564(r5)
   41768:	003fd406 	br	416bc <_malloc_trim_r+0x74>

0004176c <_free_r>:
   4176c:	28005f26 	beq	r5,zero,418ec <_free_r+0x180>
   41770:	defffd04 	addi	sp,sp,-12
   41774:	dc400115 	stw	r17,4(sp)
   41778:	dc000015 	stw	r16,0(sp)
   4177c:	2023883a 	mov	r17,r4
   41780:	2821883a 	mov	r16,r5
   41784:	dfc00215 	stw	ra,8(sp)
   41788:	00438380 	call	43838 <__malloc_lock>
   4178c:	81ffff17 	ldw	r7,-4(r16)
   41790:	00bfff84 	movi	r2,-2
   41794:	80fffe04 	addi	r3,r16,-8
   41798:	3884703a 	and	r2,r7,r2
   4179c:	01800134 	movhi	r6,4
   417a0:	1889883a 	add	r4,r3,r2
   417a4:	31965f04 	addi	r6,r6,22908
   417a8:	21400117 	ldw	r5,4(r4)
   417ac:	32000217 	ldw	r8,8(r6)
   417b0:	027fff04 	movi	r9,-4
   417b4:	2a4a703a 	and	r5,r5,r9
   417b8:	41006526 	beq	r8,r4,41950 <_free_r+0x1e4>
   417bc:	21400115 	stw	r5,4(r4)
   417c0:	39c0004c 	andi	r7,r7,1
   417c4:	2151883a 	add	r8,r4,r5
   417c8:	3800281e 	bne	r7,zero,4186c <_free_r+0x100>
   417cc:	82bffe17 	ldw	r10,-8(r16)
   417d0:	42000117 	ldw	r8,4(r8)
   417d4:	01c00134 	movhi	r7,4
   417d8:	1a87c83a 	sub	r3,r3,r10
   417dc:	1a400217 	ldw	r9,8(r3)
   417e0:	39d66104 	addi	r7,r7,22916
   417e4:	1285883a 	add	r2,r2,r10
   417e8:	4200004c 	andi	r8,r8,1
   417ec:	49c04d26 	beq	r9,r7,41924 <_free_r+0x1b8>
   417f0:	1a800317 	ldw	r10,12(r3)
   417f4:	4a800315 	stw	r10,12(r9)
   417f8:	52400215 	stw	r9,8(r10)
   417fc:	40006926 	beq	r8,zero,419a4 <_free_r+0x238>
   41800:	11400054 	ori	r5,r2,1
   41804:	19400115 	stw	r5,4(r3)
   41808:	20800015 	stw	r2,0(r4)
   4180c:	11008028 	cmpgeui	r4,r2,512
   41810:	20001e1e 	bne	r4,zero,4188c <_free_r+0x120>
   41814:	1008d0fa 	srli	r4,r2,3
   41818:	100ad17a 	srli	r5,r2,5
   4181c:	31c00117 	ldw	r7,4(r6)
   41820:	20800044 	addi	r2,r4,1
   41824:	100490fa 	slli	r2,r2,3
   41828:	01000044 	movi	r4,1
   4182c:	2148983a 	sll	r4,r4,r5
   41830:	3085883a 	add	r2,r6,r2
   41834:	11400017 	ldw	r5,0(r2)
   41838:	21c8b03a 	or	r4,r4,r7
   4183c:	11fffe04 	addi	r7,r2,-8
   41840:	19c00315 	stw	r7,12(r3)
   41844:	19400215 	stw	r5,8(r3)
   41848:	31000115 	stw	r4,4(r6)
   4184c:	10c00015 	stw	r3,0(r2)
   41850:	28c00315 	stw	r3,12(r5)
   41854:	8809883a 	mov	r4,r17
   41858:	dfc00217 	ldw	ra,8(sp)
   4185c:	dc400117 	ldw	r17,4(sp)
   41860:	dc000017 	ldw	r16,0(sp)
   41864:	dec00304 	addi	sp,sp,12
   41868:	004385c1 	jmpi	4385c <__malloc_unlock>
   4186c:	41c00117 	ldw	r7,4(r8)
   41870:	39c0004c 	andi	r7,r7,1
   41874:	38001e26 	beq	r7,zero,418f0 <_free_r+0x184>
   41878:	11400054 	ori	r5,r2,1
   4187c:	817fff15 	stw	r5,-4(r16)
   41880:	20800015 	stw	r2,0(r4)
   41884:	11008028 	cmpgeui	r4,r2,512
   41888:	203fe226 	beq	r4,zero,41814 <_free_r+0xa8>
   4188c:	1008d27a 	srli	r4,r2,9
   41890:	21400168 	cmpgeui	r5,r4,5
   41894:	2800451e 	bne	r5,zero,419ac <_free_r+0x240>
   41898:	1008d1ba 	srli	r4,r2,6
   4189c:	21c00e44 	addi	r7,r4,57
   418a0:	380e90fa 	slli	r7,r7,3
   418a4:	21000e04 	addi	r4,r4,56
   418a8:	31cf883a 	add	r7,r6,r7
   418ac:	39400017 	ldw	r5,0(r7)
   418b0:	39fffe04 	addi	r7,r7,-8
   418b4:	39405326 	beq	r7,r5,41a04 <_free_r+0x298>
   418b8:	01bfff04 	movi	r6,-4
   418bc:	00000206 	br	418c8 <_free_r+0x15c>
   418c0:	29400217 	ldw	r5,8(r5)
   418c4:	39400326 	beq	r7,r5,418d4 <_free_r+0x168>
   418c8:	29000117 	ldw	r4,4(r5)
   418cc:	2188703a 	and	r4,r4,r6
   418d0:	113ffb36 	bltu	r2,r4,418c0 <_free_r+0x154>
   418d4:	29c00317 	ldw	r7,12(r5)
   418d8:	19c00315 	stw	r7,12(r3)
   418dc:	19400215 	stw	r5,8(r3)
   418e0:	38c00215 	stw	r3,8(r7)
   418e4:	28c00315 	stw	r3,12(r5)
   418e8:	003fda06 	br	41854 <_free_r+0xe8>
   418ec:	f800283a 	ret
   418f0:	01c00134 	movhi	r7,4
   418f4:	1145883a 	add	r2,r2,r5
   418f8:	39d66104 	addi	r7,r7,22916
   418fc:	21400217 	ldw	r5,8(r4)
   41900:	29c03726 	beq	r5,r7,419e0 <_free_r+0x274>
   41904:	22000317 	ldw	r8,12(r4)
   41908:	11c00054 	ori	r7,r2,1
   4190c:	1889883a 	add	r4,r3,r2
   41910:	2a000315 	stw	r8,12(r5)
   41914:	41400215 	stw	r5,8(r8)
   41918:	19c00115 	stw	r7,4(r3)
   4191c:	20800015 	stw	r2,0(r4)
   41920:	003fba06 	br	4180c <_free_r+0xa0>
   41924:	40004f1e 	bne	r8,zero,41a64 <_free_r+0x2f8>
   41928:	21800217 	ldw	r6,8(r4)
   4192c:	21000317 	ldw	r4,12(r4)
   41930:	288b883a 	add	r5,r5,r2
   41934:	28800054 	ori	r2,r5,1
   41938:	31000315 	stw	r4,12(r6)
   4193c:	21800215 	stw	r6,8(r4)
   41940:	18800115 	stw	r2,4(r3)
   41944:	1947883a 	add	r3,r3,r5
   41948:	19400015 	stw	r5,0(r3)
   4194c:	003fc106 	br	41854 <_free_r+0xe8>
   41950:	39c0004c 	andi	r7,r7,1
   41954:	114b883a 	add	r5,r2,r5
   41958:	3800071e 	bne	r7,zero,41978 <_free_r+0x20c>
   4195c:	81fffe17 	ldw	r7,-8(r16)
   41960:	19c7c83a 	sub	r3,r3,r7
   41964:	18800317 	ldw	r2,12(r3)
   41968:	19000217 	ldw	r4,8(r3)
   4196c:	29cb883a 	add	r5,r5,r7
   41970:	20800315 	stw	r2,12(r4)
   41974:	11000215 	stw	r4,8(r2)
   41978:	00800134 	movhi	r2,4
   4197c:	29000054 	ori	r4,r5,1
   41980:	109be517 	ldw	r2,28564(r2)
   41984:	19000115 	stw	r4,4(r3)
   41988:	30c00215 	stw	r3,8(r6)
   4198c:	28bfb136 	bltu	r5,r2,41854 <_free_r+0xe8>
   41990:	00800174 	movhi	r2,5
   41994:	1161cf17 	ldw	r5,-30916(r2)
   41998:	8809883a 	mov	r4,r17
   4199c:	00416480 	call	41648 <_malloc_trim_r>
   419a0:	003fac06 	br	41854 <_free_r+0xe8>
   419a4:	1145883a 	add	r2,r2,r5
   419a8:	003fd406 	br	418fc <_free_r+0x190>
   419ac:	21400568 	cmpgeui	r5,r4,21
   419b0:	28000726 	beq	r5,zero,419d0 <_free_r+0x264>
   419b4:	21401568 	cmpgeui	r5,r4,85
   419b8:	2800191e 	bne	r5,zero,41a20 <_free_r+0x2b4>
   419bc:	1008d33a 	srli	r4,r2,12
   419c0:	21c01bc4 	addi	r7,r4,111
   419c4:	380e90fa 	slli	r7,r7,3
   419c8:	21001b84 	addi	r4,r4,110
   419cc:	003fb606 	br	418a8 <_free_r+0x13c>
   419d0:	21c01704 	addi	r7,r4,92
   419d4:	380e90fa 	slli	r7,r7,3
   419d8:	210016c4 	addi	r4,r4,91
   419dc:	003fb206 	br	418a8 <_free_r+0x13c>
   419e0:	30c00515 	stw	r3,20(r6)
   419e4:	30c00415 	stw	r3,16(r6)
   419e8:	11000054 	ori	r4,r2,1
   419ec:	19c00315 	stw	r7,12(r3)
   419f0:	19c00215 	stw	r7,8(r3)
   419f4:	19000115 	stw	r4,4(r3)
   419f8:	1887883a 	add	r3,r3,r2
   419fc:	18800015 	stw	r2,0(r3)
   41a00:	003f9406 	br	41854 <_free_r+0xe8>
   41a04:	2009d0ba 	srai	r4,r4,2
   41a08:	00800044 	movi	r2,1
   41a0c:	32000117 	ldw	r8,4(r6)
   41a10:	1104983a 	sll	r2,r2,r4
   41a14:	1204b03a 	or	r2,r2,r8
   41a18:	30800115 	stw	r2,4(r6)
   41a1c:	003fae06 	br	418d8 <_free_r+0x16c>
   41a20:	21405568 	cmpgeui	r5,r4,341
   41a24:	2800051e 	bne	r5,zero,41a3c <_free_r+0x2d0>
   41a28:	1008d3fa 	srli	r4,r2,15
   41a2c:	21c01e04 	addi	r7,r4,120
   41a30:	380e90fa 	slli	r7,r7,3
   41a34:	21001dc4 	addi	r4,r4,119
   41a38:	003f9b06 	br	418a8 <_free_r+0x13c>
   41a3c:	21015568 	cmpgeui	r4,r4,1365
   41a40:	2000051e 	bne	r4,zero,41a58 <_free_r+0x2ec>
   41a44:	1008d4ba 	srli	r4,r2,18
   41a48:	21c01f44 	addi	r7,r4,125
   41a4c:	380e90fa 	slli	r7,r7,3
   41a50:	21001f04 	addi	r4,r4,124
   41a54:	003f9406 	br	418a8 <_free_r+0x13c>
   41a58:	01c0fe04 	movi	r7,1016
   41a5c:	01001f84 	movi	r4,126
   41a60:	003f9106 	br	418a8 <_free_r+0x13c>
   41a64:	11400054 	ori	r5,r2,1
   41a68:	19400115 	stw	r5,4(r3)
   41a6c:	20800015 	stw	r2,0(r4)
   41a70:	003f7806 	br	41854 <_free_r+0xe8>

00041a74 <_malloc_r>:
   41a74:	defff604 	addi	sp,sp,-40
   41a78:	dc400115 	stw	r17,4(sp)
   41a7c:	2c4002c4 	addi	r17,r5,11
   41a80:	dc800215 	stw	r18,8(sp)
   41a84:	dfc00915 	stw	ra,36(sp)
   41a88:	df000815 	stw	fp,32(sp)
   41a8c:	ddc00715 	stw	r23,28(sp)
   41a90:	dd800615 	stw	r22,24(sp)
   41a94:	dd400515 	stw	r21,20(sp)
   41a98:	dd000415 	stw	r20,16(sp)
   41a9c:	dcc00315 	stw	r19,12(sp)
   41aa0:	dc000015 	stw	r16,0(sp)
   41aa4:	888005e8 	cmpgeui	r2,r17,23
   41aa8:	2025883a 	mov	r18,r4
   41aac:	1000261e 	bne	r2,zero,41b48 <_malloc_r+0xd4>
   41ab0:	29400468 	cmpgeui	r5,r5,17
   41ab4:	28008e1e 	bne	r5,zero,41cf0 <_malloc_r+0x27c>
   41ab8:	00438380 	call	43838 <__malloc_lock>
   41abc:	04400404 	movi	r17,16
   41ac0:	00800604 	movi	r2,24
   41ac4:	01c00084 	movi	r7,2
   41ac8:	04c00134 	movhi	r19,4
   41acc:	9cd65f04 	addi	r19,r19,22908
   41ad0:	9885883a 	add	r2,r19,r2
   41ad4:	14000117 	ldw	r16,4(r2)
   41ad8:	10fffe04 	addi	r3,r2,-8
   41adc:	80c0d026 	beq	r16,r3,41e20 <_malloc_r+0x3ac>
   41ae0:	80800117 	ldw	r2,4(r16)
   41ae4:	81000317 	ldw	r4,12(r16)
   41ae8:	81400217 	ldw	r5,8(r16)
   41aec:	00ffff04 	movi	r3,-4
   41af0:	10c4703a 	and	r2,r2,r3
   41af4:	8085883a 	add	r2,r16,r2
   41af8:	10c00117 	ldw	r3,4(r2)
   41afc:	29000315 	stw	r4,12(r5)
   41b00:	21400215 	stw	r5,8(r4)
   41b04:	18c00054 	ori	r3,r3,1
   41b08:	10c00115 	stw	r3,4(r2)
   41b0c:	9009883a 	mov	r4,r18
   41b10:	004385c0 	call	4385c <__malloc_unlock>
   41b14:	80800204 	addi	r2,r16,8
   41b18:	dfc00917 	ldw	ra,36(sp)
   41b1c:	df000817 	ldw	fp,32(sp)
   41b20:	ddc00717 	ldw	r23,28(sp)
   41b24:	dd800617 	ldw	r22,24(sp)
   41b28:	dd400517 	ldw	r21,20(sp)
   41b2c:	dd000417 	ldw	r20,16(sp)
   41b30:	dcc00317 	ldw	r19,12(sp)
   41b34:	dc800217 	ldw	r18,8(sp)
   41b38:	dc400117 	ldw	r17,4(sp)
   41b3c:	dc000017 	ldw	r16,0(sp)
   41b40:	dec00a04 	addi	sp,sp,40
   41b44:	f800283a 	ret
   41b48:	00bffe04 	movi	r2,-8
   41b4c:	88a2703a 	and	r17,r17,r2
   41b50:	88006716 	blt	r17,zero,41cf0 <_malloc_r+0x27c>
   41b54:	89406636 	bltu	r17,r5,41cf0 <_malloc_r+0x27c>
   41b58:	00438380 	call	43838 <__malloc_lock>
   41b5c:	88807e28 	cmpgeui	r2,r17,504
   41b60:	1000f426 	beq	r2,zero,41f34 <_malloc_r+0x4c0>
   41b64:	8804d27a 	srli	r2,r17,9
   41b68:	10006526 	beq	r2,zero,41d00 <_malloc_r+0x28c>
   41b6c:	10c00168 	cmpgeui	r3,r2,5
   41b70:	1800c81e 	bne	r3,zero,41e94 <_malloc_r+0x420>
   41b74:	8804d1ba 	srli	r2,r17,6
   41b78:	11c00e44 	addi	r7,r2,57
   41b7c:	380890fa 	slli	r4,r7,3
   41b80:	12000e04 	addi	r8,r2,56
   41b84:	04c00134 	movhi	r19,4
   41b88:	9cd65f04 	addi	r19,r19,22908
   41b8c:	9909883a 	add	r4,r19,r4
   41b90:	24000117 	ldw	r16,4(r4)
   41b94:	213ffe04 	addi	r4,r4,-8
   41b98:	24000c26 	beq	r4,r16,41bcc <_malloc_r+0x158>
   41b9c:	01bfff04 	movi	r6,-4
   41ba0:	00000406 	br	41bb4 <_malloc_r+0x140>
   41ba4:	81400317 	ldw	r5,12(r16)
   41ba8:	1800970e 	bge	r3,zero,41e08 <_malloc_r+0x394>
   41bac:	21400726 	beq	r4,r5,41bcc <_malloc_r+0x158>
   41bb0:	2821883a 	mov	r16,r5
   41bb4:	80800117 	ldw	r2,4(r16)
   41bb8:	1184703a 	and	r2,r2,r6
   41bbc:	1447c83a 	sub	r3,r2,r17
   41bc0:	19400408 	cmpgei	r5,r3,16
   41bc4:	283ff726 	beq	r5,zero,41ba4 <_malloc_r+0x130>
   41bc8:	400f883a 	mov	r7,r8
   41bcc:	9c000417 	ldw	r16,16(r19)
   41bd0:	02400134 	movhi	r9,4
   41bd4:	4a566104 	addi	r9,r9,22916
   41bd8:	82407f26 	beq	r16,r9,41dd8 <_malloc_r+0x364>
   41bdc:	80800117 	ldw	r2,4(r16)
   41be0:	00ffff04 	movi	r3,-4
   41be4:	10c4703a 	and	r2,r2,r3
   41be8:	1447c83a 	sub	r3,r2,r17
   41bec:	19000410 	cmplti	r4,r3,16
   41bf0:	2000d326 	beq	r4,zero,41f40 <_malloc_r+0x4cc>
   41bf4:	9a400515 	stw	r9,20(r19)
   41bf8:	9a400415 	stw	r9,16(r19)
   41bfc:	1800c50e 	bge	r3,zero,41f14 <_malloc_r+0x4a0>
   41c00:	10c08028 	cmpgeui	r3,r2,512
   41c04:	99400117 	ldw	r5,4(r19)
   41c08:	1800891e 	bne	r3,zero,41e30 <_malloc_r+0x3bc>
   41c0c:	1006d0fa 	srli	r3,r2,3
   41c10:	1008d17a 	srli	r4,r2,5
   41c14:	18800044 	addi	r2,r3,1
   41c18:	100490fa 	slli	r2,r2,3
   41c1c:	00c00044 	movi	r3,1
   41c20:	1906983a 	sll	r3,r3,r4
   41c24:	9885883a 	add	r2,r19,r2
   41c28:	11000017 	ldw	r4,0(r2)
   41c2c:	28cab03a 	or	r5,r5,r3
   41c30:	10fffe04 	addi	r3,r2,-8
   41c34:	80c00315 	stw	r3,12(r16)
   41c38:	81000215 	stw	r4,8(r16)
   41c3c:	99400115 	stw	r5,4(r19)
   41c40:	14000015 	stw	r16,0(r2)
   41c44:	24000315 	stw	r16,12(r4)
   41c48:	3805d0ba 	srai	r2,r7,2
   41c4c:	01000044 	movi	r4,1
   41c50:	2088983a 	sll	r4,r4,r2
   41c54:	29002e36 	bltu	r5,r4,41d10 <_malloc_r+0x29c>
   41c58:	2144703a 	and	r2,r4,r5
   41c5c:	10000a1e 	bne	r2,zero,41c88 <_malloc_r+0x214>
   41c60:	2109883a 	add	r4,r4,r4
   41c64:	00bfff04 	movi	r2,-4
   41c68:	3884703a 	and	r2,r7,r2
   41c6c:	2146703a 	and	r3,r4,r5
   41c70:	11c00104 	addi	r7,r2,4
   41c74:	1800041e 	bne	r3,zero,41c88 <_malloc_r+0x214>
   41c78:	2109883a 	add	r4,r4,r4
   41c7c:	2144703a 	and	r2,r4,r5
   41c80:	39c00104 	addi	r7,r7,4
   41c84:	103ffc26 	beq	r2,zero,41c78 <_malloc_r+0x204>
   41c88:	02bfff04 	movi	r10,-4
   41c8c:	381690fa 	slli	r11,r7,3
   41c90:	3819883a 	mov	r12,r7
   41c94:	9ad7883a 	add	r11,r19,r11
   41c98:	5811883a 	mov	r8,r11
   41c9c:	40800317 	ldw	r2,12(r8)
   41ca0:	40808526 	beq	r8,r2,41eb8 <_malloc_r+0x444>
   41ca4:	10c00117 	ldw	r3,4(r2)
   41ca8:	1021883a 	mov	r16,r2
   41cac:	10800317 	ldw	r2,12(r2)
   41cb0:	1a86703a 	and	r3,r3,r10
   41cb4:	1c4bc83a 	sub	r5,r3,r17
   41cb8:	29800410 	cmplti	r6,r5,16
   41cbc:	30008326 	beq	r6,zero,41ecc <_malloc_r+0x458>
   41cc0:	283ff716 	blt	r5,zero,41ca0 <_malloc_r+0x22c>
   41cc4:	80c7883a 	add	r3,r16,r3
   41cc8:	19400117 	ldw	r5,4(r3)
   41ccc:	81800217 	ldw	r6,8(r16)
   41cd0:	9009883a 	mov	r4,r18
   41cd4:	29400054 	ori	r5,r5,1
   41cd8:	19400115 	stw	r5,4(r3)
   41cdc:	30800315 	stw	r2,12(r6)
   41ce0:	11800215 	stw	r6,8(r2)
   41ce4:	004385c0 	call	4385c <__malloc_unlock>
   41ce8:	80800204 	addi	r2,r16,8
   41cec:	003f8a06 	br	41b18 <_malloc_r+0xa4>
   41cf0:	00800304 	movi	r2,12
   41cf4:	90800015 	stw	r2,0(r18)
   41cf8:	0005883a 	mov	r2,zero
   41cfc:	003f8606 	br	41b18 <_malloc_r+0xa4>
   41d00:	01008004 	movi	r4,512
   41d04:	01c01004 	movi	r7,64
   41d08:	02000fc4 	movi	r8,63
   41d0c:	003f9d06 	br	41b84 <_malloc_r+0x110>
   41d10:	9c000217 	ldw	r16,8(r19)
   41d14:	00bfff04 	movi	r2,-4
   41d18:	80c00117 	ldw	r3,4(r16)
   41d1c:	18aa703a 	and	r21,r3,r2
   41d20:	ac400336 	bltu	r21,r17,41d30 <_malloc_r+0x2bc>
   41d24:	ac47c83a 	sub	r3,r21,r17
   41d28:	18800408 	cmpgei	r2,r3,16
   41d2c:	10002c1e 	bne	r2,zero,41de0 <_malloc_r+0x36c>
   41d30:	00800134 	movhi	r2,4
   41d34:	109be417 	ldw	r2,28560(r2)
   41d38:	00c00174 	movhi	r3,5
   41d3c:	1d21cf17 	ldw	r20,-30916(r3)
   41d40:	10bfffd8 	cmpnei	r2,r2,-1
   41d44:	856f883a 	add	r23,r16,r21
   41d48:	8d29883a 	add	r20,r17,r20
   41d4c:	1000eb26 	beq	r2,zero,420fc <_malloc_r+0x688>
   41d50:	a50403c4 	addi	r20,r20,4111
   41d54:	00bc0004 	movi	r2,-4096
   41d58:	a0a8703a 	and	r20,r20,r2
   41d5c:	a00b883a 	mov	r5,r20
   41d60:	9009883a 	mov	r4,r18
   41d64:	0042f040 	call	42f04 <_sbrk_r>
   41d68:	102d883a 	mov	r22,r2
   41d6c:	10bfffd8 	cmpnei	r2,r2,-1
   41d70:	10008826 	beq	r2,zero,41f94 <_malloc_r+0x520>
   41d74:	b5c08636 	bltu	r22,r23,41f90 <_malloc_r+0x51c>
   41d78:	00800174 	movhi	r2,5
   41d7c:	11222717 	ldw	r4,-30564(r2)
   41d80:	a109883a 	add	r4,r20,r4
   41d84:	11222715 	stw	r4,-30564(r2)
   41d88:	2007883a 	mov	r3,r4
   41d8c:	bd80a91e 	bne	r23,r22,42034 <_malloc_r+0x5c0>
   41d90:	b083ffcc 	andi	r2,r22,4095
   41d94:	1000a71e 	bne	r2,zero,42034 <_malloc_r+0x5c0>
   41d98:	9d800217 	ldw	r22,8(r19)
   41d9c:	ad07883a 	add	r3,r21,r20
   41da0:	18c00054 	ori	r3,r3,1
   41da4:	b0c00115 	stw	r3,4(r22)
   41da8:	00800174 	movhi	r2,5
   41dac:	10a1ce17 	ldw	r2,-30920(r2)
   41db0:	1100022e 	bgeu	r2,r4,41dbc <_malloc_r+0x348>
   41db4:	00800174 	movhi	r2,5
   41db8:	1121ce15 	stw	r4,-30920(r2)
   41dbc:	00800174 	movhi	r2,5
   41dc0:	10a1cd17 	ldw	r2,-30924(r2)
   41dc4:	1100022e 	bgeu	r2,r4,41dd0 <_malloc_r+0x35c>
   41dc8:	00800174 	movhi	r2,5
   41dcc:	1121cd15 	stw	r4,-30924(r2)
   41dd0:	b021883a 	mov	r16,r22
   41dd4:	00007106 	br	41f9c <_malloc_r+0x528>
   41dd8:	99400117 	ldw	r5,4(r19)
   41ddc:	003f9a06 	br	41c48 <_malloc_r+0x1d4>
   41de0:	88800054 	ori	r2,r17,1
   41de4:	80800115 	stw	r2,4(r16)
   41de8:	8463883a 	add	r17,r16,r17
   41dec:	9c400215 	stw	r17,8(r19)
   41df0:	18c00054 	ori	r3,r3,1
   41df4:	88c00115 	stw	r3,4(r17)
   41df8:	9009883a 	mov	r4,r18
   41dfc:	004385c0 	call	4385c <__malloc_unlock>
   41e00:	80800204 	addi	r2,r16,8
   41e04:	003f4406 	br	41b18 <_malloc_r+0xa4>
   41e08:	81000217 	ldw	r4,8(r16)
   41e0c:	8085883a 	add	r2,r16,r2
   41e10:	10c00117 	ldw	r3,4(r2)
   41e14:	21400315 	stw	r5,12(r4)
   41e18:	29000215 	stw	r4,8(r5)
   41e1c:	003f3906 	br	41b04 <_malloc_r+0x90>
   41e20:	14000317 	ldw	r16,12(r2)
   41e24:	143f2e1e 	bne	r2,r16,41ae0 <_malloc_r+0x6c>
   41e28:	39c00084 	addi	r7,r7,2
   41e2c:	003f6706 	br	41bcc <_malloc_r+0x158>
   41e30:	1006d27a 	srli	r3,r2,9
   41e34:	19000168 	cmpgeui	r4,r3,5
   41e38:	20005026 	beq	r4,zero,41f7c <_malloc_r+0x508>
   41e3c:	19000568 	cmpgeui	r4,r3,21
   41e40:	2000c01e 	bne	r4,zero,42144 <_malloc_r+0x6d0>
   41e44:	19801704 	addi	r6,r3,92
   41e48:	300c90fa 	slli	r6,r6,3
   41e4c:	190016c4 	addi	r4,r3,91
   41e50:	998d883a 	add	r6,r19,r6
   41e54:	30c00017 	ldw	r3,0(r6)
   41e58:	31bffe04 	addi	r6,r6,-8
   41e5c:	30c0a926 	beq	r6,r3,42104 <_malloc_r+0x690>
   41e60:	023fff04 	movi	r8,-4
   41e64:	00000206 	br	41e70 <_malloc_r+0x3fc>
   41e68:	18c00217 	ldw	r3,8(r3)
   41e6c:	30c00326 	beq	r6,r3,41e7c <_malloc_r+0x408>
   41e70:	19000117 	ldw	r4,4(r3)
   41e74:	2208703a 	and	r4,r4,r8
   41e78:	113ffb36 	bltu	r2,r4,41e68 <_malloc_r+0x3f4>
   41e7c:	19800317 	ldw	r6,12(r3)
   41e80:	81800315 	stw	r6,12(r16)
   41e84:	80c00215 	stw	r3,8(r16)
   41e88:	34000215 	stw	r16,8(r6)
   41e8c:	1c000315 	stw	r16,12(r3)
   41e90:	003f6d06 	br	41c48 <_malloc_r+0x1d4>
   41e94:	10c00568 	cmpgeui	r3,r2,21
   41e98:	18004926 	beq	r3,zero,41fc0 <_malloc_r+0x54c>
   41e9c:	10c01568 	cmpgeui	r3,r2,85
   41ea0:	1800af1e 	bne	r3,zero,42160 <_malloc_r+0x6ec>
   41ea4:	8804d33a 	srli	r2,r17,12
   41ea8:	11c01bc4 	addi	r7,r2,111
   41eac:	380890fa 	slli	r4,r7,3
   41eb0:	12001b84 	addi	r8,r2,110
   41eb4:	003f3306 	br	41b84 <_malloc_r+0x110>
   41eb8:	63000044 	addi	r12,r12,1
   41ebc:	608000cc 	andi	r2,r12,3
   41ec0:	42000204 	addi	r8,r8,8
   41ec4:	103f751e 	bne	r2,zero,41c9c <_malloc_r+0x228>
   41ec8:	00004406 	br	41fdc <_malloc_r+0x568>
   41ecc:	81000217 	ldw	r4,8(r16)
   41ed0:	89800054 	ori	r6,r17,1
   41ed4:	81800115 	stw	r6,4(r16)
   41ed8:	20800315 	stw	r2,12(r4)
   41edc:	11000215 	stw	r4,8(r2)
   41ee0:	8463883a 	add	r17,r16,r17
   41ee4:	9c400515 	stw	r17,20(r19)
   41ee8:	9c400415 	stw	r17,16(r19)
   41eec:	28800054 	ori	r2,r5,1
   41ef0:	88800115 	stw	r2,4(r17)
   41ef4:	8a400315 	stw	r9,12(r17)
   41ef8:	8a400215 	stw	r9,8(r17)
   41efc:	80c7883a 	add	r3,r16,r3
   41f00:	19400015 	stw	r5,0(r3)
   41f04:	9009883a 	mov	r4,r18
   41f08:	004385c0 	call	4385c <__malloc_unlock>
   41f0c:	80800204 	addi	r2,r16,8
   41f10:	003f0106 	br	41b18 <_malloc_r+0xa4>
   41f14:	8085883a 	add	r2,r16,r2
   41f18:	10c00117 	ldw	r3,4(r2)
   41f1c:	9009883a 	mov	r4,r18
   41f20:	18c00054 	ori	r3,r3,1
   41f24:	10c00115 	stw	r3,4(r2)
   41f28:	004385c0 	call	4385c <__malloc_unlock>
   41f2c:	80800204 	addi	r2,r16,8
   41f30:	003ef906 	br	41b18 <_malloc_r+0xa4>
   41f34:	880ed0fa 	srli	r7,r17,3
   41f38:	88800204 	addi	r2,r17,8
   41f3c:	003ee206 	br	41ac8 <_malloc_r+0x54>
   41f40:	89000054 	ori	r4,r17,1
   41f44:	81000115 	stw	r4,4(r16)
   41f48:	8463883a 	add	r17,r16,r17
   41f4c:	9c400515 	stw	r17,20(r19)
   41f50:	9c400415 	stw	r17,16(r19)
   41f54:	19000054 	ori	r4,r3,1
   41f58:	89000115 	stw	r4,4(r17)
   41f5c:	8085883a 	add	r2,r16,r2
   41f60:	8a400315 	stw	r9,12(r17)
   41f64:	8a400215 	stw	r9,8(r17)
   41f68:	10c00015 	stw	r3,0(r2)
   41f6c:	9009883a 	mov	r4,r18
   41f70:	004385c0 	call	4385c <__malloc_unlock>
   41f74:	80800204 	addi	r2,r16,8
   41f78:	003ee706 	br	41b18 <_malloc_r+0xa4>
   41f7c:	1006d1ba 	srli	r3,r2,6
   41f80:	19800e44 	addi	r6,r3,57
   41f84:	300c90fa 	slli	r6,r6,3
   41f88:	19000e04 	addi	r4,r3,56
   41f8c:	003fb006 	br	41e50 <_malloc_r+0x3dc>
   41f90:	84c02426 	beq	r16,r19,42024 <_malloc_r+0x5b0>
   41f94:	9c000217 	ldw	r16,8(r19)
   41f98:	80c00117 	ldw	r3,4(r16)
   41f9c:	00bfff04 	movi	r2,-4
   41fa0:	1884703a 	and	r2,r3,r2
   41fa4:	1447c83a 	sub	r3,r2,r17
   41fa8:	14400236 	bltu	r2,r17,41fb4 <_malloc_r+0x540>
   41fac:	18800408 	cmpgei	r2,r3,16
   41fb0:	103f8b1e 	bne	r2,zero,41de0 <_malloc_r+0x36c>
   41fb4:	9009883a 	mov	r4,r18
   41fb8:	004385c0 	call	4385c <__malloc_unlock>
   41fbc:	003f4e06 	br	41cf8 <_malloc_r+0x284>
   41fc0:	11c01704 	addi	r7,r2,92
   41fc4:	380890fa 	slli	r4,r7,3
   41fc8:	120016c4 	addi	r8,r2,91
   41fcc:	003eed06 	br	41b84 <_malloc_r+0x110>
   41fd0:	58800217 	ldw	r2,8(r11)
   41fd4:	39ffffc4 	addi	r7,r7,-1
   41fd8:	12c0961e 	bne	r2,r11,42234 <_malloc_r+0x7c0>
   41fdc:	388000cc 	andi	r2,r7,3
   41fe0:	5afffe04 	addi	r11,r11,-8
   41fe4:	103ffa1e 	bne	r2,zero,41fd0 <_malloc_r+0x55c>
   41fe8:	98c00117 	ldw	r3,4(r19)
   41fec:	0104303a 	nor	r2,zero,r4
   41ff0:	10c4703a 	and	r2,r2,r3
   41ff4:	98800115 	stw	r2,4(r19)
   41ff8:	2109883a 	add	r4,r4,r4
   41ffc:	113f4436 	bltu	r2,r4,41d10 <_malloc_r+0x29c>
   42000:	203f4326 	beq	r4,zero,41d10 <_malloc_r+0x29c>
   42004:	2086703a 	and	r3,r4,r2
   42008:	1800041e 	bne	r3,zero,4201c <_malloc_r+0x5a8>
   4200c:	2109883a 	add	r4,r4,r4
   42010:	2086703a 	and	r3,r4,r2
   42014:	63000104 	addi	r12,r12,4
   42018:	183ffc26 	beq	r3,zero,4200c <_malloc_r+0x598>
   4201c:	600f883a 	mov	r7,r12
   42020:	003f1a06 	br	41c8c <_malloc_r+0x218>
   42024:	00800174 	movhi	r2,5
   42028:	10e22717 	ldw	r3,-30564(r2)
   4202c:	a0c7883a 	add	r3,r20,r3
   42030:	10e22715 	stw	r3,-30564(r2)
   42034:	00800134 	movhi	r2,4
   42038:	109be417 	ldw	r2,28560(r2)
   4203c:	10bfffd8 	cmpnei	r2,r2,-1
   42040:	10004e26 	beq	r2,zero,4217c <_malloc_r+0x708>
   42044:	b5c5c83a 	sub	r2,r22,r23
   42048:	10c5883a 	add	r2,r2,r3
   4204c:	00c00174 	movhi	r3,5
   42050:	18a22715 	stw	r2,-30564(r3)
   42054:	b70001cc 	andi	fp,r22,7
   42058:	e0003026 	beq	fp,zero,4211c <_malloc_r+0x6a8>
   4205c:	b72dc83a 	sub	r22,r22,fp
   42060:	b5800204 	addi	r22,r22,8
   42064:	01040204 	movi	r4,4104
   42068:	2709c83a 	sub	r4,r4,fp
   4206c:	b529883a 	add	r20,r22,r20
   42070:	2509c83a 	sub	r4,r4,r20
   42074:	25c3ffcc 	andi	r23,r4,4095
   42078:	b80b883a 	mov	r5,r23
   4207c:	9009883a 	mov	r4,r18
   42080:	0042f040 	call	42f04 <_sbrk_r>
   42084:	10ffffe0 	cmpeqi	r3,r2,-1
   42088:	1800501e 	bne	r3,zero,421cc <_malloc_r+0x758>
   4208c:	1585c83a 	sub	r2,r2,r22
   42090:	15e9883a 	add	r20,r2,r23
   42094:	00800174 	movhi	r2,5
   42098:	10a22717 	ldw	r2,-30564(r2)
   4209c:	9d800215 	stw	r22,8(r19)
   420a0:	a0c00054 	ori	r3,r20,1
   420a4:	b889883a 	add	r4,r23,r2
   420a8:	00800174 	movhi	r2,5
   420ac:	11222715 	stw	r4,-30564(r2)
   420b0:	b0c00115 	stw	r3,4(r22)
   420b4:	84ff3c26 	beq	r16,r19,41da8 <_malloc_r+0x334>
   420b8:	a8800428 	cmpgeui	r2,r21,16
   420bc:	10003226 	beq	r2,zero,42188 <_malloc_r+0x714>
   420c0:	80800117 	ldw	r2,4(r16)
   420c4:	017ffe04 	movi	r5,-8
   420c8:	a8fffd04 	addi	r3,r21,-12
   420cc:	1946703a 	and	r3,r3,r5
   420d0:	1080004c 	andi	r2,r2,1
   420d4:	10c4b03a 	or	r2,r2,r3
   420d8:	80800115 	stw	r2,4(r16)
   420dc:	01400144 	movi	r5,5
   420e0:	80c5883a 	add	r2,r16,r3
   420e4:	11400115 	stw	r5,4(r2)
   420e8:	11400215 	stw	r5,8(r2)
   420ec:	18c00428 	cmpgeui	r3,r3,16
   420f0:	18003b1e 	bne	r3,zero,421e0 <_malloc_r+0x76c>
   420f4:	b0c00117 	ldw	r3,4(r22)
   420f8:	003f2b06 	br	41da8 <_malloc_r+0x334>
   420fc:	a5000404 	addi	r20,r20,16
   42100:	003f1606 	br	41d5c <_malloc_r+0x2e8>
   42104:	2009d0ba 	srai	r4,r4,2
   42108:	00800044 	movi	r2,1
   4210c:	1104983a 	sll	r2,r2,r4
   42110:	288ab03a 	or	r5,r5,r2
   42114:	99400115 	stw	r5,4(r19)
   42118:	003f5906 	br	41e80 <_malloc_r+0x40c>
   4211c:	b509883a 	add	r4,r22,r20
   42120:	0109c83a 	sub	r4,zero,r4
   42124:	25c3ffcc 	andi	r23,r4,4095
   42128:	b80b883a 	mov	r5,r23
   4212c:	9009883a 	mov	r4,r18
   42130:	0042f040 	call	42f04 <_sbrk_r>
   42134:	10ffffe0 	cmpeqi	r3,r2,-1
   42138:	183fd426 	beq	r3,zero,4208c <_malloc_r+0x618>
   4213c:	002f883a 	mov	r23,zero
   42140:	003fd406 	br	42094 <_malloc_r+0x620>
   42144:	19001568 	cmpgeui	r4,r3,85
   42148:	2000121e 	bne	r4,zero,42194 <_malloc_r+0x720>
   4214c:	1006d33a 	srli	r3,r2,12
   42150:	19801bc4 	addi	r6,r3,111
   42154:	300c90fa 	slli	r6,r6,3
   42158:	19001b84 	addi	r4,r3,110
   4215c:	003f3c06 	br	41e50 <_malloc_r+0x3dc>
   42160:	10c05568 	cmpgeui	r3,r2,341
   42164:	1800121e 	bne	r3,zero,421b0 <_malloc_r+0x73c>
   42168:	8804d3fa 	srli	r2,r17,15
   4216c:	11c01e04 	addi	r7,r2,120
   42170:	380890fa 	slli	r4,r7,3
   42174:	12001dc4 	addi	r8,r2,119
   42178:	003e8206 	br	41b84 <_malloc_r+0x110>
   4217c:	00800134 	movhi	r2,4
   42180:	159be415 	stw	r22,28560(r2)
   42184:	003fb306 	br	42054 <_malloc_r+0x5e0>
   42188:	00800044 	movi	r2,1
   4218c:	b0800115 	stw	r2,4(r22)
   42190:	003f8806 	br	41fb4 <_malloc_r+0x540>
   42194:	19005568 	cmpgeui	r4,r3,341
   42198:	2000181e 	bne	r4,zero,421fc <_malloc_r+0x788>
   4219c:	1006d3fa 	srli	r3,r2,15
   421a0:	19801e04 	addi	r6,r3,120
   421a4:	300c90fa 	slli	r6,r6,3
   421a8:	19001dc4 	addi	r4,r3,119
   421ac:	003f2806 	br	41e50 <_malloc_r+0x3dc>
   421b0:	10815568 	cmpgeui	r2,r2,1365
   421b4:	1000181e 	bne	r2,zero,42218 <_malloc_r+0x7a4>
   421b8:	8804d4ba 	srli	r2,r17,18
   421bc:	11c01f44 	addi	r7,r2,125
   421c0:	380890fa 	slli	r4,r7,3
   421c4:	12001f04 	addi	r8,r2,124
   421c8:	003e6e06 	br	41b84 <_malloc_r+0x110>
   421cc:	e73ffe04 	addi	fp,fp,-8
   421d0:	a729883a 	add	r20,r20,fp
   421d4:	a5a9c83a 	sub	r20,r20,r22
   421d8:	002f883a 	mov	r23,zero
   421dc:	003fad06 	br	42094 <_malloc_r+0x620>
   421e0:	9009883a 	mov	r4,r18
   421e4:	81400204 	addi	r5,r16,8
   421e8:	004176c0 	call	4176c <_free_r>
   421ec:	00800174 	movhi	r2,5
   421f0:	9d800217 	ldw	r22,8(r19)
   421f4:	11222717 	ldw	r4,-30564(r2)
   421f8:	003fbe06 	br	420f4 <_malloc_r+0x680>
   421fc:	18c15568 	cmpgeui	r3,r3,1365
   42200:	1800091e 	bne	r3,zero,42228 <_malloc_r+0x7b4>
   42204:	1006d4ba 	srli	r3,r2,18
   42208:	19801f44 	addi	r6,r3,125
   4220c:	300c90fa 	slli	r6,r6,3
   42210:	19001f04 	addi	r4,r3,124
   42214:	003f0e06 	br	41e50 <_malloc_r+0x3dc>
   42218:	0100fe04 	movi	r4,1016
   4221c:	01c01fc4 	movi	r7,127
   42220:	02001f84 	movi	r8,126
   42224:	003e5706 	br	41b84 <_malloc_r+0x110>
   42228:	0180fe04 	movi	r6,1016
   4222c:	01001f84 	movi	r4,126
   42230:	003f0706 	br	41e50 <_malloc_r+0x3dc>
   42234:	98800117 	ldw	r2,4(r19)
   42238:	003f6f06 	br	41ff8 <_malloc_r+0x584>

0004223c <_realloc_r>:
   4223c:	defff604 	addi	sp,sp,-40
   42240:	dcc00315 	stw	r19,12(sp)
   42244:	dfc00915 	stw	ra,36(sp)
   42248:	df000815 	stw	fp,32(sp)
   4224c:	ddc00715 	stw	r23,28(sp)
   42250:	dd800615 	stw	r22,24(sp)
   42254:	dd400515 	stw	r21,20(sp)
   42258:	dd000415 	stw	r20,16(sp)
   4225c:	dc800215 	stw	r18,8(sp)
   42260:	dc400115 	stw	r17,4(sp)
   42264:	dc000015 	stw	r16,0(sp)
   42268:	3027883a 	mov	r19,r6
   4226c:	28008a26 	beq	r5,zero,42498 <_realloc_r+0x25c>
   42270:	2821883a 	mov	r16,r5
   42274:	2029883a 	mov	r20,r4
   42278:	00438380 	call	43838 <__malloc_lock>
   4227c:	80bfff17 	ldw	r2,-4(r16)
   42280:	9c4002c4 	addi	r17,r19,11
   42284:	04bfff04 	movi	r18,-4
   42288:	88c005f0 	cmpltui	r3,r17,23
   4228c:	857ffe04 	addi	r21,r16,-8
   42290:	14a4703a 	and	r18,r2,r18
   42294:	18005a1e 	bne	r3,zero,42400 <_realloc_r+0x1c4>
   42298:	00fffe04 	movi	r3,-8
   4229c:	88e2703a 	and	r17,r17,r3
   422a0:	88005916 	blt	r17,zero,42408 <_realloc_r+0x1cc>
   422a4:	8cc05836 	bltu	r17,r19,42408 <_realloc_r+0x1cc>
   422a8:	94403a0e 	bge	r18,r17,42394 <_realloc_r+0x158>
   422ac:	05800134 	movhi	r22,4
   422b0:	b5965f04 	addi	r22,r22,22908
   422b4:	b1800217 	ldw	r6,8(r22)
   422b8:	ac8b883a 	add	r5,r21,r18
   422bc:	28c00117 	ldw	r3,4(r5)
   422c0:	31408e26 	beq	r6,r5,424fc <_realloc_r+0x2c0>
   422c4:	013fff84 	movi	r4,-2
   422c8:	1908703a 	and	r4,r3,r4
   422cc:	2909883a 	add	r4,r5,r4
   422d0:	21000117 	ldw	r4,4(r4)
   422d4:	2100004c 	andi	r4,r4,1
   422d8:	20004f1e 	bne	r4,zero,42418 <_realloc_r+0x1dc>
   422dc:	013fff04 	movi	r4,-4
   422e0:	1906703a 	and	r3,r3,r4
   422e4:	90c9883a 	add	r4,r18,r3
   422e8:	2440ca0e 	bge	r4,r17,42614 <_realloc_r+0x3d8>
   422ec:	1080004c 	andi	r2,r2,1
   422f0:	10004b1e 	bne	r2,zero,42420 <_realloc_r+0x1e4>
   422f4:	85fffe17 	ldw	r23,-8(r16)
   422f8:	013fff04 	movi	r4,-4
   422fc:	adefc83a 	sub	r23,r21,r23
   42300:	b8800117 	ldw	r2,4(r23)
   42304:	1104703a 	and	r2,r2,r4
   42308:	28000426 	beq	r5,zero,4231c <_realloc_r+0xe0>
   4230c:	90b9883a 	add	fp,r18,r2
   42310:	e0f9883a 	add	fp,fp,r3
   42314:	3140c926 	beq	r6,r5,4263c <_realloc_r+0x400>
   42318:	e4409e0e 	bge	fp,r17,42594 <_realloc_r+0x358>
   4231c:	b8004026 	beq	r23,zero,42420 <_realloc_r+0x1e4>
   42320:	90ad883a 	add	r22,r18,r2
   42324:	b4403e16 	blt	r22,r17,42420 <_realloc_r+0x1e4>
   42328:	b8800317 	ldw	r2,12(r23)
   4232c:	b8c00217 	ldw	r3,8(r23)
   42330:	91bfff04 	addi	r6,r18,-4
   42334:	31400968 	cmpgeui	r5,r6,37
   42338:	18800315 	stw	r2,12(r3)
   4233c:	10c00215 	stw	r3,8(r2)
   42340:	bc800204 	addi	r18,r23,8
   42344:	2800ee1e 	bne	r5,zero,42700 <_realloc_r+0x4c4>
   42348:	30800530 	cmpltui	r2,r6,20
   4234c:	1000ea1e 	bne	r2,zero,426f8 <_realloc_r+0x4bc>
   42350:	80c00017 	ldw	r3,0(r16)
   42354:	30800728 	cmpgeui	r2,r6,28
   42358:	b8c00215 	stw	r3,8(r23)
   4235c:	80c00117 	ldw	r3,4(r16)
   42360:	b8c00315 	stw	r3,12(r23)
   42364:	1000fa1e 	bne	r2,zero,42750 <_realloc_r+0x514>
   42368:	84000204 	addi	r16,r16,8
   4236c:	b8800404 	addi	r2,r23,16
   42370:	80c00017 	ldw	r3,0(r16)
   42374:	10c00015 	stw	r3,0(r2)
   42378:	80c00117 	ldw	r3,4(r16)
   4237c:	10c00115 	stw	r3,4(r2)
   42380:	80c00217 	ldw	r3,8(r16)
   42384:	10c00215 	stw	r3,8(r2)
   42388:	9021883a 	mov	r16,r18
   4238c:	b82b883a 	mov	r21,r23
   42390:	b025883a 	mov	r18,r22
   42394:	a8800117 	ldw	r2,4(r21)
   42398:	9449c83a 	sub	r4,r18,r17
   4239c:	21400430 	cmpltui	r5,r4,16
   423a0:	1080004c 	andi	r2,r2,1
   423a4:	ac87883a 	add	r3,r21,r18
   423a8:	28004826 	beq	r5,zero,424cc <_realloc_r+0x290>
   423ac:	9084b03a 	or	r2,r18,r2
   423b0:	a8800115 	stw	r2,4(r21)
   423b4:	18800117 	ldw	r2,4(r3)
   423b8:	10800054 	ori	r2,r2,1
   423bc:	18800115 	stw	r2,4(r3)
   423c0:	a009883a 	mov	r4,r20
   423c4:	004385c0 	call	4385c <__malloc_unlock>
   423c8:	8027883a 	mov	r19,r16
   423cc:	9805883a 	mov	r2,r19
   423d0:	dfc00917 	ldw	ra,36(sp)
   423d4:	df000817 	ldw	fp,32(sp)
   423d8:	ddc00717 	ldw	r23,28(sp)
   423dc:	dd800617 	ldw	r22,24(sp)
   423e0:	dd400517 	ldw	r21,20(sp)
   423e4:	dd000417 	ldw	r20,16(sp)
   423e8:	dcc00317 	ldw	r19,12(sp)
   423ec:	dc800217 	ldw	r18,8(sp)
   423f0:	dc400117 	ldw	r17,4(sp)
   423f4:	dc000017 	ldw	r16,0(sp)
   423f8:	dec00a04 	addi	sp,sp,40
   423fc:	f800283a 	ret
   42400:	04400404 	movi	r17,16
   42404:	8cffa82e 	bgeu	r17,r19,422a8 <_realloc_r+0x6c>
   42408:	00800304 	movi	r2,12
   4240c:	a0800015 	stw	r2,0(r20)
   42410:	0027883a 	mov	r19,zero
   42414:	003fed06 	br	423cc <_realloc_r+0x190>
   42418:	1080004c 	andi	r2,r2,1
   4241c:	10004e26 	beq	r2,zero,42558 <_realloc_r+0x31c>
   42420:	980b883a 	mov	r5,r19
   42424:	a009883a 	mov	r4,r20
   42428:	0041a740 	call	41a74 <_malloc_r>
   4242c:	1027883a 	mov	r19,r2
   42430:	1000bd26 	beq	r2,zero,42728 <_realloc_r+0x4ec>
   42434:	80bfff17 	ldw	r2,-4(r16)
   42438:	013fff84 	movi	r4,-2
   4243c:	98fffe04 	addi	r3,r19,-8
   42440:	1104703a 	and	r2,r2,r4
   42444:	a885883a 	add	r2,r21,r2
   42448:	10c03e26 	beq	r2,r3,42544 <_realloc_r+0x308>
   4244c:	91bfff04 	addi	r6,r18,-4
   42450:	30800968 	cmpgeui	r2,r6,37
   42454:	1000751e 	bne	r2,zero,4262c <_realloc_r+0x3f0>
   42458:	30800530 	cmpltui	r2,r6,20
   4245c:	10004426 	beq	r2,zero,42570 <_realloc_r+0x334>
   42460:	9805883a 	mov	r2,r19
   42464:	8007883a 	mov	r3,r16
   42468:	19000017 	ldw	r4,0(r3)
   4246c:	11000015 	stw	r4,0(r2)
   42470:	19000117 	ldw	r4,4(r3)
   42474:	11000115 	stw	r4,4(r2)
   42478:	18c00217 	ldw	r3,8(r3)
   4247c:	10c00215 	stw	r3,8(r2)
   42480:	a009883a 	mov	r4,r20
   42484:	800b883a 	mov	r5,r16
   42488:	004176c0 	call	4176c <_free_r>
   4248c:	a009883a 	mov	r4,r20
   42490:	004385c0 	call	4385c <__malloc_unlock>
   42494:	003fcd06 	br	423cc <_realloc_r+0x190>
   42498:	300b883a 	mov	r5,r6
   4249c:	dfc00917 	ldw	ra,36(sp)
   424a0:	df000817 	ldw	fp,32(sp)
   424a4:	ddc00717 	ldw	r23,28(sp)
   424a8:	dd800617 	ldw	r22,24(sp)
   424ac:	dd400517 	ldw	r21,20(sp)
   424b0:	dd000417 	ldw	r20,16(sp)
   424b4:	dcc00317 	ldw	r19,12(sp)
   424b8:	dc800217 	ldw	r18,8(sp)
   424bc:	dc400117 	ldw	r17,4(sp)
   424c0:	dc000017 	ldw	r16,0(sp)
   424c4:	dec00a04 	addi	sp,sp,40
   424c8:	0041a741 	jmpi	41a74 <_malloc_r>
   424cc:	8884b03a 	or	r2,r17,r2
   424d0:	a8800115 	stw	r2,4(r21)
   424d4:	ac4b883a 	add	r5,r21,r17
   424d8:	21000054 	ori	r4,r4,1
   424dc:	29000115 	stw	r4,4(r5)
   424e0:	18800117 	ldw	r2,4(r3)
   424e4:	29400204 	addi	r5,r5,8
   424e8:	a009883a 	mov	r4,r20
   424ec:	10800054 	ori	r2,r2,1
   424f0:	18800115 	stw	r2,4(r3)
   424f4:	004176c0 	call	4176c <_free_r>
   424f8:	003fb106 	br	423c0 <_realloc_r+0x184>
   424fc:	013fff04 	movi	r4,-4
   42500:	1906703a 	and	r3,r3,r4
   42504:	1c89883a 	add	r4,r3,r18
   42508:	89c00404 	addi	r7,r17,16
   4250c:	21ff7716 	blt	r4,r7,422ec <_realloc_r+0xb0>
   42510:	ac6b883a 	add	r21,r21,r17
   42514:	2445c83a 	sub	r2,r4,r17
   42518:	b5400215 	stw	r21,8(r22)
   4251c:	10800054 	ori	r2,r2,1
   42520:	a8800115 	stw	r2,4(r21)
   42524:	80bfff17 	ldw	r2,-4(r16)
   42528:	a009883a 	mov	r4,r20
   4252c:	8027883a 	mov	r19,r16
   42530:	1080004c 	andi	r2,r2,1
   42534:	1444b03a 	or	r2,r2,r17
   42538:	80bfff15 	stw	r2,-4(r16)
   4253c:	004385c0 	call	4385c <__malloc_unlock>
   42540:	003fa206 	br	423cc <_realloc_r+0x190>
   42544:	98bfff17 	ldw	r2,-4(r19)
   42548:	00ffff04 	movi	r3,-4
   4254c:	10c4703a 	and	r2,r2,r3
   42550:	90a5883a 	add	r18,r18,r2
   42554:	003f8f06 	br	42394 <_realloc_r+0x158>
   42558:	85fffe17 	ldw	r23,-8(r16)
   4255c:	00ffff04 	movi	r3,-4
   42560:	adefc83a 	sub	r23,r21,r23
   42564:	b8800117 	ldw	r2,4(r23)
   42568:	10c4703a 	and	r2,r2,r3
   4256c:	003f6b06 	br	4231c <_realloc_r+0xe0>
   42570:	80c00017 	ldw	r3,0(r16)
   42574:	30800728 	cmpgeui	r2,r6,28
   42578:	98c00015 	stw	r3,0(r19)
   4257c:	80c00117 	ldw	r3,4(r16)
   42580:	98c00115 	stw	r3,4(r19)
   42584:	1000531e 	bne	r2,zero,426d4 <_realloc_r+0x498>
   42588:	80c00204 	addi	r3,r16,8
   4258c:	98800204 	addi	r2,r19,8
   42590:	003fb506 	br	42468 <_realloc_r+0x22c>
   42594:	28800317 	ldw	r2,12(r5)
   42598:	28c00217 	ldw	r3,8(r5)
   4259c:	91bfff04 	addi	r6,r18,-4
   425a0:	31400968 	cmpgeui	r5,r6,37
   425a4:	18800315 	stw	r2,12(r3)
   425a8:	10c00215 	stw	r3,8(r2)
   425ac:	b8c00217 	ldw	r3,8(r23)
   425b0:	b8800317 	ldw	r2,12(r23)
   425b4:	bc800204 	addi	r18,r23,8
   425b8:	18800315 	stw	r2,12(r3)
   425bc:	10c00215 	stw	r3,8(r2)
   425c0:	2800551e 	bne	r5,zero,42718 <_realloc_r+0x4dc>
   425c4:	30800530 	cmpltui	r2,r6,20
   425c8:	1000511e 	bne	r2,zero,42710 <_realloc_r+0x4d4>
   425cc:	80c00017 	ldw	r3,0(r16)
   425d0:	30800728 	cmpgeui	r2,r6,28
   425d4:	b8c00215 	stw	r3,8(r23)
   425d8:	80c00117 	ldw	r3,4(r16)
   425dc:	b8c00315 	stw	r3,12(r23)
   425e0:	1000641e 	bne	r2,zero,42774 <_realloc_r+0x538>
   425e4:	84000204 	addi	r16,r16,8
   425e8:	b8800404 	addi	r2,r23,16
   425ec:	80c00017 	ldw	r3,0(r16)
   425f0:	10c00015 	stw	r3,0(r2)
   425f4:	80c00117 	ldw	r3,4(r16)
   425f8:	10c00115 	stw	r3,4(r2)
   425fc:	80c00217 	ldw	r3,8(r16)
   42600:	10c00215 	stw	r3,8(r2)
   42604:	9021883a 	mov	r16,r18
   42608:	b82b883a 	mov	r21,r23
   4260c:	e025883a 	mov	r18,fp
   42610:	003f6006 	br	42394 <_realloc_r+0x158>
   42614:	28800317 	ldw	r2,12(r5)
   42618:	28c00217 	ldw	r3,8(r5)
   4261c:	2025883a 	mov	r18,r4
   42620:	18800315 	stw	r2,12(r3)
   42624:	10c00215 	stw	r3,8(r2)
   42628:	003f5a06 	br	42394 <_realloc_r+0x158>
   4262c:	800b883a 	mov	r5,r16
   42630:	9809883a 	mov	r4,r19
   42634:	00411640 	call	41164 <memmove>
   42638:	003f9106 	br	42480 <_realloc_r+0x244>
   4263c:	88c00404 	addi	r3,r17,16
   42640:	e0ff3616 	blt	fp,r3,4231c <_realloc_r+0xe0>
   42644:	b8800317 	ldw	r2,12(r23)
   42648:	b8c00217 	ldw	r3,8(r23)
   4264c:	91bfff04 	addi	r6,r18,-4
   42650:	31000968 	cmpgeui	r4,r6,37
   42654:	18800315 	stw	r2,12(r3)
   42658:	10c00215 	stw	r3,8(r2)
   4265c:	bcc00204 	addi	r19,r23,8
   42660:	20004f1e 	bne	r4,zero,427a0 <_realloc_r+0x564>
   42664:	30800530 	cmpltui	r2,r6,20
   42668:	10004b1e 	bne	r2,zero,42798 <_realloc_r+0x55c>
   4266c:	80c00017 	ldw	r3,0(r16)
   42670:	30800728 	cmpgeui	r2,r6,28
   42674:	b8c00215 	stw	r3,8(r23)
   42678:	80c00117 	ldw	r3,4(r16)
   4267c:	b8c00315 	stw	r3,12(r23)
   42680:	10004b1e 	bne	r2,zero,427b0 <_realloc_r+0x574>
   42684:	84000204 	addi	r16,r16,8
   42688:	b8800404 	addi	r2,r23,16
   4268c:	80c00017 	ldw	r3,0(r16)
   42690:	10c00015 	stw	r3,0(r2)
   42694:	80c00117 	ldw	r3,4(r16)
   42698:	10c00115 	stw	r3,4(r2)
   4269c:	80c00217 	ldw	r3,8(r16)
   426a0:	10c00215 	stw	r3,8(r2)
   426a4:	bc47883a 	add	r3,r23,r17
   426a8:	e445c83a 	sub	r2,fp,r17
   426ac:	b0c00215 	stw	r3,8(r22)
   426b0:	10800054 	ori	r2,r2,1
   426b4:	18800115 	stw	r2,4(r3)
   426b8:	b8800117 	ldw	r2,4(r23)
   426bc:	a009883a 	mov	r4,r20
   426c0:	1080004c 	andi	r2,r2,1
   426c4:	1444b03a 	or	r2,r2,r17
   426c8:	b8800115 	stw	r2,4(r23)
   426cc:	004385c0 	call	4385c <__malloc_unlock>
   426d0:	003f3e06 	br	423cc <_realloc_r+0x190>
   426d4:	80800217 	ldw	r2,8(r16)
   426d8:	31800920 	cmpeqi	r6,r6,36
   426dc:	98800215 	stw	r2,8(r19)
   426e0:	80800317 	ldw	r2,12(r16)
   426e4:	98800315 	stw	r2,12(r19)
   426e8:	3000121e 	bne	r6,zero,42734 <_realloc_r+0x4f8>
   426ec:	80c00404 	addi	r3,r16,16
   426f0:	98800404 	addi	r2,r19,16
   426f4:	003f5c06 	br	42468 <_realloc_r+0x22c>
   426f8:	9005883a 	mov	r2,r18
   426fc:	003f1c06 	br	42370 <_realloc_r+0x134>
   42700:	800b883a 	mov	r5,r16
   42704:	9009883a 	mov	r4,r18
   42708:	00411640 	call	41164 <memmove>
   4270c:	003f1e06 	br	42388 <_realloc_r+0x14c>
   42710:	9005883a 	mov	r2,r18
   42714:	003fb506 	br	425ec <_realloc_r+0x3b0>
   42718:	800b883a 	mov	r5,r16
   4271c:	9009883a 	mov	r4,r18
   42720:	00411640 	call	41164 <memmove>
   42724:	003fb706 	br	42604 <_realloc_r+0x3c8>
   42728:	a009883a 	mov	r4,r20
   4272c:	004385c0 	call	4385c <__malloc_unlock>
   42730:	003f3706 	br	42410 <_realloc_r+0x1d4>
   42734:	81000417 	ldw	r4,16(r16)
   42738:	80c00604 	addi	r3,r16,24
   4273c:	98800604 	addi	r2,r19,24
   42740:	99000415 	stw	r4,16(r19)
   42744:	81000517 	ldw	r4,20(r16)
   42748:	99000515 	stw	r4,20(r19)
   4274c:	003f4606 	br	42468 <_realloc_r+0x22c>
   42750:	80800217 	ldw	r2,8(r16)
   42754:	31800920 	cmpeqi	r6,r6,36
   42758:	b8800415 	stw	r2,16(r23)
   4275c:	80800317 	ldw	r2,12(r16)
   42760:	b8800515 	stw	r2,20(r23)
   42764:	30001b1e 	bne	r6,zero,427d4 <_realloc_r+0x598>
   42768:	84000404 	addi	r16,r16,16
   4276c:	b8800604 	addi	r2,r23,24
   42770:	003eff06 	br	42370 <_realloc_r+0x134>
   42774:	80800217 	ldw	r2,8(r16)
   42778:	31800920 	cmpeqi	r6,r6,36
   4277c:	b8800415 	stw	r2,16(r23)
   42780:	80800317 	ldw	r2,12(r16)
   42784:	b8800515 	stw	r2,20(r23)
   42788:	3000191e 	bne	r6,zero,427f0 <_realloc_r+0x5b4>
   4278c:	84000404 	addi	r16,r16,16
   42790:	b8800604 	addi	r2,r23,24
   42794:	003f9506 	br	425ec <_realloc_r+0x3b0>
   42798:	9805883a 	mov	r2,r19
   4279c:	003fbb06 	br	4268c <_realloc_r+0x450>
   427a0:	800b883a 	mov	r5,r16
   427a4:	9809883a 	mov	r4,r19
   427a8:	00411640 	call	41164 <memmove>
   427ac:	003fbd06 	br	426a4 <_realloc_r+0x468>
   427b0:	80800217 	ldw	r2,8(r16)
   427b4:	31800920 	cmpeqi	r6,r6,36
   427b8:	b8800415 	stw	r2,16(r23)
   427bc:	80800317 	ldw	r2,12(r16)
   427c0:	b8800515 	stw	r2,20(r23)
   427c4:	3000111e 	bne	r6,zero,4280c <_realloc_r+0x5d0>
   427c8:	84000404 	addi	r16,r16,16
   427cc:	b8800604 	addi	r2,r23,24
   427d0:	003fae06 	br	4268c <_realloc_r+0x450>
   427d4:	80c00417 	ldw	r3,16(r16)
   427d8:	84000604 	addi	r16,r16,24
   427dc:	b8800804 	addi	r2,r23,32
   427e0:	b8c00615 	stw	r3,24(r23)
   427e4:	80ffff17 	ldw	r3,-4(r16)
   427e8:	b8c00715 	stw	r3,28(r23)
   427ec:	003ee006 	br	42370 <_realloc_r+0x134>
   427f0:	80c00417 	ldw	r3,16(r16)
   427f4:	84000604 	addi	r16,r16,24
   427f8:	b8800804 	addi	r2,r23,32
   427fc:	b8c00615 	stw	r3,24(r23)
   42800:	80ffff17 	ldw	r3,-4(r16)
   42804:	b8c00715 	stw	r3,28(r23)
   42808:	003f7806 	br	425ec <_realloc_r+0x3b0>
   4280c:	80c00417 	ldw	r3,16(r16)
   42810:	84000604 	addi	r16,r16,24
   42814:	b8800804 	addi	r2,r23,32
   42818:	b8c00615 	stw	r3,24(r23)
   4281c:	80ffff17 	ldw	r3,-4(r16)
   42820:	b8c00715 	stw	r3,28(r23)
   42824:	003f9906 	br	4268c <_realloc_r+0x450>

00042828 <_fclose_r>:
   42828:	defffc04 	addi	sp,sp,-16
   4282c:	dfc00315 	stw	ra,12(sp)
   42830:	dc800215 	stw	r18,8(sp)
   42834:	dc400115 	stw	r17,4(sp)
   42838:	dc000015 	stw	r16,0(sp)
   4283c:	28000726 	beq	r5,zero,4285c <_fclose_r+0x34>
   42840:	2821883a 	mov	r16,r5
   42844:	2023883a 	mov	r17,r4
   42848:	20000226 	beq	r4,zero,42854 <_fclose_r+0x2c>
   4284c:	20800d17 	ldw	r2,52(r4)
   42850:	10002f26 	beq	r2,zero,42910 <_fclose_r+0xe8>
   42854:	8080030f 	ldh	r2,12(r16)
   42858:	1000081e 	bne	r2,zero,4287c <_fclose_r+0x54>
   4285c:	0025883a 	mov	r18,zero
   42860:	9005883a 	mov	r2,r18
   42864:	dfc00317 	ldw	ra,12(sp)
   42868:	dc800217 	ldw	r18,8(sp)
   4286c:	dc400117 	ldw	r17,4(sp)
   42870:	dc000017 	ldw	r16,0(sp)
   42874:	dec00404 	addi	sp,sp,16
   42878:	f800283a 	ret
   4287c:	800b883a 	mov	r5,r16
   42880:	8809883a 	mov	r4,r17
   42884:	00429280 	call	42928 <__sflush_r>
   42888:	80c00b17 	ldw	r3,44(r16)
   4288c:	1025883a 	mov	r18,r2
   42890:	18000426 	beq	r3,zero,428a4 <_fclose_r+0x7c>
   42894:	81400717 	ldw	r5,28(r16)
   42898:	8809883a 	mov	r4,r17
   4289c:	183ee83a 	callr	r3
   428a0:	10001316 	blt	r2,zero,428f0 <_fclose_r+0xc8>
   428a4:	8080030b 	ldhu	r2,12(r16)
   428a8:	1080200c 	andi	r2,r2,128
   428ac:	1000141e 	bne	r2,zero,42900 <_fclose_r+0xd8>
   428b0:	81400c17 	ldw	r5,48(r16)
   428b4:	28000526 	beq	r5,zero,428cc <_fclose_r+0xa4>
   428b8:	80801004 	addi	r2,r16,64
   428bc:	28800226 	beq	r5,r2,428c8 <_fclose_r+0xa0>
   428c0:	8809883a 	mov	r4,r17
   428c4:	004176c0 	call	4176c <_free_r>
   428c8:	80000c15 	stw	zero,48(r16)
   428cc:	81401117 	ldw	r5,68(r16)
   428d0:	28000326 	beq	r5,zero,428e0 <_fclose_r+0xb8>
   428d4:	8809883a 	mov	r4,r17
   428d8:	004176c0 	call	4176c <_free_r>
   428dc:	80001115 	stw	zero,68(r16)
   428e0:	00407640 	call	40764 <__sfp_lock_acquire>
   428e4:	8000030d 	sth	zero,12(r16)
   428e8:	00407680 	call	40768 <__sfp_lock_release>
   428ec:	003fdc06 	br	42860 <_fclose_r+0x38>
   428f0:	8080030b 	ldhu	r2,12(r16)
   428f4:	04bfffc4 	movi	r18,-1
   428f8:	1080200c 	andi	r2,r2,128
   428fc:	103fec26 	beq	r2,zero,428b0 <_fclose_r+0x88>
   42900:	81400417 	ldw	r5,16(r16)
   42904:	8809883a 	mov	r4,r17
   42908:	004176c0 	call	4176c <_free_r>
   4290c:	003fe806 	br	428b0 <_fclose_r+0x88>
   42910:	004073c0 	call	4073c <__sinit>
   42914:	003fcf06 	br	42854 <_fclose_r+0x2c>

00042918 <fclose>:
   42918:	00800134 	movhi	r2,4
   4291c:	200b883a 	mov	r5,r4
   42920:	111be317 	ldw	r4,28556(r2)
   42924:	00428281 	jmpi	42828 <_fclose_r>

00042928 <__sflush_r>:
   42928:	2880030b 	ldhu	r2,12(r5)
   4292c:	defffb04 	addi	sp,sp,-20
   42930:	dcc00315 	stw	r19,12(sp)
   42934:	dc000015 	stw	r16,0(sp)
   42938:	dfc00415 	stw	ra,16(sp)
   4293c:	dc800215 	stw	r18,8(sp)
   42940:	dc400115 	stw	r17,4(sp)
   42944:	10c0020c 	andi	r3,r2,8
   42948:	2821883a 	mov	r16,r5
   4294c:	2027883a 	mov	r19,r4
   42950:	18003c1e 	bne	r3,zero,42a44 <__sflush_r+0x11c>
   42954:	29000117 	ldw	r4,4(r5)
   42958:	10c20014 	ori	r3,r2,2048
   4295c:	28c0030d 	sth	r3,12(r5)
   42960:	0100580e 	bge	zero,r4,42ac4 <__sflush_r+0x19c>
   42964:	82000a17 	ldw	r8,40(r16)
   42968:	40003426 	beq	r8,zero,42a3c <__sflush_r+0x114>
   4296c:	9c400017 	ldw	r17,0(r19)
   42970:	1084000c 	andi	r2,r2,4096
   42974:	98000015 	stw	zero,0(r19)
   42978:	81400717 	ldw	r5,28(r16)
   4297c:	1000561e 	bne	r2,zero,42ad8 <__sflush_r+0x1b0>
   42980:	000d883a 	mov	r6,zero
   42984:	01c00044 	movi	r7,1
   42988:	9809883a 	mov	r4,r19
   4298c:	403ee83a 	callr	r8
   42990:	100d883a 	mov	r6,r2
   42994:	10bfffd8 	cmpnei	r2,r2,-1
   42998:	10005b26 	beq	r2,zero,42b08 <__sflush_r+0x1e0>
   4299c:	80c0030b 	ldhu	r3,12(r16)
   429a0:	82000a17 	ldw	r8,40(r16)
   429a4:	18c0010c 	andi	r3,r3,4
   429a8:	18000626 	beq	r3,zero,429c4 <__sflush_r+0x9c>
   429ac:	80c00117 	ldw	r3,4(r16)
   429b0:	80800c17 	ldw	r2,48(r16)
   429b4:	30cdc83a 	sub	r6,r6,r3
   429b8:	10000226 	beq	r2,zero,429c4 <__sflush_r+0x9c>
   429bc:	80800f17 	ldw	r2,60(r16)
   429c0:	308dc83a 	sub	r6,r6,r2
   429c4:	81400717 	ldw	r5,28(r16)
   429c8:	000f883a 	mov	r7,zero
   429cc:	9809883a 	mov	r4,r19
   429d0:	403ee83a 	callr	r8
   429d4:	10ffffd8 	cmpnei	r3,r2,-1
   429d8:	1800411e 	bne	r3,zero,42ae0 <__sflush_r+0x1b8>
   429dc:	99400017 	ldw	r5,0(r19)
   429e0:	28c007b0 	cmpltui	r3,r5,30
   429e4:	18002c26 	beq	r3,zero,42a98 <__sflush_r+0x170>
   429e8:	00f7f034 	movhi	r3,57280
   429ec:	18ffff84 	addi	r3,r3,-2
   429f0:	1949d83a 	sra	r4,r3,r5
   429f4:	80c0030b 	ldhu	r3,12(r16)
   429f8:	2100004c 	andi	r4,r4,1
   429fc:	2000271e 	bne	r4,zero,42a9c <__sflush_r+0x174>
   42a00:	81000417 	ldw	r4,16(r16)
   42a04:	19bdffcc 	andi	r6,r3,63487
   42a08:	8180030d 	sth	r6,12(r16)
   42a0c:	80000115 	stw	zero,4(r16)
   42a10:	81000015 	stw	r4,0(r16)
   42a14:	18c4000c 	andi	r3,r3,4096
   42a18:	1800431e 	bne	r3,zero,42b28 <__sflush_r+0x200>
   42a1c:	81400c17 	ldw	r5,48(r16)
   42a20:	9c400015 	stw	r17,0(r19)
   42a24:	28000526 	beq	r5,zero,42a3c <__sflush_r+0x114>
   42a28:	80801004 	addi	r2,r16,64
   42a2c:	28800226 	beq	r5,r2,42a38 <__sflush_r+0x110>
   42a30:	9809883a 	mov	r4,r19
   42a34:	004176c0 	call	4176c <_free_r>
   42a38:	80000c15 	stw	zero,48(r16)
   42a3c:	0005883a 	mov	r2,zero
   42a40:	00001906 	br	42aa8 <__sflush_r+0x180>
   42a44:	2c800417 	ldw	r18,16(r5)
   42a48:	903ffc26 	beq	r18,zero,42a3c <__sflush_r+0x114>
   42a4c:	2c400017 	ldw	r17,0(r5)
   42a50:	108000cc 	andi	r2,r2,3
   42a54:	2c800015 	stw	r18,0(r5)
   42a58:	8ca3c83a 	sub	r17,r17,r18
   42a5c:	10001c1e 	bne	r2,zero,42ad0 <__sflush_r+0x1a8>
   42a60:	28800517 	ldw	r2,20(r5)
   42a64:	80800215 	stw	r2,8(r16)
   42a68:	04400316 	blt	zero,r17,42a78 <__sflush_r+0x150>
   42a6c:	003ff306 	br	42a3c <__sflush_r+0x114>
   42a70:	90a5883a 	add	r18,r18,r2
   42a74:	047ff10e 	bge	zero,r17,42a3c <__sflush_r+0x114>
   42a78:	80800917 	ldw	r2,36(r16)
   42a7c:	81400717 	ldw	r5,28(r16)
   42a80:	880f883a 	mov	r7,r17
   42a84:	900d883a 	mov	r6,r18
   42a88:	9809883a 	mov	r4,r19
   42a8c:	103ee83a 	callr	r2
   42a90:	88a3c83a 	sub	r17,r17,r2
   42a94:	00bff616 	blt	zero,r2,42a70 <__sflush_r+0x148>
   42a98:	80c0030b 	ldhu	r3,12(r16)
   42a9c:	18c01014 	ori	r3,r3,64
   42aa0:	80c0030d 	sth	r3,12(r16)
   42aa4:	00bfffc4 	movi	r2,-1
   42aa8:	dfc00417 	ldw	ra,16(sp)
   42aac:	dcc00317 	ldw	r19,12(sp)
   42ab0:	dc800217 	ldw	r18,8(sp)
   42ab4:	dc400117 	ldw	r17,4(sp)
   42ab8:	dc000017 	ldw	r16,0(sp)
   42abc:	dec00504 	addi	sp,sp,20
   42ac0:	f800283a 	ret
   42ac4:	29000f17 	ldw	r4,60(r5)
   42ac8:	013fa616 	blt	zero,r4,42964 <__sflush_r+0x3c>
   42acc:	003fdb06 	br	42a3c <__sflush_r+0x114>
   42ad0:	0005883a 	mov	r2,zero
   42ad4:	003fe306 	br	42a64 <__sflush_r+0x13c>
   42ad8:	81801417 	ldw	r6,80(r16)
   42adc:	003fb106 	br	429a4 <__sflush_r+0x7c>
   42ae0:	80c0030b 	ldhu	r3,12(r16)
   42ae4:	81000417 	ldw	r4,16(r16)
   42ae8:	80000115 	stw	zero,4(r16)
   42aec:	197dffcc 	andi	r5,r3,63487
   42af0:	8140030d 	sth	r5,12(r16)
   42af4:	81000015 	stw	r4,0(r16)
   42af8:	18c4000c 	andi	r3,r3,4096
   42afc:	183fc726 	beq	r3,zero,42a1c <__sflush_r+0xf4>
   42b00:	80801415 	stw	r2,80(r16)
   42b04:	003fc506 	br	42a1c <__sflush_r+0xf4>
   42b08:	98800017 	ldw	r2,0(r19)
   42b0c:	103fa326 	beq	r2,zero,4299c <__sflush_r+0x74>
   42b10:	10c00760 	cmpeqi	r3,r2,29
   42b14:	1800021e 	bne	r3,zero,42b20 <__sflush_r+0x1f8>
   42b18:	10800598 	cmpnei	r2,r2,22
   42b1c:	103fde1e 	bne	r2,zero,42a98 <__sflush_r+0x170>
   42b20:	9c400015 	stw	r17,0(r19)
   42b24:	003fc506 	br	42a3c <__sflush_r+0x114>
   42b28:	283fbc1e 	bne	r5,zero,42a1c <__sflush_r+0xf4>
   42b2c:	003ff406 	br	42b00 <__sflush_r+0x1d8>

00042b30 <_fflush_r>:
   42b30:	defffd04 	addi	sp,sp,-12
   42b34:	dc000115 	stw	r16,4(sp)
   42b38:	dfc00215 	stw	ra,8(sp)
   42b3c:	2021883a 	mov	r16,r4
   42b40:	20000226 	beq	r4,zero,42b4c <_fflush_r+0x1c>
   42b44:	20800d17 	ldw	r2,52(r4)
   42b48:	10000c26 	beq	r2,zero,42b7c <_fflush_r+0x4c>
   42b4c:	2880030f 	ldh	r2,12(r5)
   42b50:	1000051e 	bne	r2,zero,42b68 <_fflush_r+0x38>
   42b54:	0005883a 	mov	r2,zero
   42b58:	dfc00217 	ldw	ra,8(sp)
   42b5c:	dc000117 	ldw	r16,4(sp)
   42b60:	dec00304 	addi	sp,sp,12
   42b64:	f800283a 	ret
   42b68:	8009883a 	mov	r4,r16
   42b6c:	dfc00217 	ldw	ra,8(sp)
   42b70:	dc000117 	ldw	r16,4(sp)
   42b74:	dec00304 	addi	sp,sp,12
   42b78:	00429281 	jmpi	42928 <__sflush_r>
   42b7c:	d9400015 	stw	r5,0(sp)
   42b80:	004073c0 	call	4073c <__sinit>
   42b84:	d9400017 	ldw	r5,0(sp)
   42b88:	003ff006 	br	42b4c <_fflush_r+0x1c>

00042b8c <fflush>:
   42b8c:	20001826 	beq	r4,zero,42bf0 <fflush+0x64>
   42b90:	00800134 	movhi	r2,4
   42b94:	200b883a 	mov	r5,r4
   42b98:	111be317 	ldw	r4,28556(r2)
   42b9c:	20000226 	beq	r4,zero,42ba8 <fflush+0x1c>
   42ba0:	20800d17 	ldw	r2,52(r4)
   42ba4:	10000526 	beq	r2,zero,42bbc <fflush+0x30>
   42ba8:	2880030f 	ldh	r2,12(r5)
   42bac:	1000021e 	bne	r2,zero,42bb8 <fflush+0x2c>
   42bb0:	0005883a 	mov	r2,zero
   42bb4:	f800283a 	ret
   42bb8:	00429281 	jmpi	42928 <__sflush_r>
   42bbc:	defffd04 	addi	sp,sp,-12
   42bc0:	d9400115 	stw	r5,4(sp)
   42bc4:	d9000015 	stw	r4,0(sp)
   42bc8:	dfc00215 	stw	ra,8(sp)
   42bcc:	004073c0 	call	4073c <__sinit>
   42bd0:	d9400117 	ldw	r5,4(sp)
   42bd4:	d9000017 	ldw	r4,0(sp)
   42bd8:	2880030f 	ldh	r2,12(r5)
   42bdc:	10000b1e 	bne	r2,zero,42c0c <fflush+0x80>
   42be0:	0005883a 	mov	r2,zero
   42be4:	dfc00217 	ldw	ra,8(sp)
   42be8:	dec00304 	addi	sp,sp,12
   42bec:	f800283a 	ret
   42bf0:	01800134 	movhi	r6,4
   42bf4:	01400134 	movhi	r5,4
   42bf8:	01000134 	movhi	r4,4
   42bfc:	31965c04 	addi	r6,r6,22896
   42c00:	294acc04 	addi	r5,r5,11056
   42c04:	21161504 	addi	r4,r4,22612
   42c08:	0040c3c1 	jmpi	40c3c <_fwalk_sglue>
   42c0c:	dfc00217 	ldw	ra,8(sp)
   42c10:	dec00304 	addi	sp,sp,12
   42c14:	00429281 	jmpi	42928 <__sflush_r>

00042c18 <__smakebuf_r>:
   42c18:	2880030b 	ldhu	r2,12(r5)
   42c1c:	deffe904 	addi	sp,sp,-92
   42c20:	dc001215 	stw	r16,72(sp)
   42c24:	dfc01615 	stw	ra,88(sp)
   42c28:	dcc01515 	stw	r19,84(sp)
   42c2c:	dc801415 	stw	r18,80(sp)
   42c30:	dc401315 	stw	r17,76(sp)
   42c34:	10c0008c 	andi	r3,r2,2
   42c38:	2821883a 	mov	r16,r5
   42c3c:	18000c26 	beq	r3,zero,42c70 <__smakebuf_r+0x58>
   42c40:	288010c4 	addi	r2,r5,67
   42c44:	28800015 	stw	r2,0(r5)
   42c48:	28800415 	stw	r2,16(r5)
   42c4c:	00800044 	movi	r2,1
   42c50:	28800515 	stw	r2,20(r5)
   42c54:	dfc01617 	ldw	ra,88(sp)
   42c58:	dcc01517 	ldw	r19,84(sp)
   42c5c:	dc801417 	ldw	r18,80(sp)
   42c60:	dc401317 	ldw	r17,76(sp)
   42c64:	dc001217 	ldw	r16,72(sp)
   42c68:	dec01704 	addi	sp,sp,92
   42c6c:	f800283a 	ret
   42c70:	2940038f 	ldh	r5,14(r5)
   42c74:	2023883a 	mov	r17,r4
   42c78:	28002816 	blt	r5,zero,42d1c <__smakebuf_r+0x104>
   42c7c:	d80d883a 	mov	r6,sp
   42c80:	0042e4c0 	call	42e4c <_fstat_r>
   42c84:	10002416 	blt	r2,zero,42d18 <__smakebuf_r+0x100>
   42c88:	d8800117 	ldw	r2,4(sp)
   42c8c:	10bc000c 	andi	r2,r2,61440
   42c90:	10880018 	cmpnei	r2,r2,8192
   42c94:	1000471e 	bne	r2,zero,42db4 <__smakebuf_r+0x19c>
   42c98:	8140038f 	ldh	r5,14(r16)
   42c9c:	8809883a 	mov	r4,r17
   42ca0:	0042eac0 	call	42eac <_isatty_r>
   42ca4:	10000826 	beq	r2,zero,42cc8 <__smakebuf_r+0xb0>
   42ca8:	8080030b 	ldhu	r2,12(r16)
   42cac:	80c010c4 	addi	r3,r16,67
   42cb0:	80c00015 	stw	r3,0(r16)
   42cb4:	10800054 	ori	r2,r2,1
   42cb8:	8080030d 	sth	r2,12(r16)
   42cbc:	00800044 	movi	r2,1
   42cc0:	80c00415 	stw	r3,16(r16)
   42cc4:	80800515 	stw	r2,20(r16)
   42cc8:	01410004 	movi	r5,1024
   42ccc:	8809883a 	mov	r4,r17
   42cd0:	0041a740 	call	41a74 <_malloc_r>
   42cd4:	10002626 	beq	r2,zero,42d70 <__smakebuf_r+0x158>
   42cd8:	80c0030b 	ldhu	r3,12(r16)
   42cdc:	8140038f 	ldh	r5,14(r16)
   42ce0:	80800015 	stw	r2,0(r16)
   42ce4:	18c02014 	ori	r3,r3,128
   42ce8:	80800415 	stw	r2,16(r16)
   42cec:	00810004 	movi	r2,1024
   42cf0:	80c0030d 	sth	r3,12(r16)
   42cf4:	80800515 	stw	r2,20(r16)
   42cf8:	8809883a 	mov	r4,r17
   42cfc:	0042eac0 	call	42eac <_isatty_r>
   42d00:	80c0030b 	ldhu	r3,12(r16)
   42d04:	1000271e 	bne	r2,zero,42da4 <__smakebuf_r+0x18c>
   42d08:	00820004 	movi	r2,2048
   42d0c:	10c4b03a 	or	r2,r2,r3
   42d10:	8080030d 	sth	r2,12(r16)
   42d14:	003fcf06 	br	42c54 <__smakebuf_r+0x3c>
   42d18:	8080030b 	ldhu	r2,12(r16)
   42d1c:	1080200c 	andi	r2,r2,128
   42d20:	10000d1e 	bne	r2,zero,42d58 <__smakebuf_r+0x140>
   42d24:	04c10004 	movi	r19,1024
   42d28:	0025883a 	mov	r18,zero
   42d2c:	980b883a 	mov	r5,r19
   42d30:	8809883a 	mov	r4,r17
   42d34:	0041a740 	call	41a74 <_malloc_r>
   42d38:	10000d26 	beq	r2,zero,42d70 <__smakebuf_r+0x158>
   42d3c:	80c0030b 	ldhu	r3,12(r16)
   42d40:	80800015 	stw	r2,0(r16)
   42d44:	80800415 	stw	r2,16(r16)
   42d48:	18c02014 	ori	r3,r3,128
   42d4c:	84c00515 	stw	r19,20(r16)
   42d50:	9005883a 	mov	r2,r18
   42d54:	003fed06 	br	42d0c <__smakebuf_r+0xf4>
   42d58:	04c01004 	movi	r19,64
   42d5c:	980b883a 	mov	r5,r19
   42d60:	8809883a 	mov	r4,r17
   42d64:	0025883a 	mov	r18,zero
   42d68:	0041a740 	call	41a74 <_malloc_r>
   42d6c:	103ff31e 	bne	r2,zero,42d3c <__smakebuf_r+0x124>
   42d70:	8080030b 	ldhu	r2,12(r16)
   42d74:	10c0800c 	andi	r3,r2,512
   42d78:	183fb61e 	bne	r3,zero,42c54 <__smakebuf_r+0x3c>
   42d7c:	00ffff04 	movi	r3,-4
   42d80:	10c4703a 	and	r2,r2,r3
   42d84:	10800094 	ori	r2,r2,2
   42d88:	80c010c4 	addi	r3,r16,67
   42d8c:	8080030d 	sth	r2,12(r16)
   42d90:	00800044 	movi	r2,1
   42d94:	80c00015 	stw	r3,0(r16)
   42d98:	80c00415 	stw	r3,16(r16)
   42d9c:	80800515 	stw	r2,20(r16)
   42da0:	003fac06 	br	42c54 <__smakebuf_r+0x3c>
   42da4:	18ffff0c 	andi	r3,r3,65532
   42da8:	00820004 	movi	r2,2048
   42dac:	18c00054 	ori	r3,r3,1
   42db0:	003fd606 	br	42d0c <__smakebuf_r+0xf4>
   42db4:	04c10004 	movi	r19,1024
   42db8:	04820004 	movi	r18,2048
   42dbc:	003fdb06 	br	42d2c <__smakebuf_r+0x114>

00042dc0 <__swhatbuf_r>:
   42dc0:	deffea04 	addi	sp,sp,-88
   42dc4:	dc001215 	stw	r16,72(sp)
   42dc8:	2821883a 	mov	r16,r5
   42dcc:	2940038f 	ldh	r5,14(r5)
   42dd0:	dc801415 	stw	r18,80(sp)
   42dd4:	dc401315 	stw	r17,76(sp)
   42dd8:	dfc01515 	stw	ra,84(sp)
   42ddc:	3023883a 	mov	r17,r6
   42de0:	3825883a 	mov	r18,r7
   42de4:	28001016 	blt	r5,zero,42e28 <__swhatbuf_r+0x68>
   42de8:	d80d883a 	mov	r6,sp
   42dec:	0042e4c0 	call	42e4c <_fstat_r>
   42df0:	10000d16 	blt	r2,zero,42e28 <__swhatbuf_r+0x68>
   42df4:	d8c00117 	ldw	r3,4(sp)
   42df8:	01010004 	movi	r4,1024
   42dfc:	00820004 	movi	r2,2048
   42e00:	18fc000c 	andi	r3,r3,61440
   42e04:	18c80020 	cmpeqi	r3,r3,8192
   42e08:	90c00015 	stw	r3,0(r18)
   42e0c:	89000015 	stw	r4,0(r17)
   42e10:	dfc01517 	ldw	ra,84(sp)
   42e14:	dc801417 	ldw	r18,80(sp)
   42e18:	dc401317 	ldw	r17,76(sp)
   42e1c:	dc001217 	ldw	r16,72(sp)
   42e20:	dec01604 	addi	sp,sp,88
   42e24:	f800283a 	ret
   42e28:	8080030b 	ldhu	r2,12(r16)
   42e2c:	0007883a 	mov	r3,zero
   42e30:	1080200c 	andi	r2,r2,128
   42e34:	10000326 	beq	r2,zero,42e44 <__swhatbuf_r+0x84>
   42e38:	01001004 	movi	r4,64
   42e3c:	0005883a 	mov	r2,zero
   42e40:	003ff106 	br	42e08 <__swhatbuf_r+0x48>
   42e44:	01010004 	movi	r4,1024
   42e48:	003fef06 	br	42e08 <__swhatbuf_r+0x48>

00042e4c <_fstat_r>:
   42e4c:	2807883a 	mov	r3,r5
   42e50:	defffe04 	addi	sp,sp,-8
   42e54:	dc000015 	stw	r16,0(sp)
   42e58:	00800174 	movhi	r2,5
   42e5c:	300b883a 	mov	r5,r6
   42e60:	2021883a 	mov	r16,r4
   42e64:	1809883a 	mov	r4,r3
   42e68:	dfc00115 	stw	ra,4(sp)
   42e6c:	1021cb15 	stw	zero,-30932(r2)
   42e70:	004340c0 	call	4340c <fstat>
   42e74:	10ffffd8 	cmpnei	r3,r2,-1
   42e78:	18000426 	beq	r3,zero,42e8c <_fstat_r+0x40>
   42e7c:	dfc00117 	ldw	ra,4(sp)
   42e80:	dc000017 	ldw	r16,0(sp)
   42e84:	dec00204 	addi	sp,sp,8
   42e88:	f800283a 	ret
   42e8c:	00c00174 	movhi	r3,5
   42e90:	18e1cb17 	ldw	r3,-30932(r3)
   42e94:	183ff926 	beq	r3,zero,42e7c <_fstat_r+0x30>
   42e98:	80c00015 	stw	r3,0(r16)
   42e9c:	dfc00117 	ldw	ra,4(sp)
   42ea0:	dc000017 	ldw	r16,0(sp)
   42ea4:	dec00204 	addi	sp,sp,8
   42ea8:	f800283a 	ret

00042eac <_isatty_r>:
   42eac:	defffe04 	addi	sp,sp,-8
   42eb0:	dc000015 	stw	r16,0(sp)
   42eb4:	00800174 	movhi	r2,5
   42eb8:	2021883a 	mov	r16,r4
   42ebc:	2809883a 	mov	r4,r5
   42ec0:	dfc00115 	stw	ra,4(sp)
   42ec4:	1021cb15 	stw	zero,-30932(r2)
   42ec8:	00435040 	call	43504 <isatty>
   42ecc:	10ffffd8 	cmpnei	r3,r2,-1
   42ed0:	18000426 	beq	r3,zero,42ee4 <_isatty_r+0x38>
   42ed4:	dfc00117 	ldw	ra,4(sp)
   42ed8:	dc000017 	ldw	r16,0(sp)
   42edc:	dec00204 	addi	sp,sp,8
   42ee0:	f800283a 	ret
   42ee4:	00c00174 	movhi	r3,5
   42ee8:	18e1cb17 	ldw	r3,-30932(r3)
   42eec:	183ff926 	beq	r3,zero,42ed4 <_isatty_r+0x28>
   42ef0:	80c00015 	stw	r3,0(r16)
   42ef4:	dfc00117 	ldw	ra,4(sp)
   42ef8:	dc000017 	ldw	r16,0(sp)
   42efc:	dec00204 	addi	sp,sp,8
   42f00:	f800283a 	ret

00042f04 <_sbrk_r>:
   42f04:	defffe04 	addi	sp,sp,-8
   42f08:	dc000015 	stw	r16,0(sp)
   42f0c:	00800174 	movhi	r2,5
   42f10:	2021883a 	mov	r16,r4
   42f14:	2809883a 	mov	r4,r5
   42f18:	dfc00115 	stw	ra,4(sp)
   42f1c:	1021cb15 	stw	zero,-30932(r2)
   42f20:	0043a340 	call	43a34 <sbrk>
   42f24:	10ffffd8 	cmpnei	r3,r2,-1
   42f28:	18000426 	beq	r3,zero,42f3c <_sbrk_r+0x38>
   42f2c:	dfc00117 	ldw	ra,4(sp)
   42f30:	dc000017 	ldw	r16,0(sp)
   42f34:	dec00204 	addi	sp,sp,8
   42f38:	f800283a 	ret
   42f3c:	00c00174 	movhi	r3,5
   42f40:	18e1cb17 	ldw	r3,-30932(r3)
   42f44:	183ff926 	beq	r3,zero,42f2c <_sbrk_r+0x28>
   42f48:	80c00015 	stw	r3,0(r16)
   42f4c:	dfc00117 	ldw	ra,4(sp)
   42f50:	dc000017 	ldw	r16,0(sp)
   42f54:	dec00204 	addi	sp,sp,8
   42f58:	f800283a 	ret

00042f5c <__call_exitprocs>:
   42f5c:	defff804 	addi	sp,sp,-32
   42f60:	00800174 	movhi	r2,5
   42f64:	dc800215 	stw	r18,8(sp)
   42f68:	14a1d017 	ldw	r18,-30912(r2)
   42f6c:	dfc00715 	stw	ra,28(sp)
   42f70:	dd800615 	stw	r22,24(sp)
   42f74:	dd400515 	stw	r21,20(sp)
   42f78:	dd000415 	stw	r20,16(sp)
   42f7c:	dcc00315 	stw	r19,12(sp)
   42f80:	dc400115 	stw	r17,4(sp)
   42f84:	dc000015 	stw	r16,0(sp)
   42f88:	90001026 	beq	r18,zero,42fcc <__call_exitprocs+0x70>
   42f8c:	2029883a 	mov	r20,r4
   42f90:	282b883a 	mov	r21,r5
   42f94:	04c00044 	movi	r19,1
   42f98:	94000117 	ldw	r16,4(r18)
   42f9c:	847fffc4 	addi	r17,r16,-1
   42fa0:	88000a16 	blt	r17,zero,42fcc <__call_exitprocs+0x70>
   42fa4:	84000044 	addi	r16,r16,1
   42fa8:	802090ba 	slli	r16,r16,2
   42fac:	9421883a 	add	r16,r18,r16
   42fb0:	a8001026 	beq	r21,zero,42ff4 <__call_exitprocs+0x98>
   42fb4:	80804017 	ldw	r2,256(r16)
   42fb8:	15400e26 	beq	r2,r21,42ff4 <__call_exitprocs+0x98>
   42fbc:	8c7fffc4 	addi	r17,r17,-1
   42fc0:	88bfffd8 	cmpnei	r2,r17,-1
   42fc4:	843fff04 	addi	r16,r16,-4
   42fc8:	103ff91e 	bne	r2,zero,42fb0 <__call_exitprocs+0x54>
   42fcc:	dfc00717 	ldw	ra,28(sp)
   42fd0:	dd800617 	ldw	r22,24(sp)
   42fd4:	dd400517 	ldw	r21,20(sp)
   42fd8:	dd000417 	ldw	r20,16(sp)
   42fdc:	dcc00317 	ldw	r19,12(sp)
   42fe0:	dc800217 	ldw	r18,8(sp)
   42fe4:	dc400117 	ldw	r17,4(sp)
   42fe8:	dc000017 	ldw	r16,0(sp)
   42fec:	dec00804 	addi	sp,sp,32
   42ff0:	f800283a 	ret
   42ff4:	90800117 	ldw	r2,4(r18)
   42ff8:	81800017 	ldw	r6,0(r16)
   42ffc:	10bfffc4 	addi	r2,r2,-1
   43000:	14401826 	beq	r2,r17,43064 <__call_exitprocs+0x108>
   43004:	80000015 	stw	zero,0(r16)
   43008:	303fec26 	beq	r6,zero,42fbc <__call_exitprocs+0x60>
   4300c:	9c46983a 	sll	r3,r19,r17
   43010:	90806217 	ldw	r2,392(r18)
   43014:	95800117 	ldw	r22,4(r18)
   43018:	1884703a 	and	r2,r3,r2
   4301c:	1000091e 	bne	r2,zero,43044 <__call_exitprocs+0xe8>
   43020:	303ee83a 	callr	r6
   43024:	90c00117 	ldw	r3,4(r18)
   43028:	00800174 	movhi	r2,5
   4302c:	10a1d017 	ldw	r2,-30912(r2)
   43030:	1d80011e 	bne	r3,r22,43038 <__call_exitprocs+0xdc>
   43034:	14bfe126 	beq	r2,r18,42fbc <__call_exitprocs+0x60>
   43038:	103fe426 	beq	r2,zero,42fcc <__call_exitprocs+0x70>
   4303c:	1025883a 	mov	r18,r2
   43040:	003fd506 	br	42f98 <__call_exitprocs+0x3c>
   43044:	90806317 	ldw	r2,396(r18)
   43048:	81002017 	ldw	r4,128(r16)
   4304c:	1886703a 	and	r3,r3,r2
   43050:	1800061e 	bne	r3,zero,4306c <__call_exitprocs+0x110>
   43054:	200b883a 	mov	r5,r4
   43058:	a009883a 	mov	r4,r20
   4305c:	303ee83a 	callr	r6
   43060:	003ff006 	br	43024 <__call_exitprocs+0xc8>
   43064:	94400115 	stw	r17,4(r18)
   43068:	003fe706 	br	43008 <__call_exitprocs+0xac>
   4306c:	303ee83a 	callr	r6
   43070:	003fec06 	br	43024 <__call_exitprocs+0xc8>

00043074 <__divsi3>:
   43074:	20001a16 	blt	r4,zero,430e0 <__divsi3+0x6c>
   43078:	000f883a 	mov	r7,zero
   4307c:	2800020e 	bge	r5,zero,43088 <__divsi3+0x14>
   43080:	014bc83a 	sub	r5,zero,r5
   43084:	39c0005c 	xori	r7,r7,1
   43088:	200d883a 	mov	r6,r4
   4308c:	00c00044 	movi	r3,1
   43090:	2900092e 	bgeu	r5,r4,430b8 <__divsi3+0x44>
   43094:	00800804 	movi	r2,32
   43098:	00c00044 	movi	r3,1
   4309c:	00000106 	br	430a4 <__divsi3+0x30>
   430a0:	10001226 	beq	r2,zero,430ec <__divsi3+0x78>
   430a4:	294b883a 	add	r5,r5,r5
   430a8:	10bfffc4 	addi	r2,r2,-1
   430ac:	18c7883a 	add	r3,r3,r3
   430b0:	293ffb36 	bltu	r5,r4,430a0 <__divsi3+0x2c>
   430b4:	18000d26 	beq	r3,zero,430ec <__divsi3+0x78>
   430b8:	0005883a 	mov	r2,zero
   430bc:	31400236 	bltu	r6,r5,430c8 <__divsi3+0x54>
   430c0:	314dc83a 	sub	r6,r6,r5
   430c4:	10c4b03a 	or	r2,r2,r3
   430c8:	1806d07a 	srli	r3,r3,1
   430cc:	280ad07a 	srli	r5,r5,1
   430d0:	183ffa1e 	bne	r3,zero,430bc <__divsi3+0x48>
   430d4:	38000126 	beq	r7,zero,430dc <__divsi3+0x68>
   430d8:	0085c83a 	sub	r2,zero,r2
   430dc:	f800283a 	ret
   430e0:	0109c83a 	sub	r4,zero,r4
   430e4:	01c00044 	movi	r7,1
   430e8:	003fe406 	br	4307c <__divsi3+0x8>
   430ec:	0005883a 	mov	r2,zero
   430f0:	003ff806 	br	430d4 <__divsi3+0x60>

000430f4 <__modsi3>:
   430f4:	20001716 	blt	r4,zero,43154 <__modsi3+0x60>
   430f8:	000f883a 	mov	r7,zero
   430fc:	2005883a 	mov	r2,r4
   43100:	2800010e 	bge	r5,zero,43108 <__modsi3+0x14>
   43104:	014bc83a 	sub	r5,zero,r5
   43108:	00c00044 	movi	r3,1
   4310c:	2900092e 	bgeu	r5,r4,43134 <__modsi3+0x40>
   43110:	01800804 	movi	r6,32
   43114:	00c00044 	movi	r3,1
   43118:	00000106 	br	43120 <__modsi3+0x2c>
   4311c:	30001026 	beq	r6,zero,43160 <__modsi3+0x6c>
   43120:	294b883a 	add	r5,r5,r5
   43124:	31bfffc4 	addi	r6,r6,-1
   43128:	18c7883a 	add	r3,r3,r3
   4312c:	293ffb36 	bltu	r5,r4,4311c <__modsi3+0x28>
   43130:	18000b26 	beq	r3,zero,43160 <__modsi3+0x6c>
   43134:	1806d07a 	srli	r3,r3,1
   43138:	11400136 	bltu	r2,r5,43140 <__modsi3+0x4c>
   4313c:	1145c83a 	sub	r2,r2,r5
   43140:	280ad07a 	srli	r5,r5,1
   43144:	183ffb1e 	bne	r3,zero,43134 <__modsi3+0x40>
   43148:	38000126 	beq	r7,zero,43150 <__modsi3+0x5c>
   4314c:	0085c83a 	sub	r2,zero,r2
   43150:	f800283a 	ret
   43154:	0109c83a 	sub	r4,zero,r4
   43158:	01c00044 	movi	r7,1
   4315c:	003fe706 	br	430fc <__modsi3+0x8>
   43160:	2005883a 	mov	r2,r4
   43164:	003ff806 	br	43148 <__modsi3+0x54>

00043168 <__udivsi3>:
   43168:	200d883a 	mov	r6,r4
   4316c:	2900152e 	bgeu	r5,r4,431c4 <__udivsi3+0x5c>
   43170:	28001416 	blt	r5,zero,431c4 <__udivsi3+0x5c>
   43174:	00800804 	movi	r2,32
   43178:	00c00044 	movi	r3,1
   4317c:	00000206 	br	43188 <__udivsi3+0x20>
   43180:	10000e26 	beq	r2,zero,431bc <__udivsi3+0x54>
   43184:	28000416 	blt	r5,zero,43198 <__udivsi3+0x30>
   43188:	294b883a 	add	r5,r5,r5
   4318c:	10bfffc4 	addi	r2,r2,-1
   43190:	18c7883a 	add	r3,r3,r3
   43194:	293ffa36 	bltu	r5,r4,43180 <__udivsi3+0x18>
   43198:	18000826 	beq	r3,zero,431bc <__udivsi3+0x54>
   4319c:	0005883a 	mov	r2,zero
   431a0:	31400236 	bltu	r6,r5,431ac <__udivsi3+0x44>
   431a4:	314dc83a 	sub	r6,r6,r5
   431a8:	10c4b03a 	or	r2,r2,r3
   431ac:	1806d07a 	srli	r3,r3,1
   431b0:	280ad07a 	srli	r5,r5,1
   431b4:	183ffa1e 	bne	r3,zero,431a0 <__udivsi3+0x38>
   431b8:	f800283a 	ret
   431bc:	0005883a 	mov	r2,zero
   431c0:	f800283a 	ret
   431c4:	00c00044 	movi	r3,1
   431c8:	003ff406 	br	4319c <__udivsi3+0x34>

000431cc <__umodsi3>:
   431cc:	2005883a 	mov	r2,r4
   431d0:	2900132e 	bgeu	r5,r4,43220 <__umodsi3+0x54>
   431d4:	28001216 	blt	r5,zero,43220 <__umodsi3+0x54>
   431d8:	01800804 	movi	r6,32
   431dc:	00c00044 	movi	r3,1
   431e0:	00000206 	br	431ec <__umodsi3+0x20>
   431e4:	30000c26 	beq	r6,zero,43218 <__umodsi3+0x4c>
   431e8:	28000416 	blt	r5,zero,431fc <__umodsi3+0x30>
   431ec:	294b883a 	add	r5,r5,r5
   431f0:	31bfffc4 	addi	r6,r6,-1
   431f4:	18c7883a 	add	r3,r3,r3
   431f8:	293ffa36 	bltu	r5,r4,431e4 <__umodsi3+0x18>
   431fc:	18000626 	beq	r3,zero,43218 <__umodsi3+0x4c>
   43200:	1806d07a 	srli	r3,r3,1
   43204:	11400136 	bltu	r2,r5,4320c <__umodsi3+0x40>
   43208:	1145c83a 	sub	r2,r2,r5
   4320c:	280ad07a 	srli	r5,r5,1
   43210:	183ffb1e 	bne	r3,zero,43200 <__umodsi3+0x34>
   43214:	f800283a 	ret
   43218:	2005883a 	mov	r2,r4
   4321c:	f800283a 	ret
   43220:	00c00044 	movi	r3,1
   43224:	003ff606 	br	43200 <__umodsi3+0x34>

00043228 <__mulsi3>:
   43228:	0005883a 	mov	r2,zero
   4322c:	20000726 	beq	r4,zero,4324c <__mulsi3+0x24>
   43230:	20c0004c 	andi	r3,r4,1
   43234:	2008d07a 	srli	r4,r4,1
   43238:	18000126 	beq	r3,zero,43240 <__mulsi3+0x18>
   4323c:	1145883a 	add	r2,r2,r5
   43240:	294b883a 	add	r5,r5,r5
   43244:	203ffa1e 	bne	r4,zero,43230 <__mulsi3+0x8>
   43248:	f800283a 	ret
   4324c:	f800283a 	ret

00043250 <alt_get_errno>:

  if (fd)
  {
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
   43250:	defffe04 	addi	sp,sp,-8
   43254:	dfc00115 	stw	ra,4(sp)
   43258:	df000015 	stw	fp,0(sp)
   4325c:	d839883a 	mov	fp,sp
     */
   43260:	d0a00817 	ldw	r2,-32736(gp)
   43264:	10000326 	beq	r2,zero,43274 <alt_get_errno+0x24>
   43268:	d0a00817 	ldw	r2,-32736(gp)
   4326c:	103ee83a 	callr	r2
   43270:	00000106 	br	43278 <alt_get_errno+0x28>
   43274:	d0a5e804 	addi	r2,gp,-26720

   43278:	e037883a 	mov	sp,fp
   4327c:	dfc00117 	ldw	ra,4(sp)
   43280:	df000017 	ldw	fp,0(sp)
   43284:	dec00204 	addi	sp,sp,8
   43288:	f800283a 	ret

0004328c <close>:
{
   4328c:	defffb04 	addi	sp,sp,-20
   43290:	dfc00415 	stw	ra,16(sp)
   43294:	df000315 	stw	fp,12(sp)
   43298:	df000304 	addi	fp,sp,12
   4329c:	e13ffd15 	stw	r4,-12(fp)
  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   432a0:	e0bffd17 	ldw	r2,-12(fp)
   432a4:	10000916 	blt	r2,zero,432cc <close+0x40>
   432a8:	e0fffd17 	ldw	r3,-12(fp)
   432ac:	1805883a 	mov	r2,r3
   432b0:	1085883a 	add	r2,r2,r2
   432b4:	10c5883a 	add	r2,r2,r3
   432b8:	100490ba 	slli	r2,r2,2
   432bc:	00c00134 	movhi	r3,4
   432c0:	18d76b04 	addi	r3,r3,23980
   432c4:	10c5883a 	add	r2,r2,r3
   432c8:	00000106 	br	432d0 <close+0x44>
   432cc:	0005883a 	mov	r2,zero
   432d0:	e0bfff15 	stw	r2,-4(fp)
  if (fd)
   432d4:	e0bfff17 	ldw	r2,-4(fp)
   432d8:	10001926 	beq	r2,zero,43340 <close+0xb4>
    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   432dc:	e0bfff17 	ldw	r2,-4(fp)
   432e0:	10800017 	ldw	r2,0(r2)
   432e4:	10800417 	ldw	r2,16(r2)
   432e8:	10000626 	beq	r2,zero,43304 <close+0x78>
   432ec:	e0bfff17 	ldw	r2,-4(fp)
   432f0:	10800017 	ldw	r2,0(r2)
   432f4:	10800417 	ldw	r2,16(r2)
   432f8:	e13fff17 	ldw	r4,-4(fp)
   432fc:	103ee83a 	callr	r2
   43300:	00000106 	br	43308 <close+0x7c>
   43304:	0005883a 	mov	r2,zero
   43308:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   4330c:	e13ffd17 	ldw	r4,-12(fp)
   43310:	00439c40 	call	439c4 <alt_release_fd>
    if (rval < 0)
   43314:	e0bffe17 	ldw	r2,-8(fp)
   43318:	1000070e 	bge	r2,zero,43338 <close+0xac>
    {
      ALT_ERRNO = -rval;
   4331c:	00432500 	call	43250 <alt_get_errno>
   43320:	1007883a 	mov	r3,r2
   43324:	e0bffe17 	ldw	r2,-8(fp)
   43328:	0085c83a 	sub	r2,zero,r2
   4332c:	18800015 	stw	r2,0(r3)
      return -1;
   43330:	00bfffc4 	movi	r2,-1
   43334:	00000706 	br	43354 <close+0xc8>
    }
    return 0;
   43338:	0005883a 	mov	r2,zero
   4333c:	00000506 	br	43354 <close+0xc8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   43340:	00432500 	call	43250 <alt_get_errno>
   43344:	1007883a 	mov	r3,r2
   43348:	00801444 	movi	r2,81
   4334c:	18800015 	stw	r2,0(r3)
    return -1;
   43350:	00bfffc4 	movi	r2,-1
  }
}
   43354:	e037883a 	mov	sp,fp
   43358:	dfc00117 	ldw	ra,4(sp)
   4335c:	df000017 	ldw	fp,0(sp)
   43360:	dec00204 	addi	sp,sp,8
   43364:	f800283a 	ret

00043368 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   43368:	defffc04 	addi	sp,sp,-16
   4336c:	df000315 	stw	fp,12(sp)
   43370:	df000304 	addi	fp,sp,12
   43374:	e13fff15 	stw	r4,-4(fp)
   43378:	e17ffe15 	stw	r5,-8(fp)
   4337c:	e1bffd15 	stw	r6,-12(fp)
  return len;
   43380:	e0bffd17 	ldw	r2,-12(fp)
}
   43384:	e037883a 	mov	sp,fp
   43388:	df000017 	ldw	fp,0(sp)
   4338c:	dec00104 	addi	sp,sp,4
   43390:	f800283a 	ret

00043394 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   43394:	defffd04 	addi	sp,sp,-12
   43398:	df000215 	stw	fp,8(sp)
   4339c:	df000204 	addi	fp,sp,8
   433a0:	e13ffe15 	stw	r4,-8(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   433a4:	0001883a 	nop
   433a8:	e0bffe17 	ldw	r2,-8(fp)
   433ac:	e0bfff15 	stw	r2,-4(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   433b0:	e0bfff17 	ldw	r2,-4(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   433b4:	10000226 	beq	r2,zero,433c0 <_exit+0x2c>
    ALT_SIM_FAIL();
   433b8:	002af070 	cmpltui	zero,zero,43969
  } else {
    ALT_SIM_PASS();
  }
#endif /* DEBUG_STUB */
}
   433bc:	00000106 	br	433c4 <_exit+0x30>
    ALT_SIM_PASS();
   433c0:	002af0b0 	cmpltui	zero,zero,43970
}
   433c4:	0001883a 	nop
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   433c8:	0001883a 	nop
   433cc:	003ffe06 	br	433c8 <_exit+0x34>

000433d0 <alt_get_errno>:
        return 0;
    default:
        return -1;
    }

#if !defined(ALT_STDIN_PRESENT) && !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
   433d0:	defffe04 	addi	sp,sp,-8
   433d4:	dfc00115 	stw	ra,4(sp)
   433d8:	df000015 	stw	fp,0(sp)
   433dc:	d839883a 	mov	fp,sp
    /* Generate a link time warning, should this function ever be called. */
   433e0:	d0a00817 	ldw	r2,-32736(gp)
   433e4:	10000326 	beq	r2,zero,433f4 <alt_get_errno+0x24>
   433e8:	d0a00817 	ldw	r2,-32736(gp)
   433ec:	103ee83a 	callr	r2
   433f0:	00000106 	br	433f8 <alt_get_errno+0x28>
   433f4:	d0a5e804 	addi	r2,gp,-26720
    ALT_STUB_WARNING(fstat);
   433f8:	e037883a 	mov	sp,fp
   433fc:	dfc00117 	ldw	ra,4(sp)
   43400:	df000017 	ldw	fp,0(sp)
   43404:	dec00204 	addi	sp,sp,8
   43408:	f800283a 	ret

0004340c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   4340c:	defffb04 	addi	sp,sp,-20
   43410:	dfc00415 	stw	ra,16(sp)
   43414:	df000315 	stw	fp,12(sp)
   43418:	df000304 	addi	fp,sp,12
   4341c:	e13ffe15 	stw	r4,-8(fp)
   43420:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   43424:	e0bffe17 	ldw	r2,-8(fp)
   43428:	10000916 	blt	r2,zero,43450 <fstat+0x44>
   4342c:	e0fffe17 	ldw	r3,-8(fp)
   43430:	1805883a 	mov	r2,r3
   43434:	1085883a 	add	r2,r2,r2
   43438:	10c5883a 	add	r2,r2,r3
   4343c:	100490ba 	slli	r2,r2,2
   43440:	00c00134 	movhi	r3,4
   43444:	18d76b04 	addi	r3,r3,23980
   43448:	10c5883a 	add	r2,r2,r3
   4344c:	00000106 	br	43454 <fstat+0x48>
   43450:	0005883a 	mov	r2,zero
   43454:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   43458:	e0bfff17 	ldw	r2,-4(fp)
   4345c:	10001026 	beq	r2,zero,434a0 <fstat+0x94>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   43460:	e0bfff17 	ldw	r2,-4(fp)
   43464:	10800017 	ldw	r2,0(r2)
   43468:	10800817 	ldw	r2,32(r2)
   4346c:	10000726 	beq	r2,zero,4348c <fstat+0x80>
    {
      return fd->dev->fstat(fd, st);
   43470:	e0bfff17 	ldw	r2,-4(fp)
   43474:	10800017 	ldw	r2,0(r2)
   43478:	10800817 	ldw	r2,32(r2)
   4347c:	e17ffd17 	ldw	r5,-12(fp)
   43480:	e13fff17 	ldw	r4,-4(fp)
   43484:	103ee83a 	callr	r2
   43488:	00000a06 	br	434b4 <fstat+0xa8>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   4348c:	e0bffd17 	ldw	r2,-12(fp)
   43490:	00c80004 	movi	r3,8192
   43494:	10c00115 	stw	r3,4(r2)
      return 0;
   43498:	0005883a 	mov	r2,zero
   4349c:	00000506 	br	434b4 <fstat+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   434a0:	00433d00 	call	433d0 <alt_get_errno>
   434a4:	1007883a 	mov	r3,r2
   434a8:	00801444 	movi	r2,81
   434ac:	18800015 	stw	r2,0(r3)
    return -1;
   434b0:	00bfffc4 	movi	r2,-1
  }
}
   434b4:	e037883a 	mov	sp,fp
   434b8:	dfc00117 	ldw	ra,4(sp)
   434bc:	df000017 	ldw	fp,0(sp)
   434c0:	dec00204 	addi	sp,sp,8
   434c4:	f800283a 	ret

000434c8 <alt_get_errno>:
 * refers to a terminal device or not. If it is a terminal device then the
 * return value is one, otherwise it is zero.  
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
   434c8:	defffe04 	addi	sp,sp,-8
   434cc:	dfc00115 	stw	ra,4(sp)
   434d0:	df000015 	stw	fp,0(sp)
   434d4:	d839883a 	mov	fp,sp
int ALT_ISATTY (int file)
   434d8:	d0a00817 	ldw	r2,-32736(gp)
   434dc:	10000326 	beq	r2,zero,434ec <alt_get_errno+0x24>
   434e0:	d0a00817 	ldw	r2,-32736(gp)
   434e4:	103ee83a 	callr	r2
   434e8:	00000106 	br	434f0 <alt_get_errno+0x28>
   434ec:	d0a5e804 	addi	r2,gp,-26720
{
   434f0:	e037883a 	mov	sp,fp
   434f4:	dfc00117 	ldw	ra,4(sp)
   434f8:	df000017 	ldw	fp,0(sp)
   434fc:	dec00204 	addi	sp,sp,8
   43500:	f800283a 	ret

00043504 <isatty>:
   43504:	deffea04 	addi	sp,sp,-88
   43508:	dfc01515 	stw	ra,84(sp)
   4350c:	df001415 	stw	fp,80(sp)
   43510:	df001404 	addi	fp,sp,80
   43514:	e13fec15 	stw	r4,-80(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   43518:	e0bfec17 	ldw	r2,-80(fp)
   4351c:	10000916 	blt	r2,zero,43544 <isatty+0x40>
   43520:	e0ffec17 	ldw	r3,-80(fp)
   43524:	1805883a 	mov	r2,r3
   43528:	1085883a 	add	r2,r2,r2
   4352c:	10c5883a 	add	r2,r2,r3
   43530:	100490ba 	slli	r2,r2,2
   43534:	00c00134 	movhi	r3,4
   43538:	18d76b04 	addi	r3,r3,23980
   4353c:	10c5883a 	add	r2,r2,r3
   43540:	00000106 	br	43548 <isatty+0x44>
   43544:	0005883a 	mov	r2,zero
   43548:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   4354c:	e0bfff17 	ldw	r2,-4(fp)
   43550:	10000e26 	beq	r2,zero,4358c <isatty+0x88>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   43554:	e0bfff17 	ldw	r2,-4(fp)
   43558:	10800017 	ldw	r2,0(r2)
   4355c:	10800817 	ldw	r2,32(r2)
   43560:	1000021e 	bne	r2,zero,4356c <isatty+0x68>
    {
      return 1;
   43564:	00800044 	movi	r2,1
   43568:	00000d06 	br	435a0 <isatty+0x9c>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   4356c:	e0bfed04 	addi	r2,fp,-76
   43570:	100b883a 	mov	r5,r2
   43574:	e13fec17 	ldw	r4,-80(fp)
   43578:	004340c0 	call	4340c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   4357c:	e0bfee17 	ldw	r2,-72(fp)
   43580:	10880020 	cmpeqi	r2,r2,8192
   43584:	10803fcc 	andi	r2,r2,255
   43588:	00000506 	br	435a0 <isatty+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   4358c:	00434c80 	call	434c8 <alt_get_errno>
   43590:	1007883a 	mov	r3,r2
   43594:	00801444 	movi	r2,81
   43598:	18800015 	stw	r2,0(r3)
    return 0;
   4359c:	0005883a 	mov	r2,zero
  }
}
   435a0:	e037883a 	mov	sp,fp
   435a4:	dfc00117 	ldw	ra,4(sp)
   435a8:	df000017 	ldw	fp,0(sp)
   435ac:	dec00204 	addi	sp,sp,8
   435b0:	f800283a 	ret

000435b4 <alt_load_section>:
 */  

void alt_load (void)
{
  /* 
   * Copy the .rwdata section. 
   435b4:	defffc04 	addi	sp,sp,-16
   435b8:	df000315 	stw	fp,12(sp)
   435bc:	df000304 	addi	fp,sp,12
   435c0:	e13fff15 	stw	r4,-4(fp)
   435c4:	e17ffe15 	stw	r5,-8(fp)
   435c8:	e1bffd15 	stw	r6,-12(fp)
   */
   435cc:	e0fffe17 	ldw	r3,-8(fp)
   435d0:	e0bfff17 	ldw	r2,-4(fp)
   435d4:	18800c26 	beq	r3,r2,43608 <alt_load_section+0x54>

  alt_load_section (&__flash_rwdata_start, 
   435d8:	00000806 	br	435fc <alt_load_section+0x48>
		               &__ram_rwdata_start,
		               &__ram_rwdata_end);
   435dc:	e0ffff17 	ldw	r3,-4(fp)
   435e0:	18800104 	addi	r2,r3,4
   435e4:	e0bfff15 	stw	r2,-4(fp)
   435e8:	e0bffe17 	ldw	r2,-8(fp)
   435ec:	11000104 	addi	r4,r2,4
   435f0:	e13ffe15 	stw	r4,-8(fp)
   435f4:	18c00017 	ldw	r3,0(r3)
   435f8:	10c00015 	stw	r3,0(r2)
  alt_load_section (&__flash_rwdata_start, 
   435fc:	e0fffe17 	ldw	r3,-8(fp)
   43600:	e0bffd17 	ldw	r2,-12(fp)
   43604:	18bff51e 	bne	r3,r2,435dc <alt_load_section+0x28>

  /*
   * Copy the exception handler.
   43608:	0001883a 	nop
   4360c:	e037883a 	mov	sp,fp
   43610:	df000017 	ldw	fp,0(sp)
   43614:	dec00104 	addi	sp,sp,4
   43618:	f800283a 	ret

0004361c <alt_load>:
{
   4361c:	defffe04 	addi	sp,sp,-8
   43620:	dfc00115 	stw	ra,4(sp)
   43624:	df000015 	stw	fp,0(sp)
   43628:	d839883a 	mov	fp,sp
  alt_load_section (&__flash_rwdata_start, 
   4362c:	01800134 	movhi	r6,4
   43630:	319bf004 	addi	r6,r6,28608
   43634:	01400134 	movhi	r5,4
   43638:	29561504 	addi	r5,r5,22612
   4363c:	01000134 	movhi	r4,4
   43640:	211bf004 	addi	r4,r4,28608
   43644:	00435b40 	call	435b4 <alt_load_section>
   */

  alt_load_section (&__flash_exceptions_start, 
   43648:	01800134 	movhi	r6,4
   4364c:	31808904 	addi	r6,r6,548
   43650:	01400134 	movhi	r5,4
   43654:	29400804 	addi	r5,r5,32
   43658:	01000134 	movhi	r4,4
   4365c:	21000804 	addi	r4,r4,32
   43660:	00435b40 	call	435b4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   43664:	01800134 	movhi	r6,4
   43668:	31961504 	addi	r6,r6,22612
   4366c:	01400134 	movhi	r5,4
   43670:	29560204 	addi	r5,r5,22536
   43674:	01000134 	movhi	r4,4
   43678:	21160204 	addi	r4,r4,22536
   4367c:	00435b40 	call	435b4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   43680:	00449e40 	call	449e4 <alt_dcache_flush_all>
  alt_icache_flush_all();
   43684:	0044bb00 	call	44bb0 <alt_icache_flush_all>
}
   43688:	0001883a 	nop
   4368c:	e037883a 	mov	sp,fp
   43690:	dfc00117 	ldw	ra,4(sp)
   43694:	df000017 	ldw	fp,0(sp)
   43698:	dec00204 	addi	sp,sp,8
   4369c:	f800283a 	ret

000436a0 <alt_get_errno>:
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   436a0:	defffe04 	addi	sp,sp,-8
   436a4:	dfc00115 	stw	ra,4(sp)
   436a8:	df000015 	stw	fp,0(sp)
   436ac:	d839883a 	mov	fp,sp
  
   436b0:	d0a00817 	ldw	r2,-32736(gp)
   436b4:	10000326 	beq	r2,zero,436c4 <alt_get_errno+0x24>
   436b8:	d0a00817 	ldw	r2,-32736(gp)
   436bc:	103ee83a 	callr	r2
   436c0:	00000106 	br	436c8 <alt_get_errno+0x28>
   436c4:	d0a5e804 	addi	r2,gp,-26720
  if (fd) 
   436c8:	e037883a 	mov	sp,fp
   436cc:	dfc00117 	ldw	ra,4(sp)
   436d0:	df000017 	ldw	fp,0(sp)
   436d4:	dec00204 	addi	sp,sp,8
   436d8:	f800283a 	ret

000436dc <lseek>:
{
   436dc:	defff904 	addi	sp,sp,-28
   436e0:	dfc00615 	stw	ra,24(sp)
   436e4:	df000515 	stw	fp,20(sp)
   436e8:	df000504 	addi	fp,sp,20
   436ec:	e13ffd15 	stw	r4,-12(fp)
   436f0:	e17ffc15 	stw	r5,-16(fp)
   436f4:	e1bffb15 	stw	r6,-20(fp)
  off_t   rc = 0; 
   436f8:	e03fff15 	stw	zero,-4(fp)
  fd = (file < 0) ? NULL : &alt_fd_list[file];
   436fc:	e0bffd17 	ldw	r2,-12(fp)
   43700:	10000916 	blt	r2,zero,43728 <lseek+0x4c>
   43704:	e0fffd17 	ldw	r3,-12(fp)
   43708:	1805883a 	mov	r2,r3
   4370c:	1085883a 	add	r2,r2,r2
   43710:	10c5883a 	add	r2,r2,r3
   43714:	100490ba 	slli	r2,r2,2
   43718:	00c00134 	movhi	r3,4
   4371c:	18d76b04 	addi	r3,r3,23980
   43720:	10c5883a 	add	r2,r2,r3
   43724:	00000106 	br	4372c <lseek+0x50>
   43728:	0005883a 	mov	r2,zero
   4372c:	e0bffe15 	stw	r2,-8(fp)
  if (fd) 
   43730:	e0bffe17 	ldw	r2,-8(fp)
   43734:	10001026 	beq	r2,zero,43778 <lseek+0x9c>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   43738:	e0bffe17 	ldw	r2,-8(fp)
   4373c:	10800017 	ldw	r2,0(r2)
   43740:	10800717 	ldw	r2,28(r2)
   43744:	10000926 	beq	r2,zero,4376c <lseek+0x90>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   43748:	e0bffe17 	ldw	r2,-8(fp)
   4374c:	10800017 	ldw	r2,0(r2)
   43750:	10800717 	ldw	r2,28(r2)
   43754:	e1bffb17 	ldw	r6,-20(fp)
   43758:	e17ffc17 	ldw	r5,-16(fp)
   4375c:	e13ffe17 	ldw	r4,-8(fp)
   43760:	103ee83a 	callr	r2
   43764:	e0bfff15 	stw	r2,-4(fp)
   43768:	00000506 	br	43780 <lseek+0xa4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   4376c:	00bfde84 	movi	r2,-134
   43770:	e0bfff15 	stw	r2,-4(fp)
   43774:	00000206 	br	43780 <lseek+0xa4>
    }
  }
  else  
  {
    rc = -EBADFD;
   43778:	00bfebc4 	movi	r2,-81
   4377c:	e0bfff15 	stw	r2,-4(fp)
  }

  if (rc < 0)
   43780:	e0bfff17 	ldw	r2,-4(fp)
   43784:	1000070e 	bge	r2,zero,437a4 <lseek+0xc8>
  {
    ALT_ERRNO = -rc;
   43788:	00436a00 	call	436a0 <alt_get_errno>
   4378c:	1007883a 	mov	r3,r2
   43790:	e0bfff17 	ldw	r2,-4(fp)
   43794:	0085c83a 	sub	r2,zero,r2
   43798:	18800015 	stw	r2,0(r3)
    rc = -1;
   4379c:	00bfffc4 	movi	r2,-1
   437a0:	e0bfff15 	stw	r2,-4(fp)
  }

  return rc;
   437a4:	e0bfff17 	ldw	r2,-4(fp)
}
   437a8:	e037883a 	mov	sp,fp
   437ac:	dfc00117 	ldw	ra,4(sp)
   437b0:	df000017 	ldw	fp,0(sp)
   437b4:	dec00204 	addi	sp,sp,8
   437b8:	f800283a 	ret

000437bc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   437bc:	defffd04 	addi	sp,sp,-12
   437c0:	dfc00215 	stw	ra,8(sp)
   437c4:	df000115 	stw	fp,4(sp)
   437c8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   437cc:	0009883a 	mov	r4,zero
   437d0:	0043c600 	call	43c60 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   437d4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   437d8:	0043c9c0 	call	43c9c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   437dc:	01800134 	movhi	r6,4
   437e0:	31960b04 	addi	r6,r6,22572
   437e4:	01400134 	movhi	r5,4
   437e8:	29560b04 	addi	r5,r5,22572
   437ec:	01000134 	movhi	r4,4
   437f0:	21160b04 	addi	r4,r4,22572
   437f4:	0044f3c0 	call	44f3c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   437f8:	0044ae80 	call	44ae8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   437fc:	01000134 	movhi	r4,4
   43800:	2112d304 	addi	r4,r4,19276
   43804:	00456e80 	call	456e8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   43808:	d0a5ee17 	ldw	r2,-26696(gp)
   4380c:	d0e5ef17 	ldw	r3,-26692(gp)
   43810:	d125f017 	ldw	r4,-26688(gp)
   43814:	200d883a 	mov	r6,r4
   43818:	180b883a 	mov	r5,r3
   4381c:	1009883a 	mov	r4,r2
   43820:	00402600 	call	40260 <main>
   43824:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   43828:	01000044 	movi	r4,1
   4382c:	004328c0 	call	4328c <close>
  exit (result);
   43830:	e13fff17 	ldw	r4,-4(fp)
   43834:	00416180 	call	41618 <exit>

00043838 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   43838:	defffe04 	addi	sp,sp,-8
   4383c:	df000115 	stw	fp,4(sp)
   43840:	df000104 	addi	fp,sp,4
   43844:	e13fff15 	stw	r4,-4(fp)
}
   43848:	0001883a 	nop
   4384c:	e037883a 	mov	sp,fp
   43850:	df000017 	ldw	fp,0(sp)
   43854:	dec00104 	addi	sp,sp,4
   43858:	f800283a 	ret

0004385c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   4385c:	defffe04 	addi	sp,sp,-8
   43860:	df000115 	stw	fp,4(sp)
   43864:	df000104 	addi	fp,sp,4
   43868:	e13fff15 	stw	r4,-4(fp)
}
   4386c:	0001883a 	nop
   43870:	e037883a 	mov	sp,fp
   43874:	df000017 	ldw	fp,0(sp)
   43878:	dec00104 	addi	sp,sp,4
   4387c:	f800283a 	ret

00043880 <alt_get_errno>:
        return -1;
    }
}

#else /* !ALT_USE_DIRECT_DRIVERS */

   43880:	defffe04 	addi	sp,sp,-8
   43884:	dfc00115 	stw	ra,4(sp)
   43888:	df000015 	stw	fp,0(sp)
   4388c:	d839883a 	mov	fp,sp
int ALT_READ (int file, void *ptr, size_t len)
   43890:	d0a00817 	ldw	r2,-32736(gp)
   43894:	10000326 	beq	r2,zero,438a4 <alt_get_errno+0x24>
   43898:	d0a00817 	ldw	r2,-32736(gp)
   4389c:	103ee83a 	callr	r2
   438a0:	00000106 	br	438a8 <alt_get_errno+0x28>
   438a4:	d0a5e804 	addi	r2,gp,-26720
{
   438a8:	e037883a 	mov	sp,fp
   438ac:	dfc00117 	ldw	ra,4(sp)
   438b0:	df000017 	ldw	fp,0(sp)
   438b4:	dec00204 	addi	sp,sp,8
   438b8:	f800283a 	ret

000438bc <read>:
   438bc:	defff904 	addi	sp,sp,-28
   438c0:	dfc00615 	stw	ra,24(sp)
   438c4:	df000515 	stw	fp,20(sp)
   438c8:	df000504 	addi	fp,sp,20
   438cc:	e13ffd15 	stw	r4,-12(fp)
   438d0:	e17ffc15 	stw	r5,-16(fp)
   438d4:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   438d8:	e0bffd17 	ldw	r2,-12(fp)
   438dc:	10000916 	blt	r2,zero,43904 <read+0x48>
   438e0:	e0fffd17 	ldw	r3,-12(fp)
   438e4:	1805883a 	mov	r2,r3
   438e8:	1085883a 	add	r2,r2,r2
   438ec:	10c5883a 	add	r2,r2,r3
   438f0:	100490ba 	slli	r2,r2,2
   438f4:	00c00134 	movhi	r3,4
   438f8:	18d76b04 	addi	r3,r3,23980
   438fc:	10c5883a 	add	r2,r2,r3
   43900:	00000106 	br	43908 <read+0x4c>
   43904:	0005883a 	mov	r2,zero
   43908:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   4390c:	e0bfff17 	ldw	r2,-4(fp)
   43910:	10002226 	beq	r2,zero,4399c <read+0xe0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   43914:	e0bfff17 	ldw	r2,-4(fp)
   43918:	10800217 	ldw	r2,8(r2)
   4391c:	108000cc 	andi	r2,r2,3
   43920:	10800060 	cmpeqi	r2,r2,1
   43924:	1000181e 	bne	r2,zero,43988 <read+0xcc>
        (fd->dev->read))
   43928:	e0bfff17 	ldw	r2,-4(fp)
   4392c:	10800017 	ldw	r2,0(r2)
   43930:	10800517 	ldw	r2,20(r2)
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   43934:	10001426 	beq	r2,zero,43988 <read+0xcc>
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   43938:	e0bfff17 	ldw	r2,-4(fp)
   4393c:	10800017 	ldw	r2,0(r2)
   43940:	10800517 	ldw	r2,20(r2)
   43944:	e0fffb17 	ldw	r3,-20(fp)
   43948:	180d883a 	mov	r6,r3
   4394c:	e17ffc17 	ldw	r5,-16(fp)
   43950:	e13fff17 	ldw	r4,-4(fp)
   43954:	103ee83a 	callr	r2
   43958:	e0bffe15 	stw	r2,-8(fp)
   4395c:	e0bffe17 	ldw	r2,-8(fp)
   43960:	1000070e 	bge	r2,zero,43980 <read+0xc4>
        {
          ALT_ERRNO = -rval;
   43964:	00438800 	call	43880 <alt_get_errno>
   43968:	1007883a 	mov	r3,r2
   4396c:	e0bffe17 	ldw	r2,-8(fp)
   43970:	0085c83a 	sub	r2,zero,r2
   43974:	18800015 	stw	r2,0(r3)
          return -1;
   43978:	00bfffc4 	movi	r2,-1
   4397c:	00000c06 	br	439b0 <read+0xf4>
        }
        return rval;
   43980:	e0bffe17 	ldw	r2,-8(fp)
   43984:	00000a06 	br	439b0 <read+0xf4>
      }
      else
      {
        ALT_ERRNO = EACCES;
   43988:	00438800 	call	43880 <alt_get_errno>
   4398c:	1007883a 	mov	r3,r2
   43990:	00800344 	movi	r2,13
   43994:	18800015 	stw	r2,0(r3)
   43998:	00000406 	br	439ac <read+0xf0>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   4399c:	00438800 	call	43880 <alt_get_errno>
   439a0:	1007883a 	mov	r3,r2
   439a4:	00801444 	movi	r2,81
   439a8:	18800015 	stw	r2,0(r3)
  }
  return -1;
   439ac:	00bfffc4 	movi	r2,-1
}
   439b0:	e037883a 	mov	sp,fp
   439b4:	dfc00117 	ldw	ra,4(sp)
   439b8:	df000017 	ldw	fp,0(sp)
   439bc:	dec00204 	addi	sp,sp,8
   439c0:	f800283a 	ret

000439c4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   439c4:	defffe04 	addi	sp,sp,-8
   439c8:	df000115 	stw	fp,4(sp)
   439cc:	df000104 	addi	fp,sp,4
   439d0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   439d4:	e0bfff17 	ldw	r2,-4(fp)
   439d8:	108000d0 	cmplti	r2,r2,3
   439dc:	1000101e 	bne	r2,zero,43a20 <alt_release_fd+0x5c>
  {
    alt_fd_list[fd].fd_flags = 0;
   439e0:	e0ffff17 	ldw	r3,-4(fp)
   439e4:	1805883a 	mov	r2,r3
   439e8:	1085883a 	add	r2,r2,r2
   439ec:	10c5883a 	add	r2,r2,r3
   439f0:	100490ba 	slli	r2,r2,2
   439f4:	00c00134 	movhi	r3,4
   439f8:	10c7883a 	add	r3,r2,r3
   439fc:	18176d15 	stw	zero,23988(r3)
    alt_fd_list[fd].dev      = 0;
   43a00:	e0ffff17 	ldw	r3,-4(fp)
   43a04:	1805883a 	mov	r2,r3
   43a08:	1085883a 	add	r2,r2,r2
   43a0c:	10c5883a 	add	r2,r2,r3
   43a10:	100490ba 	slli	r2,r2,2
   43a14:	00c00134 	movhi	r3,4
   43a18:	10c7883a 	add	r3,r2,r3
   43a1c:	18176b15 	stw	zero,23980(r3)
  }
}
   43a20:	0001883a 	nop
   43a24:	e037883a 	mov	sp,fp
   43a28:	df000017 	ldw	fp,0(sp)
   43a2c:	dec00104 	addi	sp,sp,4
   43a30:	f800283a 	ret

00043a34 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   43a34:	defff904 	addi	sp,sp,-28
   43a38:	df000615 	stw	fp,24(sp)
   43a3c:	df000604 	addi	fp,sp,24
   43a40:	e13ffa15 	stw	r4,-24(fp)
  NIOS2_READ_STATUS (context);
   43a44:	0005303a 	rdctl	r2,status
   43a48:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   43a4c:	e0fffd17 	ldw	r3,-12(fp)
   43a50:	00bfff84 	movi	r2,-2
   43a54:	1884703a 	and	r2,r3,r2
   43a58:	1001703a 	wrctl	status,r2
  return context;
   43a5c:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   43a60:	e0bfff15 	stw	r2,-4(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   43a64:	d0a00917 	ldw	r2,-32732(gp)
   43a68:	10c000c4 	addi	r3,r2,3
   43a6c:	00bfff04 	movi	r2,-4
   43a70:	1884703a 	and	r2,r3,r2
   43a74:	d0a00915 	stw	r2,-32732(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   43a78:	d0e00917 	ldw	r3,-32732(gp)
   43a7c:	e0bffa17 	ldw	r2,-24(fp)
   43a80:	1887883a 	add	r3,r3,r2
   43a84:	00800234 	movhi	r2,8
   43a88:	10800004 	addi	r2,r2,0
   43a8c:	10c0072e 	bgeu	r2,r3,43aac <sbrk+0x78>
   43a90:	e0bfff17 	ldw	r2,-4(fp)
   43a94:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   43a98:	e0bffc17 	ldw	r2,-16(fp)
   43a9c:	1001703a 	wrctl	status,r2
}
   43aa0:	0001883a 	nop
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   43aa4:	00bfffc4 	movi	r2,-1
   43aa8:	00000c06 	br	43adc <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
   43aac:	d0a00917 	ldw	r2,-32732(gp)
   43ab0:	e0bffe15 	stw	r2,-8(fp)
  heap_end += incr; 
   43ab4:	d0e00917 	ldw	r3,-32732(gp)
   43ab8:	e0bffa17 	ldw	r2,-24(fp)
   43abc:	1885883a 	add	r2,r3,r2
   43ac0:	d0a00915 	stw	r2,-32732(gp)
   43ac4:	e0bfff17 	ldw	r2,-4(fp)
   43ac8:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
   43acc:	e0bffb17 	ldw	r2,-20(fp)
   43ad0:	1001703a 	wrctl	status,r2
}
   43ad4:	0001883a 	nop

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   43ad8:	e0bffe17 	ldw	r2,-8(fp)
} 
   43adc:	e037883a 	mov	sp,fp
   43ae0:	df000017 	ldw	fp,0(sp)
   43ae4:	dec00104 	addi	sp,sp,4
   43ae8:	f800283a 	ret

00043aec <alt_get_errno>:
#ifdef ALT_STDOUT_PRESENT
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
   43aec:	defffe04 	addi	sp,sp,-8
   43af0:	dfc00115 	stw	ra,4(sp)
   43af4:	df000015 	stw	fp,0(sp)
   43af8:	d839883a 	mov	fp,sp
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
   43afc:	d0a00817 	ldw	r2,-32736(gp)
   43b00:	10000326 	beq	r2,zero,43b10 <alt_get_errno+0x24>
   43b04:	d0a00817 	ldw	r2,-32736(gp)
   43b08:	103ee83a 	callr	r2
   43b0c:	00000106 	br	43b14 <alt_get_errno+0x28>
   43b10:	d0a5e804 	addi	r2,gp,-26720
#endif /* ALT_STDERR_PRESENT */
   43b14:	e037883a 	mov	sp,fp
   43b18:	dfc00117 	ldw	ra,4(sp)
   43b1c:	df000017 	ldw	fp,0(sp)
   43b20:	dec00204 	addi	sp,sp,8
   43b24:	f800283a 	ret

00043b28 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   43b28:	defff904 	addi	sp,sp,-28
   43b2c:	dfc00615 	stw	ra,24(sp)
   43b30:	df000515 	stw	fp,20(sp)
   43b34:	df000504 	addi	fp,sp,20
   43b38:	e13ffd15 	stw	r4,-12(fp)
   43b3c:	e17ffc15 	stw	r5,-16(fp)
   43b40:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   43b44:	e0bffd17 	ldw	r2,-12(fp)
   43b48:	10000916 	blt	r2,zero,43b70 <write+0x48>
   43b4c:	e0fffd17 	ldw	r3,-12(fp)
   43b50:	1805883a 	mov	r2,r3
   43b54:	1085883a 	add	r2,r2,r2
   43b58:	10c5883a 	add	r2,r2,r3
   43b5c:	100490ba 	slli	r2,r2,2
   43b60:	00c00134 	movhi	r3,4
   43b64:	18d76b04 	addi	r3,r3,23980
   43b68:	10c5883a 	add	r2,r2,r3
   43b6c:	00000106 	br	43b74 <write+0x4c>
   43b70:	0005883a 	mov	r2,zero
   43b74:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   43b78:	e0bfff17 	ldw	r2,-4(fp)
   43b7c:	10002126 	beq	r2,zero,43c04 <write+0xdc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   43b80:	e0bfff17 	ldw	r2,-4(fp)
   43b84:	10800217 	ldw	r2,8(r2)
   43b88:	108000cc 	andi	r2,r2,3
   43b8c:	10001826 	beq	r2,zero,43bf0 <write+0xc8>
   43b90:	e0bfff17 	ldw	r2,-4(fp)
   43b94:	10800017 	ldw	r2,0(r2)
   43b98:	10800617 	ldw	r2,24(r2)
   43b9c:	10001426 	beq	r2,zero,43bf0 <write+0xc8>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   43ba0:	e0bfff17 	ldw	r2,-4(fp)
   43ba4:	10800017 	ldw	r2,0(r2)
   43ba8:	10800617 	ldw	r2,24(r2)
   43bac:	e0fffb17 	ldw	r3,-20(fp)
   43bb0:	180d883a 	mov	r6,r3
   43bb4:	e17ffc17 	ldw	r5,-16(fp)
   43bb8:	e13fff17 	ldw	r4,-4(fp)
   43bbc:	103ee83a 	callr	r2
   43bc0:	e0bffe15 	stw	r2,-8(fp)
   43bc4:	e0bffe17 	ldw	r2,-8(fp)
   43bc8:	1000070e 	bge	r2,zero,43be8 <write+0xc0>
      {
        ALT_ERRNO = -rval;
   43bcc:	0043aec0 	call	43aec <alt_get_errno>
   43bd0:	1007883a 	mov	r3,r2
   43bd4:	e0bffe17 	ldw	r2,-8(fp)
   43bd8:	0085c83a 	sub	r2,zero,r2
   43bdc:	18800015 	stw	r2,0(r3)
        return -1;
   43be0:	00bfffc4 	movi	r2,-1
   43be4:	00000c06 	br	43c18 <write+0xf0>
      }
      return rval;
   43be8:	e0bffe17 	ldw	r2,-8(fp)
   43bec:	00000a06 	br	43c18 <write+0xf0>
    }
    else
    {
      ALT_ERRNO = EACCES;
   43bf0:	0043aec0 	call	43aec <alt_get_errno>
   43bf4:	1007883a 	mov	r3,r2
   43bf8:	00800344 	movi	r2,13
   43bfc:	18800015 	stw	r2,0(r3)
   43c00:	00000406 	br	43c14 <write+0xec>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   43c04:	0043aec0 	call	43aec <alt_get_errno>
   43c08:	1007883a 	mov	r3,r2
   43c0c:	00801444 	movi	r2,81
   43c10:	18800015 	stw	r2,0(r3)
  }
  return -1;
   43c14:	00bfffc4 	movi	r2,-1
}
   43c18:	e037883a 	mov	sp,fp
   43c1c:	dfc00117 	ldw	ra,4(sp)
   43c20:	df000017 	ldw	fp,0(sp)
   43c24:	dec00204 	addi	sp,sp,8
   43c28:	f800283a 	ret

00043c2c <alt_dev_reg>:
   43c2c:	defffd04 	addi	sp,sp,-12
   43c30:	dfc00215 	stw	ra,8(sp)
   43c34:	df000115 	stw	fp,4(sp)
   43c38:	df000104 	addi	fp,sp,4
   43c3c:	e13fff15 	stw	r4,-4(fp)
   43c40:	d1600504 	addi	r5,gp,-32748
   43c44:	e13fff17 	ldw	r4,-4(fp)
   43c48:	0044a400 	call	44a40 <alt_dev_llist_insert>
   43c4c:	e037883a 	mov	sp,fp
   43c50:	dfc00117 	ldw	ra,4(sp)
   43c54:	df000017 	ldw	fp,0(sp)
   43c58:	dec00204 	addi	sp,sp,8
   43c5c:	f800283a 	ret

00043c60 <alt_irq_init>:
{
   43c60:	defffd04 	addi	sp,sp,-12
   43c64:	dfc00215 	stw	ra,8(sp)
   43c68:	df000115 	stw	fp,4(sp)
   43c6c:	df000104 	addi	fp,sp,4
   43c70:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   43c74:	00454000 	call	45400 <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   43c78:	00800044 	movi	r2,1
   43c7c:	1001703a 	wrctl	status,r2
}
   43c80:	0001883a 	nop
}
   43c84:	0001883a 	nop
   43c88:	e037883a 	mov	sp,fp
   43c8c:	dfc00117 	ldw	ra,4(sp)
   43c90:	df000017 	ldw	fp,0(sp)
   43c94:	dec00204 	addi	sp,sp,8
   43c98:	f800283a 	ret

00043c9c <alt_sys_init>:
{
   43c9c:	defffe04 	addi	sp,sp,-8
   43ca0:	dfc00115 	stw	ra,4(sp)
   43ca4:	df000015 	stw	fp,0(sp)
   43ca8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
   43cac:	01c0fa04 	movi	r7,1000
   43cb0:	01800044 	movi	r6,1
   43cb4:	000b883a 	mov	r5,zero
   43cb8:	01000234 	movhi	r4,8
   43cbc:	21040004 	addi	r4,r4,4096
   43cc0:	00448000 	call	44800 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   43cc4:	01800404 	movi	r6,16
   43cc8:	000b883a 	mov	r5,zero
   43ccc:	01000134 	movhi	r4,4
   43cd0:	2117d504 	addi	r4,r4,24404
   43cd4:	0043e640 	call	43e64 <altera_avalon_jtag_uart_init>
   43cd8:	01000134 	movhi	r4,4
   43cdc:	2117cb04 	addi	r4,r4,24364
   43ce0:	0043c2c0 	call	43c2c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
   43ce4:	0001883a 	nop
}
   43ce8:	0001883a 	nop
   43cec:	e037883a 	mov	sp,fp
   43cf0:	dfc00117 	ldw	ra,4(sp)
   43cf4:	df000017 	ldw	fp,0(sp)
   43cf8:	dec00204 	addi	sp,sp,8
   43cfc:	f800283a 	ret

00043d00 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   43d00:	defffa04 	addi	sp,sp,-24
   43d04:	dfc00515 	stw	ra,20(sp)
   43d08:	df000415 	stw	fp,16(sp)
   43d0c:	df000404 	addi	fp,sp,16
   43d10:	e13ffe15 	stw	r4,-8(fp)
   43d14:	e17ffd15 	stw	r5,-12(fp)
   43d18:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   43d1c:	e0bffe17 	ldw	r2,-8(fp)
   43d20:	10800017 	ldw	r2,0(r2)
   43d24:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   43d28:	e0bfff17 	ldw	r2,-4(fp)
   43d2c:	10c00a04 	addi	r3,r2,40
   43d30:	e0bffe17 	ldw	r2,-8(fp)
   43d34:	10800217 	ldw	r2,8(r2)
   43d38:	100f883a 	mov	r7,r2
   43d3c:	e1bffc17 	ldw	r6,-16(fp)
   43d40:	e17ffd17 	ldw	r5,-12(fp)
   43d44:	1809883a 	mov	r4,r3
   43d48:	004433c0 	call	4433c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   43d4c:	e037883a 	mov	sp,fp
   43d50:	dfc00117 	ldw	ra,4(sp)
   43d54:	df000017 	ldw	fp,0(sp)
   43d58:	dec00204 	addi	sp,sp,8
   43d5c:	f800283a 	ret

00043d60 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   43d60:	defffa04 	addi	sp,sp,-24
   43d64:	dfc00515 	stw	ra,20(sp)
   43d68:	df000415 	stw	fp,16(sp)
   43d6c:	df000404 	addi	fp,sp,16
   43d70:	e13ffe15 	stw	r4,-8(fp)
   43d74:	e17ffd15 	stw	r5,-12(fp)
   43d78:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   43d7c:	e0bffe17 	ldw	r2,-8(fp)
   43d80:	10800017 	ldw	r2,0(r2)
   43d84:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   43d88:	e0bfff17 	ldw	r2,-4(fp)
   43d8c:	10c00a04 	addi	r3,r2,40
   43d90:	e0bffe17 	ldw	r2,-8(fp)
   43d94:	10800217 	ldw	r2,8(r2)
   43d98:	100f883a 	mov	r7,r2
   43d9c:	e1bffc17 	ldw	r6,-16(fp)
   43da0:	e17ffd17 	ldw	r5,-12(fp)
   43da4:	1809883a 	mov	r4,r3
   43da8:	004455c0 	call	4455c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   43dac:	e037883a 	mov	sp,fp
   43db0:	dfc00117 	ldw	ra,4(sp)
   43db4:	df000017 	ldw	fp,0(sp)
   43db8:	dec00204 	addi	sp,sp,8
   43dbc:	f800283a 	ret

00043dc0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   43dc0:	defffc04 	addi	sp,sp,-16
   43dc4:	dfc00315 	stw	ra,12(sp)
   43dc8:	df000215 	stw	fp,8(sp)
   43dcc:	df000204 	addi	fp,sp,8
   43dd0:	e13ffe15 	stw	r4,-8(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   43dd4:	e0bffe17 	ldw	r2,-8(fp)
   43dd8:	10800017 	ldw	r2,0(r2)
   43ddc:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   43de0:	e0bfff17 	ldw	r2,-4(fp)
   43de4:	10c00a04 	addi	r3,r2,40
   43de8:	e0bffe17 	ldw	r2,-8(fp)
   43dec:	10800217 	ldw	r2,8(r2)
   43df0:	100b883a 	mov	r5,r2
   43df4:	1809883a 	mov	r4,r3
   43df8:	00441e00 	call	441e0 <altera_avalon_jtag_uart_close>
}
   43dfc:	e037883a 	mov	sp,fp
   43e00:	dfc00117 	ldw	ra,4(sp)
   43e04:	df000017 	ldw	fp,0(sp)
   43e08:	dec00204 	addi	sp,sp,8
   43e0c:	f800283a 	ret

00043e10 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   43e10:	defffa04 	addi	sp,sp,-24
   43e14:	dfc00515 	stw	ra,20(sp)
   43e18:	df000415 	stw	fp,16(sp)
   43e1c:	df000404 	addi	fp,sp,16
   43e20:	e13ffe15 	stw	r4,-8(fp)
   43e24:	e17ffd15 	stw	r5,-12(fp)
   43e28:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   43e2c:	e0bffe17 	ldw	r2,-8(fp)
   43e30:	10800017 	ldw	r2,0(r2)
   43e34:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   43e38:	e0bfff17 	ldw	r2,-4(fp)
   43e3c:	10800a04 	addi	r2,r2,40
   43e40:	e1bffc17 	ldw	r6,-16(fp)
   43e44:	e17ffd17 	ldw	r5,-12(fp)
   43e48:	1009883a 	mov	r4,r2
   43e4c:	00442480 	call	44248 <altera_avalon_jtag_uart_ioctl>
}
   43e50:	e037883a 	mov	sp,fp
   43e54:	dfc00117 	ldw	ra,4(sp)
   43e58:	df000017 	ldw	fp,0(sp)
   43e5c:	dec00204 	addi	sp,sp,8
   43e60:	f800283a 	ret

00043e64 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   43e64:	defffa04 	addi	sp,sp,-24
   43e68:	dfc00515 	stw	ra,20(sp)
   43e6c:	df000415 	stw	fp,16(sp)
   43e70:	df000404 	addi	fp,sp,16
   43e74:	e13fff15 	stw	r4,-4(fp)
   43e78:	e17ffe15 	stw	r5,-8(fp)
   43e7c:	e1bffd15 	stw	r6,-12(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   43e80:	e0bfff17 	ldw	r2,-4(fp)
   43e84:	00c00044 	movi	r3,1
   43e88:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   43e8c:	e0bfff17 	ldw	r2,-4(fp)
   43e90:	10800017 	ldw	r2,0(r2)
   43e94:	10800104 	addi	r2,r2,4
   43e98:	1007883a 	mov	r3,r2
   43e9c:	e0bfff17 	ldw	r2,-4(fp)
   43ea0:	10800817 	ldw	r2,32(r2)
   43ea4:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   43ea8:	e0bffe17 	ldw	r2,-8(fp)
   43eac:	e0fffd17 	ldw	r3,-12(fp)
   43eb0:	d8000015 	stw	zero,0(sp)
   43eb4:	e1ffff17 	ldw	r7,-4(fp)
   43eb8:	01800134 	movhi	r6,4
   43ebc:	318fc904 	addi	r6,r6,16164
   43ec0:	180b883a 	mov	r5,r3
   43ec4:	1009883a 	mov	r4,r2
   43ec8:	0044bd00 	call	44bd0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   43ecc:	e0bfff17 	ldw	r2,-4(fp)
   43ed0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   43ed4:	e0bfff17 	ldw	r2,-4(fp)
   43ed8:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   43edc:	d0e5f217 	ldw	r3,-26680(gp)
   43ee0:	e1ffff17 	ldw	r7,-4(fp)
   43ee4:	01800134 	movhi	r6,4
   43ee8:	31904e04 	addi	r6,r6,16696
   43eec:	180b883a 	mov	r5,r3
   43ef0:	1009883a 	mov	r4,r2
   43ef4:	00448840 	call	44884 <alt_alarm_start>
   43ef8:	1000040e 	bge	r2,zero,43f0c <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   43efc:	e0ffff17 	ldw	r3,-4(fp)
   43f00:	00a00034 	movhi	r2,32768
   43f04:	10bfffc4 	addi	r2,r2,-1
   43f08:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   43f0c:	0001883a 	nop
   43f10:	e037883a 	mov	sp,fp
   43f14:	dfc00117 	ldw	ra,4(sp)
   43f18:	df000017 	ldw	fp,0(sp)
   43f1c:	dec00204 	addi	sp,sp,8
   43f20:	f800283a 	ret

00043f24 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   43f24:	defff704 	addi	sp,sp,-36
   43f28:	df000815 	stw	fp,32(sp)
   43f2c:	df000804 	addi	fp,sp,32
   43f30:	e13ff815 	stw	r4,-32(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   43f34:	e0bff817 	ldw	r2,-32(fp)
   43f38:	e0bffc15 	stw	r2,-16(fp)
  unsigned int base = sp->base;
   43f3c:	e0bffc17 	ldw	r2,-16(fp)
   43f40:	10800017 	ldw	r2,0(r2)
   43f44:	e0bffb15 	stw	r2,-20(fp)
  unsigned int postflag=0;
   43f48:	e03fff15 	stw	zero,-4(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   43f4c:	e0bffb17 	ldw	r2,-20(fp)
   43f50:	10800104 	addi	r2,r2,4
   43f54:	10800037 	ldwio	r2,0(r2)
   43f58:	e0bffa15 	stw	r2,-24(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   43f5c:	e0bffa17 	ldw	r2,-24(fp)
   43f60:	1080c00c 	andi	r2,r2,768
   43f64:	10006e26 	beq	r2,zero,44120 <altera_avalon_jtag_uart_irq+0x1fc>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   43f68:	e0bffa17 	ldw	r2,-24(fp)
   43f6c:	1080400c 	andi	r2,r2,256
   43f70:	10003526 	beq	r2,zero,44048 <altera_avalon_jtag_uart_irq+0x124>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   43f74:	00800074 	movhi	r2,1
   43f78:	e0bffe15 	stw	r2,-8(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   43f7c:	e0bffc17 	ldw	r2,-16(fp)
   43f80:	10800a17 	ldw	r2,40(r2)
   43f84:	10800044 	addi	r2,r2,1
   43f88:	1081ffcc 	andi	r2,r2,2047
   43f8c:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
   43f90:	e0bffc17 	ldw	r2,-16(fp)
   43f94:	10800b17 	ldw	r2,44(r2)
   43f98:	e0fff917 	ldw	r3,-28(fp)
   43f9c:	18801526 	beq	r3,r2,43ff4 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   43fa0:	e0bffb17 	ldw	r2,-20(fp)
   43fa4:	10800037 	ldwio	r2,0(r2)
   43fa8:	e0bffe15 	stw	r2,-8(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   43fac:	e0bffe17 	ldw	r2,-8(fp)
   43fb0:	10a0000c 	andi	r2,r2,32768
   43fb4:	10001126 	beq	r2,zero,43ffc <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   43fb8:	e0bffc17 	ldw	r2,-16(fp)
   43fbc:	10800a17 	ldw	r2,40(r2)
   43fc0:	e0fffe17 	ldw	r3,-8(fp)
   43fc4:	1809883a 	mov	r4,r3
   43fc8:	e0fffc17 	ldw	r3,-16(fp)
   43fcc:	1885883a 	add	r2,r3,r2
   43fd0:	11000e05 	stb	r4,56(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   43fd4:	e0bffc17 	ldw	r2,-16(fp)
   43fd8:	10800a17 	ldw	r2,40(r2)
   43fdc:	10800044 	addi	r2,r2,1
   43fe0:	10c1ffcc 	andi	r3,r2,2047
   43fe4:	e0bffc17 	ldw	r2,-16(fp)
   43fe8:	10c00a15 	stw	r3,40(r2)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
   43fec:	0001883a 	nop
      {
   43ff0:	003fe206 	br	43f7c <altera_avalon_jtag_uart_irq+0x58>
          break;
   43ff4:	0001883a 	nop
   43ff8:	00000106 	br	44000 <altera_avalon_jtag_uart_irq+0xdc>
          break;
   43ffc:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, ALT_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   44000:	e0bffe17 	ldw	r2,-8(fp)
   44004:	00ffffd4 	movui	r3,65535
   44008:	18800f2e 	bgeu	r3,r2,44048 <altera_avalon_jtag_uart_irq+0x124>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   4400c:	e0bffc17 	ldw	r2,-16(fp)
   44010:	10c00817 	ldw	r3,32(r2)
   44014:	00bfff84 	movi	r2,-2
   44018:	1886703a 	and	r3,r3,r2
   4401c:	e0bffc17 	ldw	r2,-16(fp)
   44020:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   44024:	e0bffb17 	ldw	r2,-20(fp)
   44028:	10800104 	addi	r2,r2,4
   4402c:	1007883a 	mov	r3,r2
   44030:	e0bffc17 	ldw	r2,-16(fp)
   44034:	10800817 	ldw	r2,32(r2)
   44038:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   4403c:	e0bffb17 	ldw	r2,-20(fp)
   44040:	10800104 	addi	r2,r2,4
   44044:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   44048:	e0bffa17 	ldw	r2,-24(fp)
   4404c:	1080800c 	andi	r2,r2,512
   44050:	103fbe26 	beq	r2,zero,43f4c <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   44054:	e0bffa17 	ldw	r2,-24(fp)
   44058:	1004d43a 	srli	r2,r2,16
   4405c:	e0bffd15 	stw	r2,-12(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   44060:	00001506 	br	440b8 <altera_avalon_jtag_uart_irq+0x194>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   44064:	e0bffb17 	ldw	r2,-20(fp)
   44068:	e0fffc17 	ldw	r3,-16(fp)
   4406c:	18c00d17 	ldw	r3,52(r3)
   44070:	e13ffc17 	ldw	r4,-16(fp)
   44074:	20c7883a 	add	r3,r4,r3
   44078:	18c20e03 	ldbu	r3,2104(r3)
   4407c:	18c03fcc 	andi	r3,r3,255
   44080:	18c0201c 	xori	r3,r3,128
   44084:	18ffe004 	addi	r3,r3,-128
   44088:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4408c:	e0bffc17 	ldw	r2,-16(fp)
   44090:	10800d17 	ldw	r2,52(r2)
   44094:	10800044 	addi	r2,r2,1
   44098:	10c1ffcc 	andi	r3,r2,2047
   4409c:	e0bffc17 	ldw	r2,-16(fp)
   440a0:	10c00d15 	stw	r3,52(r2)
        
        /* indicate that the ALT_FLAG_POST routine must be called */
        postflag=1;
   440a4:	00800044 	movi	r2,1
   440a8:	e0bfff15 	stw	r2,-4(fp)

        space--;
   440ac:	e0bffd17 	ldw	r2,-12(fp)
   440b0:	10bfffc4 	addi	r2,r2,-1
   440b4:	e0bffd15 	stw	r2,-12(fp)
      while (space > 0 && sp->tx_out != sp->tx_in)
   440b8:	e0bffd17 	ldw	r2,-12(fp)
   440bc:	10000526 	beq	r2,zero,440d4 <altera_avalon_jtag_uart_irq+0x1b0>
   440c0:	e0bffc17 	ldw	r2,-16(fp)
   440c4:	10c00d17 	ldw	r3,52(r2)
   440c8:	e0bffc17 	ldw	r2,-16(fp)
   440cc:	10800c17 	ldw	r2,48(r2)
   440d0:	18bfe41e 	bne	r3,r2,44064 <altera_avalon_jtag_uart_irq+0x140>
      {
        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, ALT_FLAG_SET);
      }

      if (space > 0)
   440d4:	e0bffd17 	ldw	r2,-12(fp)
   440d8:	103f9c26 	beq	r2,zero,43f4c <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   440dc:	e0bffc17 	ldw	r2,-16(fp)
   440e0:	10c00817 	ldw	r3,32(r2)
   440e4:	00bfff44 	movi	r2,-3
   440e8:	1886703a 	and	r3,r3,r2
   440ec:	e0bffc17 	ldw	r2,-16(fp)
   440f0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   440f4:	e0bffc17 	ldw	r2,-16(fp)
   440f8:	10800017 	ldw	r2,0(r2)
   440fc:	10800104 	addi	r2,r2,4
   44100:	1007883a 	mov	r3,r2
   44104:	e0bffc17 	ldw	r2,-16(fp)
   44108:	10800817 	ldw	r2,32(r2)
   4410c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   44110:	e0bffb17 	ldw	r2,-20(fp)
   44114:	10800104 	addi	r2,r2,4
   44118:	10800037 	ldwio	r2,0(r2)
  {
   4411c:	003f8b06 	br	43f4c <altera_avalon_jtag_uart_irq+0x28>
      break;
   44120:	0001883a 	nop
      }
    }
  }
}
   44124:	0001883a 	nop
   44128:	e037883a 	mov	sp,fp
   4412c:	df000017 	ldw	fp,0(sp)
   44130:	dec00104 	addi	sp,sp,4
   44134:	f800283a 	ret

00044138 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   44138:	defffc04 	addi	sp,sp,-16
   4413c:	df000315 	stw	fp,12(sp)
   44140:	df000304 	addi	fp,sp,12
   44144:	e13ffd15 	stw	r4,-12(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   44148:	e0bffd17 	ldw	r2,-12(fp)
   4414c:	e0bfff15 	stw	r2,-4(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   44150:	e0bfff17 	ldw	r2,-4(fp)
   44154:	10800017 	ldw	r2,0(r2)
   44158:	10800104 	addi	r2,r2,4
   4415c:	10800037 	ldwio	r2,0(r2)
   44160:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   44164:	e0bffe17 	ldw	r2,-8(fp)
   44168:	1081000c 	andi	r2,r2,1024
   4416c:	10000b26 	beq	r2,zero,4419c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   44170:	e0bfff17 	ldw	r2,-4(fp)
   44174:	10800017 	ldw	r2,0(r2)
   44178:	10800104 	addi	r2,r2,4
   4417c:	1007883a 	mov	r3,r2
   44180:	e0bfff17 	ldw	r2,-4(fp)
   44184:	10800817 	ldw	r2,32(r2)
   44188:	10810014 	ori	r2,r2,1024
   4418c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   44190:	e0bfff17 	ldw	r2,-4(fp)
   44194:	10000915 	stw	zero,36(r2)
   44198:	00000c06 	br	441cc <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   4419c:	e0bfff17 	ldw	r2,-4(fp)
   441a0:	10c00917 	ldw	r3,36(r2)
   441a4:	00a00034 	movhi	r2,32768
   441a8:	10bfff04 	addi	r2,r2,-4
   441ac:	10c00736 	bltu	r2,r3,441cc <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
   441b0:	e0bfff17 	ldw	r2,-4(fp)
   441b4:	10800917 	ldw	r2,36(r2)
   441b8:	10c00044 	addi	r3,r2,1
   441bc:	e0bfff17 	ldw	r2,-4(fp)
   441c0:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
   441c4:	e0bfff17 	ldw	r2,-4(fp)
   441c8:	10800917 	ldw	r2,36(r2)
   441cc:	d0a5f217 	ldw	r2,-26680(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, ALT_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   441d0:	e037883a 	mov	sp,fp
   441d4:	df000017 	ldw	fp,0(sp)
   441d8:	dec00104 	addi	sp,sp,4
   441dc:	f800283a 	ret

000441e0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   441e0:	defffd04 	addi	sp,sp,-12
   441e4:	df000215 	stw	fp,8(sp)
   441e8:	df000204 	addi	fp,sp,8
   441ec:	e13fff15 	stw	r4,-4(fp)
   441f0:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   441f4:	00000506 	br	4420c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   441f8:	e0bffe17 	ldw	r2,-8(fp)
   441fc:	1090000c 	andi	r2,r2,16384
   44200:	10000226 	beq	r2,zero,4420c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   44204:	00bffd44 	movi	r2,-11
   44208:	00000b06 	br	44238 <altera_avalon_jtag_uart_close+0x58>
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   4420c:	e0bfff17 	ldw	r2,-4(fp)
   44210:	10c00d17 	ldw	r3,52(r2)
   44214:	e0bfff17 	ldw	r2,-4(fp)
   44218:	10800c17 	ldw	r2,48(r2)
   4421c:	18800526 	beq	r3,r2,44234 <altera_avalon_jtag_uart_close+0x54>
   44220:	e0bfff17 	ldw	r2,-4(fp)
   44224:	10c00917 	ldw	r3,36(r2)
   44228:	e0bfff17 	ldw	r2,-4(fp)
   4422c:	10800117 	ldw	r2,4(r2)
   44230:	18bff136 	bltu	r3,r2,441f8 <altera_avalon_jtag_uart_close+0x18>
    }
  }

  return 0;
   44234:	0005883a 	mov	r2,zero
}
   44238:	e037883a 	mov	sp,fp
   4423c:	df000017 	ldw	fp,0(sp)
   44240:	dec00104 	addi	sp,sp,4
   44244:	f800283a 	ret

00044248 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   44248:	defffa04 	addi	sp,sp,-24
   4424c:	df000515 	stw	fp,20(sp)
   44250:	df000504 	addi	fp,sp,20
   44254:	e13ffd15 	stw	r4,-12(fp)
   44258:	e17ffc15 	stw	r5,-16(fp)
   4425c:	e1bffb15 	stw	r6,-20(fp)
  int rc = -ENOTTY;
   44260:	00bff9c4 	movi	r2,-25
   44264:	e0bfff15 	stw	r2,-4(fp)

  switch (req)
   44268:	e0bffc17 	ldw	r2,-16(fp)
   4426c:	109a8060 	cmpeqi	r2,r2,27137
   44270:	1000041e 	bne	r2,zero,44284 <altera_avalon_jtag_uart_ioctl+0x3c>
   44274:	e0bffc17 	ldw	r2,-16(fp)
   44278:	109a80a0 	cmpeqi	r2,r2,27138
   4427c:	1000181e 	bne	r2,zero,442e0 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
   44280:	00002906 	br	44328 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
   44284:	e0bffd17 	ldw	r2,-12(fp)
   44288:	10c00117 	ldw	r3,4(r2)
   4428c:	00a00034 	movhi	r2,32768
   44290:	10bfffc4 	addi	r2,r2,-1
   44294:	18802126 	beq	r3,r2,4431c <altera_avalon_jtag_uart_ioctl+0xd4>
      int timeout = *((int *)arg);
   44298:	e0bffb17 	ldw	r2,-20(fp)
   4429c:	10800017 	ldw	r2,0(r2)
   442a0:	e0bffe15 	stw	r2,-8(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   442a4:	e0bffe17 	ldw	r2,-8(fp)
   442a8:	10800090 	cmplti	r2,r2,2
   442ac:	1000061e 	bne	r2,zero,442c8 <altera_avalon_jtag_uart_ioctl+0x80>
   442b0:	e0fffe17 	ldw	r3,-8(fp)
   442b4:	00a00034 	movhi	r2,32768
   442b8:	10bfffc4 	addi	r2,r2,-1
   442bc:	18800226 	beq	r3,r2,442c8 <altera_avalon_jtag_uart_ioctl+0x80>
   442c0:	e0bffe17 	ldw	r2,-8(fp)
   442c4:	00000206 	br	442d0 <altera_avalon_jtag_uart_ioctl+0x88>
   442c8:	00a00034 	movhi	r2,32768
   442cc:	10bfff84 	addi	r2,r2,-2
   442d0:	e0fffd17 	ldw	r3,-12(fp)
   442d4:	18800115 	stw	r2,4(r3)
      rc = 0;
   442d8:	e03fff15 	stw	zero,-4(fp)
    break;
   442dc:	00000f06 	br	4431c <altera_avalon_jtag_uart_ioctl+0xd4>
    if (sp->timeout != INT_MAX)
   442e0:	e0bffd17 	ldw	r2,-12(fp)
   442e4:	10c00117 	ldw	r3,4(r2)
   442e8:	00a00034 	movhi	r2,32768
   442ec:	10bfffc4 	addi	r2,r2,-1
   442f0:	18800c26 	beq	r3,r2,44324 <altera_avalon_jtag_uart_ioctl+0xdc>
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   442f4:	e0bffd17 	ldw	r2,-12(fp)
   442f8:	10c00917 	ldw	r3,36(r2)
   442fc:	e0bffd17 	ldw	r2,-12(fp)
   44300:	10800117 	ldw	r2,4(r2)
   44304:	1885803a 	cmpltu	r2,r3,r2
   44308:	10c03fcc 	andi	r3,r2,255
   4430c:	e0bffb17 	ldw	r2,-20(fp)
   44310:	10c00015 	stw	r3,0(r2)
      rc = 0;
   44314:	e03fff15 	stw	zero,-4(fp)
    break;
   44318:	00000206 	br	44324 <altera_avalon_jtag_uart_ioctl+0xdc>
    break;
   4431c:	0001883a 	nop
   44320:	00000106 	br	44328 <altera_avalon_jtag_uart_ioctl+0xe0>
    break;
   44324:	0001883a 	nop
  }

  return rc;
   44328:	e0bfff17 	ldw	r2,-4(fp)
}
   4432c:	e037883a 	mov	sp,fp
   44330:	df000017 	ldw	fp,0(sp)
   44334:	dec00104 	addi	sp,sp,4
   44338:	f800283a 	ret

0004433c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   4433c:	defff304 	addi	sp,sp,-52
   44340:	dfc00c15 	stw	ra,48(sp)
   44344:	df000b15 	stw	fp,44(sp)
   44348:	df000b04 	addi	fp,sp,44
   4434c:	e13ff815 	stw	r4,-32(fp)
   44350:	e17ff715 	stw	r5,-36(fp)
   44354:	e1bff615 	stw	r6,-40(fp)
   44358:	e1fff515 	stw	r7,-44(fp)
  char * ptr = buffer;
   4435c:	e0bff717 	ldw	r2,-36(fp)
   44360:	e0bfff15 	stw	r2,-4(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   44364:	00004706 	br	44484 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   44368:	e0bff817 	ldw	r2,-32(fp)
   4436c:	10800a17 	ldw	r2,40(r2)
   44370:	e0bffd15 	stw	r2,-12(fp)
      out = sp->rx_out;
   44374:	e0bff817 	ldw	r2,-32(fp)
   44378:	10800b17 	ldw	r2,44(r2)
   4437c:	e0bffc15 	stw	r2,-16(fp)

      if (in >= out)
   44380:	e0fffd17 	ldw	r3,-12(fp)
   44384:	e0bffc17 	ldw	r2,-16(fp)
   44388:	18800536 	bltu	r3,r2,443a0 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   4438c:	e0fffd17 	ldw	r3,-12(fp)
   44390:	e0bffc17 	ldw	r2,-16(fp)
   44394:	1885c83a 	sub	r2,r3,r2
   44398:	e0bffe15 	stw	r2,-8(fp)
   4439c:	00000406 	br	443b0 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   443a0:	00c20004 	movi	r3,2048
   443a4:	e0bffc17 	ldw	r2,-16(fp)
   443a8:	1885c83a 	sub	r2,r3,r2
   443ac:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
   443b0:	e0bffe17 	ldw	r2,-8(fp)
   443b4:	10001e26 	beq	r2,zero,44430 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   443b8:	e0fff617 	ldw	r3,-40(fp)
   443bc:	e0bffe17 	ldw	r2,-8(fp)
   443c0:	1880022e 	bgeu	r3,r2,443cc <altera_avalon_jtag_uart_read+0x90>
        n = space;
   443c4:	e0bff617 	ldw	r2,-40(fp)
   443c8:	e0bffe15 	stw	r2,-8(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   443cc:	e0bff817 	ldw	r2,-32(fp)
   443d0:	10c00e04 	addi	r3,r2,56
   443d4:	e0bffc17 	ldw	r2,-16(fp)
   443d8:	1885883a 	add	r2,r3,r2
   443dc:	e1bffe17 	ldw	r6,-8(fp)
   443e0:	100b883a 	mov	r5,r2
   443e4:	e13fff17 	ldw	r4,-4(fp)
   443e8:	00410640 	call	41064 <memcpy>
      ptr   += n;
   443ec:	e0ffff17 	ldw	r3,-4(fp)
   443f0:	e0bffe17 	ldw	r2,-8(fp)
   443f4:	1885883a 	add	r2,r3,r2
   443f8:	e0bfff15 	stw	r2,-4(fp)
      space -= n;
   443fc:	e0fff617 	ldw	r3,-40(fp)
   44400:	e0bffe17 	ldw	r2,-8(fp)
   44404:	1885c83a 	sub	r2,r3,r2
   44408:	e0bff615 	stw	r2,-40(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4440c:	e0fffc17 	ldw	r3,-16(fp)
   44410:	e0bffe17 	ldw	r2,-8(fp)
   44414:	1885883a 	add	r2,r3,r2
   44418:	10c1ffcc 	andi	r3,r2,2047
   4441c:	e0bff817 	ldw	r2,-32(fp)
   44420:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   44424:	e0bff617 	ldw	r2,-40(fp)
   44428:	00bfcf16 	blt	zero,r2,44368 <altera_avalon_jtag_uart_read+0x2c>
   4442c:	00000106 	br	44434 <altera_avalon_jtag_uart_read+0xf8>
        break; /* No more data available */
   44430:	0001883a 	nop

    /* If we read any data then return it */
    if (ptr != buffer)
   44434:	e0ffff17 	ldw	r3,-4(fp)
   44438:	e0bff717 	ldw	r2,-36(fp)
   4443c:	1880141e 	bne	r3,r2,44490 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   44440:	e0bff517 	ldw	r2,-44(fp)
   44444:	1090000c 	andi	r2,r2,16384
   44448:	1000131e 	bne	r2,zero,44498 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   4444c:	0001883a 	nop
   44450:	e0bff817 	ldw	r2,-32(fp)
   44454:	10800a17 	ldw	r2,40(r2)
   44458:	e0fffd17 	ldw	r3,-12(fp)
   4445c:	1880051e 	bne	r3,r2,44474 <altera_avalon_jtag_uart_read+0x138>
   44460:	e0bff817 	ldw	r2,-32(fp)
   44464:	10c00917 	ldw	r3,36(r2)
   44468:	e0bff817 	ldw	r2,-32(fp)
   4446c:	10800117 	ldw	r2,4(r2)
   44470:	18bff736 	bltu	r3,r2,44450 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   44474:	e0bff817 	ldw	r2,-32(fp)
   44478:	10800a17 	ldw	r2,40(r2)
   4447c:	e0fffd17 	ldw	r3,-12(fp)
   44480:	18800726 	beq	r3,r2,444a0 <altera_avalon_jtag_uart_read+0x164>
  while (space > 0)
   44484:	e0bff617 	ldw	r2,-40(fp)
   44488:	00bfb716 	blt	zero,r2,44368 <altera_avalon_jtag_uart_read+0x2c>
   4448c:	00000506 	br	444a4 <altera_avalon_jtag_uart_read+0x168>
      break;
   44490:	0001883a 	nop
   44494:	00000306 	br	444a4 <altera_avalon_jtag_uart_read+0x168>
      break;
   44498:	0001883a 	nop
   4449c:	00000106 	br	444a4 <altera_avalon_jtag_uart_read+0x168>
      break;
   444a0:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   444a4:	e0ffff17 	ldw	r3,-4(fp)
   444a8:	e0bff717 	ldw	r2,-36(fp)
   444ac:	18801926 	beq	r3,r2,44514 <altera_avalon_jtag_uart_read+0x1d8>
  NIOS2_READ_STATUS (context);
   444b0:	0005303a 	rdctl	r2,status
   444b4:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   444b8:	e0fff917 	ldw	r3,-28(fp)
   444bc:	00bfff84 	movi	r2,-2
   444c0:	1884703a 	and	r2,r3,r2
   444c4:	1001703a 	wrctl	status,r2
  return context;
   444c8:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   444cc:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   444d0:	e0bff817 	ldw	r2,-32(fp)
   444d4:	10800817 	ldw	r2,32(r2)
   444d8:	10c00054 	ori	r3,r2,1
   444dc:	e0bff817 	ldw	r2,-32(fp)
   444e0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   444e4:	e0bff817 	ldw	r2,-32(fp)
   444e8:	10800017 	ldw	r2,0(r2)
   444ec:	10800104 	addi	r2,r2,4
   444f0:	1007883a 	mov	r3,r2
   444f4:	e0bff817 	ldw	r2,-32(fp)
   444f8:	10800817 	ldw	r2,32(r2)
   444fc:	18800035 	stwio	r2,0(r3)
   44500:	e0bffb17 	ldw	r2,-20(fp)
   44504:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
   44508:	e0bffa17 	ldw	r2,-24(fp)
   4450c:	1001703a 	wrctl	status,r2
}
   44510:	0001883a 	nop
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   44514:	e0ffff17 	ldw	r3,-4(fp)
   44518:	e0bff717 	ldw	r2,-36(fp)
   4451c:	18800426 	beq	r3,r2,44530 <altera_avalon_jtag_uart_read+0x1f4>
    return ptr - buffer;
   44520:	e0ffff17 	ldw	r3,-4(fp)
   44524:	e0bff717 	ldw	r2,-36(fp)
   44528:	1885c83a 	sub	r2,r3,r2
   4452c:	00000606 	br	44548 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
   44530:	e0bff517 	ldw	r2,-44(fp)
   44534:	1090000c 	andi	r2,r2,16384
   44538:	10000226 	beq	r2,zero,44544 <altera_avalon_jtag_uart_read+0x208>
    return -EWOULDBLOCK;
   4453c:	00bffd44 	movi	r2,-11
   44540:	00000106 	br	44548 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
   44544:	00bffec4 	movi	r2,-5
}
   44548:	e037883a 	mov	sp,fp
   4454c:	dfc00117 	ldw	ra,4(sp)
   44550:	df000017 	ldw	fp,0(sp)
   44554:	dec00204 	addi	sp,sp,8
   44558:	f800283a 	ret

0004455c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   4455c:	defff304 	addi	sp,sp,-52
   44560:	dfc00c15 	stw	ra,48(sp)
   44564:	df000b15 	stw	fp,44(sp)
   44568:	df000b04 	addi	fp,sp,44
   4456c:	e13ff815 	stw	r4,-32(fp)
   44570:	e17ff715 	stw	r5,-36(fp)
   44574:	e1bff615 	stw	r6,-40(fp)
   44578:	e1fff515 	stw	r7,-44(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   4457c:	e03fff15 	stw	zero,-4(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   44580:	e0bff717 	ldw	r2,-36(fp)
   44584:	e0bffd15 	stw	r2,-12(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   44588:	00003706 	br	44668 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   4458c:	e0bff817 	ldw	r2,-32(fp)
   44590:	10800c17 	ldw	r2,48(r2)
   44594:	e0bffc15 	stw	r2,-16(fp)
      out = sp->tx_out;
   44598:	e0bff817 	ldw	r2,-32(fp)
   4459c:	10800d17 	ldw	r2,52(r2)
   445a0:	e0bfff15 	stw	r2,-4(fp)

      if (in < out)
   445a4:	e0fffc17 	ldw	r3,-16(fp)
   445a8:	e0bfff17 	ldw	r2,-4(fp)
   445ac:	1880062e 	bgeu	r3,r2,445c8 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   445b0:	e0ffff17 	ldw	r3,-4(fp)
   445b4:	e0bffc17 	ldw	r2,-16(fp)
   445b8:	1885c83a 	sub	r2,r3,r2
   445bc:	10bfffc4 	addi	r2,r2,-1
   445c0:	e0bffe15 	stw	r2,-8(fp)
   445c4:	00000b06 	br	445f4 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   445c8:	e0bfff17 	ldw	r2,-4(fp)
   445cc:	10000526 	beq	r2,zero,445e4 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   445d0:	00c20004 	movi	r3,2048
   445d4:	e0bffc17 	ldw	r2,-16(fp)
   445d8:	1885c83a 	sub	r2,r3,r2
   445dc:	e0bffe15 	stw	r2,-8(fp)
   445e0:	00000406 	br	445f4 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   445e4:	00c1ffc4 	movi	r3,2047
   445e8:	e0bffc17 	ldw	r2,-16(fp)
   445ec:	1885c83a 	sub	r2,r3,r2
   445f0:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
   445f4:	e0bffe17 	ldw	r2,-8(fp)
   445f8:	10001e26 	beq	r2,zero,44674 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   445fc:	e0fff617 	ldw	r3,-40(fp)
   44600:	e0bffe17 	ldw	r2,-8(fp)
   44604:	1880022e 	bgeu	r3,r2,44610 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   44608:	e0bff617 	ldw	r2,-40(fp)
   4460c:	e0bffe15 	stw	r2,-8(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   44610:	e0bff817 	ldw	r2,-32(fp)
   44614:	10c20e04 	addi	r3,r2,2104
   44618:	e0bffc17 	ldw	r2,-16(fp)
   4461c:	1885883a 	add	r2,r3,r2
   44620:	e1bffe17 	ldw	r6,-8(fp)
   44624:	e17ff717 	ldw	r5,-36(fp)
   44628:	1009883a 	mov	r4,r2
   4462c:	00410640 	call	41064 <memcpy>
      ptr   += n;
   44630:	e0fff717 	ldw	r3,-36(fp)
   44634:	e0bffe17 	ldw	r2,-8(fp)
   44638:	1885883a 	add	r2,r3,r2
   4463c:	e0bff715 	stw	r2,-36(fp)
      count -= n;
   44640:	e0fff617 	ldw	r3,-40(fp)
   44644:	e0bffe17 	ldw	r2,-8(fp)
   44648:	1885c83a 	sub	r2,r3,r2
   4464c:	e0bff615 	stw	r2,-40(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   44650:	e0fffc17 	ldw	r3,-16(fp)
   44654:	e0bffe17 	ldw	r2,-8(fp)
   44658:	1885883a 	add	r2,r3,r2
   4465c:	10c1ffcc 	andi	r3,r2,2047
   44660:	e0bff817 	ldw	r2,-32(fp)
   44664:	10c00c15 	stw	r3,48(r2)
    while (count > 0)
   44668:	e0bff617 	ldw	r2,-40(fp)
   4466c:	00bfc716 	blt	zero,r2,4458c <altera_avalon_jtag_uart_write+0x30>
   44670:	00000106 	br	44678 <altera_avalon_jtag_uart_write+0x11c>
        break;
   44674:	0001883a 	nop
  NIOS2_READ_STATUS (context);
   44678:	0005303a 	rdctl	r2,status
   4467c:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   44680:	e0fff917 	ldw	r3,-28(fp)
   44684:	00bfff84 	movi	r2,-2
   44688:	1884703a 	and	r2,r3,r2
   4468c:	1001703a 	wrctl	status,r2
  return context;
   44690:	e0bff917 	ldw	r2,-28(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   44694:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   44698:	e0bff817 	ldw	r2,-32(fp)
   4469c:	10800817 	ldw	r2,32(r2)
   446a0:	10c00094 	ori	r3,r2,2
   446a4:	e0bff817 	ldw	r2,-32(fp)
   446a8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   446ac:	e0bff817 	ldw	r2,-32(fp)
   446b0:	10800017 	ldw	r2,0(r2)
   446b4:	10800104 	addi	r2,r2,4
   446b8:	1007883a 	mov	r3,r2
   446bc:	e0bff817 	ldw	r2,-32(fp)
   446c0:	10800817 	ldw	r2,32(r2)
   446c4:	18800035 	stwio	r2,0(r3)
   446c8:	e0bffb17 	ldw	r2,-20(fp)
   446cc:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
   446d0:	e0bffa17 	ldw	r2,-24(fp)
   446d4:	1001703a 	wrctl	status,r2
}
   446d8:	0001883a 	nop
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   446dc:	e0bff617 	ldw	r2,-40(fp)
   446e0:	0080100e 	bge	zero,r2,44724 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
   446e4:	e0bff517 	ldw	r2,-44(fp)
   446e8:	1090000c 	andi	r2,r2,16384
   446ec:	1000101e 	bne	r2,zero,44730 <altera_avalon_jtag_uart_write+0x1d4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   446f0:	0001883a 	nop
   446f4:	e0bff817 	ldw	r2,-32(fp)
   446f8:	10800d17 	ldw	r2,52(r2)
   446fc:	e0ffff17 	ldw	r3,-4(fp)
   44700:	1880051e 	bne	r3,r2,44718 <altera_avalon_jtag_uart_write+0x1bc>
   44704:	e0bff817 	ldw	r2,-32(fp)
   44708:	10c00917 	ldw	r3,36(r2)
   4470c:	e0bff817 	ldw	r2,-32(fp)
   44710:	10800117 	ldw	r2,4(r2)
   44714:	18bff736 	bltu	r3,r2,446f4 <altera_avalon_jtag_uart_write+0x198>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   44718:	e0bff817 	ldw	r2,-32(fp)
   4471c:	10800917 	ldw	r2,36(r2)
   44720:	1000051e 	bne	r2,zero,44738 <altera_avalon_jtag_uart_write+0x1dc>
         break;
    }
  }
  while (count > 0);
   44724:	e0bff617 	ldw	r2,-40(fp)
   44728:	00bfcf16 	blt	zero,r2,44668 <altera_avalon_jtag_uart_write+0x10c>
   4472c:	00000306 	br	4473c <altera_avalon_jtag_uart_write+0x1e0>
        break;
   44730:	0001883a 	nop
   44734:	00000106 	br	4473c <altera_avalon_jtag_uart_write+0x1e0>
         break;
   44738:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   4473c:	e0fff717 	ldw	r3,-36(fp)
   44740:	e0bffd17 	ldw	r2,-12(fp)
   44744:	18800426 	beq	r3,r2,44758 <altera_avalon_jtag_uart_write+0x1fc>
    return ptr - start;
   44748:	e0fff717 	ldw	r3,-36(fp)
   4474c:	e0bffd17 	ldw	r2,-12(fp)
   44750:	1885c83a 	sub	r2,r3,r2
   44754:	00000606 	br	44770 <altera_avalon_jtag_uart_write+0x214>
  else if (flags & O_NONBLOCK)
   44758:	e0bff517 	ldw	r2,-44(fp)
   4475c:	1090000c 	andi	r2,r2,16384
   44760:	10000226 	beq	r2,zero,4476c <altera_avalon_jtag_uart_write+0x210>
    return -EWOULDBLOCK;
   44764:	00bffd44 	movi	r2,-11
   44768:	00000106 	br	44770 <altera_avalon_jtag_uart_write+0x214>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   4476c:	00bffec4 	movi	r2,-5
}
   44770:	e037883a 	mov	sp,fp
   44774:	dfc00117 	ldw	ra,4(sp)
   44778:	df000017 	ldw	fp,0(sp)
   4477c:	dec00204 	addi	sp,sp,8
   44780:	f800283a 	ret

00044784 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   44784:	defffa04 	addi	sp,sp,-24
   44788:	dfc00515 	stw	ra,20(sp)
   4478c:	df000415 	stw	fp,16(sp)
   44790:	df000404 	addi	fp,sp,16
   44794:	e13ffc15 	stw	r4,-16(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   44798:	0007883a 	mov	r3,zero
   4479c:	e0bffc17 	ldw	r2,-16(fp)
   447a0:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   447a4:	e0bffc17 	ldw	r2,-16(fp)
   447a8:	10800104 	addi	r2,r2,4
   447ac:	10800037 	ldwio	r2,0(r2)
  NIOS2_READ_STATUS (context);
   447b0:	0005303a 	rdctl	r2,status
   447b4:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   447b8:	e0fffd17 	ldw	r3,-12(fp)
   447bc:	00bfff84 	movi	r2,-2
   447c0:	1884703a 	and	r2,r3,r2
   447c4:	1001703a 	wrctl	status,r2
  return context;
   447c8:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   447cc:	e0bfff15 	stw	r2,-4(fp)
  alt_tick ();
   447d0:	00452d40 	call	452d4 <alt_tick>
   447d4:	e0bfff17 	ldw	r2,-4(fp)
   447d8:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
   447dc:	e0bffe17 	ldw	r2,-8(fp)
   447e0:	1001703a 	wrctl	status,r2
}
   447e4:	0001883a 	nop
  alt_irq_enable_all(cpu_sr);
}
   447e8:	0001883a 	nop
   447ec:	e037883a 	mov	sp,fp
   447f0:	dfc00117 	ldw	ra,4(sp)
   447f4:	df000017 	ldw	fp,0(sp)
   447f8:	dec00204 	addi	sp,sp,8
   447fc:	f800283a 	ret

00044800 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   44800:	defff804 	addi	sp,sp,-32
   44804:	dfc00715 	stw	ra,28(sp)
   44808:	df000615 	stw	fp,24(sp)
   4480c:	df000604 	addi	fp,sp,24
   44810:	e13ffe15 	stw	r4,-8(fp)
   44814:	e17ffd15 	stw	r5,-12(fp)
   44818:	e1bffc15 	stw	r6,-16(fp)
   4481c:	e1fffb15 	stw	r7,-20(fp)
   44820:	e0bffb17 	ldw	r2,-20(fp)
   44824:	e0bfff15 	stw	r2,-4(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   44828:	d0a5f217 	ldw	r2,-26680(gp)
   4482c:	1000031e 	bne	r2,zero,4483c <alt_avalon_timer_sc_init+0x3c>
  {
    _alt_tick_rate = nticks;
   44830:	e0bfff17 	ldw	r2,-4(fp)
   44834:	d0a5f215 	stw	r2,-26680(gp)
    return 0;
   44838:	00000106 	br	44840 <alt_avalon_timer_sc_init+0x40>
  }
  else
  {
    return -1;
   4483c:	0001883a 	nop
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   44840:	e0bffe17 	ldw	r2,-8(fp)
   44844:	10800104 	addi	r2,r2,4
   44848:	00c001c4 	movi	r3,7
   4484c:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   44850:	d8000015 	stw	zero,0(sp)
   44854:	e1fffe17 	ldw	r7,-8(fp)
   44858:	01800134 	movhi	r6,4
   4485c:	3191e104 	addi	r6,r6,18308
   44860:	e17ffc17 	ldw	r5,-16(fp)
   44864:	e13ffd17 	ldw	r4,-12(fp)
   44868:	0044bd00 	call	44bd0 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   4486c:	0001883a 	nop
   44870:	e037883a 	mov	sp,fp
   44874:	dfc00117 	ldw	ra,4(sp)
   44878:	df000017 	ldw	fp,0(sp)
   4487c:	dec00204 	addi	sp,sp,8
   44880:	f800283a 	ret

00044884 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   44884:	defff404 	addi	sp,sp,-48
   44888:	df000b15 	stw	fp,44(sp)
   4488c:	df000b04 	addi	fp,sp,44
   44890:	e13ff815 	stw	r4,-32(fp)
   44894:	e17ff715 	stw	r5,-36(fp)
   44898:	e1bff615 	stw	r6,-40(fp)
   4489c:	e1fff515 	stw	r7,-44(fp)
  alt_irq_context irq_context;
  alt_u64 current_nticks = 0;
   448a0:	e03ffe15 	stw	zero,-8(fp)
   448a4:	e03fff15 	stw	zero,-4(fp)
  return _alt_tick_rate;
   448a8:	d0a5f217 	ldw	r2,-26680(gp)
  
  if (alt_ticks_per_second ())
   448ac:	10004826 	beq	r2,zero,449d0 <alt_alarm_start+0x14c>
  {
    if (alarm)
   448b0:	e0bff817 	ldw	r2,-32(fp)
   448b4:	10004426 	beq	r2,zero,449c8 <alt_alarm_start+0x144>
    {
      alarm->callback = callback;
   448b8:	e0bff817 	ldw	r2,-32(fp)
   448bc:	e0fff617 	ldw	r3,-40(fp)
   448c0:	10c00415 	stw	r3,16(r2)
      alarm->context  = context;
   448c4:	e0bff817 	ldw	r2,-32(fp)
   448c8:	e0fff517 	ldw	r3,-44(fp)
   448cc:	10c00515 	stw	r3,20(r2)
  NIOS2_READ_STATUS (context);
   448d0:	0005303a 	rdctl	r2,status
   448d4:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   448d8:	e0fff917 	ldw	r3,-28(fp)
   448dc:	00bfff84 	movi	r2,-2
   448e0:	1884703a 	and	r2,r3,r2
   448e4:	1001703a 	wrctl	status,r2
  return context;
   448e8:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   448ec:	e0bffd15 	stw	r2,-12(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u64 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   448f0:	d0a5f317 	ldw	r2,-26676(gp)
   448f4:	d0e5f417 	ldw	r3,-26672(gp)
      
      current_nticks = alt_nticks();
   448f8:	e0bffe15 	stw	r2,-8(fp)
   448fc:	e0ffff15 	stw	r3,-4(fp)
      
      alarm->time = (alt_u64)nticks + current_nticks + 1; 
   44900:	e0bff717 	ldw	r2,-36(fp)
   44904:	1011883a 	mov	r8,r2
   44908:	0013883a 	mov	r9,zero
   4490c:	e13ffe17 	ldw	r4,-8(fp)
   44910:	e17fff17 	ldw	r5,-4(fp)
   44914:	4105883a 	add	r2,r8,r4
   44918:	120d803a 	cmpltu	r6,r2,r8
   4491c:	4947883a 	add	r3,r9,r5
   44920:	30c9883a 	add	r4,r6,r3
   44924:	2007883a 	mov	r3,r4
   44928:	1009883a 	mov	r4,r2
   4492c:	180b883a 	mov	r5,r3
   44930:	01800044 	movi	r6,1
   44934:	000f883a 	mov	r7,zero
   44938:	2185883a 	add	r2,r4,r6
   4493c:	1111803a 	cmpltu	r8,r2,r4
   44940:	29c7883a 	add	r3,r5,r7
   44944:	40c9883a 	add	r4,r8,r3
   44948:	2007883a 	mov	r3,r4
   4494c:	1009883a 	mov	r4,r2
   44950:	180b883a 	mov	r5,r3
   44954:	e0bff817 	ldw	r2,-32(fp)
   44958:	11000215 	stw	r4,8(r2)
   4495c:	11400315 	stw	r5,12(r2)
          
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   44960:	e0bff817 	ldw	r2,-32(fp)
   44964:	d0e00b04 	addi	r3,gp,-32724
   44968:	e0fffb15 	stw	r3,-20(fp)
   4496c:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   44970:	e0bffa17 	ldw	r2,-24(fp)
   44974:	e0fffb17 	ldw	r3,-20(fp)
   44978:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   4497c:	e0bffb17 	ldw	r2,-20(fp)
   44980:	10c00017 	ldw	r3,0(r2)
   44984:	e0bffa17 	ldw	r2,-24(fp)
   44988:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   4498c:	e0bffb17 	ldw	r2,-20(fp)
   44990:	10800017 	ldw	r2,0(r2)
   44994:	e0fffa17 	ldw	r3,-24(fp)
   44998:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   4499c:	e0bffb17 	ldw	r2,-20(fp)
   449a0:	e0fffa17 	ldw	r3,-24(fp)
   449a4:	10c00015 	stw	r3,0(r2)
}
   449a8:	0001883a 	nop
   449ac:	e0bffd17 	ldw	r2,-12(fp)
   449b0:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   449b4:	e0bffc17 	ldw	r2,-16(fp)
   449b8:	1001703a 	wrctl	status,r2
}
   449bc:	0001883a 	nop
      alt_irq_enable_all (irq_context);

      return 0;
   449c0:	0005883a 	mov	r2,zero
   449c4:	00000306 	br	449d4 <alt_alarm_start+0x150>
    }
    else
    {
      return -EINVAL;
   449c8:	00bffa84 	movi	r2,-22
   449cc:	00000106 	br	449d4 <alt_alarm_start+0x150>
    }
  }
  else
  {
    return -ENOTSUP;
   449d0:	00bfde84 	movi	r2,-134
  }
}
   449d4:	e037883a 	mov	sp,fp
   449d8:	df000017 	ldw	fp,0(sp)
   449dc:	dec00104 	addi	sp,sp,4
   449e0:	f800283a 	ret

000449e4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   449e4:	deffff04 	addi	sp,sp,-4
   449e8:	df000015 	stw	fp,0(sp)
   449ec:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   449f0:	0001883a 	nop
   449f4:	e037883a 	mov	sp,fp
   449f8:	df000017 	ldw	fp,0(sp)
   449fc:	dec00104 	addi	sp,sp,4
   44a00:	f800283a 	ret

00044a04 <alt_get_errno>:
   44a04:	defffe04 	addi	sp,sp,-8
   44a08:	dfc00115 	stw	ra,4(sp)
   44a0c:	df000015 	stw	fp,0(sp)
   44a10:	d839883a 	mov	fp,sp
   44a14:	d0a00817 	ldw	r2,-32736(gp)
   44a18:	10000326 	beq	r2,zero,44a28 <alt_get_errno+0x24>
   44a1c:	d0a00817 	ldw	r2,-32736(gp)
   44a20:	103ee83a 	callr	r2
   44a24:	00000106 	br	44a2c <alt_get_errno+0x28>
   44a28:	d0a5e804 	addi	r2,gp,-26720
   44a2c:	e037883a 	mov	sp,fp
   44a30:	dfc00117 	ldw	ra,4(sp)
   44a34:	df000017 	ldw	fp,0(sp)
   44a38:	dec00204 	addi	sp,sp,8
   44a3c:	f800283a 	ret

00044a40 <alt_dev_llist_insert>:
{
   44a40:	defffa04 	addi	sp,sp,-24
   44a44:	dfc00515 	stw	ra,20(sp)
   44a48:	df000415 	stw	fp,16(sp)
   44a4c:	df000404 	addi	fp,sp,16
   44a50:	e13ffd15 	stw	r4,-12(fp)
   44a54:	e17ffc15 	stw	r5,-16(fp)
  if (!dev || !dev->name)
   44a58:	e0bffd17 	ldw	r2,-12(fp)
   44a5c:	10000326 	beq	r2,zero,44a6c <alt_dev_llist_insert+0x2c>
   44a60:	e0bffd17 	ldw	r2,-12(fp)
   44a64:	10800217 	ldw	r2,8(r2)
   44a68:	1000061e 	bne	r2,zero,44a84 <alt_dev_llist_insert+0x44>
    ALT_ERRNO = EINVAL;
   44a6c:	0044a040 	call	44a04 <alt_get_errno>
   44a70:	1007883a 	mov	r3,r2
   44a74:	00800584 	movi	r2,22
   44a78:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   44a7c:	00bffa84 	movi	r2,-22
   44a80:	00001406 	br	44ad4 <alt_dev_llist_insert+0x94>
  alt_llist_insert(list, &dev->llist);
   44a84:	e0bffd17 	ldw	r2,-12(fp)
   44a88:	e0fffc17 	ldw	r3,-16(fp)
   44a8c:	e0ffff15 	stw	r3,-4(fp)
   44a90:	e0bffe15 	stw	r2,-8(fp)
  entry->previous = list;
   44a94:	e0bffe17 	ldw	r2,-8(fp)
   44a98:	e0ffff17 	ldw	r3,-4(fp)
   44a9c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   44aa0:	e0bfff17 	ldw	r2,-4(fp)
   44aa4:	10c00017 	ldw	r3,0(r2)
   44aa8:	e0bffe17 	ldw	r2,-8(fp)
   44aac:	10c00015 	stw	r3,0(r2)
  list->next->previous = entry;
   44ab0:	e0bfff17 	ldw	r2,-4(fp)
   44ab4:	10800017 	ldw	r2,0(r2)
   44ab8:	e0fffe17 	ldw	r3,-8(fp)
   44abc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   44ac0:	e0bfff17 	ldw	r2,-4(fp)
   44ac4:	e0fffe17 	ldw	r3,-8(fp)
   44ac8:	10c00015 	stw	r3,0(r2)
}
   44acc:	0001883a 	nop
  return 0;  
   44ad0:	0005883a 	mov	r2,zero
}
   44ad4:	e037883a 	mov	sp,fp
   44ad8:	dfc00117 	ldw	ra,4(sp)
   44adc:	df000017 	ldw	fp,0(sp)
   44ae0:	dec00204 	addi	sp,sp,8
   44ae4:	f800283a 	ret

00044ae8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   44ae8:	defffd04 	addi	sp,sp,-12
   44aec:	dfc00215 	stw	ra,8(sp)
   44af0:	df000115 	stw	fp,4(sp)
   44af4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   44af8:	00800134 	movhi	r2,4
   44afc:	10960104 	addi	r2,r2,22532
   44b00:	e0bfff15 	stw	r2,-4(fp)
   44b04:	00000606 	br	44b20 <_do_ctors+0x38>
        (*ctor) (); 
   44b08:	e0bfff17 	ldw	r2,-4(fp)
   44b0c:	10800017 	ldw	r2,0(r2)
   44b10:	103ee83a 	callr	r2
  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   44b14:	e0bfff17 	ldw	r2,-4(fp)
   44b18:	10bfff04 	addi	r2,r2,-4
   44b1c:	e0bfff15 	stw	r2,-4(fp)
   44b20:	e0ffff17 	ldw	r3,-4(fp)
   44b24:	00800134 	movhi	r2,4
   44b28:	10960204 	addi	r2,r2,22536
   44b2c:	18bff62e 	bgeu	r3,r2,44b08 <_do_ctors+0x20>
}
   44b30:	0001883a 	nop
   44b34:	0001883a 	nop
   44b38:	e037883a 	mov	sp,fp
   44b3c:	dfc00117 	ldw	ra,4(sp)
   44b40:	df000017 	ldw	fp,0(sp)
   44b44:	dec00204 	addi	sp,sp,8
   44b48:	f800283a 	ret

00044b4c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   44b4c:	defffd04 	addi	sp,sp,-12
   44b50:	dfc00215 	stw	ra,8(sp)
   44b54:	df000115 	stw	fp,4(sp)
   44b58:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   44b5c:	00800134 	movhi	r2,4
   44b60:	10960104 	addi	r2,r2,22532
   44b64:	e0bfff15 	stw	r2,-4(fp)
   44b68:	00000606 	br	44b84 <_do_dtors+0x38>
        (*dtor) (); 
   44b6c:	e0bfff17 	ldw	r2,-4(fp)
   44b70:	10800017 	ldw	r2,0(r2)
   44b74:	103ee83a 	callr	r2
  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   44b78:	e0bfff17 	ldw	r2,-4(fp)
   44b7c:	10bfff04 	addi	r2,r2,-4
   44b80:	e0bfff15 	stw	r2,-4(fp)
   44b84:	e0ffff17 	ldw	r3,-4(fp)
   44b88:	00800134 	movhi	r2,4
   44b8c:	10960204 	addi	r2,r2,22536
   44b90:	18bff62e 	bgeu	r3,r2,44b6c <_do_dtors+0x20>
}
   44b94:	0001883a 	nop
   44b98:	0001883a 	nop
   44b9c:	e037883a 	mov	sp,fp
   44ba0:	dfc00117 	ldw	ra,4(sp)
   44ba4:	df000017 	ldw	fp,0(sp)
   44ba8:	dec00204 	addi	sp,sp,8
   44bac:	f800283a 	ret

00044bb0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   44bb0:	deffff04 	addi	sp,sp,-4
   44bb4:	df000015 	stw	fp,0(sp)
   44bb8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   44bbc:	0001883a 	nop
   44bc0:	e037883a 	mov	sp,fp
   44bc4:	df000017 	ldw	fp,0(sp)
   44bc8:	dec00104 	addi	sp,sp,4
   44bcc:	f800283a 	ret

00044bd0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   44bd0:	defff904 	addi	sp,sp,-28
   44bd4:	dfc00615 	stw	ra,24(sp)
   44bd8:	df000515 	stw	fp,20(sp)
   44bdc:	df000504 	addi	fp,sp,20
   44be0:	e13fff15 	stw	r4,-4(fp)
   44be4:	e17ffe15 	stw	r5,-8(fp)
   44be8:	e1bffd15 	stw	r6,-12(fp)
   44bec:	e1fffc15 	stw	r7,-16(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   44bf0:	e0800217 	ldw	r2,8(fp)
   44bf4:	d8800015 	stw	r2,0(sp)
   44bf8:	e1fffc17 	ldw	r7,-16(fp)
   44bfc:	e1bffd17 	ldw	r6,-12(fp)
   44c00:	e17ffe17 	ldw	r5,-8(fp)
   44c04:	e13fff17 	ldw	r4,-4(fp)
   44c08:	0044d800 	call	44d80 <alt_iic_isr_register>
}  
   44c0c:	e037883a 	mov	sp,fp
   44c10:	dfc00117 	ldw	ra,4(sp)
   44c14:	df000017 	ldw	fp,0(sp)
   44c18:	dec00204 	addi	sp,sp,8
   44c1c:	f800283a 	ret

00044c20 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   44c20:	defff904 	addi	sp,sp,-28
   44c24:	df000615 	stw	fp,24(sp)
   44c28:	df000604 	addi	fp,sp,24
   44c2c:	e13ffb15 	stw	r4,-20(fp)
   44c30:	e17ffa15 	stw	r5,-24(fp)
   44c34:	e0bffa17 	ldw	r2,-24(fp)
   44c38:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
   44c3c:	0005303a 	rdctl	r2,status
   44c40:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   44c44:	e0fffe17 	ldw	r3,-8(fp)
   44c48:	00bfff84 	movi	r2,-2
   44c4c:	1884703a 	and	r2,r3,r2
   44c50:	1001703a 	wrctl	status,r2
  return context;
   44c54:	e0bffe17 	ldw	r2,-8(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   44c58:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
   44c5c:	00c00044 	movi	r3,1
   44c60:	e0bfff17 	ldw	r2,-4(fp)
   44c64:	1884983a 	sll	r2,r3,r2
   44c68:	1007883a 	mov	r3,r2
   44c6c:	d0a5f117 	ldw	r2,-26684(gp)
   44c70:	1884b03a 	or	r2,r3,r2
   44c74:	d0a5f115 	stw	r2,-26684(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   44c78:	d0a5f117 	ldw	r2,-26684(gp)
   44c7c:	100170fa 	wrctl	ienable,r2
   44c80:	e0bffd17 	ldw	r2,-12(fp)
   44c84:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   44c88:	e0bffc17 	ldw	r2,-16(fp)
   44c8c:	1001703a 	wrctl	status,r2
}
   44c90:	0001883a 	nop

  alt_irq_enable_all(status);

  return 0;
   44c94:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   44c98:	e037883a 	mov	sp,fp
   44c9c:	df000017 	ldw	fp,0(sp)
   44ca0:	dec00104 	addi	sp,sp,4
   44ca4:	f800283a 	ret

00044ca8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   44ca8:	defff904 	addi	sp,sp,-28
   44cac:	df000615 	stw	fp,24(sp)
   44cb0:	df000604 	addi	fp,sp,24
   44cb4:	e13ffb15 	stw	r4,-20(fp)
   44cb8:	e17ffa15 	stw	r5,-24(fp)
   44cbc:	e0bffa17 	ldw	r2,-24(fp)
   44cc0:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
   44cc4:	0005303a 	rdctl	r2,status
   44cc8:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   44ccc:	e0fffe17 	ldw	r3,-8(fp)
   44cd0:	00bfff84 	movi	r2,-2
   44cd4:	1884703a 	and	r2,r3,r2
   44cd8:	1001703a 	wrctl	status,r2
  return context;
   44cdc:	e0bffe17 	ldw	r2,-8(fp)
  status = alt_irq_disable_all ();
   44ce0:	e0bffd15 	stw	r2,-12(fp)
  alt_irq_active &= ~(1 << id);
   44ce4:	00c00044 	movi	r3,1
   44ce8:	e0bfff17 	ldw	r2,-4(fp)
   44cec:	1884983a 	sll	r2,r3,r2
   44cf0:	0084303a 	nor	r2,zero,r2
   44cf4:	1007883a 	mov	r3,r2
   44cf8:	d0a5f117 	ldw	r2,-26684(gp)
   44cfc:	1884703a 	and	r2,r3,r2
   44d00:	d0a5f115 	stw	r2,-26684(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   44d04:	d0a5f117 	ldw	r2,-26684(gp)
   44d08:	100170fa 	wrctl	ienable,r2
   44d0c:	e0bffd17 	ldw	r2,-12(fp)
   44d10:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   44d14:	e0bffc17 	ldw	r2,-16(fp)
   44d18:	1001703a 	wrctl	status,r2
}
   44d1c:	0001883a 	nop
  return 0;
   44d20:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   44d24:	e037883a 	mov	sp,fp
   44d28:	df000017 	ldw	fp,0(sp)
   44d2c:	dec00104 	addi	sp,sp,4
   44d30:	f800283a 	ret

00044d34 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   44d34:	defffc04 	addi	sp,sp,-16
   44d38:	df000315 	stw	fp,12(sp)
   44d3c:	df000304 	addi	fp,sp,12
   44d40:	e13ffe15 	stw	r4,-8(fp)
   44d44:	e17ffd15 	stw	r5,-12(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   44d48:	000530fa 	rdctl	r2,ienable
   44d4c:	e0bfff15 	stw	r2,-4(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   44d50:	00c00044 	movi	r3,1
   44d54:	e0bffd17 	ldw	r2,-12(fp)
   44d58:	1884983a 	sll	r2,r3,r2
   44d5c:	1007883a 	mov	r3,r2
   44d60:	e0bfff17 	ldw	r2,-4(fp)
   44d64:	1884703a 	and	r2,r3,r2
   44d68:	1004c03a 	cmpne	r2,r2,zero
   44d6c:	10803fcc 	andi	r2,r2,255
}
   44d70:	e037883a 	mov	sp,fp
   44d74:	df000017 	ldw	fp,0(sp)
   44d78:	dec00104 	addi	sp,sp,4
   44d7c:	f800283a 	ret

00044d80 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   44d80:	defff504 	addi	sp,sp,-44
   44d84:	dfc00a15 	stw	ra,40(sp)
   44d88:	df000915 	stw	fp,36(sp)
   44d8c:	df000904 	addi	fp,sp,36
   44d90:	e13ffa15 	stw	r4,-24(fp)
   44d94:	e17ff915 	stw	r5,-28(fp)
   44d98:	e1bff815 	stw	r6,-32(fp)
   44d9c:	e1fff715 	stw	r7,-36(fp)
  int rc = -EINVAL;  
   44da0:	00bffa84 	movi	r2,-22
   44da4:	e0bfff15 	stw	r2,-4(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   44da8:	e0bff917 	ldw	r2,-28(fp)
   44dac:	e0bffe15 	stw	r2,-8(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   44db0:	e0bffe17 	ldw	r2,-8(fp)
   44db4:	10800808 	cmpgei	r2,r2,32
   44db8:	1000251e 	bne	r2,zero,44e50 <alt_iic_isr_register+0xd0>
  NIOS2_READ_STATUS (context);
   44dbc:	0005303a 	rdctl	r2,status
   44dc0:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   44dc4:	e0fffc17 	ldw	r3,-16(fp)
   44dc8:	00bfff84 	movi	r2,-2
   44dcc:	1884703a 	and	r2,r3,r2
   44dd0:	1001703a 	wrctl	status,r2
  return context;
   44dd4:	e0bffc17 	ldw	r2,-16(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   44dd8:	e0bffd15 	stw	r2,-12(fp)

    alt_irq[id].handler = isr;
   44ddc:	e0bffe17 	ldw	r2,-8(fp)
   44de0:	100890fa 	slli	r4,r2,3
   44de4:	e0fff817 	ldw	r3,-32(fp)
   44de8:	00800174 	movhi	r2,5
   44dec:	2085883a 	add	r2,r4,r2
   44df0:	10e23115 	stw	r3,-30524(r2)
    alt_irq[id].context = isr_context;
   44df4:	e0bffe17 	ldw	r2,-8(fp)
   44df8:	100890fa 	slli	r4,r2,3
   44dfc:	e0fff717 	ldw	r3,-36(fp)
   44e00:	00800174 	movhi	r2,5
   44e04:	2085883a 	add	r2,r4,r2
   44e08:	10e23215 	stw	r3,-30520(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   44e0c:	e0bff817 	ldw	r2,-32(fp)
   44e10:	10000526 	beq	r2,zero,44e28 <alt_iic_isr_register+0xa8>
   44e14:	e0bffe17 	ldw	r2,-8(fp)
   44e18:	100b883a 	mov	r5,r2
   44e1c:	e13ffa17 	ldw	r4,-24(fp)
   44e20:	0044c200 	call	44c20 <alt_ic_irq_enable>
   44e24:	00000406 	br	44e38 <alt_iic_isr_register+0xb8>
   44e28:	e0bffe17 	ldw	r2,-8(fp)
   44e2c:	100b883a 	mov	r5,r2
   44e30:	e13ffa17 	ldw	r4,-24(fp)
   44e34:	0044ca80 	call	44ca8 <alt_ic_irq_disable>
   44e38:	e0bfff15 	stw	r2,-4(fp)
   44e3c:	e0bffd17 	ldw	r2,-12(fp)
   44e40:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
   44e44:	e0bffb17 	ldw	r2,-20(fp)
   44e48:	1001703a 	wrctl	status,r2
}
   44e4c:	0001883a 	nop

    alt_irq_enable_all(status);
  }

  return rc; 
   44e50:	e0bfff17 	ldw	r2,-4(fp)
}
   44e54:	e037883a 	mov	sp,fp
   44e58:	dfc00117 	ldw	ra,4(sp)
   44e5c:	df000017 	ldw	fp,0(sp)
   44e60:	dec00204 	addi	sp,sp,8
   44e64:	f800283a 	ret

00044e68 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   44e68:	defff904 	addi	sp,sp,-28
   44e6c:	dfc00615 	stw	ra,24(sp)
   44e70:	df000515 	stw	fp,20(sp)
   44e74:	df000504 	addi	fp,sp,20
   44e78:	e13ffe15 	stw	r4,-8(fp)
   44e7c:	e17ffd15 	stw	r5,-12(fp)
   44e80:	e1bffc15 	stw	r6,-16(fp)
   44e84:	e1fffb15 	stw	r7,-20(fp)
  int old;

  old = open (name, flags, mode);
   44e88:	e1bffb17 	ldw	r6,-20(fp)
   44e8c:	e17ffc17 	ldw	r5,-16(fp)
   44e90:	e13ffd17 	ldw	r4,-12(fp)
   44e94:	00450d00 	call	450d0 <open>
   44e98:	e0bfff15 	stw	r2,-4(fp)

  if (old >= 0)
   44e9c:	e0bfff17 	ldw	r2,-4(fp)
   44ea0:	10002016 	blt	r2,zero,44f24 <alt_open_fd+0xbc>
  {
    fd->dev      = alt_fd_list[old].dev;
   44ea4:	e0ffff17 	ldw	r3,-4(fp)
   44ea8:	1805883a 	mov	r2,r3
   44eac:	1085883a 	add	r2,r2,r2
   44eb0:	10c5883a 	add	r2,r2,r3
   44eb4:	100490ba 	slli	r2,r2,2
   44eb8:	00c00134 	movhi	r3,4
   44ebc:	10c7883a 	add	r3,r2,r3
   44ec0:	18d76b17 	ldw	r3,23980(r3)
   44ec4:	e0bffe17 	ldw	r2,-8(fp)
   44ec8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   44ecc:	e0ffff17 	ldw	r3,-4(fp)
   44ed0:	1805883a 	mov	r2,r3
   44ed4:	1085883a 	add	r2,r2,r2
   44ed8:	10c5883a 	add	r2,r2,r3
   44edc:	100490ba 	slli	r2,r2,2
   44ee0:	00c00134 	movhi	r3,4
   44ee4:	10c7883a 	add	r3,r2,r3
   44ee8:	18d76c17 	ldw	r3,23984(r3)
   44eec:	e0bffe17 	ldw	r2,-8(fp)
   44ef0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   44ef4:	e0ffff17 	ldw	r3,-4(fp)
   44ef8:	1805883a 	mov	r2,r3
   44efc:	1085883a 	add	r2,r2,r2
   44f00:	10c5883a 	add	r2,r2,r3
   44f04:	100490ba 	slli	r2,r2,2
   44f08:	00c00134 	movhi	r3,4
   44f0c:	10c7883a 	add	r3,r2,r3
   44f10:	18d76d17 	ldw	r3,23988(r3)
   44f14:	e0bffe17 	ldw	r2,-8(fp)
   44f18:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   44f1c:	e13fff17 	ldw	r4,-4(fp)
   44f20:	00439c40 	call	439c4 <alt_release_fd>
  }
} 
   44f24:	0001883a 	nop
   44f28:	e037883a 	mov	sp,fp
   44f2c:	dfc00117 	ldw	ra,4(sp)
   44f30:	df000017 	ldw	fp,0(sp)
   44f34:	dec00204 	addi	sp,sp,8
   44f38:	f800283a 	ret

00044f3c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   44f3c:	defffb04 	addi	sp,sp,-20
   44f40:	dfc00415 	stw	ra,16(sp)
   44f44:	df000315 	stw	fp,12(sp)
   44f48:	df000304 	addi	fp,sp,12
   44f4c:	e13fff15 	stw	r4,-4(fp)
   44f50:	e17ffe15 	stw	r5,-8(fp)
   44f54:	e1bffd15 	stw	r6,-12(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   44f58:	01c07fc4 	movi	r7,511
   44f5c:	01800044 	movi	r6,1
   44f60:	e17fff17 	ldw	r5,-4(fp)
   44f64:	01000134 	movhi	r4,4
   44f68:	21176e04 	addi	r4,r4,23992
   44f6c:	0044e680 	call	44e68 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   44f70:	01c07fc4 	movi	r7,511
   44f74:	000d883a 	mov	r6,zero
   44f78:	e17ffe17 	ldw	r5,-8(fp)
   44f7c:	01000134 	movhi	r4,4
   44f80:	21176b04 	addi	r4,r4,23980
   44f84:	0044e680 	call	44e68 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   44f88:	01c07fc4 	movi	r7,511
   44f8c:	01800044 	movi	r6,1
   44f90:	e17ffd17 	ldw	r5,-12(fp)
   44f94:	01000134 	movhi	r4,4
   44f98:	21177104 	addi	r4,r4,24004
   44f9c:	0044e680 	call	44e68 <alt_open_fd>
}  
   44fa0:	0001883a 	nop
   44fa4:	e037883a 	mov	sp,fp
   44fa8:	dfc00117 	ldw	ra,4(sp)
   44fac:	df000017 	ldw	fp,0(sp)
   44fb0:	dec00204 	addi	sp,sp,8
   44fb4:	f800283a 	ret

00044fb8 <alt_get_errno>:
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   44fb8:	defffe04 	addi	sp,sp,-8
   44fbc:	dfc00115 	stw	ra,4(sp)
   44fc0:	df000015 	stw	fp,0(sp)
   44fc4:	d839883a 	mov	fp,sp
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   44fc8:	d0a00817 	ldw	r2,-32736(gp)
   44fcc:	10000326 	beq	r2,zero,44fdc <alt_get_errno+0x24>
   44fd0:	d0a00817 	ldw	r2,-32736(gp)
   44fd4:	103ee83a 	callr	r2
   44fd8:	00000106 	br	44fe0 <alt_get_errno+0x28>
   44fdc:	d0a5e804 	addi	r2,gp,-26720
        (&alt_fd_list[i] != fd))
   44fe0:	e037883a 	mov	sp,fp
   44fe4:	dfc00117 	ldw	ra,4(sp)
   44fe8:	df000017 	ldw	fp,0(sp)
   44fec:	dec00204 	addi	sp,sp,8
   44ff0:	f800283a 	ret

00044ff4 <alt_file_locked>:
{
   44ff4:	defffd04 	addi	sp,sp,-12
   44ff8:	df000215 	stw	fp,8(sp)
   44ffc:	df000204 	addi	fp,sp,8
   45000:	e13ffe15 	stw	r4,-8(fp)
  fd->fd_flags |= ALT_FD_DEV;
   45004:	e0bffe17 	ldw	r2,-8(fp)
   45008:	10800217 	ldw	r2,8(r2)
   4500c:	10d00034 	orhi	r3,r2,16384
   45010:	e0bffe17 	ldw	r2,-8(fp)
   45014:	10c00215 	stw	r3,8(r2)
  for (i = 0; i <= alt_max_fd; i++)
   45018:	e03fff15 	stw	zero,-4(fp)
   4501c:	00002306 	br	450ac <alt_file_locked+0xb8>
    if ((alt_fd_list[i].dev == fd->dev) &&
   45020:	e0ffff17 	ldw	r3,-4(fp)
   45024:	1805883a 	mov	r2,r3
   45028:	1085883a 	add	r2,r2,r2
   4502c:	10c5883a 	add	r2,r2,r3
   45030:	100490ba 	slli	r2,r2,2
   45034:	00c00134 	movhi	r3,4
   45038:	10c7883a 	add	r3,r2,r3
   4503c:	18d76b17 	ldw	r3,23980(r3)
   45040:	e0bffe17 	ldw	r2,-8(fp)
   45044:	10800017 	ldw	r2,0(r2)
   45048:	1880151e 	bne	r3,r2,450a0 <alt_file_locked+0xac>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   4504c:	e0ffff17 	ldw	r3,-4(fp)
   45050:	1805883a 	mov	r2,r3
   45054:	1085883a 	add	r2,r2,r2
   45058:	10c5883a 	add	r2,r2,r3
   4505c:	100490ba 	slli	r2,r2,2
   45060:	00c00134 	movhi	r3,4
   45064:	10c7883a 	add	r3,r2,r3
   45068:	18976d17 	ldw	r2,23988(r3)
    if ((alt_fd_list[i].dev == fd->dev) &&
   4506c:	10000c0e 	bge	r2,zero,450a0 <alt_file_locked+0xac>
        (&alt_fd_list[i] != fd))
   45070:	e0ffff17 	ldw	r3,-4(fp)
   45074:	1805883a 	mov	r2,r3
   45078:	1085883a 	add	r2,r2,r2
   4507c:	10c5883a 	add	r2,r2,r3
   45080:	100490ba 	slli	r2,r2,2
   45084:	00c00134 	movhi	r3,4
   45088:	18d76b04 	addi	r3,r3,23980
   4508c:	10c5883a 	add	r2,r2,r3
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   45090:	e0fffe17 	ldw	r3,-8(fp)
   45094:	18800226 	beq	r3,r2,450a0 <alt_file_locked+0xac>
    {
      return -EACCES;
   45098:	00bffcc4 	movi	r2,-13
   4509c:	00000806 	br	450c0 <alt_file_locked+0xcc>
  for (i = 0; i <= alt_max_fd; i++)
   450a0:	e0bfff17 	ldw	r2,-4(fp)
   450a4:	10800044 	addi	r2,r2,1
   450a8:	e0bfff15 	stw	r2,-4(fp)
   450ac:	d0a00717 	ldw	r2,-32740(gp)
   450b0:	1007883a 	mov	r3,r2
   450b4:	e0bfff17 	ldw	r2,-4(fp)
   450b8:	18bfd92e 	bgeu	r3,r2,45020 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   450bc:	0005883a 	mov	r2,zero
}
   450c0:	e037883a 	mov	sp,fp
   450c4:	df000017 	ldw	fp,0(sp)
   450c8:	dec00104 	addi	sp,sp,4
   450cc:	f800283a 	ret

000450d0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   450d0:	defff604 	addi	sp,sp,-40
   450d4:	dfc00915 	stw	ra,36(sp)
   450d8:	df000815 	stw	fp,32(sp)
   450dc:	df000804 	addi	fp,sp,32
   450e0:	e13ffa15 	stw	r4,-24(fp)
   450e4:	e17ff915 	stw	r5,-28(fp)
   450e8:	e1bff815 	stw	r6,-32(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   450ec:	00bfffc4 	movi	r2,-1
   450f0:	e0bffe15 	stw	r2,-8(fp)
  int status = -ENODEV;
   450f4:	00bffb44 	movi	r2,-19
   450f8:	e0bffd15 	stw	r2,-12(fp)
  int isafs = 0;
   450fc:	e03ffc15 	stw	zero,-16(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   45100:	d1600504 	addi	r5,gp,-32748
   45104:	e13ffa17 	ldw	r4,-24(fp)
   45108:	00454240 	call	45424 <alt_find_dev>
   4510c:	e0bfff15 	stw	r2,-4(fp)
   45110:	e0bfff17 	ldw	r2,-4(fp)
   45114:	1000051e 	bne	r2,zero,4512c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   45118:	e13ffa17 	ldw	r4,-24(fp)
   4511c:	00454b40 	call	454b4 <alt_find_file>
   45120:	e0bfff15 	stw	r2,-4(fp)
    isafs = 1;
   45124:	00800044 	movi	r2,1
   45128:	e0bffc15 	stw	r2,-16(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   4512c:	e0bfff17 	ldw	r2,-4(fp)
   45130:	10002c26 	beq	r2,zero,451e4 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
   45134:	e13fff17 	ldw	r4,-4(fp)
   45138:	00455bc0 	call	455bc <alt_get_fd>
   4513c:	e0bffe15 	stw	r2,-8(fp)
   45140:	e0bffe17 	ldw	r2,-8(fp)
   45144:	1000030e 	bge	r2,zero,45154 <open+0x84>
    {
      status = index;
   45148:	e0bffe17 	ldw	r2,-8(fp)
   4514c:	e0bffd15 	stw	r2,-12(fp)
   45150:	00002606 	br	451ec <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
   45154:	e0fffe17 	ldw	r3,-8(fp)
   45158:	1805883a 	mov	r2,r3
   4515c:	1085883a 	add	r2,r2,r2
   45160:	10c5883a 	add	r2,r2,r3
   45164:	100490ba 	slli	r2,r2,2
   45168:	00c00134 	movhi	r3,4
   4516c:	18d76b04 	addi	r3,r3,23980
   45170:	10c5883a 	add	r2,r2,r3
   45174:	e0bffb15 	stw	r2,-20(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   45178:	e0fff917 	ldw	r3,-28(fp)
   4517c:	00900034 	movhi	r2,16384
   45180:	10bfffc4 	addi	r2,r2,-1
   45184:	1886703a 	and	r3,r3,r2
   45188:	e0bffb17 	ldw	r2,-20(fp)
   4518c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   45190:	e0bffc17 	ldw	r2,-16(fp)
   45194:	1000051e 	bne	r2,zero,451ac <open+0xdc>
   45198:	e13ffb17 	ldw	r4,-20(fp)
   4519c:	0044ff40 	call	44ff4 <alt_file_locked>
   451a0:	e0bffd15 	stw	r2,-12(fp)
   451a4:	e0bffd17 	ldw	r2,-12(fp)
   451a8:	10001016 	blt	r2,zero,451ec <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   451ac:	e0bfff17 	ldw	r2,-4(fp)
   451b0:	10800317 	ldw	r2,12(r2)
   451b4:	10000826 	beq	r2,zero,451d8 <open+0x108>
   451b8:	e0bfff17 	ldw	r2,-4(fp)
   451bc:	10800317 	ldw	r2,12(r2)
   451c0:	e1fff817 	ldw	r7,-32(fp)
   451c4:	e1bff917 	ldw	r6,-28(fp)
   451c8:	e17ffa17 	ldw	r5,-24(fp)
   451cc:	e13ffb17 	ldw	r4,-20(fp)
   451d0:	103ee83a 	callr	r2
   451d4:	00000106 	br	451dc <open+0x10c>
   451d8:	0005883a 	mov	r2,zero
   451dc:	e0bffd15 	stw	r2,-12(fp)
   451e0:	00000206 	br	451ec <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   451e4:	00bffb44 	movi	r2,-19
   451e8:	e0bffd15 	stw	r2,-12(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   451ec:	e0bffd17 	ldw	r2,-12(fp)
   451f0:	1000090e 	bge	r2,zero,45218 <open+0x148>
  {
    alt_release_fd (index);  
   451f4:	e13ffe17 	ldw	r4,-8(fp)
   451f8:	00439c40 	call	439c4 <alt_release_fd>
    ALT_ERRNO = -status;
   451fc:	0044fb80 	call	44fb8 <alt_get_errno>
   45200:	1007883a 	mov	r3,r2
   45204:	e0bffd17 	ldw	r2,-12(fp)
   45208:	0085c83a 	sub	r2,zero,r2
   4520c:	18800015 	stw	r2,0(r3)
    return -1;
   45210:	00bfffc4 	movi	r2,-1
   45214:	00000106 	br	4521c <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
   45218:	e0bffe17 	ldw	r2,-8(fp)
}
   4521c:	e037883a 	mov	sp,fp
   45220:	dfc00117 	ldw	ra,4(sp)
   45224:	df000017 	ldw	fp,0(sp)
   45228:	dec00204 	addi	sp,sp,8
   4522c:	f800283a 	ret

00045230 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   45230:	defffa04 	addi	sp,sp,-24
   45234:	df000515 	stw	fp,20(sp)
   45238:	df000504 	addi	fp,sp,20
   4523c:	e13ffb15 	stw	r4,-20(fp)
  NIOS2_READ_STATUS (context);
   45240:	0005303a 	rdctl	r2,status
   45244:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   45248:	e0fffc17 	ldw	r3,-16(fp)
   4524c:	00bfff84 	movi	r2,-2
   45250:	1884703a 	and	r2,r3,r2
   45254:	1001703a 	wrctl	status,r2
  return context;
   45258:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   4525c:	e0bfff15 	stw	r2,-4(fp)
  alt_llist_remove (&alarm->llist);
   45260:	e0bffb17 	ldw	r2,-20(fp)
   45264:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   45268:	e0bffd17 	ldw	r2,-12(fp)
   4526c:	10800017 	ldw	r2,0(r2)
   45270:	e0fffd17 	ldw	r3,-12(fp)
   45274:	18c00117 	ldw	r3,4(r3)
   45278:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   4527c:	e0bffd17 	ldw	r2,-12(fp)
   45280:	10800117 	ldw	r2,4(r2)
   45284:	e0fffd17 	ldw	r3,-12(fp)
   45288:	18c00017 	ldw	r3,0(r3)
   4528c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   45290:	e0bffd17 	ldw	r2,-12(fp)
   45294:	e0fffd17 	ldw	r3,-12(fp)
   45298:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   4529c:	e0bffd17 	ldw	r2,-12(fp)
   452a0:	e0fffd17 	ldw	r3,-12(fp)
   452a4:	10c00015 	stw	r3,0(r2)
} 
   452a8:	0001883a 	nop
   452ac:	e0bfff17 	ldw	r2,-4(fp)
   452b0:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
   452b4:	e0bffe17 	ldw	r2,-8(fp)
   452b8:	1001703a 	wrctl	status,r2
}
   452bc:	0001883a 	nop
  alt_irq_enable_all (irq_context);
}
   452c0:	0001883a 	nop
   452c4:	e037883a 	mov	sp,fp
   452c8:	df000017 	ldw	fp,0(sp)
   452cc:	dec00104 	addi	sp,sp,4
   452d0:	f800283a 	ret

000452d4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   452d4:	defff904 	addi	sp,sp,-28
   452d8:	dfc00615 	stw	ra,24(sp)
   452dc:	df000515 	stw	fp,20(sp)
   452e0:	dc400415 	stw	r17,16(sp)
   452e4:	dc000315 	stw	r16,12(sp)
   452e8:	df000504 	addi	fp,sp,20
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   452ec:	d0a00b17 	ldw	r2,-32724(gp)
   452f0:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   452f4:	d125f317 	ldw	r4,-26676(gp)
   452f8:	d165f417 	ldw	r5,-26672(gp)
   452fc:	01800044 	movi	r6,1
   45300:	000f883a 	mov	r7,zero
   45304:	2185883a 	add	r2,r4,r6
   45308:	1111803a 	cmpltu	r8,r2,r4
   4530c:	29c7883a 	add	r3,r5,r7
   45310:	40c9883a 	add	r4,r8,r3
   45314:	2007883a 	mov	r3,r4
   45318:	1009883a 	mov	r4,r2
   4531c:	180b883a 	mov	r5,r3
   45320:	d125f315 	stw	r4,-26676(gp)
   45324:	d165f415 	stw	r5,-26672(gp)
 
  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   45328:	00002906 	br	453d0 <alt_tick+0xfc>
  {
    next = (alt_alarm*) alarm->llist.next;
   4532c:	e0bffd17 	ldw	r2,-12(fp)
   45330:	10800017 	ldw	r2,0(r2)
   45334:	e0bffc15 	stw	r2,-16(fp)
    
    /* if the alarm period has expired, make the callback */    
    if (alarm->time <= _alt_nticks)
   45338:	e13ffd17 	ldw	r4,-12(fp)
   4533c:	20800217 	ldw	r2,8(r4)
   45340:	20c00317 	ldw	r3,12(r4)
   45344:	d125f317 	ldw	r4,-26676(gp)
   45348:	d165f417 	ldw	r5,-26672(gp)
   4534c:	28c01e36 	bltu	r5,r3,453c8 <alt_tick+0xf4>
   45350:	1940011e 	bne	r3,r5,45358 <alt_tick+0x84>
   45354:	20801c36 	bltu	r4,r2,453c8 <alt_tick+0xf4>
    {
      next_callback = alarm->callback (alarm->context);
   45358:	e0bffd17 	ldw	r2,-12(fp)
   4535c:	10800417 	ldw	r2,16(r2)
   45360:	e0fffd17 	ldw	r3,-12(fp)
   45364:	18c00517 	ldw	r3,20(r3)
   45368:	1809883a 	mov	r4,r3
   4536c:	103ee83a 	callr	r2
   45370:	e0bffb15 	stw	r2,-20(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   45374:	e0bffb17 	ldw	r2,-20(fp)
   45378:	1000031e 	bne	r2,zero,45388 <alt_tick+0xb4>
      {
        alt_alarm_stop (alarm);
   4537c:	e13ffd17 	ldw	r4,-12(fp)
   45380:	00452300 	call	45230 <alt_alarm_stop>
   45384:	00001006 	br	453c8 <alt_tick+0xf4>
      }
      else
      {
        alarm->time += next_callback;
   45388:	e0bffd17 	ldw	r2,-12(fp)
   4538c:	11000217 	ldw	r4,8(r2)
   45390:	11400317 	ldw	r5,12(r2)
   45394:	e0bffb17 	ldw	r2,-20(fp)
   45398:	1021883a 	mov	r16,r2
   4539c:	0023883a 	mov	r17,zero
   453a0:	2405883a 	add	r2,r4,r16
   453a4:	110d803a 	cmpltu	r6,r2,r4
   453a8:	2c47883a 	add	r3,r5,r17
   453ac:	30c9883a 	add	r4,r6,r3
   453b0:	2007883a 	mov	r3,r4
   453b4:	1009883a 	mov	r4,r2
   453b8:	180b883a 	mov	r5,r3
   453bc:	e0bffd17 	ldw	r2,-12(fp)
   453c0:	11000215 	stw	r4,8(r2)
   453c4:	11400315 	stw	r5,12(r2)
      }
    }
    alarm = next;
   453c8:	e0bffc17 	ldw	r2,-16(fp)
   453cc:	e0bffd15 	stw	r2,-12(fp)
  while (alarm != (alt_alarm*) &alt_alarm_list)
   453d0:	e0fffd17 	ldw	r3,-12(fp)
   453d4:	d0a00b04 	addi	r2,gp,-32724
   453d8:	18bfd41e 	bne	r3,r2,4532c <alt_tick+0x58>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   453dc:	0001883a 	nop
}
   453e0:	0001883a 	nop
   453e4:	e6fffe04 	addi	sp,fp,-8
   453e8:	dfc00317 	ldw	ra,12(sp)
   453ec:	df000217 	ldw	fp,8(sp)
   453f0:	dc400117 	ldw	r17,4(sp)
   453f4:	dc000017 	ldw	r16,0(sp)
   453f8:	dec00404 	addi	sp,sp,16
   453fc:	f800283a 	ret

00045400 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   45400:	deffff04 	addi	sp,sp,-4
   45404:	df000015 	stw	fp,0(sp)
   45408:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   4540c:	000170fa 	wrctl	ienable,zero
}
   45410:	0001883a 	nop
   45414:	e037883a 	mov	sp,fp
   45418:	df000017 	ldw	fp,0(sp)
   4541c:	dec00104 	addi	sp,sp,4
   45420:	f800283a 	ret

00045424 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   45424:	defffa04 	addi	sp,sp,-24
   45428:	dfc00515 	stw	ra,20(sp)
   4542c:	df000415 	stw	fp,16(sp)
   45430:	df000404 	addi	fp,sp,16
   45434:	e13ffd15 	stw	r4,-12(fp)
   45438:	e17ffc15 	stw	r5,-16(fp)
  alt_dev* next = (alt_dev*) llist->next;
   4543c:	e0bffc17 	ldw	r2,-16(fp)
   45440:	10800017 	ldw	r2,0(r2)
   45444:	e0bfff15 	stw	r2,-4(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   45448:	e13ffd17 	ldw	r4,-12(fp)
   4544c:	00403740 	call	40374 <strlen>
   45450:	10800044 	addi	r2,r2,1
   45454:	e0bffe15 	stw	r2,-8(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   45458:	00000d06 	br	45490 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   4545c:	e0bfff17 	ldw	r2,-4(fp)
   45460:	10800217 	ldw	r2,8(r2)
   45464:	e0fffe17 	ldw	r3,-8(fp)
   45468:	180d883a 	mov	r6,r3
   4546c:	e17ffd17 	ldw	r5,-12(fp)
   45470:	1009883a 	mov	r4,r2
   45474:	00456fc0 	call	456fc <memcmp>
   45478:	1000021e 	bne	r2,zero,45484 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   4547c:	e0bfff17 	ldw	r2,-4(fp)
   45480:	00000706 	br	454a0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   45484:	e0bfff17 	ldw	r2,-4(fp)
   45488:	10800017 	ldw	r2,0(r2)
   4548c:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) llist)
   45490:	e0ffff17 	ldw	r3,-4(fp)
   45494:	e0bffc17 	ldw	r2,-16(fp)
   45498:	18bff01e 	bne	r3,r2,4545c <alt_find_dev+0x38>
  }
  
  /* No match found */
  
  return NULL;
   4549c:	0005883a 	mov	r2,zero
}
   454a0:	e037883a 	mov	sp,fp
   454a4:	dfc00117 	ldw	ra,4(sp)
   454a8:	df000017 	ldw	fp,0(sp)
   454ac:	dec00204 	addi	sp,sp,8
   454b0:	f800283a 	ret

000454b4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   454b4:	defffb04 	addi	sp,sp,-20
   454b8:	dfc00415 	stw	ra,16(sp)
   454bc:	df000315 	stw	fp,12(sp)
   454c0:	df000304 	addi	fp,sp,12
   454c4:	e13ffd15 	stw	r4,-12(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   454c8:	d0a00317 	ldw	r2,-32756(gp)
   454cc:	e0bfff15 	stw	r2,-4(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   454d0:	00003106 	br	45598 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   454d4:	e0bfff17 	ldw	r2,-4(fp)
   454d8:	10800217 	ldw	r2,8(r2)
   454dc:	1009883a 	mov	r4,r2
   454e0:	00403740 	call	40374 <strlen>
   454e4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   454e8:	e0bfff17 	ldw	r2,-4(fp)
   454ec:	10c00217 	ldw	r3,8(r2)
   454f0:	e0bffe17 	ldw	r2,-8(fp)
   454f4:	10bfffc4 	addi	r2,r2,-1
   454f8:	1885883a 	add	r2,r3,r2
   454fc:	10800003 	ldbu	r2,0(r2)
   45500:	10803fcc 	andi	r2,r2,255
   45504:	1080201c 	xori	r2,r2,128
   45508:	10bfe004 	addi	r2,r2,-128
   4550c:	10800bd8 	cmpnei	r2,r2,47
   45510:	1000031e 	bne	r2,zero,45520 <alt_find_file+0x6c>
    {
      len -= 1;
   45514:	e0bffe17 	ldw	r2,-8(fp)
   45518:	10bfffc4 	addi	r2,r2,-1
   4551c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   45520:	e0bffe17 	ldw	r2,-8(fp)
   45524:	e0fffd17 	ldw	r3,-12(fp)
   45528:	1885883a 	add	r2,r3,r2
   4552c:	10800003 	ldbu	r2,0(r2)
   45530:	10803fcc 	andi	r2,r2,255
   45534:	1080201c 	xori	r2,r2,128
   45538:	10bfe004 	addi	r2,r2,-128
   4553c:	10800be0 	cmpeqi	r2,r2,47
   45540:	1000081e 	bne	r2,zero,45564 <alt_find_file+0xb0>
   45544:	e0bffe17 	ldw	r2,-8(fp)
   45548:	e0fffd17 	ldw	r3,-12(fp)
   4554c:	1885883a 	add	r2,r3,r2
   45550:	10800003 	ldbu	r2,0(r2)
   45554:	10803fcc 	andi	r2,r2,255
   45558:	1080201c 	xori	r2,r2,128
   4555c:	10bfe004 	addi	r2,r2,-128
   45560:	10000a1e 	bne	r2,zero,4558c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   45564:	e0bfff17 	ldw	r2,-4(fp)
   45568:	10800217 	ldw	r2,8(r2)
   4556c:	e0fffe17 	ldw	r3,-8(fp)
   45570:	180d883a 	mov	r6,r3
   45574:	e17ffd17 	ldw	r5,-12(fp)
   45578:	1009883a 	mov	r4,r2
   4557c:	00456fc0 	call	456fc <memcmp>
    if (((name[len] == '/') || (name[len] == '\0')) && 
   45580:	1000021e 	bne	r2,zero,4558c <alt_find_file+0xd8>
    {
      /* match found */

      return next;
   45584:	e0bfff17 	ldw	r2,-4(fp)
   45588:	00000706 	br	455a8 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   4558c:	e0bfff17 	ldw	r2,-4(fp)
   45590:	10800017 	ldw	r2,0(r2)
   45594:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) &alt_fs_list)
   45598:	e0ffff17 	ldw	r3,-4(fp)
   4559c:	d0a00304 	addi	r2,gp,-32756
   455a0:	18bfcc1e 	bne	r3,r2,454d4 <alt_find_file+0x20>
  }
  
  /* No match found */
  
  return NULL;     
   455a4:	0005883a 	mov	r2,zero
}
   455a8:	e037883a 	mov	sp,fp
   455ac:	dfc00117 	ldw	ra,4(sp)
   455b0:	df000017 	ldw	fp,0(sp)
   455b4:	dec00204 	addi	sp,sp,8
   455b8:	f800283a 	ret

000455bc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   455bc:	defffc04 	addi	sp,sp,-16
   455c0:	df000315 	stw	fp,12(sp)
   455c4:	df000304 	addi	fp,sp,12
   455c8:	e13ffd15 	stw	r4,-12(fp)
  alt_32 i;
  int rc = -EMFILE;
   455cc:	00bffa04 	movi	r2,-24
   455d0:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   455d4:	e03fff15 	stw	zero,-4(fp)
   455d8:	00001d06 	br	45650 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
   455dc:	e0ffff17 	ldw	r3,-4(fp)
   455e0:	1805883a 	mov	r2,r3
   455e4:	1085883a 	add	r2,r2,r2
   455e8:	10c5883a 	add	r2,r2,r3
   455ec:	100490ba 	slli	r2,r2,2
   455f0:	00c00134 	movhi	r3,4
   455f4:	10c7883a 	add	r3,r2,r3
   455f8:	18976b17 	ldw	r2,23980(r3)
   455fc:	1000111e 	bne	r2,zero,45644 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
   45600:	e0ffff17 	ldw	r3,-4(fp)
   45604:	1805883a 	mov	r2,r3
   45608:	1085883a 	add	r2,r2,r2
   4560c:	10c5883a 	add	r2,r2,r3
   45610:	100490ba 	slli	r2,r2,2
   45614:	e13ffd17 	ldw	r4,-12(fp)
   45618:	00c00134 	movhi	r3,4
   4561c:	10c7883a 	add	r3,r2,r3
   45620:	19176b15 	stw	r4,23980(r3)
      if (i > alt_max_fd)
   45624:	d0e00717 	ldw	r3,-32740(gp)
   45628:	e0bfff17 	ldw	r2,-4(fp)
   4562c:	1880020e 	bge	r3,r2,45638 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
   45630:	e0bfff17 	ldw	r2,-4(fp)
   45634:	d0a00715 	stw	r2,-32740(gp)
      }
      rc = i;
   45638:	e0bfff17 	ldw	r2,-4(fp)
   4563c:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   45640:	00000706 	br	45660 <alt_get_fd+0xa4>
  for (i = 0; i < ALT_MAX_FD; i++)
   45644:	e0bfff17 	ldw	r2,-4(fp)
   45648:	10800044 	addi	r2,r2,1
   4564c:	e0bfff15 	stw	r2,-4(fp)
   45650:	e0bfff17 	ldw	r2,-4(fp)
   45654:	10800810 	cmplti	r2,r2,32
   45658:	103fe01e 	bne	r2,zero,455dc <alt_get_fd+0x20>
    }
  }

 alt_get_fd_exit:
   4565c:	0001883a 	nop
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   45660:	e0bffe17 	ldw	r2,-8(fp)
}
   45664:	e037883a 	mov	sp,fp
   45668:	df000017 	ldw	fp,0(sp)
   4566c:	dec00104 	addi	sp,sp,4
   45670:	f800283a 	ret

00045674 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   45674:	defffe04 	addi	sp,sp,-8
   45678:	df000115 	stw	fp,4(sp)
   4567c:	df000104 	addi	fp,sp,4
   45680:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   45684:	e0bfff17 	ldw	r2,-4(fp)
   45688:	10bffe84 	addi	r2,r2,-6
   4568c:	10c00428 	cmpgeui	r3,r2,16
   45690:	18c03fcc 	andi	r3,r3,255
   45694:	18000f1e 	bne	r3,zero,456d4 <alt_exception_cause_generated_bad_addr+0x60>
   45698:	00c00044 	movi	r3,1
   4569c:	1884983a 	sll	r2,r3,r2
   456a0:	10e2c8cc 	andi	r3,r2,35619
   456a4:	1806c03a 	cmpne	r3,r3,zero
   456a8:	18c03fcc 	andi	r3,r3,255
   456ac:	1800051e 	bne	r3,zero,456c4 <alt_exception_cause_generated_bad_addr+0x50>
   456b0:	1084100c 	andi	r2,r2,4160
   456b4:	1004c03a 	cmpne	r2,r2,zero
   456b8:	10803fcc 	andi	r2,r2,255
   456bc:	1000031e 	bne	r2,zero,456cc <alt_exception_cause_generated_bad_addr+0x58>
   456c0:	00000406 	br	456d4 <alt_exception_cause_generated_bad_addr+0x60>
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   456c4:	00800044 	movi	r2,1
   456c8:	00000306 	br	456d8 <alt_exception_cause_generated_bad_addr+0x64>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   456cc:	0005883a 	mov	r2,zero
   456d0:	00000106 	br	456d8 <alt_exception_cause_generated_bad_addr+0x64>

  default:
    return 0;
   456d4:	0005883a 	mov	r2,zero
  }
}
   456d8:	e037883a 	mov	sp,fp
   456dc:	df000017 	ldw	fp,0(sp)
   456e0:	dec00104 	addi	sp,sp,4
   456e4:	f800283a 	ret

000456e8 <atexit>:
   456e8:	200b883a 	mov	r5,r4
   456ec:	000f883a 	mov	r7,zero
   456f0:	000d883a 	mov	r6,zero
   456f4:	0009883a 	mov	r4,zero
   456f8:	00457741 	jmpi	45774 <__register_exitproc>

000456fc <memcmp>:
   456fc:	30800128 	cmpgeui	r2,r6,4
   45700:	10000d26 	beq	r2,zero,45738 <memcmp+0x3c>
   45704:	2144b03a 	or	r2,r4,r5
   45708:	108000cc 	andi	r2,r2,3
   4570c:	10000726 	beq	r2,zero,4572c <memcmp+0x30>
   45710:	30bfffc4 	addi	r2,r6,-1
   45714:	00000a06 	br	45740 <memcmp+0x44>
   45718:	31bfff04 	addi	r6,r6,-4
   4571c:	30800128 	cmpgeui	r2,r6,4
   45720:	21000104 	addi	r4,r4,4
   45724:	29400104 	addi	r5,r5,4
   45728:	10000326 	beq	r2,zero,45738 <memcmp+0x3c>
   4572c:	20c00017 	ldw	r3,0(r4)
   45730:	28800017 	ldw	r2,0(r5)
   45734:	18bff826 	beq	r3,r2,45718 <memcmp+0x1c>
   45738:	30bfffc4 	addi	r2,r6,-1
   4573c:	30000b26 	beq	r6,zero,4576c <memcmp+0x70>
   45740:	11800044 	addi	r6,r2,1
   45744:	218d883a 	add	r6,r4,r6
   45748:	00000106 	br	45750 <memcmp+0x54>
   4574c:	21800726 	beq	r4,r6,4576c <memcmp+0x70>
   45750:	20800003 	ldbu	r2,0(r4)
   45754:	28c00003 	ldbu	r3,0(r5)
   45758:	21000044 	addi	r4,r4,1
   4575c:	29400044 	addi	r5,r5,1
   45760:	10fffa26 	beq	r2,r3,4574c <memcmp+0x50>
   45764:	10c5c83a 	sub	r2,r2,r3
   45768:	f800283a 	ret
   4576c:	0005883a 	mov	r2,zero
   45770:	f800283a 	ret

00045774 <__register_exitproc>:
   45774:	00800174 	movhi	r2,5
   45778:	10a1d017 	ldw	r2,-30912(r2)
   4577c:	10001726 	beq	r2,zero,457dc <__register_exitproc+0x68>
   45780:	10c00117 	ldw	r3,4(r2)
   45784:	1a000808 	cmpgei	r8,r3,32
   45788:	40001d1e 	bne	r8,zero,45800 <__register_exitproc+0x8c>
   4578c:	20000b26 	beq	r4,zero,457bc <__register_exitproc+0x48>
   45790:	181090ba 	slli	r8,r3,2
   45794:	02400044 	movi	r9,1
   45798:	48d2983a 	sll	r9,r9,r3
   4579c:	1211883a 	add	r8,r2,r8
   457a0:	41802215 	stw	r6,136(r8)
   457a4:	11806217 	ldw	r6,392(r2)
   457a8:	21000098 	cmpnei	r4,r4,2
   457ac:	324cb03a 	or	r6,r6,r9
   457b0:	11806215 	stw	r6,392(r2)
   457b4:	41c04215 	stw	r7,264(r8)
   457b8:	20000d26 	beq	r4,zero,457f0 <__register_exitproc+0x7c>
   457bc:	19000084 	addi	r4,r3,2
   457c0:	200890ba 	slli	r4,r4,2
   457c4:	18c00044 	addi	r3,r3,1
   457c8:	10c00115 	stw	r3,4(r2)
   457cc:	1105883a 	add	r2,r2,r4
   457d0:	11400015 	stw	r5,0(r2)
   457d4:	0005883a 	mov	r2,zero
   457d8:	f800283a 	ret
   457dc:	00800174 	movhi	r2,5
   457e0:	10a27104 	addi	r2,r2,-30268
   457e4:	00c00174 	movhi	r3,5
   457e8:	18a1d015 	stw	r2,-30912(r3)
   457ec:	003fe406 	br	45780 <__register_exitproc+0xc>
   457f0:	11006317 	ldw	r4,396(r2)
   457f4:	2248b03a 	or	r4,r4,r9
   457f8:	11006315 	stw	r4,396(r2)
   457fc:	003fef06 	br	457bc <__register_exitproc+0x48>
   45800:	00bfffc4 	movi	r2,-1
   45804:	f800283a 	ret
